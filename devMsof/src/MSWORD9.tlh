// Created by Microsoft (R) C/C++ Compiler Version 12.00.8447.0 (9958c445).
//
// MSWORD9.tlh
//
// C++ source equivalent of Win32 type library C:\Program Files\Microsoft Office\Office\MSWORD9.OLB
// compiler-generated file created 07/30/07 at 13:08:08 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//  #import "C:\Program Files\Microsoft Office\Office\MSO9.DLL"
//  #import "C:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB"
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace Word {

//
// Forward references and typedefs
//

struct __declspec(uuid("00020970-0000-0000-c000-000000000046"))
/* dual interface */ _Application;
struct __declspec(uuid("000209b9-0000-0000-c000-000000000046"))
/* dual interface */ _Global;
struct __declspec(uuid("0002096f-0000-0000-c000-000000000046"))
/* dual interface */ FontNames;
struct __declspec(uuid("0002096e-0000-0000-c000-000000000046"))
/* dual interface */ Languages;
struct __declspec(uuid("0002096d-0000-0000-c000-000000000046"))
/* dual interface */ Language;
struct __declspec(uuid("0002096c-0000-0000-c000-000000000046"))
/* dual interface */ Documents;
struct __declspec(uuid("0002096b-0000-0000-c000-000000000046"))
/* dual interface */ _Document;
struct __declspec(uuid("0002096a-0000-0000-c000-000000000046"))
/* dual interface */ Template;
struct __declspec(uuid("000209a2-0000-0000-c000-000000000046"))
/* dual interface */ Templates;
struct __declspec(uuid("00020969-0000-0000-c000-000000000046"))
/* dual interface */ RoutingSlip;
struct __declspec(uuid("00020968-0000-0000-c000-000000000046"))
/* dual interface */ Bookmark;
struct __declspec(uuid("00020967-0000-0000-c000-000000000046"))
/* dual interface */ Bookmarks;
struct __declspec(uuid("00020966-0000-0000-c000-000000000046"))
/* dual interface */ Variable;
struct __declspec(uuid("00020965-0000-0000-c000-000000000046"))
/* dual interface */ Variables;
struct __declspec(uuid("00020964-0000-0000-c000-000000000046"))
/* dual interface */ RecentFile;
struct __declspec(uuid("00020963-0000-0000-c000-000000000046"))
/* dual interface */ RecentFiles;
struct __declspec(uuid("00020962-0000-0000-c000-000000000046"))
/* dual interface */ Window;
struct __declspec(uuid("00020961-0000-0000-c000-000000000046"))
/* dual interface */ Windows;
struct __declspec(uuid("00020960-0000-0000-c000-000000000046"))
/* dual interface */ Pane;
struct __declspec(uuid("0002095f-0000-0000-c000-000000000046"))
/* dual interface */ Panes;
struct __declspec(uuid("0002095e-0000-0000-c000-000000000046"))
/* dual interface */ Range;
struct __declspec(uuid("000209c0-0000-0000-c000-000000000046"))
/* dual interface */ ListFormat;
struct __declspec(uuid("000209b0-0000-0000-c000-000000000046"))
/* dual interface */ Find;
struct __declspec(uuid("000209b1-0000-0000-c000-000000000046"))
/* dual interface */ Replacement;
struct __declspec(uuid("0002095d-0000-0000-c000-000000000046"))
/* dual interface */ Characters;
struct __declspec(uuid("0002095c-0000-0000-c000-000000000046"))
/* dual interface */ Words;
struct __declspec(uuid("0002095b-0000-0000-c000-000000000046"))
/* dual interface */ Sentences;
struct __declspec(uuid("0002095a-0000-0000-c000-000000000046"))
/* dual interface */ Sections;
struct __declspec(uuid("00020959-0000-0000-c000-000000000046"))
/* dual interface */ Section;
struct __declspec(uuid("00020958-0000-0000-c000-000000000046"))
/* dual interface */ Paragraphs;
struct __declspec(uuid("00020957-0000-0000-c000-000000000046"))
/* dual interface */ Paragraph;
struct __declspec(uuid("00020956-0000-0000-c000-000000000046"))
/* dual interface */ DropCap;
struct __declspec(uuid("00020955-0000-0000-c000-000000000046"))
/* dual interface */ TabStops;
struct __declspec(uuid("00020954-0000-0000-c000-000000000046"))
/* dual interface */ TabStop;
struct __declspec(uuid("00020953-0000-0000-c000-000000000046"))
/* dual interface */ _ParagraphFormat;
struct __declspec(uuid("00020952-0000-0000-c000-000000000046"))
/* dual interface */ _Font;
struct __declspec(uuid("00020951-0000-0000-c000-000000000046"))
/* dual interface */ Table;
struct __declspec(uuid("00020950-0000-0000-c000-000000000046"))
/* dual interface */ Row;
struct __declspec(uuid("0002094f-0000-0000-c000-000000000046"))
/* dual interface */ Column;
struct __declspec(uuid("0002094e-0000-0000-c000-000000000046"))
/* dual interface */ Cell;
struct __declspec(uuid("0002094d-0000-0000-c000-000000000046"))
/* dual interface */ Tables;
struct __declspec(uuid("0002094c-0000-0000-c000-000000000046"))
/* dual interface */ Rows;
struct __declspec(uuid("0002094b-0000-0000-c000-000000000046"))
/* dual interface */ Columns;
struct __declspec(uuid("0002094a-0000-0000-c000-000000000046"))
/* dual interface */ Cells;
struct __declspec(uuid("00020949-0000-0000-c000-000000000046"))
/* dual interface */ AutoCorrect;
struct __declspec(uuid("00020948-0000-0000-c000-000000000046"))
/* dual interface */ AutoCorrectEntries;
struct __declspec(uuid("00020947-0000-0000-c000-000000000046"))
/* dual interface */ AutoCorrectEntry;
struct __declspec(uuid("00020946-0000-0000-c000-000000000046"))
/* dual interface */ FirstLetterExceptions;
struct __declspec(uuid("00020945-0000-0000-c000-000000000046"))
/* dual interface */ FirstLetterException;
struct __declspec(uuid("00020944-0000-0000-c000-000000000046"))
/* dual interface */ TwoInitialCapsExceptions;
struct __declspec(uuid("00020943-0000-0000-c000-000000000046"))
/* dual interface */ TwoInitialCapsException;
struct __declspec(uuid("00020942-0000-0000-c000-000000000046"))
/* dual interface */ Footnotes;
struct __declspec(uuid("00020941-0000-0000-c000-000000000046"))
/* dual interface */ Endnotes;
struct __declspec(uuid("00020940-0000-0000-c000-000000000046"))
/* dual interface */ Comments;
struct __declspec(uuid("0002093f-0000-0000-c000-000000000046"))
/* dual interface */ Footnote;
struct __declspec(uuid("0002093e-0000-0000-c000-000000000046"))
/* dual interface */ Endnote;
struct __declspec(uuid("0002093d-0000-0000-c000-000000000046"))
/* dual interface */ Comment;
struct __declspec(uuid("0002093c-0000-0000-c000-000000000046"))
/* dual interface */ Borders;
struct __declspec(uuid("0002093b-0000-0000-c000-000000000046"))
/* dual interface */ Border;
struct __declspec(uuid("0002093a-0000-0000-c000-000000000046"))
/* dual interface */ Shading;
struct __declspec(uuid("00020939-0000-0000-c000-000000000046"))
/* dual interface */ TextRetrievalMode;
struct __declspec(uuid("00020937-0000-0000-c000-000000000046"))
/* dual interface */ AutoTextEntries;
struct __declspec(uuid("00020936-0000-0000-c000-000000000046"))
/* dual interface */ AutoTextEntry;
struct __declspec(uuid("00020935-0000-0000-c000-000000000046"))
/* dual interface */ System;
struct __declspec(uuid("00020933-0000-0000-c000-000000000046"))
/* dual interface */ OLEFormat;
struct __declspec(uuid("00020931-0000-0000-c000-000000000046"))
/* dual interface */ LinkFormat;
struct __declspec(uuid("000209a4-0000-0000-c000-000000000046"))
/* dual interface */ _OLEControl;
struct __declspec(uuid("00020930-0000-0000-c000-000000000046"))
/* dual interface */ Fields;
struct __declspec(uuid("0002092f-0000-0000-c000-000000000046"))
/* dual interface */ Field;
struct __declspec(uuid("0002092e-0000-0000-c000-000000000046"))
/* dual interface */ Browser;
struct __declspec(uuid("0002092d-0000-0000-c000-000000000046"))
/* dual interface */ Styles;
struct __declspec(uuid("0002092c-0000-0000-c000-000000000046"))
/* dual interface */ Style;
struct __declspec(uuid("0002092b-0000-0000-c000-000000000046"))
/* dual interface */ Frames;
struct __declspec(uuid("0002092a-0000-0000-c000-000000000046"))
/* dual interface */ Frame;
struct __declspec(uuid("00020929-0000-0000-c000-000000000046"))
/* dual interface */ FormFields;
struct __declspec(uuid("00020928-0000-0000-c000-000000000046"))
/* dual interface */ FormField;
struct __declspec(uuid("00020927-0000-0000-c000-000000000046"))
/* dual interface */ TextInput;
struct __declspec(uuid("00020926-0000-0000-c000-000000000046"))
/* dual interface */ CheckBox;
struct __declspec(uuid("00020925-0000-0000-c000-000000000046"))
/* dual interface */ DropDown;
struct __declspec(uuid("00020924-0000-0000-c000-000000000046"))
/* dual interface */ ListEntries;
struct __declspec(uuid("00020923-0000-0000-c000-000000000046"))
/* dual interface */ ListEntry;
struct __declspec(uuid("00020922-0000-0000-c000-000000000046"))
/* dual interface */ TablesOfFigures;
struct __declspec(uuid("00020921-0000-0000-c000-000000000046"))
/* dual interface */ TableOfFigures;
struct __declspec(uuid("00020920-0000-0000-c000-000000000046"))
/* dual interface */ MailMerge;
struct __declspec(uuid("0002091f-0000-0000-c000-000000000046"))
/* dual interface */ MailMergeFields;
struct __declspec(uuid("0002091e-0000-0000-c000-000000000046"))
/* dual interface */ MailMergeField;
struct __declspec(uuid("0002091d-0000-0000-c000-000000000046"))
/* dual interface */ MailMergeDataSource;
struct __declspec(uuid("0002091c-0000-0000-c000-000000000046"))
/* dual interface */ MailMergeFieldNames;
struct __declspec(uuid("0002091b-0000-0000-c000-000000000046"))
/* dual interface */ MailMergeFieldName;
struct __declspec(uuid("0002091a-0000-0000-c000-000000000046"))
/* dual interface */ MailMergeDataFields;
struct __declspec(uuid("00020919-0000-0000-c000-000000000046"))
/* dual interface */ MailMergeDataField;
struct __declspec(uuid("00020918-0000-0000-c000-000000000046"))
/* dual interface */ Envelope;
struct __declspec(uuid("00020917-0000-0000-c000-000000000046"))
/* dual interface */ MailingLabel;
struct __declspec(uuid("00020916-0000-0000-c000-000000000046"))
/* dual interface */ CustomLabels;
struct __declspec(uuid("00020915-0000-0000-c000-000000000046"))
/* dual interface */ CustomLabel;
struct __declspec(uuid("00020914-0000-0000-c000-000000000046"))
/* dual interface */ TablesOfContents;
struct __declspec(uuid("00020913-0000-0000-c000-000000000046"))
/* dual interface */ TableOfContents;
struct __declspec(uuid("00020912-0000-0000-c000-000000000046"))
/* dual interface */ TablesOfAuthorities;
struct __declspec(uuid("00020911-0000-0000-c000-000000000046"))
/* dual interface */ TableOfAuthorities;
struct __declspec(uuid("00020910-0000-0000-c000-000000000046"))
/* dual interface */ Dialogs;
struct __declspec(uuid("000209b8-0000-0000-c000-000000000046"))
/* dual interface */ Dialog;
struct __declspec(uuid("00020971-0000-0000-c000-000000000046"))
/* dual interface */ PageSetup;
struct __declspec(uuid("00020972-0000-0000-c000-000000000046"))
/* dual interface */ LineNumbering;
struct __declspec(uuid("00020973-0000-0000-c000-000000000046"))
/* dual interface */ TextColumns;
struct __declspec(uuid("00020974-0000-0000-c000-000000000046"))
/* dual interface */ TextColumn;
struct __declspec(uuid("00020975-0000-0000-c000-000000000046"))
/* dual interface */ Selection;
struct __declspec(uuid("00020976-0000-0000-c000-000000000046"))
/* dual interface */ TablesOfAuthoritiesCategories;
struct __declspec(uuid("00020977-0000-0000-c000-000000000046"))
/* dual interface */ TableOfAuthoritiesCategory;
struct __declspec(uuid("00020978-0000-0000-c000-000000000046"))
/* dual interface */ CaptionLabels;
struct __declspec(uuid("00020979-0000-0000-c000-000000000046"))
/* dual interface */ CaptionLabel;
struct __declspec(uuid("0002097a-0000-0000-c000-000000000046"))
/* dual interface */ AutoCaptions;
struct __declspec(uuid("0002097b-0000-0000-c000-000000000046"))
/* dual interface */ AutoCaption;
struct __declspec(uuid("0002097c-0000-0000-c000-000000000046"))
/* dual interface */ Indexes;
struct __declspec(uuid("0002097d-0000-0000-c000-000000000046"))
/* dual interface */ Index;
struct __declspec(uuid("0002097e-0000-0000-c000-000000000046"))
/* dual interface */ AddIn;
struct __declspec(uuid("0002097f-0000-0000-c000-000000000046"))
/* dual interface */ AddIns;
struct __declspec(uuid("00020980-0000-0000-c000-000000000046"))
/* dual interface */ Revisions;
struct __declspec(uuid("00020981-0000-0000-c000-000000000046"))
/* dual interface */ Revision;
struct __declspec(uuid("00020982-0000-0000-c000-000000000046"))
/* dual interface */ Task;
struct __declspec(uuid("00020983-0000-0000-c000-000000000046"))
/* dual interface */ Tasks;
struct __declspec(uuid("00020984-0000-0000-c000-000000000046"))
/* dual interface */ HeadersFooters;
struct __declspec(uuid("00020985-0000-0000-c000-000000000046"))
/* dual interface */ HeaderFooter;
struct __declspec(uuid("00020986-0000-0000-c000-000000000046"))
/* dual interface */ PageNumbers;
struct __declspec(uuid("00020987-0000-0000-c000-000000000046"))
/* dual interface */ PageNumber;
struct __declspec(uuid("00020988-0000-0000-c000-000000000046"))
/* dual interface */ Subdocuments;
struct __declspec(uuid("00020989-0000-0000-c000-000000000046"))
/* dual interface */ Subdocument;
struct __declspec(uuid("0002098a-0000-0000-c000-000000000046"))
/* dual interface */ HeadingStyles;
struct __declspec(uuid("0002098b-0000-0000-c000-000000000046"))
/* dual interface */ HeadingStyle;
struct __declspec(uuid("0002098c-0000-0000-c000-000000000046"))
/* dual interface */ StoryRanges;
struct __declspec(uuid("0002098d-0000-0000-c000-000000000046"))
/* dual interface */ ListLevel;
struct __declspec(uuid("0002098e-0000-0000-c000-000000000046"))
/* dual interface */ ListLevels;
struct __declspec(uuid("0002098f-0000-0000-c000-000000000046"))
/* dual interface */ ListTemplate;
struct __declspec(uuid("00020990-0000-0000-c000-000000000046"))
/* dual interface */ ListTemplates;
struct __declspec(uuid("00020991-0000-0000-c000-000000000046"))
/* dual interface */ ListParagraphs;
struct __declspec(uuid("00020992-0000-0000-c000-000000000046"))
/* dual interface */ List;
struct __declspec(uuid("00020993-0000-0000-c000-000000000046"))
/* dual interface */ Lists;
struct __declspec(uuid("00020994-0000-0000-c000-000000000046"))
/* dual interface */ ListGallery;
struct __declspec(uuid("00020995-0000-0000-c000-000000000046"))
/* dual interface */ ListGalleries;
struct __declspec(uuid("00020996-0000-0000-c000-000000000046"))
/* dual interface */ KeyBindings;
struct __declspec(uuid("00020997-0000-0000-c000-000000000046"))
/* dual interface */ KeysBoundTo;
struct __declspec(uuid("00020998-0000-0000-c000-000000000046"))
/* dual interface */ KeyBinding;
struct __declspec(uuid("00020999-0000-0000-c000-000000000046"))
/* dual interface */ FileConverter;
struct __declspec(uuid("0002099a-0000-0000-c000-000000000046"))
/* dual interface */ FileConverters;
struct __declspec(uuid("0002099b-0000-0000-c000-000000000046"))
/* dual interface */ SynonymInfo;
struct __declspec(uuid("0002099c-0000-0000-c000-000000000046"))
/* dual interface */ Hyperlinks;
struct __declspec(uuid("0002099d-0000-0000-c000-000000000046"))
/* dual interface */ Hyperlink;
struct __declspec(uuid("0002099f-0000-0000-c000-000000000046"))
/* dual interface */ Shapes;
struct __declspec(uuid("000209b5-0000-0000-c000-000000000046"))
/* dual interface */ ShapeRange;
struct __declspec(uuid("000209b6-0000-0000-c000-000000000046"))
/* dual interface */ GroupShapes;
struct __declspec(uuid("000209a0-0000-0000-c000-000000000046"))
/* dual interface */ Shape;
struct __declspec(uuid("000209b2-0000-0000-c000-000000000046"))
/* dual interface */ TextFrame;
struct __declspec(uuid("000209a1-0000-0000-c000-000000000046"))
/* dual interface */ _LetterContent;
struct __declspec(uuid("000209a5-0000-0000-c000-000000000046"))
/* dual interface */ View;
struct __declspec(uuid("000209a6-0000-0000-c000-000000000046"))
/* dual interface */ Zoom;
struct __declspec(uuid("000209a7-0000-0000-c000-000000000046"))
/* dual interface */ Zooms;
struct __declspec(uuid("000209a8-0000-0000-c000-000000000046"))
/* dual interface */ InlineShape;
struct __declspec(uuid("000209a9-0000-0000-c000-000000000046"))
/* dual interface */ InlineShapes;
struct __declspec(uuid("000209aa-0000-0000-c000-000000000046"))
/* dual interface */ SpellingSuggestions;
struct __declspec(uuid("000209ab-0000-0000-c000-000000000046"))
/* dual interface */ SpellingSuggestion;
struct __declspec(uuid("000209ac-0000-0000-c000-000000000046"))
/* dual interface */ Dictionaries;
struct __declspec(uuid("000209e0-0000-0000-c000-000000000046"))
/* dual interface */ HangulHanjaConversionDictionaries;
struct __declspec(uuid("000209ad-0000-0000-c000-000000000046"))
/* dual interface */ Dictionary;
struct __declspec(uuid("000209ae-0000-0000-c000-000000000046"))
/* dual interface */ ReadabilityStatistics;
struct __declspec(uuid("000209af-0000-0000-c000-000000000046"))
/* dual interface */ ReadabilityStatistic;
struct __declspec(uuid("000209b3-0000-0000-c000-000000000046"))
/* dual interface */ Versions;
struct __declspec(uuid("000209b4-0000-0000-c000-000000000046"))
/* dual interface */ Version;
struct __declspec(uuid("000209b7-0000-0000-c000-000000000046"))
/* dual interface */ Options;
struct __declspec(uuid("000209ba-0000-0000-c000-000000000046"))
/* dual interface */ MailMessage;
struct __declspec(uuid("000209bb-0000-0000-c000-000000000046"))
/* dual interface */ ProofreadingErrors;
struct __declspec(uuid("000209bd-0000-0000-c000-000000000046"))
/* dual interface */ Mailer;
struct __declspec(uuid("000209c3-0000-0000-c000-000000000046"))
/* dual interface */ WrapFormat;
struct __declspec(uuid("000209d1-0000-0000-c000-000000000046"))
/* dual interface */ HangulAndAlphabetExceptions;
struct __declspec(uuid("000209d2-0000-0000-c000-000000000046"))
/* dual interface */ HangulAndAlphabetException;
struct __declspec(uuid("000209c4-0000-0000-c000-000000000046"))
/* dual interface */ Adjustments;
struct __declspec(uuid("000209c5-0000-0000-c000-000000000046"))
/* dual interface */ CalloutFormat;
struct __declspec(uuid("000209c6-0000-0000-c000-000000000046"))
/* dual interface */ ColorFormat;
struct __declspec(uuid("000209c7-0000-0000-c000-000000000046"))
/* dual interface */ ConnectorFormat;
struct __declspec(uuid("000209c8-0000-0000-c000-000000000046"))
/* dual interface */ FillFormat;
struct __declspec(uuid("000209c9-0000-0000-c000-000000000046"))
/* dual interface */ FreeformBuilder;
struct __declspec(uuid("000209ca-0000-0000-c000-000000000046"))
/* dual interface */ LineFormat;
struct __declspec(uuid("000209cb-0000-0000-c000-000000000046"))
/* dual interface */ PictureFormat;
struct __declspec(uuid("000209cc-0000-0000-c000-000000000046"))
/* dual interface */ ShadowFormat;
struct __declspec(uuid("000209cd-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNode;
struct __declspec(uuid("000209ce-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNodes;
struct __declspec(uuid("000209cf-0000-0000-c000-000000000046"))
/* dual interface */ TextEffectFormat;
struct __declspec(uuid("000209d0-0000-0000-c000-000000000046"))
/* dual interface */ ThreeDFormat;
struct __declspec(uuid("000209f7-0000-0000-c000-000000000046"))
/* dispinterface */ ApplicationEvents;
struct /* coclass */ Global;
struct /* coclass */ Application;
struct __declspec(uuid("000209f6-0000-0000-c000-000000000046"))
/* dispinterface */ DocumentEvents;
struct /* coclass */ Document;
struct /* coclass */ Font;
struct /* coclass */ ParagraphFormat;
struct __declspec(uuid("000209f3-0000-0000-c000-000000000046"))
/* dispinterface */ OCXEvents;
struct /* coclass */ OLEControl;
struct /* coclass */ LetterContent;
struct __declspec(uuid("000209f7-0001-0000-c000-000000000046"))
/* dual interface */ IApplicationEvents;
struct __declspec(uuid("000209fe-0001-0000-c000-000000000046"))
/* dual interface */ IApplicationEvents2;
struct __declspec(uuid("000209fe-0000-0000-c000-000000000046"))
/* dispinterface */ ApplicationEvents2;
struct __declspec(uuid("000209d7-0000-0000-c000-000000000046"))
/* dual interface */ EmailAuthor;
struct __declspec(uuid("000209db-0000-0000-c000-000000000046"))
/* dual interface */ EmailOptions;
struct __declspec(uuid("000209dc-0000-0000-c000-000000000046"))
/* dual interface */ EmailSignature;
struct __declspec(uuid("000209dd-0000-0000-c000-000000000046"))
/* dual interface */ Email;
struct __declspec(uuid("000209de-0000-0000-c000-000000000046"))
/* dual interface */ HorizontalLineFormat;
struct __declspec(uuid("000209e2-0000-0000-c000-000000000046"))
/* dual interface */ Frameset;
struct __declspec(uuid("000209e3-0000-0000-c000-000000000046"))
/* dual interface */ DefaultWebOptions;
struct __declspec(uuid("000209e4-0000-0000-c000-000000000046"))
/* dual interface */ WebOptions;
struct __declspec(uuid("000209df-0000-0000-c000-000000000046"))
/* dual interface */ OtherCorrectionsExceptions;
struct __declspec(uuid("000209e1-0000-0000-c000-000000000046"))
/* dual interface */ OtherCorrectionsException;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(_Application, __uuidof(_Application));
_COM_SMARTPTR_TYPEDEF(_Global, __uuidof(_Global));
_COM_SMARTPTR_TYPEDEF(FontNames, __uuidof(FontNames));
_COM_SMARTPTR_TYPEDEF(Languages, __uuidof(Languages));
_COM_SMARTPTR_TYPEDEF(Language, __uuidof(Language));
_COM_SMARTPTR_TYPEDEF(Documents, __uuidof(Documents));
_COM_SMARTPTR_TYPEDEF(_Document, __uuidof(_Document));
_COM_SMARTPTR_TYPEDEF(Template, __uuidof(Template));
_COM_SMARTPTR_TYPEDEF(Templates, __uuidof(Templates));
_COM_SMARTPTR_TYPEDEF(RoutingSlip, __uuidof(RoutingSlip));
_COM_SMARTPTR_TYPEDEF(Bookmark, __uuidof(Bookmark));
_COM_SMARTPTR_TYPEDEF(Bookmarks, __uuidof(Bookmarks));
_COM_SMARTPTR_TYPEDEF(Variable, __uuidof(Variable));
_COM_SMARTPTR_TYPEDEF(Variables, __uuidof(Variables));
_COM_SMARTPTR_TYPEDEF(RecentFile, __uuidof(RecentFile));
_COM_SMARTPTR_TYPEDEF(RecentFiles, __uuidof(RecentFiles));
_COM_SMARTPTR_TYPEDEF(Window, __uuidof(Window));
_COM_SMARTPTR_TYPEDEF(Windows, __uuidof(Windows));
_COM_SMARTPTR_TYPEDEF(Pane, __uuidof(Pane));
_COM_SMARTPTR_TYPEDEF(Panes, __uuidof(Panes));
_COM_SMARTPTR_TYPEDEF(Range, __uuidof(Range));
_COM_SMARTPTR_TYPEDEF(ListFormat, __uuidof(ListFormat));
_COM_SMARTPTR_TYPEDEF(Find, __uuidof(Find));
_COM_SMARTPTR_TYPEDEF(Replacement, __uuidof(Replacement));
_COM_SMARTPTR_TYPEDEF(Characters, __uuidof(Characters));
_COM_SMARTPTR_TYPEDEF(Words, __uuidof(Words));
_COM_SMARTPTR_TYPEDEF(Sentences, __uuidof(Sentences));
_COM_SMARTPTR_TYPEDEF(Sections, __uuidof(Sections));
_COM_SMARTPTR_TYPEDEF(Section, __uuidof(Section));
_COM_SMARTPTR_TYPEDEF(Paragraphs, __uuidof(Paragraphs));
_COM_SMARTPTR_TYPEDEF(Paragraph, __uuidof(Paragraph));
_COM_SMARTPTR_TYPEDEF(DropCap, __uuidof(DropCap));
_COM_SMARTPTR_TYPEDEF(TabStops, __uuidof(TabStops));
_COM_SMARTPTR_TYPEDEF(TabStop, __uuidof(TabStop));
_COM_SMARTPTR_TYPEDEF(_ParagraphFormat, __uuidof(_ParagraphFormat));
_COM_SMARTPTR_TYPEDEF(_Font, __uuidof(_Font));
_COM_SMARTPTR_TYPEDEF(Table, __uuidof(Table));
_COM_SMARTPTR_TYPEDEF(Row, __uuidof(Row));
_COM_SMARTPTR_TYPEDEF(Column, __uuidof(Column));
_COM_SMARTPTR_TYPEDEF(Cell, __uuidof(Cell));
_COM_SMARTPTR_TYPEDEF(Tables, __uuidof(Tables));
_COM_SMARTPTR_TYPEDEF(Rows, __uuidof(Rows));
_COM_SMARTPTR_TYPEDEF(Columns, __uuidof(Columns));
_COM_SMARTPTR_TYPEDEF(Cells, __uuidof(Cells));
_COM_SMARTPTR_TYPEDEF(AutoCorrect, __uuidof(AutoCorrect));
_COM_SMARTPTR_TYPEDEF(AutoCorrectEntries, __uuidof(AutoCorrectEntries));
_COM_SMARTPTR_TYPEDEF(AutoCorrectEntry, __uuidof(AutoCorrectEntry));
_COM_SMARTPTR_TYPEDEF(FirstLetterExceptions, __uuidof(FirstLetterExceptions));
_COM_SMARTPTR_TYPEDEF(FirstLetterException, __uuidof(FirstLetterException));
_COM_SMARTPTR_TYPEDEF(TwoInitialCapsExceptions, __uuidof(TwoInitialCapsExceptions));
_COM_SMARTPTR_TYPEDEF(TwoInitialCapsException, __uuidof(TwoInitialCapsException));
_COM_SMARTPTR_TYPEDEF(Footnotes, __uuidof(Footnotes));
_COM_SMARTPTR_TYPEDEF(Endnotes, __uuidof(Endnotes));
_COM_SMARTPTR_TYPEDEF(Comments, __uuidof(Comments));
_COM_SMARTPTR_TYPEDEF(Footnote, __uuidof(Footnote));
_COM_SMARTPTR_TYPEDEF(Endnote, __uuidof(Endnote));
_COM_SMARTPTR_TYPEDEF(Comment, __uuidof(Comment));
_COM_SMARTPTR_TYPEDEF(Borders, __uuidof(Borders));
_COM_SMARTPTR_TYPEDEF(Border, __uuidof(Border));
_COM_SMARTPTR_TYPEDEF(Shading, __uuidof(Shading));
_COM_SMARTPTR_TYPEDEF(TextRetrievalMode, __uuidof(TextRetrievalMode));
_COM_SMARTPTR_TYPEDEF(AutoTextEntries, __uuidof(AutoTextEntries));
_COM_SMARTPTR_TYPEDEF(AutoTextEntry, __uuidof(AutoTextEntry));
_COM_SMARTPTR_TYPEDEF(System, __uuidof(System));
_COM_SMARTPTR_TYPEDEF(OLEFormat, __uuidof(OLEFormat));
_COM_SMARTPTR_TYPEDEF(LinkFormat, __uuidof(LinkFormat));
_COM_SMARTPTR_TYPEDEF(_OLEControl, __uuidof(_OLEControl));
_COM_SMARTPTR_TYPEDEF(Fields, __uuidof(Fields));
_COM_SMARTPTR_TYPEDEF(Field, __uuidof(Field));
_COM_SMARTPTR_TYPEDEF(Browser, __uuidof(Browser));
_COM_SMARTPTR_TYPEDEF(Styles, __uuidof(Styles));
_COM_SMARTPTR_TYPEDEF(Style, __uuidof(Style));
_COM_SMARTPTR_TYPEDEF(Frames, __uuidof(Frames));
_COM_SMARTPTR_TYPEDEF(Frame, __uuidof(Frame));
_COM_SMARTPTR_TYPEDEF(FormFields, __uuidof(FormFields));
_COM_SMARTPTR_TYPEDEF(FormField, __uuidof(FormField));
_COM_SMARTPTR_TYPEDEF(TextInput, __uuidof(TextInput));
_COM_SMARTPTR_TYPEDEF(CheckBox, __uuidof(CheckBox));
_COM_SMARTPTR_TYPEDEF(DropDown, __uuidof(DropDown));
_COM_SMARTPTR_TYPEDEF(ListEntries, __uuidof(ListEntries));
_COM_SMARTPTR_TYPEDEF(ListEntry, __uuidof(ListEntry));
_COM_SMARTPTR_TYPEDEF(TablesOfFigures, __uuidof(TablesOfFigures));
_COM_SMARTPTR_TYPEDEF(TableOfFigures, __uuidof(TableOfFigures));
_COM_SMARTPTR_TYPEDEF(MailMerge, __uuidof(MailMerge));
_COM_SMARTPTR_TYPEDEF(MailMergeFields, __uuidof(MailMergeFields));
_COM_SMARTPTR_TYPEDEF(MailMergeField, __uuidof(MailMergeField));
_COM_SMARTPTR_TYPEDEF(MailMergeDataSource, __uuidof(MailMergeDataSource));
_COM_SMARTPTR_TYPEDEF(MailMergeFieldNames, __uuidof(MailMergeFieldNames));
_COM_SMARTPTR_TYPEDEF(MailMergeFieldName, __uuidof(MailMergeFieldName));
_COM_SMARTPTR_TYPEDEF(MailMergeDataFields, __uuidof(MailMergeDataFields));
_COM_SMARTPTR_TYPEDEF(MailMergeDataField, __uuidof(MailMergeDataField));
_COM_SMARTPTR_TYPEDEF(Envelope, __uuidof(Envelope));
_COM_SMARTPTR_TYPEDEF(MailingLabel, __uuidof(MailingLabel));
_COM_SMARTPTR_TYPEDEF(CustomLabels, __uuidof(CustomLabels));
_COM_SMARTPTR_TYPEDEF(CustomLabel, __uuidof(CustomLabel));
_COM_SMARTPTR_TYPEDEF(TablesOfContents, __uuidof(TablesOfContents));
_COM_SMARTPTR_TYPEDEF(TableOfContents, __uuidof(TableOfContents));
_COM_SMARTPTR_TYPEDEF(TablesOfAuthorities, __uuidof(TablesOfAuthorities));
_COM_SMARTPTR_TYPEDEF(TableOfAuthorities, __uuidof(TableOfAuthorities));
_COM_SMARTPTR_TYPEDEF(Dialogs, __uuidof(Dialogs));
_COM_SMARTPTR_TYPEDEF(Dialog, __uuidof(Dialog));
_COM_SMARTPTR_TYPEDEF(PageSetup, __uuidof(PageSetup));
_COM_SMARTPTR_TYPEDEF(LineNumbering, __uuidof(LineNumbering));
_COM_SMARTPTR_TYPEDEF(TextColumns, __uuidof(TextColumns));
_COM_SMARTPTR_TYPEDEF(TextColumn, __uuidof(TextColumn));
_COM_SMARTPTR_TYPEDEF(Selection, __uuidof(Selection));
_COM_SMARTPTR_TYPEDEF(TablesOfAuthoritiesCategories, __uuidof(TablesOfAuthoritiesCategories));
_COM_SMARTPTR_TYPEDEF(TableOfAuthoritiesCategory, __uuidof(TableOfAuthoritiesCategory));
_COM_SMARTPTR_TYPEDEF(CaptionLabels, __uuidof(CaptionLabels));
_COM_SMARTPTR_TYPEDEF(CaptionLabel, __uuidof(CaptionLabel));
_COM_SMARTPTR_TYPEDEF(AutoCaptions, __uuidof(AutoCaptions));
_COM_SMARTPTR_TYPEDEF(AutoCaption, __uuidof(AutoCaption));
_COM_SMARTPTR_TYPEDEF(Indexes, __uuidof(Indexes));
_COM_SMARTPTR_TYPEDEF(Index, __uuidof(Index));
_COM_SMARTPTR_TYPEDEF(AddIn, __uuidof(AddIn));
_COM_SMARTPTR_TYPEDEF(AddIns, __uuidof(AddIns));
_COM_SMARTPTR_TYPEDEF(Revisions, __uuidof(Revisions));
_COM_SMARTPTR_TYPEDEF(Revision, __uuidof(Revision));
_COM_SMARTPTR_TYPEDEF(Task, __uuidof(Task));
_COM_SMARTPTR_TYPEDEF(Tasks, __uuidof(Tasks));
_COM_SMARTPTR_TYPEDEF(HeadersFooters, __uuidof(HeadersFooters));
_COM_SMARTPTR_TYPEDEF(HeaderFooter, __uuidof(HeaderFooter));
_COM_SMARTPTR_TYPEDEF(PageNumbers, __uuidof(PageNumbers));
_COM_SMARTPTR_TYPEDEF(PageNumber, __uuidof(PageNumber));
_COM_SMARTPTR_TYPEDEF(Subdocuments, __uuidof(Subdocuments));
_COM_SMARTPTR_TYPEDEF(Subdocument, __uuidof(Subdocument));
_COM_SMARTPTR_TYPEDEF(HeadingStyles, __uuidof(HeadingStyles));
_COM_SMARTPTR_TYPEDEF(HeadingStyle, __uuidof(HeadingStyle));
_COM_SMARTPTR_TYPEDEF(StoryRanges, __uuidof(StoryRanges));
_COM_SMARTPTR_TYPEDEF(ListLevel, __uuidof(ListLevel));
_COM_SMARTPTR_TYPEDEF(ListLevels, __uuidof(ListLevels));
_COM_SMARTPTR_TYPEDEF(ListTemplate, __uuidof(ListTemplate));
_COM_SMARTPTR_TYPEDEF(ListTemplates, __uuidof(ListTemplates));
_COM_SMARTPTR_TYPEDEF(ListParagraphs, __uuidof(ListParagraphs));
_COM_SMARTPTR_TYPEDEF(List, __uuidof(List));
_COM_SMARTPTR_TYPEDEF(Lists, __uuidof(Lists));
_COM_SMARTPTR_TYPEDEF(ListGallery, __uuidof(ListGallery));
_COM_SMARTPTR_TYPEDEF(ListGalleries, __uuidof(ListGalleries));
_COM_SMARTPTR_TYPEDEF(KeyBindings, __uuidof(KeyBindings));
_COM_SMARTPTR_TYPEDEF(KeysBoundTo, __uuidof(KeysBoundTo));
_COM_SMARTPTR_TYPEDEF(KeyBinding, __uuidof(KeyBinding));
_COM_SMARTPTR_TYPEDEF(FileConverter, __uuidof(FileConverter));
_COM_SMARTPTR_TYPEDEF(FileConverters, __uuidof(FileConverters));
_COM_SMARTPTR_TYPEDEF(SynonymInfo, __uuidof(SynonymInfo));
_COM_SMARTPTR_TYPEDEF(Hyperlinks, __uuidof(Hyperlinks));
_COM_SMARTPTR_TYPEDEF(Hyperlink, __uuidof(Hyperlink));
_COM_SMARTPTR_TYPEDEF(Shapes, __uuidof(Shapes));
_COM_SMARTPTR_TYPEDEF(ShapeRange, __uuidof(ShapeRange));
_COM_SMARTPTR_TYPEDEF(GroupShapes, __uuidof(GroupShapes));
_COM_SMARTPTR_TYPEDEF(Shape, __uuidof(Shape));
_COM_SMARTPTR_TYPEDEF(TextFrame, __uuidof(TextFrame));
_COM_SMARTPTR_TYPEDEF(_LetterContent, __uuidof(_LetterContent));
_COM_SMARTPTR_TYPEDEF(View, __uuidof(View));
_COM_SMARTPTR_TYPEDEF(Zoom, __uuidof(Zoom));
_COM_SMARTPTR_TYPEDEF(Zooms, __uuidof(Zooms));
_COM_SMARTPTR_TYPEDEF(InlineShape, __uuidof(InlineShape));
_COM_SMARTPTR_TYPEDEF(InlineShapes, __uuidof(InlineShapes));
_COM_SMARTPTR_TYPEDEF(SpellingSuggestions, __uuidof(SpellingSuggestions));
_COM_SMARTPTR_TYPEDEF(SpellingSuggestion, __uuidof(SpellingSuggestion));
_COM_SMARTPTR_TYPEDEF(Dictionaries, __uuidof(Dictionaries));
_COM_SMARTPTR_TYPEDEF(HangulHanjaConversionDictionaries, __uuidof(HangulHanjaConversionDictionaries));
_COM_SMARTPTR_TYPEDEF(Dictionary, __uuidof(Dictionary));
_COM_SMARTPTR_TYPEDEF(ReadabilityStatistics, __uuidof(ReadabilityStatistics));
_COM_SMARTPTR_TYPEDEF(ReadabilityStatistic, __uuidof(ReadabilityStatistic));
_COM_SMARTPTR_TYPEDEF(Versions, __uuidof(Versions));
_COM_SMARTPTR_TYPEDEF(Version, __uuidof(Version));
_COM_SMARTPTR_TYPEDEF(Options, __uuidof(Options));
_COM_SMARTPTR_TYPEDEF(MailMessage, __uuidof(MailMessage));
_COM_SMARTPTR_TYPEDEF(ProofreadingErrors, __uuidof(ProofreadingErrors));
_COM_SMARTPTR_TYPEDEF(Mailer, __uuidof(Mailer));
_COM_SMARTPTR_TYPEDEF(WrapFormat, __uuidof(WrapFormat));
_COM_SMARTPTR_TYPEDEF(HangulAndAlphabetExceptions, __uuidof(HangulAndAlphabetExceptions));
_COM_SMARTPTR_TYPEDEF(HangulAndAlphabetException, __uuidof(HangulAndAlphabetException));
_COM_SMARTPTR_TYPEDEF(Adjustments, __uuidof(Adjustments));
_COM_SMARTPTR_TYPEDEF(CalloutFormat, __uuidof(CalloutFormat));
_COM_SMARTPTR_TYPEDEF(ColorFormat, __uuidof(ColorFormat));
_COM_SMARTPTR_TYPEDEF(ConnectorFormat, __uuidof(ConnectorFormat));
_COM_SMARTPTR_TYPEDEF(FillFormat, __uuidof(FillFormat));
_COM_SMARTPTR_TYPEDEF(FreeformBuilder, __uuidof(FreeformBuilder));
_COM_SMARTPTR_TYPEDEF(LineFormat, __uuidof(LineFormat));
_COM_SMARTPTR_TYPEDEF(PictureFormat, __uuidof(PictureFormat));
_COM_SMARTPTR_TYPEDEF(ShadowFormat, __uuidof(ShadowFormat));
_COM_SMARTPTR_TYPEDEF(ShapeNode, __uuidof(ShapeNode));
_COM_SMARTPTR_TYPEDEF(ShapeNodes, __uuidof(ShapeNodes));
_COM_SMARTPTR_TYPEDEF(TextEffectFormat, __uuidof(TextEffectFormat));
_COM_SMARTPTR_TYPEDEF(ThreeDFormat, __uuidof(ThreeDFormat));
_COM_SMARTPTR_TYPEDEF(ApplicationEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DocumentEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(OCXEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IApplicationEvents, __uuidof(IApplicationEvents));
_COM_SMARTPTR_TYPEDEF(IApplicationEvents2, __uuidof(IApplicationEvents2));
_COM_SMARTPTR_TYPEDEF(ApplicationEvents2, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(EmailAuthor, __uuidof(EmailAuthor));
_COM_SMARTPTR_TYPEDEF(EmailOptions, __uuidof(EmailOptions));
_COM_SMARTPTR_TYPEDEF(EmailSignature, __uuidof(EmailSignature));
_COM_SMARTPTR_TYPEDEF(Email, __uuidof(Email));
_COM_SMARTPTR_TYPEDEF(HorizontalLineFormat, __uuidof(HorizontalLineFormat));
_COM_SMARTPTR_TYPEDEF(Frameset, __uuidof(Frameset));
_COM_SMARTPTR_TYPEDEF(DefaultWebOptions, __uuidof(DefaultWebOptions));
_COM_SMARTPTR_TYPEDEF(WebOptions, __uuidof(WebOptions));
_COM_SMARTPTR_TYPEDEF(OtherCorrectionsExceptions, __uuidof(OtherCorrectionsExceptions));
_COM_SMARTPTR_TYPEDEF(OtherCorrectionsException, __uuidof(OtherCorrectionsException));

//
// Type library items
//

enum WdMailSystem
{
    wdNoMailSystem = 0,
    wdMAPI = 1,
    wdPowerTalk = 2,
    wdMAPIandPowerTalk = 3
};

enum WdTemplateType
{
    wdNormalTemplate = 0,
    wdGlobalTemplate = 1,
    wdAttachedTemplate = 2
};

enum WdContinue
{
    wdContinueDisabled = 0,
    wdResetList = 1,
    wdContinueList = 2
};

enum WdIMEMode
{
    wdIMEModeNoControl = 0,
    wdIMEModeOn = 1,
    wdIMEModeOff = 2,
    wdIMEModeHiragana = 4,
    wdIMEModeKatakana = 5,
    wdIMEModeKatakanaHalf = 6,
    wdIMEModeAlphaFull = 7,
    wdIMEModeAlpha = 8,
    wdIMEModeHangulFull = 9,
    wdIMEModeHangul = 10
};

enum WdBaselineAlignment
{
    wdBaselineAlignTop = 0,
    wdBaselineAlignCenter = 1,
    wdBaselineAlignBaseline = 2,
    wdBaselineAlignFarEast50 = 3,
    wdBaselineAlignAuto = 4
};

enum WdIndexFilter
{
    wdIndexFilterNone = 0,
    wdIndexFilterAiueo = 1,
    wdIndexFilterAkasatana = 2,
    wdIndexFilterChosung = 3,
    wdIndexFilterLow = 4,
    wdIndexFilterMedium = 5,
    wdIndexFilterFull = 6
};

enum WdIndexSortBy
{
    wdIndexSortByStroke = 0,
    wdIndexSortBySyllable = 1
};

enum WdJustificationMode
{
    wdJustificationModeExpand = 0,
    wdJustificationModeCompress = 1,
    wdJustificationModeCompressKana = 2
};

enum WdFarEastLineBreakLevel
{
    wdFarEastLineBreakLevelNormal = 0,
    wdFarEastLineBreakLevelStrict = 1,
    wdFarEastLineBreakLevelCustom = 2
};

enum WdMultipleWordConversionsMode
{
    wdHangulToHanja = 0,
    wdHanjaToHangul = 1
};

enum WdColorIndex
{
    wdAuto = 0,
    wdBlack = 1,
    wdBlue = 2,
    wdTurquoise = 3,
    wdBrightGreen = 4,
    wdPink = 5,
    wdRed = 6,
    wdYellow = 7,
    wdWhite = 8,
    wdDarkBlue = 9,
    wdTeal = 10,
    wdGreen = 11,
    wdViolet = 12,
    wdDarkRed = 13,
    wdDarkYellow = 14,
    wdGray50 = 15,
    wdGray25 = 16,
    wdByAuthor = -1,
    wdNoHighlight = 0
};

enum WdTextureIndex
{
    wdTextureNone = 0,
    wdTexture2Pt5Percent = 25,
    wdTexture5Percent = 50,
    wdTexture7Pt5Percent = 75,
    wdTexture10Percent = 100,
    wdTexture12Pt5Percent = 125,
    wdTexture15Percent = 150,
    wdTexture17Pt5Percent = 175,
    wdTexture20Percent = 200,
    wdTexture22Pt5Percent = 225,
    wdTexture25Percent = 250,
    wdTexture27Pt5Percent = 275,
    wdTexture30Percent = 300,
    wdTexture32Pt5Percent = 325,
    wdTexture35Percent = 350,
    wdTexture37Pt5Percent = 375,
    wdTexture40Percent = 400,
    wdTexture42Pt5Percent = 425,
    wdTexture45Percent = 450,
    wdTexture47Pt5Percent = 475,
    wdTexture50Percent = 500,
    wdTexture52Pt5Percent = 525,
    wdTexture55Percent = 550,
    wdTexture57Pt5Percent = 575,
    wdTexture60Percent = 600,
    wdTexture62Pt5Percent = 625,
    wdTexture65Percent = 650,
    wdTexture67Pt5Percent = 675,
    wdTexture70Percent = 700,
    wdTexture72Pt5Percent = 725,
    wdTexture75Percent = 750,
    wdTexture77Pt5Percent = 775,
    wdTexture80Percent = 800,
    wdTexture82Pt5Percent = 825,
    wdTexture85Percent = 850,
    wdTexture87Pt5Percent = 875,
    wdTexture90Percent = 900,
    wdTexture92Pt5Percent = 925,
    wdTexture95Percent = 950,
    wdTexture97Pt5Percent = 975,
    wdTextureSolid = 1000,
    wdTextureDarkHorizontal = -1,
    wdTextureDarkVertical = -2,
    wdTextureDarkDiagonalDown = -3,
    wdTextureDarkDiagonalUp = -4,
    wdTextureDarkCross = -5,
    wdTextureDarkDiagonalCross = -6,
    wdTextureHorizontal = -7,
    wdTextureVertical = -8,
    wdTextureDiagonalDown = -9,
    wdTextureDiagonalUp = -10,
    wdTextureCross = -11,
    wdTextureDiagonalCross = -12
};

enum WdUnderline
{
    wdUnderlineNone = 0,
    wdUnderlineSingle = 1,
    wdUnderlineWords = 2,
    wdUnderlineDouble = 3,
    wdUnderlineDotted = 4,
    wdUnderlineThick = 6,
    wdUnderlineDash = 7,
    wdUnderlineDotDash = 9,
    wdUnderlineDotDotDash = 10,
    wdUnderlineWavy = 11,
    wdUnderlineWavyHeavy = 27,
    wdUnderlineDottedHeavy = 20,
    wdUnderlineDashHeavy = 23,
    wdUnderlineDotDashHeavy = 25,
    wdUnderlineDotDotDashHeavy = 26,
    wdUnderlineDashLong = 39,
    wdUnderlineDashLongHeavy = 55,
    wdUnderlineWavyDouble = 43
};

enum WdEmphasisMark
{
    wdEmphasisMarkNone = 0,
    wdEmphasisMarkOverSolidCircle = 1,
    wdEmphasisMarkOverComma = 2,
    wdEmphasisMarkOverWhiteCircle = 3,
    wdEmphasisMarkUnderSolidCircle = 4
};

enum WdInternationalIndex
{
    wdListSeparator = 17,
    wdDecimalSeparator = 18,
    wdThousandsSeparator = 19,
    wdCurrencyCode = 20,
    wd24HourClock = 21,
    wdInternationalAM = 22,
    wdInternationalPM = 23,
    wdTimeSeparator = 24,
    wdDateSeparator = 25,
    wdProductLanguageID = 26
};

enum WdAutoMacros
{
    wdAutoExec = 0,
    wdAutoNew = 1,
    wdAutoOpen = 2,
    wdAutoClose = 3,
    wdAutoExit = 4
};

enum WdCaptionPosition
{
    wdCaptionPositionAbove = 0,
    wdCaptionPositionBelow = 1
};

enum WdCountry
{
    wdUS = 1,
    wdCanada = 2,
    wdLatinAmerica = 3,
    wdNetherlands = 31,
    wdFrance = 33,
    wdSpain = 34,
    wdItaly = 39,
    wdUK = 44,
    wdDenmark = 45,
    wdSweden = 46,
    wdNorway = 47,
    wdGermany = 49,
    wdPeru = 51,
    wdMexico = 52,
    wdArgentina = 54,
    wdBrazil = 55,
    wdChile = 56,
    wdVenezuela = 58,
    wdJapan = 81,
    wdTaiwan = 886,
    wdChina = 86,
    wdKorea = 82,
    wdFinland = 358,
    wdIceland = 354
};

enum WdHeadingSeparator
{
    wdHeadingSeparatorNone = 0,
    wdHeadingSeparatorBlankLine = 1,
    wdHeadingSeparatorLetter = 2,
    wdHeadingSeparatorLetterLow = 3,
    wdHeadingSeparatorLetterFull = 4
};

enum WdSeparatorType
{
    wdSeparatorHyphen = 0,
    wdSeparatorPeriod = 1,
    wdSeparatorColon = 2,
    wdSeparatorEmDash = 3,
    wdSeparatorEnDash = 4
};

enum WdPageNumberAlignment
{
    wdAlignPageNumberLeft = 0,
    wdAlignPageNumberCenter = 1,
    wdAlignPageNumberRight = 2,
    wdAlignPageNumberInside = 3,
    wdAlignPageNumberOutside = 4
};

enum WdBorderType
{
    wdBorderTop = -1,
    wdBorderLeft = -2,
    wdBorderBottom = -3,
    wdBorderRight = -4,
    wdBorderHorizontal = -5,
    wdBorderVertical = -6,
    wdBorderDiagonalDown = -7,
    wdBorderDiagonalUp = -8
};

enum WdBorderTypeHID
{
    emptyenum = 0
};

enum WdFramePosition
{
    wdFrameTop = -999999,
    wdFrameLeft = -999998,
    wdFrameBottom = -999997,
    wdFrameRight = -999996,
    wdFrameCenter = -999995,
    wdFrameInside = -999994,
    wdFrameOutside = -999993
};

enum WdAnimation
{
    wdAnimationNone = 0,
    wdAnimationLasVegasLights = 1,
    wdAnimationBlinkingBackground = 2,
    wdAnimationSparkleText = 3,
    wdAnimationMarchingBlackAnts = 4,
    wdAnimationMarchingRedAnts = 5,
    wdAnimationShimmer = 6
};

enum WdCharacterCase
{
    wdNextCase = -1,
    wdLowerCase = 0,
    wdUpperCase = 1,
    wdTitleWord = 2,
    wdTitleSentence = 4,
    wdToggleCase = 5,
    wdHalfWidth = 6,
    wdFullWidth = 7,
    wdKatakana = 8,
    wdHiragana = 9
};

enum WdCharacterCaseHID
{
//  emptyenum = 0
};

enum WdSummaryMode
{
    wdSummaryModeHighlight = 0,
    wdSummaryModeHideAllButSummary = 1,
    wdSummaryModeInsert = 2,
    wdSummaryModeCreateNew = 3
};

enum WdSummaryLength
{
    wd10Sentences = -2,
    wd20Sentences = -3,
    wd100Words = -4,
    wd500Words = -5,
    wd10Percent = -6,
    wd25Percent = -7,
    wd50Percent = -8,
    wd75Percent = -9
};

enum WdStyleType
{
    wdStyleTypeParagraph = 1,
    wdStyleTypeCharacter = 2
};

enum WdUnits
{
    wdCharacter = 1,
    wdWord = 2,
    wdSentence = 3,
    wdParagraph = 4,
    wdLine = 5,
    wdStory = 6,
    wdScreen = 7,
    wdSection = 8,
    wdColumn = 9,
    wdRow = 10,
    wdWindow = 11,
    wdCell = 12,
    wdCharacterFormatting = 13,
    wdParagraphFormatting = 14,
    wdTable = 15,
    wdItem = 16
};

enum WdGoToItem
{
    wdGoToBookmark = -1,
    wdGoToSection = 0,
    wdGoToPage = 1,
    wdGoToTable = 2,
    wdGoToLine = 3,
    wdGoToFootnote = 4,
    wdGoToEndnote = 5,
    wdGoToComment = 6,
    wdGoToField = 7,
    wdGoToGraphic = 8,
    wdGoToObject = 9,
    wdGoToEquation = 10,
    wdGoToHeading = 11,
    wdGoToPercent = 12,
    wdGoToSpellingError = 13,
    wdGoToGrammaticalError = 14,
    wdGoToProofreadingError = 15
};

enum WdGoToDirection
{
    wdGoToFirst = 1,
    wdGoToLast = -1,
    wdGoToNext = 2,
    wdGoToRelative = 2,
    wdGoToPrevious = 3,
    wdGoToAbsolute = 1
};

enum WdCollapseDirection
{
    wdCollapseStart = 1,
    wdCollapseEnd = 0
};

enum WdRowHeightRule
{
    wdRowHeightAuto = 0,
    wdRowHeightAtLeast = 1,
    wdRowHeightExactly = 2
};

enum WdFrameSizeRule
{
    wdFrameAuto = 0,
    wdFrameAtLeast = 1,
    wdFrameExact = 2
};

enum WdInsertCells
{
    wdInsertCellsShiftRight = 0,
    wdInsertCellsShiftDown = 1,
    wdInsertCellsEntireRow = 2,
    wdInsertCellsEntireColumn = 3
};

enum WdDeleteCells
{
    wdDeleteCellsShiftLeft = 0,
    wdDeleteCellsShiftUp = 1,
    wdDeleteCellsEntireRow = 2,
    wdDeleteCellsEntireColumn = 3
};

enum WdListApplyTo
{
    wdListApplyToWholeList = 0,
    wdListApplyToThisPointForward = 1,
    wdListApplyToSelection = 2
};

enum WdAlertLevel
{
    wdAlertsNone = 0,
    wdAlertsMessageBox = -2,
    wdAlertsAll = -1
};

enum WdCursorType
{
    wdCursorWait = 0,
    wdCursorIBeam = 1,
    wdCursorNormal = 2,
    wdCursorNorthwestArrow = 3
};

enum WdEnableCancelKey
{
    wdCancelDisabled = 0,
    wdCancelInterrupt = 1
};

enum WdRulerStyle
{
    wdAdjustNone = 0,
    wdAdjustProportional = 1,
    wdAdjustFirstColumn = 2,
    wdAdjustSameWidth = 3
};

enum WdParagraphAlignment
{
    wdAlignParagraphLeft = 0,
    wdAlignParagraphCenter = 1,
    wdAlignParagraphRight = 2,
    wdAlignParagraphJustify = 3,
    wdAlignParagraphDistribute = 4,
    wdAlignParagraphJustifyMed = 5,
    wdAlignParagraphJustifyHi = 7,
    wdAlignParagraphJustifyLow = 8
};

enum WdParagraphAlignmentHID
{
//  emptyenum = 0
};

enum WdListLevelAlignment
{
    wdListLevelAlignLeft = 0,
    wdListLevelAlignCenter = 1,
    wdListLevelAlignRight = 2
};

enum WdRowAlignment
{
    wdAlignRowLeft = 0,
    wdAlignRowCenter = 1,
    wdAlignRowRight = 2
};

enum WdTabAlignment
{
    wdAlignTabLeft = 0,
    wdAlignTabCenter = 1,
    wdAlignTabRight = 2,
    wdAlignTabDecimal = 3,
    wdAlignTabBar = 4,
    wdAlignTabList = 6
};

enum WdVerticalAlignment
{
    wdAlignVerticalTop = 0,
    wdAlignVerticalCenter = 1,
    wdAlignVerticalJustify = 2,
    wdAlignVerticalBottom = 3
};

enum WdCellVerticalAlignment
{
    wdCellAlignVerticalTop = 0,
    wdCellAlignVerticalCenter = 1,
    wdCellAlignVerticalBottom = 3
};

enum WdTrailingCharacter
{
    wdTrailingTab = 0,
    wdTrailingSpace = 1,
    wdTrailingNone = 2
};

enum WdListGalleryType
{
    wdBulletGallery = 1,
    wdNumberGallery = 2,
    wdOutlineNumberGallery = 3
};

enum WdListNumberStyle
{
    wdListNumberStyleArabic = 0,
    wdListNumberStyleUppercaseRoman = 1,
    wdListNumberStyleLowercaseRoman = 2,
    wdListNumberStyleUppercaseLetter = 3,
    wdListNumberStyleLowercaseLetter = 4,
    wdListNumberStyleOrdinal = 5,
    wdListNumberStyleCardinalText = 6,
    wdListNumberStyleOrdinalText = 7,
    wdListNumberStyleKanji = 10,
    wdListNumberStyleKanjiDigit = 11,
    wdListNumberStyleAiueoHalfWidth = 12,
    wdListNumberStyleIrohaHalfWidth = 13,
    wdListNumberStyleArabicFullWidth = 14,
    wdListNumberStyleKanjiTraditional = 16,
    wdListNumberStyleKanjiTraditional2 = 17,
    wdListNumberStyleNumberInCircle = 18,
    wdListNumberStyleAiueo = 20,
    wdListNumberStyleIroha = 21,
    wdListNumberStyleArabicLZ = 22,
    wdListNumberStyleBullet = 23,
    wdListNumberStyleGanada = 24,
    wdListNumberStyleChosung = 25,
    wdListNumberStyleGBNum1 = 26,
    wdListNumberStyleGBNum2 = 27,
    wdListNumberStyleGBNum3 = 28,
    wdListNumberStyleGBNum4 = 29,
    wdListNumberStyleZodiac1 = 30,
    wdListNumberStyleZodiac2 = 31,
    wdListNumberStyleZodiac3 = 32,
    wdListNumberStyleTradChinNum1 = 33,
    wdListNumberStyleTradChinNum2 = 34,
    wdListNumberStyleTradChinNum3 = 35,
    wdListNumberStyleTradChinNum4 = 36,
    wdListNumberStyleSimpChinNum1 = 37,
    wdListNumberStyleSimpChinNum2 = 38,
    wdListNumberStyleSimpChinNum3 = 39,
    wdListNumberStyleSimpChinNum4 = 40,
    wdListNumberStyleHanjaRead = 41,
    wdListNumberStyleHanjaReadDigit = 42,
    wdListNumberStyleHangul = 43,
    wdListNumberStyleHanja = 44,
    wdListNumberStyleHebrew1 = 45,
    wdListNumberStyleArabic1 = 46,
    wdListNumberStyleHebrew2 = 47,
    wdListNumberStyleArabic2 = 48,
    wdListNumberStyleLegal = 253,
    wdListNumberStyleLegalLZ = 254,
    wdListNumberStyleNone = 255
};

enum WdListNumberStyleHID
{
//  emptyenum = 0
};

enum WdNoteNumberStyle
{
    wdNoteNumberStyleArabic = 0,
    wdNoteNumberStyleUppercaseRoman = 1,
    wdNoteNumberStyleLowercaseRoman = 2,
    wdNoteNumberStyleUppercaseLetter = 3,
    wdNoteNumberStyleLowercaseLetter = 4,
    wdNoteNumberStyleSymbol = 9,
    wdNoteNumberStyleArabicFullWidth = 14,
    wdNoteNumberStyleKanji = 10,
    wdNoteNumberStyleKanjiDigit = 11,
    wdNoteNumberStyleKanjiTraditional = 16,
    wdNoteNumberStyleNumberInCircle = 18,
    wdNoteNumberStyleHanjaRead = 41,
    wdNoteNumberStyleHanjaReadDigit = 42,
    wdNoteNumberStyleTradChinNum1 = 33,
    wdNoteNumberStyleTradChinNum2 = 34,
    wdNoteNumberStyleSimpChinNum1 = 37,
    wdNoteNumberStyleSimpChinNum2 = 38,
    wdNoteNumberStyleHebrewLetter1 = 45,
    wdNoteNumberStyleArabicLetter1 = 46,
    wdNoteNumberStyleHebrewLetter2 = 47,
    wdNoteNumberStyleArabicLetter2 = 48
};

enum WdNoteNumberStyleHID
{
//  emptyenum = 0
};

enum WdCaptionNumberStyle
{
    wdCaptionNumberStyleArabic = 0,
    wdCaptionNumberStyleUppercaseRoman = 1,
    wdCaptionNumberStyleLowercaseRoman = 2,
    wdCaptionNumberStyleUppercaseLetter = 3,
    wdCaptionNumberStyleLowercaseLetter = 4,
    wdCaptionNumberStyleArabicFullWidth = 14,
    wdCaptionNumberStyleKanji = 10,
    wdCaptionNumberStyleKanjiDigit = 11,
    wdCaptionNumberStyleKanjiTraditional = 16,
    wdCaptionNumberStyleNumberInCircle = 18,
    wdCaptionNumberStyleGanada = 24,
    wdCaptionNumberStyleChosung = 25,
    wdCaptionNumberStyleZodiac1 = 30,
    wdCaptionNumberStyleZodiac2 = 31,
    wdCaptionNumberStyleHanjaRead = 41,
    wdCaptionNumberStyleHanjaReadDigit = 42,
    wdCaptionNumberStyleTradChinNum2 = 34,
    wdCaptionNumberStyleTradChinNum3 = 35,
    wdCaptionNumberStyleSimpChinNum2 = 38,
    wdCaptionNumberStyleSimpChinNum3 = 39,
    wdCaptionNumberStyleHebrewLetter1 = 45,
    wdCaptionNumberStyleArabicLetter1 = 46,
    wdCaptionNumberStyleHebrewLetter2 = 47,
    wdCaptionNumberStyleArabicLetter2 = 48
};

enum WdCaptionNumberStyleHID
{
//  emptyenum = 0
};

enum WdPageNumberStyle
{
    wdPageNumberStyleArabic = 0,
    wdPageNumberStyleUppercaseRoman = 1,
    wdPageNumberStyleLowercaseRoman = 2,
    wdPageNumberStyleUppercaseLetter = 3,
    wdPageNumberStyleLowercaseLetter = 4,
    wdPageNumberStyleArabicFullWidth = 14,
    wdPageNumberStyleKanji = 10,
    wdPageNumberStyleKanjiDigit = 11,
    wdPageNumberStyleKanjiTraditional = 16,
    wdPageNumberStyleNumberInCircle = 18,
    wdPageNumberStyleHanjaRead = 41,
    wdPageNumberStyleHanjaReadDigit = 42,
    wdPageNumberStyleTradChinNum1 = 33,
    wdPageNumberStyleTradChinNum2 = 34,
    wdPageNumberStyleSimpChinNum1 = 37,
    wdPageNumberStyleSimpChinNum2 = 38,
    wdPageNumberStyleHebrewLetter1 = 45,
    wdPageNumberStyleArabicLetter1 = 46,
    wdPageNumberStyleHebrewLetter2 = 47,
    wdPageNumberStyleArabicLetter2 = 48
};

enum WdPageNumberStyleHID
{
//  emptyenum = 0
};

enum WdStatistic
{
    wdStatisticWords = 0,
    wdStatisticLines = 1,
    wdStatisticPages = 2,
    wdStatisticCharacters = 3,
    wdStatisticParagraphs = 4,
    wdStatisticCharactersWithSpaces = 5,
    wdStatisticFarEastCharacters = 6
};

enum WdStatisticHID
{
//  emptyenum = 0
};

enum WdBuiltInProperty
{
    wdPropertyTitle = 1,
    wdPropertySubject = 2,
    wdPropertyAuthor = 3,
    wdPropertyKeywords = 4,
    wdPropertyComments = 5,
    wdPropertyTemplate = 6,
    wdPropertyLastAuthor = 7,
    wdPropertyRevision = 8,
    wdPropertyAppName = 9,
    wdPropertyTimeLastPrinted = 10,
    wdPropertyTimeCreated = 11,
    wdPropertyTimeLastSaved = 12,
    wdPropertyVBATotalEdit = 13,
    wdPropertyPages = 14,
    wdPropertyWords = 15,
    wdPropertyCharacters = 16,
    wdPropertySecurity = 17,
    wdPropertyCategory = 18,
    wdPropertyFormat = 19,
    wdPropertyManager = 20,
    wdPropertyCompany = 21,
    wdPropertyBytes = 22,
    wdPropertyLines = 23,
    wdPropertyParas = 24,
    wdPropertySlides = 25,
    wdPropertyNotes = 26,
    wdPropertyHiddenSlides = 27,
    wdPropertyMMClips = 28,
    wdPropertyHyperlinkBase = 29,
    wdPropertyCharsWSpaces = 30
};

enum WdLineSpacing
{
    wdLineSpaceSingle = 0,
    wdLineSpace1pt5 = 1,
    wdLineSpaceDouble = 2,
    wdLineSpaceAtLeast = 3,
    wdLineSpaceExactly = 4,
    wdLineSpaceMultiple = 5
};

enum WdNumberType
{
    wdNumberParagraph = 1,
    wdNumberListNum = 2,
    wdNumberAllNumbers = 3
};

enum WdListType
{
    wdListNoNumbering = 0,
    wdListListNumOnly = 1,
    wdListBullet = 2,
    wdListSimpleNumbering = 3,
    wdListOutlineNumbering = 4,
    wdListMixedNumbering = 5
};

enum WdStoryType
{
    wdMainTextStory = 1,
    wdFootnotesStory = 2,
    wdEndnotesStory = 3,
    wdCommentsStory = 4,
    wdTextFrameStory = 5,
    wdEvenPagesHeaderStory = 6,
    wdPrimaryHeaderStory = 7,
    wdEvenPagesFooterStory = 8,
    wdPrimaryFooterStory = 9,
    wdFirstPageHeaderStory = 10,
    wdFirstPageFooterStory = 11
};

enum WdSaveFormat
{
    wdFormatDocument = 0,
    wdFormatTemplate = 1,
    wdFormatText = 2,
    wdFormatTextLineBreaks = 3,
    wdFormatDOSText = 4,
    wdFormatDOSTextLineBreaks = 5,
    wdFormatRTF = 6,
    wdFormatUnicodeText = 7,
    wdFormatEncodedText = 7,
    wdFormatHTML = 8
};

enum WdOpenFormat
{
    wdOpenFormatAuto = 0,
    wdOpenFormatDocument = 1,
    wdOpenFormatTemplate = 2,
    wdOpenFormatRTF = 3,
    wdOpenFormatText = 4,
    wdOpenFormatUnicodeText = 5,
    wdOpenFormatEncodedText = 5,
    wdOpenFormatAllWord = 6,
    wdOpenFormatWebPages = 7
};

enum WdHeaderFooterIndex
{
    wdHeaderFooterPrimary = 1,
    wdHeaderFooterFirstPage = 2,
    wdHeaderFooterEvenPages = 3
};

enum WdTocFormat
{
    wdTOCTemplate = 0,
    wdTOCClassic = 1,
    wdTOCDistinctive = 2,
    wdTOCFancy = 3,
    wdTOCModern = 4,
    wdTOCFormal = 5,
    wdTOCSimple = 6
};

enum WdTofFormat
{
    wdTOFTemplate = 0,
    wdTOFClassic = 1,
    wdTOFDistinctive = 2,
    wdTOFCentered = 3,
    wdTOFFormal = 4,
    wdTOFSimple = 5
};

enum WdToaFormat
{
    wdTOATemplate = 0,
    wdTOAClassic = 1,
    wdTOADistinctive = 2,
    wdTOAFormal = 3,
    wdTOASimple = 4
};

enum WdLineStyle
{
    wdLineStyleNone = 0,
    wdLineStyleSingle = 1,
    wdLineStyleDot = 2,
    wdLineStyleDashSmallGap = 3,
    wdLineStyleDashLargeGap = 4,
    wdLineStyleDashDot = 5,
    wdLineStyleDashDotDot = 6,
    wdLineStyleDouble = 7,
    wdLineStyleTriple = 8,
    wdLineStyleThinThickSmallGap = 9,
    wdLineStyleThickThinSmallGap = 10,
    wdLineStyleThinThickThinSmallGap = 11,
    wdLineStyleThinThickMedGap = 12,
    wdLineStyleThickThinMedGap = 13,
    wdLineStyleThinThickThinMedGap = 14,
    wdLineStyleThinThickLargeGap = 15,
    wdLineStyleThickThinLargeGap = 16,
    wdLineStyleThinThickThinLargeGap = 17,
    wdLineStyleSingleWavy = 18,
    wdLineStyleDoubleWavy = 19,
    wdLineStyleDashDotStroked = 20,
    wdLineStyleEmboss3D = 21,
    wdLineStyleEngrave3D = 22,
    wdLineStyleOutset = 23,
    wdLineStyleInset = 24
};

enum WdLineWidth
{
    wdLineWidth025pt = 2,
    wdLineWidth050pt = 4,
    wdLineWidth075pt = 6,
    wdLineWidth100pt = 8,
    wdLineWidth150pt = 12,
    wdLineWidth225pt = 18,
    wdLineWidth300pt = 24,
    wdLineWidth450pt = 36,
    wdLineWidth600pt = 48
};

enum WdBreakType
{
    wdSectionBreakNextPage = 2,
    wdSectionBreakContinuous = 3,
    wdSectionBreakEvenPage = 4,
    wdSectionBreakOddPage = 5,
    wdLineBreak = 6,
    wdPageBreak = 7,
    wdColumnBreak = 8,
    wdLineBreakClearLeft = 9,
    wdLineBreakClearRight = 10,
    wdTextWrappingBreak = 11
};

enum WdTabLeader
{
    wdTabLeaderSpaces = 0,
    wdTabLeaderDots = 1,
    wdTabLeaderDashes = 2,
    wdTabLeaderLines = 3,
    wdTabLeaderHeavy = 4,
    wdTabLeaderMiddleDot = 5
};

enum WdTabLeaderHID
{
//  emptyenum = 0
};

enum WdMeasurementUnits
{
    wdInches = 0,
    wdCentimeters = 1,
    wdMillimeters = 2,
    wdPoints = 3,
    wdPicas = 4
};

enum WdMeasurementUnitsHID
{
//  emptyenum = 0
};

enum WdDropPosition
{
    wdDropNone = 0,
    wdDropNormal = 1,
    wdDropMargin = 2
};

enum WdNumberingRule
{
    wdRestartContinuous = 0,
    wdRestartSection = 1,
    wdRestartPage = 2
};

enum WdFootnoteLocation
{
    wdBottomOfPage = 0,
    wdBeneathText = 1
};

enum WdEndnoteLocation
{
    wdEndOfSection = 0,
    wdEndOfDocument = 1
};

enum WdSortSeparator
{
    wdSortSeparateByTabs = 0,
    wdSortSeparateByCommas = 1,
    wdSortSeparateByDefaultTableSeparator = 2
};

enum WdTableFieldSeparator
{
    wdSeparateByParagraphs = 0,
    wdSeparateByTabs = 1,
    wdSeparateByCommas = 2,
    wdSeparateByDefaultListSeparator = 3
};

enum WdSortFieldType
{
    wdSortFieldAlphanumeric = 0,
    wdSortFieldNumeric = 1,
    wdSortFieldDate = 2,
    wdSortFieldSyllable = 3,
    wdSortFieldJapanJIS = 4,
    wdSortFieldStroke = 5,
    wdSortFieldKoreaKS = 6
};

enum WdSortFieldTypeHID
{
//  emptyenum = 0
};

enum WdSortOrder
{
    wdSortOrderAscending = 0,
    wdSortOrderDescending = 1
};

enum WdTableFormat
{
    wdTableFormatNone = 0,
    wdTableFormatSimple1 = 1,
    wdTableFormatSimple2 = 2,
    wdTableFormatSimple3 = 3,
    wdTableFormatClassic1 = 4,
    wdTableFormatClassic2 = 5,
    wdTableFormatClassic3 = 6,
    wdTableFormatClassic4 = 7,
    wdTableFormatColorful1 = 8,
    wdTableFormatColorful2 = 9,
    wdTableFormatColorful3 = 10,
    wdTableFormatColumns1 = 11,
    wdTableFormatColumns2 = 12,
    wdTableFormatColumns3 = 13,
    wdTableFormatColumns4 = 14,
    wdTableFormatColumns5 = 15,
    wdTableFormatGrid1 = 16,
    wdTableFormatGrid2 = 17,
    wdTableFormatGrid3 = 18,
    wdTableFormatGrid4 = 19,
    wdTableFormatGrid5 = 20,
    wdTableFormatGrid6 = 21,
    wdTableFormatGrid7 = 22,
    wdTableFormatGrid8 = 23,
    wdTableFormatList1 = 24,
    wdTableFormatList2 = 25,
    wdTableFormatList3 = 26,
    wdTableFormatList4 = 27,
    wdTableFormatList5 = 28,
    wdTableFormatList6 = 29,
    wdTableFormatList7 = 30,
    wdTableFormatList8 = 31,
    wdTableFormat3DEffects1 = 32,
    wdTableFormat3DEffects2 = 33,
    wdTableFormat3DEffects3 = 34,
    wdTableFormatContemporary = 35,
    wdTableFormatElegant = 36,
    wdTableFormatProfessional = 37,
    wdTableFormatSubtle1 = 38,
    wdTableFormatSubtle2 = 39,
    wdTableFormatWeb1 = 40,
    wdTableFormatWeb2 = 41,
    wdTableFormatWeb3 = 42
};

enum WdTableFormatApply
{
    wdTableFormatApplyBorders = 1,
    wdTableFormatApplyShading = 2,
    wdTableFormatApplyFont = 4,
    wdTableFormatApplyColor = 8,
    wdTableFormatApplyAutoFit = 16,
    wdTableFormatApplyHeadingRows = 32,
    wdTableFormatApplyLastRow = 64,
    wdTableFormatApplyFirstColumn = 128,
    wdTableFormatApplyLastColumn = 256
};

enum WdLanguageID
{
    wdLanguageNone = 0,
    wdNoProofing = 1024,
    wdAfrikaans = 1078,
    wdAlbanian = 1052,
    wdArabicAlgeria = 5121,
    wdArabicBahrain = 15361,
    wdArabicEgypt = 3073,
    wdArabicIraq = 2049,
    wdArabicJordan = 11265,
    wdArabicKuwait = 13313,
    wdArabicLebanon = 12289,
    wdArabicLibya = 4097,
    wdArabicMorocco = 6145,
    wdArabicOman = 8193,
    wdArabicQatar = 16385,
    wdArabic = 1025,
    wdArabicSyria = 10241,
    wdArabicTunisia = 7169,
    wdArabicUAE = 14337,
    wdArabicYemen = 9217,
    wdArmenian = 1067,
    wdAssamese = 1101,
    wdAzeriCyrillic = 2092,
    wdAzeriLatin = 1068,
    wdBasque = 1069,
    wdByelorussian = 1059,
    wdBengali = 1093,
    wdBulgarian = 1026,
    wdBurmese = 1109,
    wdCatalan = 1027,
    wdChineseHongKong = 3076,
    wdChineseMacao = 5124,
    wdSimplifiedChinese = 2052,
    wdChineseSingapore = 4100,
    wdTraditionalChinese = 1028,
    wdCroatian = 1050,
    wdCzech = 1029,
    wdDanish = 1030,
    wdBelgianDutch = 2067,
    wdDutch = 1043,
    wdEnglishAUS = 3081,
    wdEnglishBelize = 10249,
    wdEnglishCanadian = 4105,
    wdEnglishCaribbean = 9225,
    wdEnglishIreland = 6153,
    wdEnglishJamaica = 8201,
    wdEnglishNewZealand = 5129,
    wdEnglishPhilippines = 13321,
    wdEnglishSouthAfrica = 7177,
    wdEnglishTrinidad = 11273,
    wdEnglishUK = 2057,
    wdEnglishUS = 1033,
    wdEnglishZimbabwe = 12297,
    wdEstonian = 1061,
    wdFaeroese = 1080,
    wdFarsi = 1065,
    wdFinnish = 1035,
    wdBelgianFrench = 2060,
    wdFrenchCameroon = 11276,
    wdFrenchCanadian = 3084,
    wdFrenchCotedIvoire = 12300,
    wdFrench = 1036,
    wdFrenchLuxembourg = 5132,
    wdFrenchMali = 13324,
    wdFrenchMonaco = 6156,
    wdFrenchReunion = 8204,
    wdFrenchSenegal = 10252,
    wdSwissFrench = 4108,
    wdFrenchWestIndies = 7180,
    wdFrenchZaire = 9228,
    wdFrisianNetherlands = 1122,
    wdGaelicIreland = 2108,
    wdGaelicScotland = 1084,
    wdGalician = 1110,
    wdGeorgian = 1079,
    wdGermanAustria = 3079,
    wdGerman = 1031,
    wdGermanLiechtenstein = 5127,
    wdGermanLuxembourg = 4103,
    wdSwissGerman = 2055,
    wdGreek = 1032,
    wdGujarati = 1095,
    wdHebrew = 1037,
    wdHindi = 1081,
    wdHungarian = 1038,
    wdIcelandic = 1039,
    wdIndonesian = 1057,
    wdItalian = 1040,
    wdSwissItalian = 2064,
    wdJapanese = 1041,
    wdKannada = 1099,
    wdKashmiri = 1120,
    wdKazakh = 1087,
    wdKhmer = 1107,
    wdKirghiz = 1088,
    wdKonkani = 1111,
    wdKorean = 1042,
    wdLao = 1108,
    wdLatvian = 1062,
    wdLithuanian = 1063,
    wdMacedonian = 1071,
    wdMalaysian = 1086,
    wdMalayBruneiDarussalam = 2110,
    wdMalayalam = 1100,
    wdMaltese = 1082,
    wdManipuri = 1112,
    wdMarathi = 1102,
    wdMongolian = 1104,
    wdNepali = 1121,
    wdNorwegianBokmol = 1044,
    wdNorwegianNynorsk = 2068,
    wdOriya = 1096,
    wdPolish = 1045,
    wdBrazilianPortuguese = 1046,
    wdPortuguese = 2070,
    wdPunjabi = 1094,
    wdRhaetoRomanic = 1047,
    wdRomanianMoldova = 2072,
    wdRomanian = 1048,
    wdRussianMoldova = 2073,
    wdRussian = 1049,
    wdSamiLappish = 1083,
    wdSanskrit = 1103,
    wdSerbianCyrillic = 3098,
    wdSerbianLatin = 2074,
    wdSindhi = 1113,
    wdSlovak = 1051,
    wdSlovenian = 1060,
    wdSorbian = 1070,
    wdSpanishArgentina = 11274,
    wdSpanishBolivia = 16394,
    wdSpanishChile = 13322,
    wdSpanishColombia = 9226,
    wdSpanishCostaRica = 5130,
    wdSpanishDominicanRepublic = 7178,
    wdSpanishEcuador = 12298,
    wdSpanishElSalvador = 17418,
    wdSpanishGuatemala = 4106,
    wdSpanishHonduras = 18442,
    wdMexicanSpanish = 2058,
    wdSpanishNicaragua = 19466,
    wdSpanishPanama = 6154,
    wdSpanishParaguay = 15370,
    wdSpanishPeru = 10250,
    wdSpanishPuertoRico = 20490,
    wdSpanishModernSort = 3082,
    wdSpanish = 1034,
    wdSpanishUruguay = 14346,
    wdSpanishVenezuela = 8202,
    wdSesotho = 1072,
    wdSutu = 1072,
    wdSwahili = 1089,
    wdSwedishFinland = 2077,
    wdSwedish = 1053,
    wdTajik = 1064,
    wdTamil = 1097,
    wdTatar = 1092,
    wdTelugu = 1098,
    wdThai = 1054,
    wdTibetan = 1105,
    wdTsonga = 1073,
    wdTswana = 1074,
    wdTurkish = 1055,
    wdTurkmen = 1090,
    wdUkrainian = 1058,
    wdUrdu = 1056,
    wdUzbekCyrillic = 2115,
    wdUzbekLatin = 1091,
    wdVenda = 1075,
    wdVietnamese = 1066,
    wdWelsh = 1106,
    wdXhosa = 1076,
    wdZulu = 1077
};

enum WdFieldType
{
    wdFieldEmpty = -1,
    wdFieldRef = 3,
    wdFieldIndexEntry = 4,
    wdFieldFootnoteRef = 5,
    wdFieldSet = 6,
    wdFieldIf = 7,
    wdFieldIndex = 8,
    wdFieldTOCEntry = 9,
    wdFieldStyleRef = 10,
    wdFieldRefDoc = 11,
    wdFieldSequence = 12,
    wdFieldTOC = 13,
    wdFieldInfo = 14,
    wdFieldTitle = 15,
    wdFieldSubject = 16,
    wdFieldAuthor = 17,
    wdFieldKeyWord = 18,
    wdFieldComments = 19,
    wdFieldLastSavedBy = 20,
    wdFieldCreateDate = 21,
    wdFieldSaveDate = 22,
    wdFieldPrintDate = 23,
    wdFieldRevisionNum = 24,
    wdFieldEditTime = 25,
    wdFieldNumPages = 26,
    wdFieldNumWords = 27,
    wdFieldNumChars = 28,
    wdFieldFileName = 29,
    wdFieldTemplate = 30,
    wdFieldDate = 31,
    wdFieldTime = 32,
    wdFieldPage = 33,
    wdFieldExpression = 34,
    wdFieldQuote = 35,
    wdFieldInclude = 36,
    wdFieldPageRef = 37,
    wdFieldAsk = 38,
    wdFieldFillIn = 39,
    wdFieldData = 40,
    wdFieldNext = 41,
    wdFieldNextIf = 42,
    wdFieldSkipIf = 43,
    wdFieldMergeRec = 44,
    wdFieldDDE = 45,
    wdFieldDDEAuto = 46,
    wdFieldGlossary = 47,
    wdFieldPrint = 48,
    wdFieldFormula = 49,
    wdFieldGoToButton = 50,
    wdFieldMacroButton = 51,
    wdFieldAutoNumOutline = 52,
    wdFieldAutoNumLegal = 53,
    wdFieldAutoNum = 54,
    wdFieldImport = 55,
    wdFieldLink = 56,
    wdFieldSymbol = 57,
    wdFieldEmbed = 58,
    wdFieldMergeField = 59,
    wdFieldUserName = 60,
    wdFieldUserInitials = 61,
    wdFieldUserAddress = 62,
    wdFieldBarCode = 63,
    wdFieldDocVariable = 64,
    wdFieldSection = 65,
    wdFieldSectionPages = 66,
    wdFieldIncludePicture = 67,
    wdFieldIncludeText = 68,
    wdFieldFileSize = 69,
    wdFieldFormTextInput = 70,
    wdFieldFormCheckBox = 71,
    wdFieldNoteRef = 72,
    wdFieldTOA = 73,
    wdFieldTOAEntry = 74,
    wdFieldMergeSeq = 75,
    wdFieldPrivate = 77,
    wdFieldDatabase = 78,
    wdFieldAutoText = 79,
    wdFieldCompare = 80,
    wdFieldAddin = 81,
    wdFieldSubscriber = 82,
    wdFieldFormDropDown = 83,
    wdFieldAdvance = 84,
    wdFieldDocProperty = 85,
    wdFieldOCX = 87,
    wdFieldHyperlink = 88,
    wdFieldAutoTextList = 89,
    wdFieldListNum = 90,
    wdFieldHTMLActiveX = 91
};

enum WdBuiltinStyle
{
    wdStyleNormal = -1,
    wdStyleEnvelopeAddress = -37,
    wdStyleEnvelopeReturn = -38,
    wdStyleBodyText = -67,
    wdStyleHeading1 = -2,
    wdStyleHeading2 = -3,
    wdStyleHeading3 = -4,
    wdStyleHeading4 = -5,
    wdStyleHeading5 = -6,
    wdStyleHeading6 = -7,
    wdStyleHeading7 = -8,
    wdStyleHeading8 = -9,
    wdStyleHeading9 = -10,
    wdStyleIndex1 = -11,
    wdStyleIndex2 = -12,
    wdStyleIndex3 = -13,
    wdStyleIndex4 = -14,
    wdStyleIndex5 = -15,
    wdStyleIndex6 = -16,
    wdStyleIndex7 = -17,
    wdStyleIndex8 = -18,
    wdStyleIndex9 = -19,
    wdStyleTOC1 = -20,
    wdStyleTOC2 = -21,
    wdStyleTOC3 = -22,
    wdStyleTOC4 = -23,
    wdStyleTOC5 = -24,
    wdStyleTOC6 = -25,
    wdStyleTOC7 = -26,
    wdStyleTOC8 = -27,
    wdStyleTOC9 = -28,
    wdStyleNormalIndent = -29,
    wdStyleFootnoteText = -30,
    wdStyleCommentText = -31,
    wdStyleHeader = -32,
    wdStyleFooter = -33,
    wdStyleIndexHeading = -34,
    wdStyleCaption = -35,
    wdStyleTableOfFigures = -36,
    wdStyleFootnoteReference = -39,
    wdStyleCommentReference = -40,
    wdStyleLineNumber = -41,
    wdStylePageNumber = -42,
    wdStyleEndnoteReference = -43,
    wdStyleEndnoteText = -44,
    wdStyleTableOfAuthorities = -45,
    wdStyleMacroText = -46,
    wdStyleTOAHeading = -47,
    wdStyleList = -48,
    wdStyleListBullet = -49,
    wdStyleListNumber = -50,
    wdStyleList2 = -51,
    wdStyleList3 = -52,
    wdStyleList4 = -53,
    wdStyleList5 = -54,
    wdStyleListBullet2 = -55,
    wdStyleListBullet3 = -56,
    wdStyleListBullet4 = -57,
    wdStyleListBullet5 = -58,
    wdStyleListNumber2 = -59,
    wdStyleListNumber3 = -60,
    wdStyleListNumber4 = -61,
    wdStyleListNumber5 = -62,
    wdStyleTitle = -63,
    wdStyleClosing = -64,
    wdStyleSignature = -65,
    wdStyleDefaultParagraphFont = -66,
    wdStyleBodyTextIndent = -68,
    wdStyleListContinue = -69,
    wdStyleListContinue2 = -70,
    wdStyleListContinue3 = -71,
    wdStyleListContinue4 = -72,
    wdStyleListContinue5 = -73,
    wdStyleMessageHeader = -74,
    wdStyleSubtitle = -75,
    wdStyleSalutation = -76,
    wdStyleDate = -77,
    wdStyleBodyTextFirstIndent = -78,
    wdStyleBodyTextFirstIndent2 = -79,
    wdStyleNoteHeading = -80,
    wdStyleBodyText2 = -81,
    wdStyleBodyText3 = -82,
    wdStyleBodyTextIndent2 = -83,
    wdStyleBodyTextIndent3 = -84,
    wdStyleBlockQuotation = -85,
    wdStyleHyperlink = -86,
    wdStyleHyperlinkFollowed = -87,
    wdStyleStrong = -88,
    wdStyleEmphasis = -89,
    wdStyleNavPane = -90,
    wdStylePlainText = -91,
    wdStyleHtmlNormal = -95,
    wdStyleHtmlAcronym = -96,
    wdStyleHtmlAddress = -97,
    wdStyleHtmlCite = -98,
    wdStyleHtmlCode = -99,
    wdStyleHtmlDfn = -100,
    wdStyleHtmlKbd = -101,
    wdStyleHtmlPre = -102,
    wdStyleHtmlSamp = -103,
    wdStyleHtmlTt = -104,
    wdStyleHtmlVar = -105
};

enum WdWordDialogTab
{
    wdDialogToolsOptionsTabView = 204,
    wdDialogToolsOptionsTabGeneral = 203,
    wdDialogToolsOptionsTabEdit = 224,
    wdDialogToolsOptionsTabPrint = 208,
    wdDialogToolsOptionsTabSave = 209,
    wdDialogToolsOptionsTabProofread = 211,
    wdDialogToolsOptionsTabTrackChanges = 386,
    wdDialogToolsOptionsTabUserInfo = 213,
    wdDialogToolsOptionsTabCompatibility = 525,
    wdDialogToolsOptionsTabTypography = 739,
    wdDialogToolsOptionsTabFileLocations = 225,
    wdDialogToolsOptionsTabFuzzy = 790,
    wdDialogToolsOptionsTabHangulHanjaConversion = 786,
    wdDialogToolsOptionsTabBidi = 1029,
    wdDialogFilePageSetupTabMargins = 150000,
    wdDialogFilePageSetupTabPaperSize = 150001,
    wdDialogFilePageSetupTabPaperSource = 150002,
    wdDialogFilePageSetupTabLayout = 150003,
    wdDialogFilePageSetupTabCharsLines = 150004,
    wdDialogInsertSymbolTabSymbols = 200000,
    wdDialogInsertSymbolTabSpecialCharacters = 200001,
    wdDialogNoteOptionsTabAllFootnotes = 300000,
    wdDialogNoteOptionsTabAllEndnotes = 300001,
    wdDialogInsertIndexAndTablesTabIndex = 400000,
    wdDialogInsertIndexAndTablesTabTableOfContents = 400001,
    wdDialogInsertIndexAndTablesTabTableOfFigures = 400002,
    wdDialogInsertIndexAndTablesTabTableOfAuthorities = 400003,
    wdDialogOrganizerTabStyles = 500000,
    wdDialogOrganizerTabAutoText = 500001,
    wdDialogOrganizerTabCommandBars = 500002,
    wdDialogOrganizerTabMacros = 500003,
    wdDialogFormatFontTabFont = 600000,
    wdDialogFormatFontTabCharacterSpacing = 600001,
    wdDialogFormatFontTabAnimation = 600002,
    wdDialogFormatBordersAndShadingTabBorders = 700000,
    wdDialogFormatBordersAndShadingTabPageBorder = 700001,
    wdDialogFormatBordersAndShadingTabShading = 700002,
    wdDialogToolsEnvelopesAndLabelsTabEnvelopes = 800000,
    wdDialogToolsEnvelopesAndLabelsTabLabels = 800001,
    wdDialogFormatParagraphTabIndentsAndSpacing = 1000000,
    wdDialogFormatParagraphTabTextFlow = 1000001,
    wdDialogFormatParagraphTabTeisai = 1000002,
    wdDialogFormatDrawingObjectTabColorsAndLines = 1200000,
    wdDialogFormatDrawingObjectTabSize = 1200001,
    wdDialogFormatDrawingObjectTabPosition = 1200002,
    wdDialogFormatDrawingObjectTabWrapping = 1200003,
    wdDialogFormatDrawingObjectTabPicture = 1200004,
    wdDialogFormatDrawingObjectTabTextbox = 1200005,
    wdDialogFormatDrawingObjectTabWeb = 1200006,
    wdDialogFormatDrawingObjectTabHR = 1200007,
    wdDialogToolsAutoCorrectExceptionsTabFirstLetter = 1400000,
    wdDialogToolsAutoCorrectExceptionsTabInitialCaps = 1400001,
    wdDialogToolsAutoCorrectExceptionsTabHangulAndAlphabet = 1400002,
    wdDialogToolsAutoCorrectExceptionsTabIac = 1400003,
    wdDialogFormatBulletsAndNumberingTabBulleted = 1500000,
    wdDialogFormatBulletsAndNumberingTabNumbered = 1500001,
    wdDialogFormatBulletsAndNumberingTabOutlineNumbered = 1500002,
    wdDialogLetterWizardTabLetterFormat = 1600000,
    wdDialogLetterWizardTabRecipientInfo = 1600001,
    wdDialogLetterWizardTabOtherElements = 1600002,
    wdDialogLetterWizardTabSenderInfo = 1600003,
    wdDialogToolsAutoManagerTabAutoCorrect = 1700000,
    wdDialogToolsAutoManagerTabAutoFormatAsYouType = 1700001,
    wdDialogToolsAutoManagerTabAutoText = 1700002,
    wdDialogToolsAutoManagerTabAutoFormat = 1700003,
    wdDialogEmailOptionsTabSignature = 1900000,
    wdDialogEmailOptionsTabStationary = 1900001,
    wdDialogEmailOptionsTabQuoting = 1900002,
    wdDialogWebOptionsGeneral = 2000000,
    wdDialogWebOptionsFiles = 2000001,
    wdDialogWebOptionsPictures = 2000002,
    wdDialogWebOptionsEncoding = 2000003,
    wdDialogWebOptionsFonts = 2000004
};

enum WdWordDialogTabHID
{
//  emptyenum = 0
};

enum WdWordDialog
{
    wdDialogHelpAbout = 9,
    wdDialogHelpWordPerfectHelp = 10,
    wdDialogHelpWordPerfectHelpOptions = 511,
    wdDialogFormatChangeCase = 322,
    wdDialogToolsOptionsFuzzy = 790,
    wdDialogToolsWordCount = 228,
    wdDialogDocumentStatistics = 78,
    wdDialogFileNew = 79,
    wdDialogFileOpen = 80,
    wdDialogMailMergeOpenDataSource = 81,
    wdDialogMailMergeOpenHeaderSource = 82,
    wdDialogMailMergeUseAddressBook = 779,
    wdDialogFileSaveAs = 84,
    wdDialogFileSummaryInfo = 86,
    wdDialogToolsTemplates = 87,
    wdDialogOrganizer = 222,
    wdDialogFilePrint = 88,
    wdDialogMailMerge = 676,
    wdDialogMailMergeCheck = 677,
    wdDialogMailMergeQueryOptions = 681,
    wdDialogMailMergeFindRecord = 569,
    wdDialogMailMergeInsertIf = 4049,
    wdDialogMailMergeInsertNextIf = 4053,
    wdDialogMailMergeInsertSkipIf = 4055,
    wdDialogMailMergeInsertFillIn = 4048,
    wdDialogMailMergeInsertAsk = 4047,
    wdDialogMailMergeInsertSet = 4054,
    wdDialogMailMergeHelper = 680,
    wdDialogLetterWizard = 821,
    wdDialogFilePrintSetup = 97,
    wdDialogFileFind = 99,
    wdDialogMailMergeCreateDataSource = 642,
    wdDialogMailMergeCreateHeaderSource = 643,
    wdDialogEditPasteSpecial = 111,
    wdDialogEditFind = 112,
    wdDialogEditReplace = 117,
    wdDialogEditGoToOld = 811,
    wdDialogEditGoTo = 896,
    wdDialogCreateAutoText = 872,
    wdDialogEditAutoText = 985,
    wdDialogEditLinks = 124,
    wdDialogEditObject = 125,
    wdDialogConvertObject = 392,
    wdDialogTableToText = 128,
    wdDialogTextToTable = 127,
    wdDialogTableInsertTable = 129,
    wdDialogTableInsertCells = 130,
    wdDialogTableInsertRow = 131,
    wdDialogTableDeleteCells = 133,
    wdDialogTableSplitCells = 137,
    wdDialogTableFormula = 348,
    wdDialogTableAutoFormat = 563,
    wdDialogTableFormatCell = 612,
    wdDialogViewZoom = 577,
    wdDialogNewToolbar = 586,
    wdDialogInsertBreak = 159,
    wdDialogInsertFootnote = 370,
    wdDialogInsertSymbol = 162,
    wdDialogInsertPicture = 163,
    wdDialogInsertFile = 164,
    wdDialogInsertDateTime = 165,
    wdDialogInsertNumber = 812,
    wdDialogInsertField = 166,
    wdDialogInsertDatabase = 341,
    wdDialogInsertMergeField = 167,
    wdDialogInsertBookmark = 168,
    wdDialogInsertHyperlink = 925,
    wdDialogMarkIndexEntry = 169,
    wdDialogMarkCitation = 463,
    wdDialogEditTOACategory = 625,
    wdDialogInsertIndexAndTables = 473,
    wdDialogInsertIndex = 170,
    wdDialogInsertTableOfContents = 171,
    wdDialogMarkTableOfContentsEntry = 442,
    wdDialogInsertTableOfFigures = 472,
    wdDialogInsertTableOfAuthorities = 471,
    wdDialogInsertObject = 172,
    wdDialogFormatCallout = 610,
    wdDialogDrawSnapToGrid = 633,
    wdDialogDrawAlign = 634,
    wdDialogToolsEnvelopesAndLabels = 607,
    wdDialogToolsCreateEnvelope = 173,
    wdDialogToolsCreateLabels = 489,
    wdDialogToolsProtectDocument = 503,
    wdDialogToolsProtectSection = 578,
    wdDialogToolsUnprotectDocument = 521,
    wdDialogFormatFont = 174,
    wdDialogFormatParagraph = 175,
    wdDialogFormatSectionLayout = 176,
    wdDialogFormatColumns = 177,
    wdDialogFileDocumentLayout = 178,
    wdDialogFileMacPageSetup = 685,
    wdDialogFilePrintOneCopy = 445,
    wdDialogFileMacPageSetupGX = 444,
    wdDialogFileMacCustomPageSetupGX = 737,
    wdDialogFilePageSetup = 178,
    wdDialogFormatTabs = 179,
    wdDialogFormatStyle = 180,
    wdDialogFormatStyleGallery = 505,
    wdDialogFormatDefineStyleFont = 181,
    wdDialogFormatDefineStylePara = 182,
    wdDialogFormatDefineStyleTabs = 183,
    wdDialogFormatDefineStyleFrame = 184,
    wdDialogFormatDefineStyleBorders = 185,
    wdDialogFormatDefineStyleLang = 186,
    wdDialogFormatPicture = 187,
    wdDialogToolsLanguage = 188,
    wdDialogFormatBordersAndShading = 189,
    wdDialogFormatDrawingObject = 960,
    wdDialogFormatFrame = 190,
    wdDialogFormatDropCap = 488,
    wdDialogFormatBulletsAndNumbering = 824,
    wdDialogToolsHyphenation = 195,
    wdDialogToolsBulletsNumbers = 196,
    wdDialogToolsHighlightChanges = 197,
    wdDialogToolsAcceptRejectChanges = 506,
    wdDialogToolsMergeDocuments = 435,
    wdDialogToolsCompareDocuments = 198,
    wdDialogTableSort = 199,
    wdDialogToolsCustomizeMenuBar = 615,
    wdDialogToolsCustomize = 152,
    wdDialogToolsCustomizeKeyboard = 432,
    wdDialogToolsCustomizeMenus = 433,
    wdDialogListCommands = 723,
    wdDialogToolsOptions = 974,
    wdDialogToolsOptionsGeneral = 203,
    wdDialogToolsAdvancedSettings = 206,
    wdDialogToolsOptionsCompatibility = 525,
    wdDialogToolsOptionsPrint = 208,
    wdDialogToolsOptionsSave = 209,
    wdDialogToolsOptionsSpellingAndGrammar = 211,
    wdDialogToolsSpellingAndGrammar = 828,
    wdDialogToolsThesaurus = 194,
    wdDialogToolsOptionsUserInfo = 213,
    wdDialogToolsOptionsAutoFormat = 959,
    wdDialogToolsOptionsTrackChanges = 386,
    wdDialogToolsOptionsEdit = 224,
    wdDialogToolsMacro = 215,
    wdDialogInsertPageNumbers = 294,
    wdDialogFormatPageNumber = 298,
    wdDialogNoteOptions = 373,
    wdDialogCopyFile = 300,
    wdDialogFormatAddrFonts = 103,
    wdDialogFormatRetAddrFonts = 221,
    wdDialogToolsOptionsFileLocations = 225,
    wdDialogToolsCreateDirectory = 833,
    wdDialogUpdateTOC = 331,
    wdDialogInsertFormField = 483,
    wdDialogFormFieldOptions = 353,
    wdDialogInsertCaption = 357,
    wdDialogInsertAutoCaption = 359,
    wdDialogInsertAddCaption = 402,
    wdDialogInsertCaptionNumbering = 358,
    wdDialogInsertCrossReference = 367,
    wdDialogToolsManageFields = 631,
    wdDialogToolsAutoManager = 915,
    wdDialogToolsAutoCorrect = 378,
    wdDialogToolsAutoCorrectExceptions = 762,
    wdDialogConnect = 420,
    wdDialogToolsOptionsBidi = 1029,
    wdDialogToolsOptionsView = 204,
    wdDialogInsertSubdocument = 583,
    wdDialogFileRoutingSlip = 624,
    wdDialogFontSubstitution = 581,
    wdDialogEditCreatePublisher = 732,
    wdDialogEditSubscribeTo = 733,
    wdDialogEditPublishOptions = 735,
    wdDialogEditSubscribeOptions = 736,
    wdDialogToolsOptionsTypography = 739,
    wdDialogToolsOptionsAutoFormatAsYouType = 778,
    wdDialogControlRun = 235,
    wdDialogFileVersions = 945,
    wdDialogToolsAutoSummarize = 874,
    wdDialogFileSaveVersion = 1007,
    wdDialogWindowActivate = 220,
    wdDialogToolsMacroRecord = 214,
    wdDialogToolsRevisions = 197,
    wdDialogEmailOptions = 863,
    wdDialogWebOptions = 898,
    wdDialogFitText = 983,
    wdDialogPhoneticGuide = 986,
    wdDialogHorizontalInVertical = 1160,
    wdDialogTwoLinesInOne = 1161,
    wdDialogFormatEncloseCharacters = 1162,
    wdDialogFormatTheme = 855,
    wdDialogTCSCTranslator = 1156
};

enum WdWordDialogHID
{
//  emptyenum = 0
};

enum WdFieldKind
{
    wdFieldKindNone = 0,
    wdFieldKindHot = 1,
    wdFieldKindWarm = 2,
    wdFieldKindCold = 3
};

enum WdTextFormFieldType
{
    wdRegularText = 0,
    wdNumberText = 1,
    wdDateText = 2,
    wdCurrentDateText = 3,
    wdCurrentTimeText = 4,
    wdCalculationText = 5
};

enum WdChevronConvertRule
{
    wdNeverConvert = 0,
    wdAlwaysConvert = 1,
    wdAskToNotConvert = 2,
    wdAskToConvert = 3
};

enum WdMailMergeMainDocType
{
    wdNotAMergeDocument = -1,
    wdFormLetters = 0,
    wdMailingLabels = 1,
    wdEnvelopes = 2,
    wdCatalog = 3
};

enum WdMailMergeState
{
    wdNormalDocument = 0,
    wdMainDocumentOnly = 1,
    wdMainAndDataSource = 2,
    wdMainAndHeader = 3,
    wdMainAndSourceAndHeader = 4,
    wdDataSource = 5
};

enum WdMailMergeDestination
{
    wdSendToNewDocument = 0,
    wdSendToPrinter = 1,
    wdSendToEmail = 2,
    wdSendToFax = 3
};

enum WdMailMergeActiveRecord
{
    wdNoActiveRecord = -1,
    wdNextRecord = -2,
    wdPreviousRecord = -3,
    wdFirstRecord = -4,
    wdLastRecord = -5
};

enum WdMailMergeDefaultRecord
{
    wdDefaultFirstRecord = 1,
    wdDefaultLastRecord = -16
};

enum WdMailMergeDataSource
{
    wdNoMergeInfo = -1,
    wdMergeInfoFromWord = 0,
    wdMergeInfoFromAccessDDE = 1,
    wdMergeInfoFromExcelDDE = 2,
    wdMergeInfoFromMSQueryDDE = 3,
    wdMergeInfoFromODBC = 4
};

enum WdMailMergeComparison
{
    wdMergeIfEqual = 0,
    wdMergeIfNotEqual = 1,
    wdMergeIfLessThan = 2,
    wdMergeIfGreaterThan = 3,
    wdMergeIfLessThanOrEqual = 4,
    wdMergeIfGreaterThanOrEqual = 5,
    wdMergeIfIsBlank = 6,
    wdMergeIfIsNotBlank = 7
};

enum WdBookmarkSortBy
{
    wdSortByName = 0,
    wdSortByLocation = 1
};

enum WdWindowState
{
    wdWindowStateNormal = 0,
    wdWindowStateMaximize = 1,
    wdWindowStateMinimize = 2
};

enum WdPictureLinkType
{
    wdLinkNone = 0,
    wdLinkDataInDoc = 1,
    wdLinkDataOnDisk = 2
};

enum WdLinkType
{
    wdLinkTypeOLE = 0,
    wdLinkTypePicture = 1,
    wdLinkTypeText = 2,
    wdLinkTypeReference = 3,
    wdLinkTypeInclude = 4,
    wdLinkTypeImport = 5,
    wdLinkTypeDDE = 6,
    wdLinkTypeDDEAuto = 7
};

enum WdWindowType
{
    wdWindowDocument = 0,
    wdWindowTemplate = 1
};

enum WdViewType
{
    wdNormalView = 1,
    wdOutlineView = 2,
    wdPrintView = 3,
    wdPrintPreview = 4,
    wdMasterView = 5,
    wdWebView = 6
};

enum WdSeekView
{
    wdSeekMainDocument = 0,
    wdSeekPrimaryHeader = 1,
    wdSeekFirstPageHeader = 2,
    wdSeekEvenPagesHeader = 3,
    wdSeekPrimaryFooter = 4,
    wdSeekFirstPageFooter = 5,
    wdSeekEvenPagesFooter = 6,
    wdSeekFootnotes = 7,
    wdSeekEndnotes = 8,
    wdSeekCurrentPageHeader = 9,
    wdSeekCurrentPageFooter = 10
};

enum WdSpecialPane
{
    wdPaneNone = 0,
    wdPanePrimaryHeader = 1,
    wdPaneFirstPageHeader = 2,
    wdPaneEvenPagesHeader = 3,
    wdPanePrimaryFooter = 4,
    wdPaneFirstPageFooter = 5,
    wdPaneEvenPagesFooter = 6,
    wdPaneFootnotes = 7,
    wdPaneEndnotes = 8,
    wdPaneFootnoteContinuationNotice = 9,
    wdPaneFootnoteContinuationSeparator = 10,
    wdPaneFootnoteSeparator = 11,
    wdPaneEndnoteContinuationNotice = 12,
    wdPaneEndnoteContinuationSeparator = 13,
    wdPaneEndnoteSeparator = 14,
    wdPaneComments = 15,
    wdPaneCurrentPageHeader = 16,
    wdPaneCurrentPageFooter = 17
};

enum WdPageFit
{
    wdPageFitNone = 0,
    wdPageFitFullPage = 1,
    wdPageFitBestFit = 2,
    wdPageFitTextFit = 3
};

enum WdBrowseTarget
{
    wdBrowsePage = 1,
    wdBrowseSection = 2,
    wdBrowseComment = 3,
    wdBrowseFootnote = 4,
    wdBrowseEndnote = 5,
    wdBrowseField = 6,
    wdBrowseTable = 7,
    wdBrowseGraphic = 8,
    wdBrowseHeading = 9,
    wdBrowseEdit = 10,
    wdBrowseFind = 11,
    wdBrowseGoTo = 12
};

enum WdPaperTray
{
    wdPrinterDefaultBin = 0,
    wdPrinterUpperBin = 1,
    wdPrinterOnlyBin = 1,
    wdPrinterLowerBin = 2,
    wdPrinterMiddleBin = 3,
    wdPrinterManualFeed = 4,
    wdPrinterEnvelopeFeed = 5,
    wdPrinterManualEnvelopeFeed = 6,
    wdPrinterAutomaticSheetFeed = 7,
    wdPrinterTractorFeed = 8,
    wdPrinterSmallFormatBin = 9,
    wdPrinterLargeFormatBin = 10,
    wdPrinterLargeCapacityBin = 11,
    wdPrinterPaperCassette = 14,
    wdPrinterFormSource = 15
};

enum WdOrientation
{
    wdOrientPortrait = 0,
    wdOrientLandscape = 1
};

enum WdSelectionType
{
    wdNoSelection = 0,
    wdSelectionIP = 1,
    wdSelectionNormal = 2,
    wdSelectionFrame = 3,
    wdSelectionColumn = 4,
    wdSelectionRow = 5,
    wdSelectionBlock = 6,
    wdSelectionInlineShape = 7,
    wdSelectionShape = 8
};

enum WdCaptionLabelID
{
    wdCaptionFigure = -1,
    wdCaptionTable = -2,
    wdCaptionEquation = -3
};

enum WdReferenceType
{
    wdRefTypeNumberedItem = 0,
    wdRefTypeHeading = 1,
    wdRefTypeBookmark = 2,
    wdRefTypeFootnote = 3,
    wdRefTypeEndnote = 4
};

enum WdReferenceKind
{
    wdContentText = -1,
    wdNumberRelativeContext = -2,
    wdNumberNoContext = -3,
    wdNumberFullContext = -4,
    wdEntireCaption = 2,
    wdOnlyLabelAndNumber = 3,
    wdOnlyCaptionText = 4,
    wdFootnoteNumber = 5,
    wdEndnoteNumber = 6,
    wdPageNumber = 7,
    wdPosition = 15,
    wdFootnoteNumberFormatted = 16,
    wdEndnoteNumberFormatted = 17
};

enum WdIndexFormat
{
    wdIndexTemplate = 0,
    wdIndexClassic = 1,
    wdIndexFancy = 2,
    wdIndexModern = 3,
    wdIndexBulleted = 4,
    wdIndexFormal = 5,
    wdIndexSimple = 6
};

enum WdIndexType
{
    wdIndexIndent = 0,
    wdIndexRunin = 1
};

enum WdRevisionsWrap
{
    wdWrapNever = 0,
    wdWrapAlways = 1,
    wdWrapAsk = 2
};

enum WdRevisionType
{
    wdNoRevision = 0,
    wdRevisionInsert = 1,
    wdRevisionDelete = 2,
    wdRevisionProperty = 3,
    wdRevisionParagraphNumber = 4,
    wdRevisionDisplayField = 5,
    wdRevisionReconcile = 6,
    wdRevisionConflict = 7,
    wdRevisionStyle = 8,
    wdRevisionReplace = 9
};

enum WdRoutingSlipDelivery
{
    wdOneAfterAnother = 0,
    wdAllAtOnce = 1
};

enum WdRoutingSlipStatus
{
    wdNotYetRouted = 0,
    wdRouteInProgress = 1,
    wdRouteComplete = 2
};

enum WdSectionStart
{
    wdSectionContinuous = 0,
    wdSectionNewColumn = 1,
    wdSectionNewPage = 2,
    wdSectionEvenPage = 3,
    wdSectionOddPage = 4
};

enum WdSaveOptions
{
    wdDoNotSaveChanges = 0,
    wdSaveChanges = -1,
    wdPromptToSaveChanges = -2
};

enum WdDocumentKind
{
    wdDocumentNotSpecified = 0,
    wdDocumentLetter = 1,
    wdDocumentEmail = 2
};

enum WdDocumentType
{
    wdTypeDocument = 0,
    wdTypeTemplate = 1,
    wdTypeFrameset = 2
};

enum WdOriginalFormat
{
    wdWordDocument = 0,
    wdOriginalDocumentFormat = 1,
    wdPromptUser = 2
};

enum WdRelocate
{
    wdRelocateUp = 0,
    wdRelocateDown = 1
};

enum WdInsertedTextMark
{
    wdInsertedTextMarkNone = 0,
    wdInsertedTextMarkBold = 1,
    wdInsertedTextMarkItalic = 2,
    wdInsertedTextMarkUnderline = 3,
    wdInsertedTextMarkDoubleUnderline = 4
};

enum WdRevisedLinesMark
{
    wdRevisedLinesMarkNone = 0,
    wdRevisedLinesMarkLeftBorder = 1,
    wdRevisedLinesMarkRightBorder = 2,
    wdRevisedLinesMarkOutsideBorder = 3
};

enum WdDeletedTextMark
{
    wdDeletedTextMarkHidden = 0,
    wdDeletedTextMarkStrikeThrough = 1,
    wdDeletedTextMarkCaret = 2,
    wdDeletedTextMarkPound = 3
};

enum WdRevisedPropertiesMark
{
    wdRevisedPropertiesMarkNone = 0,
    wdRevisedPropertiesMarkBold = 1,
    wdRevisedPropertiesMarkItalic = 2,
    wdRevisedPropertiesMarkUnderline = 3,
    wdRevisedPropertiesMarkDoubleUnderline = 4
};

enum WdFieldShading
{
    wdFieldShadingNever = 0,
    wdFieldShadingAlways = 1,
    wdFieldShadingWhenSelected = 2
};

enum WdDefaultFilePath
{
    wdDocumentsPath = 0,
    wdPicturesPath = 1,
    wdUserTemplatesPath = 2,
    wdWorkgroupTemplatesPath = 3,
    wdUserOptionsPath = 4,
    wdAutoRecoverPath = 5,
    wdToolsPath = 6,
    wdTutorialPath = 7,
    wdStartupPath = 8,
    wdProgramPath = 9,
    wdGraphicsFiltersPath = 10,
    wdTextConvertersPath = 11,
    wdProofingToolsPath = 12,
    wdTempFilePath = 13,
    wdCurrentFolderPath = 14,
    wdStyleGalleryPath = 15,
    wdBorderArtPath = 19
};

enum WdCompatibility
{
    wdNoTabHangIndent = 1,
    wdNoSpaceRaiseLower = 2,
    wdPrintColBlack = 3,
    wdWrapTrailSpaces = 4,
    wdNoColumnBalance = 5,
    wdConvMailMergeEsc = 6,
    wdSuppressSpBfAfterPgBrk = 7,
    wdSuppressTopSpacing = 8,
    wdOrigWordTableRules = 9,
    wdTransparentMetafiles = 10,
    wdShowBreaksInFrames = 11,
    wdSwapBordersFacingPages = 12,
    wdLeaveBackslashAlone = 13,
    wdExpandShiftReturn = 14,
    wdDontULTrailSpace = 15,
    wdDontBalanceSingleByteDoubleByteWidth = 16,
    wdSuppressTopSpacingMac5 = 17,
    wdSpacingInWholePoints = 18,
    wdPrintBodyTextBeforeHeader = 19,
    wdNoLeading = 20,
    wdNoSpaceForUL = 21,
    wdMWSmallCaps = 22,
    wdNoExtraLineSpacing = 23,
    wdTruncateFontHeight = 24,
    wdSubFontBySize = 25,
    wdUsePrinterMetrics = 26,
    wdWW6BorderRules = 27,
    wdExactOnTop = 28,
    wdSuppressBottomSpacing = 29,
    wdWPSpaceWidth = 30,
    wdWPJustification = 31,
    wdLineWrapLikeWord6 = 32,
    wdShapeLayoutLikeWW8 = 33,
    wdFootnoteLayoutLikeWW8 = 34,
    wdDontUseHTMLParagraphAutoSpacing = 35,
    wdDontAdjustLineHeightInTable = 36,
    wdForgetLastTabAlignment = 37,
    wdAutospaceLikeWW7 = 38,
    wdAlignTablesRowByRow = 39,
    wdLayoutRawTableWidth = 40,
    wdLayoutTableRowsApart = 41,
    wdUseWord97LineBreakingRules = 42
};

enum WdPaperSize
{
    wdPaper10x14 = 0,
    wdPaper11x17 = 1,
    wdPaperLetter = 2,
    wdPaperLetterSmall = 3,
    wdPaperLegal = 4,
    wdPaperExecutive = 5,
    wdPaperA3 = 6,
    wdPaperA4 = 7,
    wdPaperA4Small = 8,
    wdPaperA5 = 9,
    wdPaperB4 = 10,
    wdPaperB5 = 11,
    wdPaperCSheet = 12,
    wdPaperDSheet = 13,
    wdPaperESheet = 14,
    wdPaperFanfoldLegalGerman = 15,
    wdPaperFanfoldStdGerman = 16,
    wdPaperFanfoldUS = 17,
    wdPaperFolio = 18,
    wdPaperLedger = 19,
    wdPaperNote = 20,
    wdPaperQuarto = 21,
    wdPaperStatement = 22,
    wdPaperTabloid = 23,
    wdPaperEnvelope9 = 24,
    wdPaperEnvelope10 = 25,
    wdPaperEnvelope11 = 26,
    wdPaperEnvelope12 = 27,
    wdPaperEnvelope14 = 28,
    wdPaperEnvelopeB4 = 29,
    wdPaperEnvelopeB5 = 30,
    wdPaperEnvelopeB6 = 31,
    wdPaperEnvelopeC3 = 32,
    wdPaperEnvelopeC4 = 33,
    wdPaperEnvelopeC5 = 34,
    wdPaperEnvelopeC6 = 35,
    wdPaperEnvelopeC65 = 36,
    wdPaperEnvelopeDL = 37,
    wdPaperEnvelopeItaly = 38,
    wdPaperEnvelopeMonarch = 39,
    wdPaperEnvelopePersonal = 40,
    wdPaperCustom = 41
};

enum WdCustomLabelPageSize
{
    wdCustomLabelLetter = 0,
    wdCustomLabelLetterLS = 1,
    wdCustomLabelA4 = 2,
    wdCustomLabelA4LS = 3,
    wdCustomLabelA5 = 4,
    wdCustomLabelA5LS = 5,
    wdCustomLabelB5 = 6,
    wdCustomLabelMini = 7,
    wdCustomLabelFanfold = 8,
    wdCustomLabelVertHalfSheet = 9,
    wdCustomLabelVertHalfSheetLS = 10,
    wdCustomLabelHigaki = 11,
    wdCustomLabelHigakiLS = 12,
    wdCustomLabelB4JIS = 13
};

enum WdProtectionType
{
    wdNoProtection = -1,
    wdAllowOnlyRevisions = 0,
    wdAllowOnlyComments = 1,
    wdAllowOnlyFormFields = 2
};

enum WdPartOfSpeech
{
    wdAdjective = 0,
    wdNoun = 1,
    wdAdverb = 2,
    wdVerb = 3,
    wdPronoun = 4,
    wdConjunction = 5,
    wdPreposition = 6,
    wdInterjection = 7,
    wdIdiom = 8,
    wdOther = 9
};

enum WdSubscriberFormats
{
    wdSubscriberBestFormat = 0,
    wdSubscriberRTF = 1,
    wdSubscriberText = 2,
    wdSubscriberPict = 4
};

enum WdEditionType
{
    wdPublisher = 0,
    wdSubscriber = 1
};

enum WdEditionOption
{
    wdCancelPublisher = 0,
    wdSendPublisher = 1,
    wdSelectPublisher = 2,
    wdAutomaticUpdate = 3,
    wdManualUpdate = 4,
    wdChangeAttributes = 5,
    wdUpdateSubscriber = 6,
    wdOpenSource = 7
};

enum WdRelativeHorizontalPosition
{
    wdRelativeHorizontalPositionMargin = 0,
    wdRelativeHorizontalPositionPage = 1,
    wdRelativeHorizontalPositionColumn = 2,
    wdRelativeHorizontalPositionCharacter = 3
};

enum WdRelativeVerticalPosition
{
    wdRelativeVerticalPositionMargin = 0,
    wdRelativeVerticalPositionPage = 1,
    wdRelativeVerticalPositionParagraph = 2,
    wdRelativeVerticalPositionLine = 3
};

enum WdHelpType
{
    wdHelp = 0,
    wdHelpAbout = 1,
    wdHelpActiveWindow = 2,
    wdHelpContents = 3,
    wdHelpExamplesAndDemos = 4,
    wdHelpIndex = 5,
    wdHelpKeyboard = 6,
    wdHelpPSSHelp = 7,
    wdHelpQuickPreview = 8,
    wdHelpSearch = 9,
    wdHelpUsingHelp = 10,
    wdHelpIchitaro = 11,
    wdHelpPE2 = 12,
    wdHelpHWP = 13
};

enum WdHelpTypeHID
{
//  emptyenum = 0
};

enum WdKeyCategory
{
    wdKeyCategoryNil = -1,
    wdKeyCategoryDisable = 0,
    wdKeyCategoryCommand = 1,
    wdKeyCategoryMacro = 2,
    wdKeyCategoryFont = 3,
    wdKeyCategoryAutoText = 4,
    wdKeyCategoryStyle = 5,
    wdKeyCategorySymbol = 6,
    wdKeyCategoryPrefix = 7
};

enum WdKey
{
    wdNoKey = 255,
    wdKeyShift = 256,
    wdKeyControl = 512,
    wdKeyCommand = 512,
    wdKeyAlt = 1024,
    wdKeyOption = 1024,
    wdKeyA = 65,
    wdKeyB = 66,
    wdKeyC = 67,
    wdKeyD = 68,
    wdKeyE = 69,
    wdKeyF = 70,
    wdKeyG = 71,
    wdKeyH = 72,
    wdKeyI = 73,
    wdKeyJ = 74,
    wdKeyK = 75,
    wdKeyL = 76,
    wdKeyM = 77,
    wdKeyN = 78,
    wdKeyO = 79,
    wdKeyP = 80,
    wdKeyQ = 81,
    wdKeyR = 82,
    wdKeyS = 83,
    wdKeyT = 84,
    wdKeyU = 85,
    wdKeyV = 86,
    wdKeyW = 87,
    wdKeyX = 88,
    wdKeyY = 89,
    wdKeyZ = 90,
    wdKey0 = 48,
    wdKey1 = 49,
    wdKey2 = 50,
    wdKey3 = 51,
    wdKey4 = 52,
    wdKey5 = 53,
    wdKey6 = 54,
    wdKey7 = 55,
    wdKey8 = 56,
    wdKey9 = 57,
    wdKeyBackspace = 8,
    wdKeyTab = 9,
    wdKeyNumeric5Special = 12,
    wdKeyReturn = 13,
    wdKeyPause = 19,
    wdKeyEsc = 27,
    wdKeySpacebar = 32,
    wdKeyPageUp = 33,
    wdKeyPageDown = 34,
    wdKeyEnd = 35,
    wdKeyHome = 36,
    wdKeyInsert = 45,
    wdKeyDelete = 46,
    wdKeyNumeric0 = 96,
    wdKeyNumeric1 = 97,
    wdKeyNumeric2 = 98,
    wdKeyNumeric3 = 99,
    wdKeyNumeric4 = 100,
    wdKeyNumeric5 = 101,
    wdKeyNumeric6 = 102,
    wdKeyNumeric7 = 103,
    wdKeyNumeric8 = 104,
    wdKeyNumeric9 = 105,
    wdKeyNumericMultiply = 106,
    wdKeyNumericAdd = 107,
    wdKeyNumericSubtract = 109,
    wdKeyNumericDecimal = 110,
    wdKeyNumericDivide = 111,
    wdKeyF1 = 112,
    wdKeyF2 = 113,
    wdKeyF3 = 114,
    wdKeyF4 = 115,
    wdKeyF5 = 116,
    wdKeyF6 = 117,
    wdKeyF7 = 118,
    wdKeyF8 = 119,
    wdKeyF9 = 120,
    wdKeyF10 = 121,
    wdKeyF11 = 122,
    wdKeyF12 = 123,
    wdKeyF13 = 124,
    wdKeyF14 = 125,
    wdKeyF15 = 126,
    wdKeyF16 = 127,
    wdKeyScrollLock = 145,
    wdKeySemiColon = 186,
    wdKeyEquals = 187,
    wdKeyComma = 188,
    wdKeyHyphen = 189,
    wdKeyPeriod = 190,
    wdKeySlash = 191,
    wdKeyBackSingleQuote = 192,
    wdKeyOpenSquareBrace = 219,
    wdKeyBackSlash = 220,
    wdKeyCloseSquareBrace = 221,
    wdKeySingleQuote = 222
};

enum WdOLEType
{
    wdOLELink = 0,
    wdOLEEmbed = 1,
    wdOLEControl = 2
};

enum WdOLEVerb
{
    wdOLEVerbPrimary = 0,
    wdOLEVerbShow = -1,
    wdOLEVerbOpen = -2,
    wdOLEVerbHide = -3,
    wdOLEVerbUIActivate = -4,
    wdOLEVerbInPlaceActivate = -5,
    wdOLEVerbDiscardUndoState = -6
};

enum WdOLEPlacement
{
    wdInLine = 0,
    wdFloatOverText = 1
};

enum WdEnvelopeOrientation
{
    wdLeftPortrait = 0,
    wdCenterPortrait = 1,
    wdRightPortrait = 2,
    wdLeftLandscape = 3,
    wdCenterLandscape = 4,
    wdRightLandscape = 5,
    wdLeftClockwise = 6,
    wdCenterClockwise = 7,
    wdRightClockwise = 8
};

enum WdLetterStyle
{
    wdFullBlock = 0,
    wdModifiedBlock = 1,
    wdSemiBlock = 2
};

enum WdLetterheadLocation
{
    wdLetterTop = 0,
    wdLetterBottom = 1,
    wdLetterLeft = 2,
    wdLetterRight = 3
};

enum WdSalutationType
{
    wdSalutationInformal = 0,
    wdSalutationFormal = 1,
    wdSalutationBusiness = 2,
    wdSalutationOther = 3
};

enum WdSalutationGender
{
    wdGenderFemale = 0,
    wdGenderMale = 1,
    wdGenderNeutral = 2,
    wdGenderUnknown = 3
};

enum WdMovementType
{
    wdMove = 0,
    wdExtend = 1
};

enum WdConstants
{
    wdUndefined = 9999999,
    wdToggle = 9999998,
    wdForward = 1073741823,
    wdBackward = -1073741823,
    wdAutoPosition = 0,
    wdFirst = 1,
    wdCreatorCode = 1297307460
};

enum WdPasteDataType
{
    wdPasteOLEObject = 0,
    wdPasteRTF = 1,
    wdPasteText = 2,
    wdPasteMetafilePicture = 3,
    wdPasteBitmap = 4,
    wdPasteDeviceIndependentBitmap = 5,
    wdPasteHyperlink = 7,
    wdPasteShape = 8,
    wdPasteEnhancedMetafile = 9,
    wdPasteHTML = 10
};

enum WdPrintOutItem
{
    wdPrintDocumentContent = 0,
    wdPrintProperties = 1,
    wdPrintComments = 2,
    wdPrintStyles = 3,
    wdPrintAutoTextEntries = 4,
    wdPrintKeyAssignments = 5,
    wdPrintEnvelope = 6
};

enum WdPrintOutPages
{
    wdPrintAllPages = 0,
    wdPrintOddPagesOnly = 1,
    wdPrintEvenPagesOnly = 2
};

enum WdPrintOutRange
{
    wdPrintAllDocument = 0,
    wdPrintSelection = 1,
    wdPrintCurrentPage = 2,
    wdPrintFromTo = 3,
    wdPrintRangeOfPages = 4
};

enum WdDictionaryType
{
    wdSpelling = 0,
    wdGrammar = 1,
    wdThesaurus = 2,
    wdHyphenation = 3,
    wdSpellingComplete = 4,
    wdSpellingCustom = 5,
    wdSpellingLegal = 6,
    wdSpellingMedical = 7,
    wdHangulHanjaConversion = 8,
    wdHangulHanjaConversionCustom = 9
};

enum WdDictionaryTypeHID
{
//  emptyenum = 0
};

enum WdSpellingWordType
{
    wdSpellword = 0,
    wdWildcard = 1,
    wdAnagram = 2
};

enum WdSpellingErrorType
{
    wdSpellingCorrect = 0,
    wdSpellingNotInDictionary = 1,
    wdSpellingCapitalization = 2
};

enum WdProofreadingErrorType
{
    wdSpellingError = 0,
    wdGrammaticalError = 1
};

enum WdInlineShapeType
{
    wdInlineShapeEmbeddedOLEObject = 1,
    wdInlineShapeLinkedOLEObject = 2,
    wdInlineShapePicture = 3,
    wdInlineShapeLinkedPicture = 4,
    wdInlineShapeOLEControlObject = 5,
    wdInlineShapeHorizontalLine = 6,
    wdInlineShapePictureHorizontalLine = 7,
    wdInlineShapeLinkedPictureHorizontalLine = 8,
    wdInlineShapePictureBullet = 9,
    wdInlineShapeScriptAnchor = 10,
    wdInlineShapeOWSAnchor = 11
};

enum WdArrangeStyle
{
    wdTiled = 0,
    wdIcons = 1
};

enum WdSelectionFlags
{
    wdSelStartActive = 1,
    wdSelAtEOL = 2,
    wdSelOvertype = 4,
    wdSelActive = 8,
    wdSelReplace = 16
};

enum WdAutoVersions
{
    wdAutoVersionOff = 0,
    wdAutoVersionOnClose = 1
};

enum WdOrganizerObject
{
    wdOrganizerObjectStyles = 0,
    wdOrganizerObjectAutoText = 1,
    wdOrganizerObjectCommandBars = 2,
    wdOrganizerObjectProjectItems = 3
};

enum WdFindMatch
{
    wdMatchParagraphMark = 65551,
    wdMatchTabCharacter = 9,
    wdMatchCommentMark = 5,
    wdMatchAnyCharacter = 65599,
    wdMatchAnyDigit = 65567,
    wdMatchAnyLetter = 65583,
    wdMatchCaretCharacter = 11,
    wdMatchColumnBreak = 14,
    wdMatchEmDash = 8212,
    wdMatchEnDash = 8211,
    wdMatchEndnoteMark = 65555,
    wdMatchField = 19,
    wdMatchFootnoteMark = 65554,
    wdMatchGraphic = 1,
    wdMatchManualLineBreak = 65551,
    wdMatchManualPageBreak = 65564,
    wdMatchNonbreakingHyphen = 30,
    wdMatchNonbreakingSpace = 160,
    wdMatchOptionalHyphen = 31,
    wdMatchSectionBreak = 65580,
    wdMatchWhiteSpace = 65655
};

enum WdFindWrap
{
    wdFindStop = 0,
    wdFindContinue = 1,
    wdFindAsk = 2
};

enum WdInformation
{
    wdActiveEndAdjustedPageNumber = 1,
    wdActiveEndSectionNumber = 2,
    wdActiveEndPageNumber = 3,
    wdNumberOfPagesInDocument = 4,
    wdHorizontalPositionRelativeToPage = 5,
    wdVerticalPositionRelativeToPage = 6,
    wdHorizontalPositionRelativeToTextBoundary = 7,
    wdVerticalPositionRelativeToTextBoundary = 8,
    wdFirstCharacterColumnNumber = 9,
    wdFirstCharacterLineNumber = 10,
    wdFrameIsSelected = 11,
    wdWithInTable = 12,
    wdStartOfRangeRowNumber = 13,
    wdEndOfRangeRowNumber = 14,
    wdMaximumNumberOfRows = 15,
    wdStartOfRangeColumnNumber = 16,
    wdEndOfRangeColumnNumber = 17,
    wdMaximumNumberOfColumns = 18,
    wdZoomPercentage = 19,
    wdSelectionMode = 20,
    wdCapsLock = 21,
    wdNumLock = 22,
    wdOverType = 23,
    wdRevisionMarking = 24,
    wdInFootnoteEndnotePane = 25,
    wdInCommentPane = 26,
    wdInHeaderFooter = 28,
    wdAtEndOfRowMarker = 31,
    wdReferenceOfType = 32,
    wdHeaderFooterType = 33,
    wdInMasterDocument = 34,
    wdInFootnote = 35,
    wdInEndnote = 36,
    wdInWordMail = 37,
    wdInClipboard = 38
};

enum WdWrapType
{
    wdWrapSquare = 0,
    wdWrapTight = 1,
    wdWrapThrough = 2,
    wdWrapNone = 3,
    wdWrapTopBottom = 4
};

enum WdWrapSideType
{
    wdWrapBoth = 0,
    wdWrapLeft = 1,
    wdWrapRight = 2,
    wdWrapLargest = 3
};

enum WdOutlineLevel
{
    wdOutlineLevel1 = 1,
    wdOutlineLevel2 = 2,
    wdOutlineLevel3 = 3,
    wdOutlineLevel4 = 4,
    wdOutlineLevel5 = 5,
    wdOutlineLevel6 = 6,
    wdOutlineLevel7 = 7,
    wdOutlineLevel8 = 8,
    wdOutlineLevel9 = 9,
    wdOutlineLevelBodyText = 10
};

enum WdTextOrientation
{
    wdTextOrientationHorizontal = 0,
    wdTextOrientationUpward = 2,
    wdTextOrientationDownward = 3,
    wdTextOrientationVerticalFarEast = 1,
    wdTextOrientationHorizontalRotatedFarEast = 4
};

enum WdTextOrientationHID
{
//  emptyenum = 0
};

enum WdPageBorderArt
{
    wdArtApples = 1,
    wdArtMapleMuffins = 2,
    wdArtCakeSlice = 3,
    wdArtCandyCorn = 4,
    wdArtIceCreamCones = 5,
    wdArtChampagneBottle = 6,
    wdArtPartyGlass = 7,
    wdArtChristmasTree = 8,
    wdArtTrees = 9,
    wdArtPalmsColor = 10,
    wdArtBalloons3Colors = 11,
    wdArtBalloonsHotAir = 12,
    wdArtPartyFavor = 13,
    wdArtConfettiStreamers = 14,
    wdArtHearts = 15,
    wdArtHeartBalloon = 16,
    wdArtStars3D = 17,
    wdArtStarsShadowed = 18,
    wdArtStars = 19,
    wdArtSun = 20,
    wdArtEarth2 = 21,
    wdArtEarth1 = 22,
    wdArtPeopleHats = 23,
    wdArtSombrero = 24,
    wdArtPencils = 25,
    wdArtPackages = 26,
    wdArtClocks = 27,
    wdArtFirecrackers = 28,
    wdArtRings = 29,
    wdArtMapPins = 30,
    wdArtConfetti = 31,
    wdArtCreaturesButterfly = 32,
    wdArtCreaturesLadyBug = 33,
    wdArtCreaturesFish = 34,
    wdArtBirdsFlight = 35,
    wdArtScaredCat = 36,
    wdArtBats = 37,
    wdArtFlowersRoses = 38,
    wdArtFlowersRedRose = 39,
    wdArtPoinsettias = 40,
    wdArtHolly = 41,
    wdArtFlowersTiny = 42,
    wdArtFlowersPansy = 43,
    wdArtFlowersModern2 = 44,
    wdArtFlowersModern1 = 45,
    wdArtWhiteFlowers = 46,
    wdArtVine = 47,
    wdArtFlowersDaisies = 48,
    wdArtFlowersBlockPrint = 49,
    wdArtDecoArchColor = 50,
    wdArtFans = 51,
    wdArtFilm = 52,
    wdArtLightning1 = 53,
    wdArtCompass = 54,
    wdArtDoubleD = 55,
    wdArtClassicalWave = 56,
    wdArtShadowedSquares = 57,
    wdArtTwistedLines1 = 58,
    wdArtWaveline = 59,
    wdArtQuadrants = 60,
    wdArtCheckedBarColor = 61,
    wdArtSwirligig = 62,
    wdArtPushPinNote1 = 63,
    wdArtPushPinNote2 = 64,
    wdArtPumpkin1 = 65,
    wdArtEggsBlack = 66,
    wdArtCup = 67,
    wdArtHeartGray = 68,
    wdArtGingerbreadMan = 69,
    wdArtBabyPacifier = 70,
    wdArtBabyRattle = 71,
    wdArtCabins = 72,
    wdArtHouseFunky = 73,
    wdArtStarsBlack = 74,
    wdArtSnowflakes = 75,
    wdArtSnowflakeFancy = 76,
    wdArtSkyrocket = 77,
    wdArtSeattle = 78,
    wdArtMusicNotes = 79,
    wdArtPalmsBlack = 80,
    wdArtMapleLeaf = 81,
    wdArtPaperClips = 82,
    wdArtShorebirdTracks = 83,
    wdArtPeople = 84,
    wdArtPeopleWaving = 85,
    wdArtEclipsingSquares2 = 86,
    wdArtHypnotic = 87,
    wdArtDiamondsGray = 88,
    wdArtDecoArch = 89,
    wdArtDecoBlocks = 90,
    wdArtCirclesLines = 91,
    wdArtPapyrus = 92,
    wdArtWoodwork = 93,
    wdArtWeavingBraid = 94,
    wdArtWeavingRibbon = 95,
    wdArtWeavingAngles = 96,
    wdArtArchedScallops = 97,
    wdArtSafari = 98,
    wdArtCelticKnotwork = 99,
    wdArtCrazyMaze = 100,
    wdArtEclipsingSquares1 = 101,
    wdArtBirds = 102,
    wdArtFlowersTeacup = 103,
    wdArtNorthwest = 104,
    wdArtSouthwest = 105,
    wdArtTribal6 = 106,
    wdArtTribal4 = 107,
    wdArtTribal3 = 108,
    wdArtTribal2 = 109,
    wdArtTribal5 = 110,
    wdArtXIllusions = 111,
    wdArtZanyTriangles = 112,
    wdArtPyramids = 113,
    wdArtPyramidsAbove = 114,
    wdArtConfettiGrays = 115,
    wdArtConfettiOutline = 116,
    wdArtConfettiWhite = 117,
    wdArtMosaic = 118,
    wdArtLightning2 = 119,
    wdArtHeebieJeebies = 120,
    wdArtLightBulb = 121,
    wdArtGradient = 122,
    wdArtTriangleParty = 123,
    wdArtTwistedLines2 = 124,
    wdArtMoons = 125,
    wdArtOvals = 126,
    wdArtDoubleDiamonds = 127,
    wdArtChainLink = 128,
    wdArtTriangles = 129,
    wdArtTribal1 = 130,
    wdArtMarqueeToothed = 131,
    wdArtSharksTeeth = 132,
    wdArtSawtooth = 133,
    wdArtSawtoothGray = 134,
    wdArtPostageStamp = 135,
    wdArtWeavingStrips = 136,
    wdArtZigZag = 137,
    wdArtCrossStitch = 138,
    wdArtGems = 139,
    wdArtCirclesRectangles = 140,
    wdArtCornerTriangles = 141,
    wdArtCreaturesInsects = 142,
    wdArtZigZagStitch = 143,
    wdArtCheckered = 144,
    wdArtCheckedBarBlack = 145,
    wdArtMarquee = 146,
    wdArtBasicWhiteDots = 147,
    wdArtBasicWideMidline = 148,
    wdArtBasicWideOutline = 149,
    wdArtBasicWideInline = 150,
    wdArtBasicThinLines = 151,
    wdArtBasicWhiteDashes = 152,
    wdArtBasicWhiteSquares = 153,
    wdArtBasicBlackSquares = 154,
    wdArtBasicBlackDashes = 155,
    wdArtBasicBlackDots = 156,
    wdArtStarsTop = 157,
    wdArtCertificateBanner = 158,
    wdArtHandmade1 = 159,
    wdArtHandmade2 = 160,
    wdArtTornPaper = 161,
    wdArtTornPaperBlack = 162,
    wdArtCouponCutoutDashes = 163,
    wdArtCouponCutoutDots = 164
};

enum WdBorderDistanceFrom
{
    wdBorderDistanceFromText = 0,
    wdBorderDistanceFromPageEdge = 1
};

enum WdReplace
{
    wdReplaceNone = 0,
    wdReplaceOne = 1,
    wdReplaceAll = 2
};

enum WdFontBias
{
    wdFontBiasDontCare = 255,
    wdFontBiasDefault = 0,
    wdFontBiasFareast = 1
};

struct __declspec(uuid("00020970-0000-0000-c000-000000000046"))
_Application : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetWordBasic))
    IDispatchPtr WordBasic;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetActiveDocument))
    _DocumentPtr ActiveDocument;
    __declspec(property(get=GetActiveWindow))
    WindowPtr ActiveWindow;
    __declspec(property(get=GetSelection))
    SelectionPtr Selection;
    __declspec(property(get=GetDocuments))
    DocumentsPtr Documents;
    __declspec(property(get=GetRecentFiles))
    RecentFilesPtr RecentFiles;
    __declspec(property(get=GetNormalTemplate))
    TemplatePtr NormalTemplate;
    __declspec(property(get=GetSystem))
    SystemPtr System;
    __declspec(property(get=GetAutoCorrect))
    AutoCorrectPtr AutoCorrect;
    __declspec(property(get=GetFontNames))
    FontNamesPtr FontNames;
    __declspec(property(get=GetLandscapeFontNames))
    FontNamesPtr LandscapeFontNames;
    __declspec(property(get=GetPortraitFontNames))
    FontNamesPtr PortraitFontNames;
    __declspec(property(get=GetLanguages))
    LanguagesPtr Languages;
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;
    __declspec(property(get=GetBrowser))
    BrowserPtr Browser;
    __declspec(property(get=GetFileConverters))
    FileConvertersPtr FileConverters;
    __declspec(property(get=GetMailingLabel))
    MailingLabelPtr MailingLabel;
    __declspec(property(get=GetDialogs))
    DialogsPtr Dialogs;
    __declspec(property(get=GetCaptionLabels))
    CaptionLabelsPtr CaptionLabels;
    __declspec(property(get=GetAutoCaptions))
    AutoCaptionsPtr AutoCaptions;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetScreenUpdating,put=PutScreenUpdating))
    VARIANT_BOOL ScreenUpdating;
    __declspec(property(get=GetPrintPreview,put=PutPrintPreview))
    VARIANT_BOOL PrintPreview;
    __declspec(property(get=GetTasks))
    TasksPtr Tasks;
    __declspec(property(get=GetDisplayStatusBar,put=PutDisplayStatusBar))
    VARIANT_BOOL DisplayStatusBar;
    __declspec(property(get=GetSpecialMode))
    VARIANT_BOOL SpecialMode;
    __declspec(property(get=GetUsableWidth))
    long UsableWidth;
    __declspec(property(get=GetUsableHeight))
    long UsableHeight;
    __declspec(property(get=GetMathCoprocessorAvailable))
    VARIANT_BOOL MathCoprocessorAvailable;
    __declspec(property(get=GetMouseAvailable))
    VARIANT_BOOL MouseAvailable;
    __declspec(property(get=GetInternational))
    _variant_t International[];
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetCapsLock))
    VARIANT_BOOL CapsLock;
    __declspec(property(get=GetNumLock))
    VARIANT_BOOL NumLock;
    __declspec(property(get=GetUserName,put=PutUserName))
    _bstr_t UserName;
    __declspec(property(get=GetUserInitials,put=PutUserInitials))
    _bstr_t UserInitials;
    __declspec(property(get=GetUserAddress,put=PutUserAddress))
    _bstr_t UserAddress;
    __declspec(property(get=GetMacroContainer))
    IDispatchPtr MacroContainer;
    __declspec(property(get=GetDisplayRecentFiles,put=PutDisplayRecentFiles))
    VARIANT_BOOL DisplayRecentFiles;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetMailMessage))
    MailMessagePtr MailMessage;
    __declspec(property(get=GetSynonymInfo))
    SynonymInfoPtr SynonymInfo[][];
    __declspec(property(get=GetVBE))
    VBIDE::VBEPtr VBE;
    __declspec(property(get=GetDefaultSaveFormat,put=PutDefaultSaveFormat))
    _bstr_t DefaultSaveFormat;
    __declspec(property(get=GetListGalleries))
    ListGalleriesPtr ListGalleries;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter;
    __declspec(property(get=GetTemplates))
    TemplatesPtr Templates;
    __declspec(property(get=GetCustomizationContext,put=PutCustomizationContext))
    IDispatchPtr CustomizationContext;
    __declspec(property(get=GetKeyBindings))
    KeyBindingsPtr KeyBindings;
    __declspec(property(get=GetKeysBoundTo))
    KeysBoundToPtr KeysBoundTo[][][];
    __declspec(property(get=GetFindKey))
    KeyBindingPtr FindKey[][];
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetDisplayScrollBars,put=PutDisplayScrollBars))
    VARIANT_BOOL DisplayScrollBars;
    __declspec(property(get=GetStartupPath,put=PutStartupPath))
    _bstr_t StartupPath;
    __declspec(property(get=GetBackgroundSavingStatus))
    long BackgroundSavingStatus;
    __declspec(property(get=GetBackgroundPrintingStatus))
    long BackgroundPrintingStatus;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum WdWindowState WindowState;
    __declspec(property(get=GetDisplayAutoCompleteTips,put=PutDisplayAutoCompleteTips))
    VARIANT_BOOL DisplayAutoCompleteTips;
    __declspec(property(get=GetOptions))
    OptionsPtr Options;
    __declspec(property(get=GetDisplayAlerts,put=PutDisplayAlerts))
    enum WdAlertLevel DisplayAlerts;
    __declspec(property(get=GetCustomDictionaries))
    DictionariesPtr CustomDictionaries;
    __declspec(property(get=GetPathSeparator))
    _bstr_t PathSeparator;
    __declspec(property(put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetMAPIAvailable))
    VARIANT_BOOL MAPIAvailable;
    __declspec(property(get=GetDisplayScreenTips,put=PutDisplayScreenTips))
    VARIANT_BOOL DisplayScreenTips;
    __declspec(property(get=GetEnableCancelKey,put=PutEnableCancelKey))
    enum WdEnableCancelKey EnableCancelKey;
    __declspec(property(get=GetUserControl))
    VARIANT_BOOL UserControl;
    __declspec(property(get=GetFocusInMailHeader))
    VARIANT_BOOL FocusInMailHeader;
    __declspec(property(get=GetFileSearch))
    Office::FileSearchPtr FileSearch;
    __declspec(property(get=GetMailSystem))
    enum WdMailSystem MailSystem;
    __declspec(property(get=GetDefaultTableSeparator,put=PutDefaultTableSeparator))
    _bstr_t DefaultTableSeparator;
    __declspec(property(get=GetShowVisualBasicEditor,put=PutShowVisualBasicEditor))
    VARIANT_BOOL ShowVisualBasicEditor;
    __declspec(property(get=GetEmailOptions))
    EmailOptionsPtr EmailOptions;
    __declspec(property(get=GetBrowseExtraFileTypes,put=PutBrowseExtraFileTypes))
    _bstr_t BrowseExtraFileTypes;
    __declspec(property(get=GetIsObjectValid))
    VARIANT_BOOL IsObjectValid[];
    __declspec(property(get=GetHangulHanjaDictionaries))
    HangulHanjaConversionDictionariesPtr HangulHanjaDictionaries;
    __declspec(property(get=GetLanguage))
    enum Office::MsoLanguageID Language;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCOMAddIns))
    Office::COMAddInsPtr COMAddIns;
    __declspec(property(get=GetCheckLanguage,put=PutCheckLanguage))
    VARIANT_BOOL CheckLanguage;
    __declspec(property(get=GetLanguageSettings))
    Office::LanguageSettingsPtr LanguageSettings;
    __declspec(property(get=GetDummy1))
    VARIANT_BOOL Dummy1;
    __declspec(property(get=GetAnswerWizard))
    Office::AnswerWizardPtr AnswerWizard;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    DocumentsPtr GetDocuments ( );
    WindowsPtr GetWindows ( );
    _DocumentPtr GetActiveDocument ( );
    WindowPtr GetActiveWindow ( );
    SelectionPtr GetSelection ( );
    IDispatchPtr GetWordBasic ( );
    RecentFilesPtr GetRecentFiles ( );
    TemplatePtr GetNormalTemplate ( );
    SystemPtr GetSystem ( );
    AutoCorrectPtr GetAutoCorrect ( );
    FontNamesPtr GetFontNames ( );
    FontNamesPtr GetLandscapeFontNames ( );
    FontNamesPtr GetPortraitFontNames ( );
    LanguagesPtr GetLanguages ( );
    Office::AssistantPtr GetAssistant ( );
    BrowserPtr GetBrowser ( );
    FileConvertersPtr GetFileConverters ( );
    MailingLabelPtr GetMailingLabel ( );
    DialogsPtr GetDialogs ( );
    CaptionLabelsPtr GetCaptionLabels ( );
    AutoCaptionsPtr GetAutoCaptions ( );
    AddInsPtr GetAddIns ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL prop );
    _bstr_t GetVersion ( );
    VARIANT_BOOL GetScreenUpdating ( );
    void PutScreenUpdating (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPrintPreview ( );
    void PutPrintPreview (
        VARIANT_BOOL prop );
    TasksPtr GetTasks ( );
    VARIANT_BOOL GetDisplayStatusBar ( );
    void PutDisplayStatusBar (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSpecialMode ( );
    long GetUsableWidth ( );
    long GetUsableHeight ( );
    VARIANT_BOOL GetMathCoprocessorAvailable ( );
    VARIANT_BOOL GetMouseAvailable ( );
    _variant_t GetInternational (
        enum WdInternationalIndex Index );
    _bstr_t GetBuild ( );
    VARIANT_BOOL GetCapsLock ( );
    VARIANT_BOOL GetNumLock ( );
    _bstr_t GetUserName ( );
    void PutUserName (
        _bstr_t prop );
    _bstr_t GetUserInitials ( );
    void PutUserInitials (
        _bstr_t prop );
    _bstr_t GetUserAddress ( );
    void PutUserAddress (
        _bstr_t prop );
    IDispatchPtr GetMacroContainer ( );
    VARIANT_BOOL GetDisplayRecentFiles ( );
    void PutDisplayRecentFiles (
        VARIANT_BOOL prop );
    Office::_CommandBarsPtr GetCommandBars ( );
    SynonymInfoPtr GetSynonymInfo (
        _bstr_t Word,
        VARIANT * LanguageID = &vtMissing );
    VBIDE::VBEPtr GetVBE ( );
    _bstr_t GetDefaultSaveFormat ( );
    void PutDefaultSaveFormat (
        _bstr_t prop );
    ListGalleriesPtr GetListGalleries ( );
    _bstr_t GetActivePrinter ( );
    void PutActivePrinter (
        _bstr_t prop );
    TemplatesPtr GetTemplates ( );
    IDispatchPtr GetCustomizationContext ( );
    void PutCustomizationContext (
        IDispatch * prop );
    KeyBindingsPtr GetKeyBindings ( );
    KeysBoundToPtr GetKeysBoundTo (
        enum WdKeyCategory KeyCategory,
        _bstr_t Command,
        VARIANT * CommandParameter = &vtMissing );
    KeyBindingPtr GetFindKey (
        long KeyCode,
        VARIANT * KeyCode2 = &vtMissing );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t prop );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetDisplayScrollBars ( );
    void PutDisplayScrollBars (
        VARIANT_BOOL prop );
    _bstr_t GetStartupPath ( );
    void PutStartupPath (
        _bstr_t prop );
    long GetBackgroundSavingStatus ( );
    long GetBackgroundPrintingStatus ( );
    long GetLeft ( );
    void PutLeft (
        long prop );
    long GetTop ( );
    void PutTop (
        long prop );
    long GetWidth ( );
    void PutWidth (
        long prop );
    long GetHeight ( );
    void PutHeight (
        long prop );
    enum WdWindowState GetWindowState ( );
    void PutWindowState (
        enum WdWindowState prop );
    VARIANT_BOOL GetDisplayAutoCompleteTips ( );
    void PutDisplayAutoCompleteTips (
        VARIANT_BOOL prop );
    OptionsPtr GetOptions ( );
    enum WdAlertLevel GetDisplayAlerts ( );
    void PutDisplayAlerts (
        enum WdAlertLevel prop );
    DictionariesPtr GetCustomDictionaries ( );
    _bstr_t GetPathSeparator ( );
    void PutStatusBar (
        _bstr_t _arg1 );
    VARIANT_BOOL GetMAPIAvailable ( );
    VARIANT_BOOL GetDisplayScreenTips ( );
    void PutDisplayScreenTips (
        VARIANT_BOOL prop );
    enum WdEnableCancelKey GetEnableCancelKey ( );
    void PutEnableCancelKey (
        enum WdEnableCancelKey prop );
    VARIANT_BOOL GetUserControl ( );
    Office::FileSearchPtr GetFileSearch ( );
    enum WdMailSystem GetMailSystem ( );
    _bstr_t GetDefaultTableSeparator ( );
    void PutDefaultTableSeparator (
        _bstr_t prop );
    VARIANT_BOOL GetShowVisualBasicEditor ( );
    void PutShowVisualBasicEditor (
        VARIANT_BOOL prop );
    _bstr_t GetBrowseExtraFileTypes ( );
    void PutBrowseExtraFileTypes (
        _bstr_t prop );
    VARIANT_BOOL GetIsObjectValid (
        IDispatch * Object );
    HangulHanjaConversionDictionariesPtr GetHangulHanjaDictionaries ( );
    MailMessagePtr GetMailMessage ( );
    VARIANT_BOOL GetFocusInMailHeader ( );
    HRESULT Quit (
        VARIANT * SaveChanges = &vtMissing,
        VARIANT * OriginalFormat = &vtMissing,
        VARIANT * RouteDocument = &vtMissing );
    HRESULT ScreenRefresh ( );
    HRESULT PrintOutOld (
        VARIANT * Background = &vtMissing,
        VARIANT * Append = &vtMissing,
        VARIANT * Range = &vtMissing,
        VARIANT * OutputFileName = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * Item = &vtMissing,
        VARIANT * Copies = &vtMissing,
        VARIANT * Pages = &vtMissing,
        VARIANT * PageType = &vtMissing,
        VARIANT * PrintToFile = &vtMissing,
        VARIANT * Collate = &vtMissing,
        VARIANT * FileName = &vtMissing,
        VARIANT * ActivePrinterMacGX = &vtMissing,
        VARIANT * ManualDuplexPrint = &vtMissing );
    HRESULT LookupNameProperties (
        _bstr_t Name );
    HRESULT SubstituteFont (
        _bstr_t UnavailableFont,
        _bstr_t SubstituteFont );
    VARIANT_BOOL Repeat (
        VARIANT * Times = &vtMissing );
    HRESULT DDEExecute (
        long Channel,
        _bstr_t Command );
    long DDEInitiate (
        _bstr_t App,
        _bstr_t Topic );
    HRESULT DDEPoke (
        long Channel,
        _bstr_t Item,
        _bstr_t Data );
    _bstr_t DDERequest (
        long Channel,
        _bstr_t Item );
    HRESULT DDETerminate (
        long Channel );
    HRESULT DDETerminateAll ( );
    long BuildKeyCode (
        enum WdKey Arg1,
        VARIANT * Arg2 = &vtMissing,
        VARIANT * Arg3 = &vtMissing,
        VARIANT * Arg4 = &vtMissing );
    _bstr_t KeyString (
        long KeyCode,
        VARIANT * KeyCode2 = &vtMissing );
    HRESULT OrganizerCopy (
        _bstr_t Source,
        _bstr_t Destination,
        _bstr_t Name,
        enum WdOrganizerObject Object );
    HRESULT OrganizerDelete (
        _bstr_t Source,
        _bstr_t Name,
        enum WdOrganizerObject Object );
    HRESULT OrganizerRename (
        _bstr_t Source,
        _bstr_t Name,
        _bstr_t NewName,
        enum WdOrganizerObject Object );
    HRESULT AddAddress (
        SAFEARRAY * * TagID,
        SAFEARRAY * * Value );
    _bstr_t GetAddress (
        VARIANT * Name = &vtMissing,
        VARIANT * AddressProperties = &vtMissing,
        VARIANT * UseAutoText = &vtMissing,
        VARIANT * DisplaySelectDialog = &vtMissing,
        VARIANT * SelectDialog = &vtMissing,
        VARIANT * CheckNamesDialog = &vtMissing,
        VARIANT * RecentAddressesChoice = &vtMissing,
        VARIANT * UpdateRecentAddresses = &vtMissing );
    VARIANT_BOOL CheckGrammar (
        _bstr_t String );
    VARIANT_BOOL CheckSpelling (
        _bstr_t Word,
        VARIANT * CustomDictionary = &vtMissing,
        VARIANT * IgnoreUppercase = &vtMissing,
        VARIANT * MainDictionary = &vtMissing,
        VARIANT * CustomDictionary2 = &vtMissing,
        VARIANT * CustomDictionary3 = &vtMissing,
        VARIANT * CustomDictionary4 = &vtMissing,
        VARIANT * CustomDictionary5 = &vtMissing,
        VARIANT * CustomDictionary6 = &vtMissing,
        VARIANT * CustomDictionary7 = &vtMissing,
        VARIANT * CustomDictionary8 = &vtMissing,
        VARIANT * CustomDictionary9 = &vtMissing,
        VARIANT * CustomDictionary10 = &vtMissing );
    HRESULT ResetIgnoreAll ( );
    SpellingSuggestionsPtr GetSpellingSuggestions (
        _bstr_t Word,
        VARIANT * CustomDictionary = &vtMissing,
        VARIANT * IgnoreUppercase = &vtMissing,
        VARIANT * MainDictionary = &vtMissing,
        VARIANT * SuggestionMode = &vtMissing,
        VARIANT * CustomDictionary2 = &vtMissing,
        VARIANT * CustomDictionary3 = &vtMissing,
        VARIANT * CustomDictionary4 = &vtMissing,
        VARIANT * CustomDictionary5 = &vtMissing,
        VARIANT * CustomDictionary6 = &vtMissing,
        VARIANT * CustomDictionary7 = &vtMissing,
        VARIANT * CustomDictionary8 = &vtMissing,
        VARIANT * CustomDictionary9 = &vtMissing,
        VARIANT * CustomDictionary10 = &vtMissing );
    HRESULT GoBack ( );
    HRESULT Help (
        VARIANT * HelpType );
    HRESULT AutomaticChange ( );
    HRESULT ShowMe ( );
    HRESULT HelpTool ( );
    WindowPtr NewWindow ( );
    HRESULT ListCommands (
        VARIANT_BOOL ListAllCommands );
    HRESULT ShowClipboard ( );
    HRESULT OnTime (
        VARIANT * When,
        _bstr_t Name,
        VARIANT * Tolerance = &vtMissing );
    HRESULT NextLetter ( );
    short MountVolume (
        _bstr_t Zone,
        _bstr_t Server,
        _bstr_t Volume,
        VARIANT * User = &vtMissing,
        VARIANT * UserPassword = &vtMissing,
        VARIANT * VolumePassword = &vtMissing );
    _bstr_t CleanString (
        _bstr_t String );
    HRESULT SendFax ( );
    HRESULT ChangeFileOpenDirectory (
        _bstr_t Path );
    HRESULT RunOld (
        _bstr_t MacroName );
    HRESULT GoForward ( );
    HRESULT Move (
        long Left,
        long Top );
    HRESULT Resize (
        long Width,
        long Height );
    float InchesToPoints (
        float Inches );
    float CentimetersToPoints (
        float Centimeters );
    float MillimetersToPoints (
        float Millimeters );
    float PicasToPoints (
        float Picas );
    float LinesToPoints (
        float Lines );
    float PointsToInches (
        float Points );
    float PointsToCentimeters (
        float Points );
    float PointsToMillimeters (
        float Points );
    float PointsToPicas (
        float Points );
    float PointsToLines (
        float Points );
    HRESULT Activate ( );
    float PointsToPixels (
        float Points,
        VARIANT * fVertical = &vtMissing );
    float PixelsToPoints (
        float Pixels,
        VARIANT * fVertical = &vtMissing );
    HRESULT KeyboardLatin ( );
    HRESULT KeyboardBidi ( );
    HRESULT ToggleKeyboard ( );
    long Keyboard (
        long LangId );
    _bstr_t ProductCode ( );
    DefaultWebOptionsPtr DefaultWebOptions ( );
    HRESULT DiscussionSupport (
        VARIANT * Range,
        VARIANT * cid,
        VARIANT * piCSE );
    HRESULT SetDefaultTheme (
        _bstr_t Name,
        enum WdDocumentMedium DocumentType );
    _bstr_t GetDefaultTheme (
        enum WdDocumentMedium DocumentType );
    EmailOptionsPtr GetEmailOptions ( );
    enum Office::MsoLanguageID GetLanguage ( );
    Office::COMAddInsPtr GetCOMAddIns ( );
    VARIANT_BOOL GetCheckLanguage ( );
    void PutCheckLanguage (
        VARIANT_BOOL prop );
    Office::LanguageSettingsPtr GetLanguageSettings ( );
    VARIANT_BOOL GetDummy1 ( );
    Office::AnswerWizardPtr GetAnswerWizard ( );
    enum Office::MsoFeatureInstall GetFeatureInstall ( );
    void PutFeatureInstall (
        enum Office::MsoFeatureInstall prop );
    HRESULT PrintOut (
        VARIANT * Background = &vtMissing,
        VARIANT * Append = &vtMissing,
        VARIANT * Range = &vtMissing,
        VARIANT * OutputFileName = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * Item = &vtMissing,
        VARIANT * Copies = &vtMissing,
        VARIANT * Pages = &vtMissing,
        VARIANT * PageType = &vtMissing,
        VARIANT * PrintToFile = &vtMissing,
        VARIANT * Collate = &vtMissing,
        VARIANT * FileName = &vtMissing,
        VARIANT * ActivePrinterMacGX = &vtMissing,
        VARIANT * ManualDuplexPrint = &vtMissing,
        VARIANT * PrintZoomColumn = &vtMissing,
        VARIANT * PrintZoomRow = &vtMissing,
        VARIANT * PrintZoomPaperWidth = &vtMissing,
        VARIANT * PrintZoomPaperHeight = &vtMissing );
    _variant_t Run (
        _bstr_t MacroName,
        VARIANT * varg1 = &vtMissing,
        VARIANT * varg2 = &vtMissing,
        VARIANT * varg3 = &vtMissing,
        VARIANT * varg4 = &vtMissing,
        VARIANT * varg5 = &vtMissing,
        VARIANT * varg6 = &vtMissing,
        VARIANT * varg7 = &vtMissing,
        VARIANT * varg8 = &vtMissing,
        VARIANT * varg9 = &vtMissing,
        VARIANT * varg10 = &vtMissing,
        VARIANT * varg11 = &vtMissing,
        VARIANT * varg12 = &vtMissing,
        VARIANT * varg13 = &vtMissing,
        VARIANT * varg14 = &vtMissing,
        VARIANT * varg15 = &vtMissing,
        VARIANT * varg16 = &vtMissing,
        VARIANT * varg17 = &vtMissing,
        VARIANT * varg18 = &vtMissing,
        VARIANT * varg19 = &vtMissing,
        VARIANT * varg20 = &vtMissing,
        VARIANT * varg21 = &vtMissing,
        VARIANT * varg22 = &vtMissing,
        VARIANT * varg23 = &vtMissing,
        VARIANT * varg24 = &vtMissing,
        VARIANT * varg25 = &vtMissing,
        VARIANT * varg26 = &vtMissing,
        VARIANT * varg27 = &vtMissing,
        VARIANT * varg28 = &vtMissing,
        VARIANT * varg29 = &vtMissing,
        VARIANT * varg30 = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Documents (
        struct Documents * * prop ) = 0;
    virtual HRESULT __stdcall get_Windows (
        struct Windows * * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveDocument (
        struct _Document * * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveWindow (
        struct Window * * prop ) = 0;
    virtual HRESULT __stdcall get_Selection (
        struct Selection * * prop ) = 0;
    virtual HRESULT __stdcall get_WordBasic (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_RecentFiles (
        struct RecentFiles * * prop ) = 0;
    virtual HRESULT __stdcall get_NormalTemplate (
        struct Template * * prop ) = 0;
    virtual HRESULT __stdcall get_System (
        struct System * * prop ) = 0;
    virtual HRESULT __stdcall get_AutoCorrect (
        struct AutoCorrect * * prop ) = 0;
    virtual HRESULT __stdcall get_FontNames (
        struct FontNames * * prop ) = 0;
    virtual HRESULT __stdcall get_LandscapeFontNames (
        struct FontNames * * prop ) = 0;
    virtual HRESULT __stdcall get_PortraitFontNames (
        struct FontNames * * prop ) = 0;
    virtual HRESULT __stdcall get_Languages (
        struct Languages * * prop ) = 0;
    virtual HRESULT __stdcall get_Assistant (
        struct Office::Assistant * * prop ) = 0;
    virtual HRESULT __stdcall get_Browser (
        struct Browser * * prop ) = 0;
    virtual HRESULT __stdcall get_FileConverters (
        struct FileConverters * * prop ) = 0;
    virtual HRESULT __stdcall get_MailingLabel (
        struct MailingLabel * * prop ) = 0;
    virtual HRESULT __stdcall get_Dialogs (
        struct Dialogs * * prop ) = 0;
    virtual HRESULT __stdcall get_CaptionLabels (
        struct CaptionLabels * * prop ) = 0;
    virtual HRESULT __stdcall get_AutoCaptions (
        struct AutoCaptions * * prop ) = 0;
    virtual HRESULT __stdcall get_AddIns (
        struct AddIns * * prop ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Version (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_ScreenUpdating (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ScreenUpdating (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PrintPreview (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintPreview (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Tasks (
        struct Tasks * * prop ) = 0;
    virtual HRESULT __stdcall get_DisplayStatusBar (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayStatusBar (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SpecialMode (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_UsableWidth (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_UsableHeight (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_MathCoprocessorAvailable (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_MouseAvailable (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_International (
        enum WdInternationalIndex Index,
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Build (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_CapsLock (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_NumLock (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_UserName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_UserName (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_UserInitials (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_UserInitials (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_UserAddress (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_UserAddress (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_MacroContainer (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_DisplayRecentFiles (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayRecentFiles (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_CommandBars (
        struct Office::_CommandBars * * prop ) = 0;
    virtual HRESULT __stdcall get_SynonymInfo (
        BSTR Word,
        VARIANT * LanguageID,
        struct SynonymInfo * * prop ) = 0;
    virtual HRESULT __stdcall get_VBE (
        struct VBIDE::VBE * * prop ) = 0;
    virtual HRESULT __stdcall get_DefaultSaveFormat (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultSaveFormat (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_ListGalleries (
        struct ListGalleries * * prop ) = 0;
    virtual HRESULT __stdcall get_ActivePrinter (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ActivePrinter (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Templates (
        struct Templates * * prop ) = 0;
    virtual HRESULT __stdcall get_CustomizationContext (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall put_CustomizationContext (
        IDispatch * prop ) = 0;
    virtual HRESULT __stdcall get_KeyBindings (
        struct KeyBindings * * prop ) = 0;
    virtual HRESULT __stdcall get_KeysBoundTo (
        enum WdKeyCategory KeyCategory,
        BSTR Command,
        VARIANT * CommandParameter,
        struct KeysBoundTo * * prop ) = 0;
    virtual HRESULT __stdcall get_FindKey (
        long KeyCode,
        VARIANT * KeyCode2,
        struct KeyBinding * * prop ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_DisplayScrollBars (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayScrollBars (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_StartupPath (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_StartupPath (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_BackgroundSavingStatus (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_BackgroundPrintingStatus (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Left (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        long prop ) = 0;
    virtual HRESULT __stdcall get_WindowState (
        enum WdWindowState * prop ) = 0;
    virtual HRESULT __stdcall put_WindowState (
        enum WdWindowState prop ) = 0;
    virtual HRESULT __stdcall get_DisplayAutoCompleteTips (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayAutoCompleteTips (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Options (
        struct Options * * prop ) = 0;
    virtual HRESULT __stdcall get_DisplayAlerts (
        enum WdAlertLevel * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayAlerts (
        enum WdAlertLevel prop ) = 0;
    virtual HRESULT __stdcall get_CustomDictionaries (
        struct Dictionaries * * prop ) = 0;
    virtual HRESULT __stdcall get_PathSeparator (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_StatusBar (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall get_MAPIAvailable (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_DisplayScreenTips (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayScreenTips (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_EnableCancelKey (
        enum WdEnableCancelKey * prop ) = 0;
    virtual HRESULT __stdcall put_EnableCancelKey (
        enum WdEnableCancelKey prop ) = 0;
    virtual HRESULT __stdcall get_UserControl (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_FileSearch (
        struct Office::FileSearch * * prop ) = 0;
    virtual HRESULT __stdcall get_MailSystem (
        enum WdMailSystem * prop ) = 0;
    virtual HRESULT __stdcall get_DefaultTableSeparator (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultTableSeparator (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_ShowVisualBasicEditor (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowVisualBasicEditor (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_BrowseExtraFileTypes (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_BrowseExtraFileTypes (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_IsObjectValid (
        IDispatch * Object,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_HangulHanjaDictionaries (
        struct HangulHanjaConversionDictionaries * * prop ) = 0;
    virtual HRESULT __stdcall get_MailMessage (
        struct MailMessage * * prop ) = 0;
    virtual HRESULT __stdcall get_FocusInMailHeader (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_Quit (
        VARIANT * SaveChanges = &vtMissing,
        VARIANT * OriginalFormat = &vtMissing,
        VARIANT * RouteDocument = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ScreenRefresh ( ) = 0;
    virtual HRESULT __stdcall raw_PrintOutOld (
        VARIANT * Background = &vtMissing,
        VARIANT * Append = &vtMissing,
        VARIANT * Range = &vtMissing,
        VARIANT * OutputFileName = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * Item = &vtMissing,
        VARIANT * Copies = &vtMissing,
        VARIANT * Pages = &vtMissing,
        VARIANT * PageType = &vtMissing,
        VARIANT * PrintToFile = &vtMissing,
        VARIANT * Collate = &vtMissing,
        VARIANT * FileName = &vtMissing,
        VARIANT * ActivePrinterMacGX = &vtMissing,
        VARIANT * ManualDuplexPrint = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_LookupNameProperties (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall raw_SubstituteFont (
        BSTR UnavailableFont,
        BSTR SubstituteFont ) = 0;
    virtual HRESULT __stdcall raw_Repeat (
        VARIANT * Times,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_DDEExecute (
        long Channel,
        BSTR Command ) = 0;
    virtual HRESULT __stdcall raw_DDEInitiate (
        BSTR App,
        BSTR Topic,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_DDEPoke (
        long Channel,
        BSTR Item,
        BSTR Data ) = 0;
    virtual HRESULT __stdcall raw_DDERequest (
        long Channel,
        BSTR Item,
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_DDETerminate (
        long Channel ) = 0;
    virtual HRESULT __stdcall raw_DDETerminateAll ( ) = 0;
    virtual HRESULT __stdcall raw_BuildKeyCode (
        enum WdKey Arg1,
        VARIANT * Arg2,
        VARIANT * Arg3,
        VARIANT * Arg4,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_KeyString (
        long KeyCode,
        VARIANT * KeyCode2,
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_OrganizerCopy (
        BSTR Source,
        BSTR Destination,
        BSTR Name,
        enum WdOrganizerObject Object ) = 0;
    virtual HRESULT __stdcall raw_OrganizerDelete (
        BSTR Source,
        BSTR Name,
        enum WdOrganizerObject Object ) = 0;
    virtual HRESULT __stdcall raw_OrganizerRename (
        BSTR Source,
        BSTR Name,
        BSTR NewName,
        enum WdOrganizerObject Object ) = 0;
    virtual HRESULT __stdcall raw_AddAddress (
        SAFEARRAY * * TagID,
        SAFEARRAY * * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAddress (
        VARIANT * Name,
        VARIANT * AddressProperties,
        VARIANT * UseAutoText,
        VARIANT * DisplaySelectDialog,
        VARIANT * SelectDialog,
        VARIANT * CheckNamesDialog,
        VARIANT * RecentAddressesChoice,
        VARIANT * UpdateRecentAddresses,
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_CheckGrammar (
        BSTR String,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        BSTR Word,
        VARIANT * CustomDictionary,
        VARIANT * IgnoreUppercase,
        VARIANT * MainDictionary,
        VARIANT * CustomDictionary2,
        VARIANT * CustomDictionary3,
        VARIANT * CustomDictionary4,
        VARIANT * CustomDictionary5,
        VARIANT * CustomDictionary6,
        VARIANT * CustomDictionary7,
        VARIANT * CustomDictionary8,
        VARIANT * CustomDictionary9,
        VARIANT * CustomDictionary10,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_ResetIgnoreAll ( ) = 0;
    virtual HRESULT __stdcall raw_GetSpellingSuggestions (
        BSTR Word,
        VARIANT * CustomDictionary,
        VARIANT * IgnoreUppercase,
        VARIANT * MainDictionary,
        VARIANT * SuggestionMode,
        VARIANT * CustomDictionary2,
        VARIANT * CustomDictionary3,
        VARIANT * CustomDictionary4,
        VARIANT * CustomDictionary5,
        VARIANT * CustomDictionary6,
        VARIANT * CustomDictionary7,
        VARIANT * CustomDictionary8,
        VARIANT * CustomDictionary9,
        VARIANT * CustomDictionary10,
        struct SpellingSuggestions * * prop ) = 0;
    virtual HRESULT __stdcall raw_GoBack ( ) = 0;
    virtual HRESULT __stdcall raw_Help (
        VARIANT * HelpType ) = 0;
    virtual HRESULT __stdcall raw_AutomaticChange ( ) = 0;
    virtual HRESULT __stdcall raw_ShowMe ( ) = 0;
    virtual HRESULT __stdcall raw_HelpTool ( ) = 0;
    virtual HRESULT __stdcall raw_NewWindow (
        struct Window * * prop ) = 0;
    virtual HRESULT __stdcall raw_ListCommands (
        VARIANT_BOOL ListAllCommands ) = 0;
    virtual HRESULT __stdcall raw_ShowClipboard ( ) = 0;
    virtual HRESULT __stdcall raw_OnTime (
        VARIANT * When,
        BSTR Name,
        VARIANT * Tolerance = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_NextLetter ( ) = 0;
    virtual HRESULT __stdcall raw_MountVolume (
        BSTR Zone,
        BSTR Server,
        BSTR Volume,
        VARIANT * User,
        VARIANT * UserPassword,
        VARIANT * VolumePassword,
        short * prop ) = 0;
    virtual HRESULT __stdcall raw_CleanString (
        BSTR String,
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_SendFax ( ) = 0;
    virtual HRESULT __stdcall raw_ChangeFileOpenDirectory (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall raw_RunOld (
        BSTR MacroName ) = 0;
    virtual HRESULT __stdcall raw_GoForward ( ) = 0;
    virtual HRESULT __stdcall raw_Move (
        long Left,
        long Top ) = 0;
    virtual HRESULT __stdcall raw_Resize (
        long Width,
        long Height ) = 0;
    virtual HRESULT __stdcall raw_InchesToPoints (
        float Inches,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_CentimetersToPoints (
        float Centimeters,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_MillimetersToPoints (
        float Millimeters,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PicasToPoints (
        float Picas,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_LinesToPoints (
        float Lines,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PointsToInches (
        float Points,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PointsToCentimeters (
        float Points,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PointsToMillimeters (
        float Points,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PointsToPicas (
        float Points,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PointsToLines (
        float Points,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall raw_PointsToPixels (
        float Points,
        VARIANT * fVertical,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PixelsToPoints (
        float Pixels,
        VARIANT * fVertical,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_KeyboardLatin ( ) = 0;
    virtual HRESULT __stdcall raw_KeyboardBidi ( ) = 0;
    virtual HRESULT __stdcall raw_ToggleKeyboard ( ) = 0;
    virtual HRESULT __stdcall raw_Keyboard (
        long LangId,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_ProductCode (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_DefaultWebOptions (
        struct DefaultWebOptions * * prop ) = 0;
    virtual HRESULT __stdcall raw_DiscussionSupport (
        VARIANT * Range,
        VARIANT * cid,
        VARIANT * piCSE ) = 0;
    virtual HRESULT __stdcall raw_SetDefaultTheme (
        BSTR Name,
        enum WdDocumentMedium DocumentType ) = 0;
    virtual HRESULT __stdcall raw_GetDefaultTheme (
        enum WdDocumentMedium DocumentType,
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_EmailOptions (
        struct EmailOptions * * prop ) = 0;
    virtual HRESULT __stdcall get_Language (
        enum Office::MsoLanguageID * prop ) = 0;
    virtual HRESULT __stdcall get_COMAddIns (
        struct Office::COMAddIns * * prop ) = 0;
    virtual HRESULT __stdcall get_CheckLanguage (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CheckLanguage (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_LanguageSettings (
        struct Office::LanguageSettings * * prop ) = 0;
    virtual HRESULT __stdcall get_Dummy1 (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_AnswerWizard (
        struct Office::AnswerWizard * * prop ) = 0;
    virtual HRESULT __stdcall get_FeatureInstall (
        enum Office::MsoFeatureInstall * prop ) = 0;
    virtual HRESULT __stdcall put_FeatureInstall (
        enum Office::MsoFeatureInstall prop ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT * Background = &vtMissing,
        VARIANT * Append = &vtMissing,
        VARIANT * Range = &vtMissing,
        VARIANT * OutputFileName = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * Item = &vtMissing,
        VARIANT * Copies = &vtMissing,
        VARIANT * Pages = &vtMissing,
        VARIANT * PageType = &vtMissing,
        VARIANT * PrintToFile = &vtMissing,
        VARIANT * Collate = &vtMissing,
        VARIANT * FileName = &vtMissing,
        VARIANT * ActivePrinterMacGX = &vtMissing,
        VARIANT * ManualDuplexPrint = &vtMissing,
        VARIANT * PrintZoomColumn = &vtMissing,
        VARIANT * PrintZoomRow = &vtMissing,
        VARIANT * PrintZoomPaperWidth = &vtMissing,
        VARIANT * PrintZoomPaperHeight = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Run (
        BSTR MacroName,
        VARIANT * varg1,
        VARIANT * varg2,
        VARIANT * varg3,
        VARIANT * varg4,
        VARIANT * varg5,
        VARIANT * varg6,
        VARIANT * varg7,
        VARIANT * varg8,
        VARIANT * varg9,
        VARIANT * varg10,
        VARIANT * varg11,
        VARIANT * varg12,
        VARIANT * varg13,
        VARIANT * varg14,
        VARIANT * varg15,
        VARIANT * varg16,
        VARIANT * varg17,
        VARIANT * varg18,
        VARIANT * varg19,
        VARIANT * varg20,
        VARIANT * varg21,
        VARIANT * varg22,
        VARIANT * varg23,
        VARIANT * varg24,
        VARIANT * varg25,
        VARIANT * varg26,
        VARIANT * varg27,
        VARIANT * varg28,
        VARIANT * varg29,
        VARIANT * varg30,
        VARIANT * prop ) = 0;
};

struct __declspec(uuid("000209b9-0000-0000-c000-000000000046"))
_Global : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDocuments))
    DocumentsPtr Documents;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetActiveDocument))
    _DocumentPtr ActiveDocument;
    __declspec(property(get=GetActiveWindow))
    WindowPtr ActiveWindow;
    __declspec(property(get=GetSelection))
    SelectionPtr Selection;
    __declspec(property(get=GetWordBasic))
    IDispatchPtr WordBasic;
    __declspec(property(get=GetRecentFiles))
    RecentFilesPtr RecentFiles;
    __declspec(property(get=GetNormalTemplate))
    TemplatePtr NormalTemplate;
    __declspec(property(get=GetSystem))
    SystemPtr System;
    __declspec(property(get=GetAutoCorrect))
    AutoCorrectPtr AutoCorrect;
    __declspec(property(get=GetFontNames))
    FontNamesPtr FontNames;
    __declspec(property(get=GetLandscapeFontNames))
    FontNamesPtr LandscapeFontNames;
    __declspec(property(get=GetPortraitFontNames))
    FontNamesPtr PortraitFontNames;
    __declspec(property(get=GetLanguages))
    LanguagesPtr Languages;
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;
    __declspec(property(get=GetOptions))
    OptionsPtr Options;
    __declspec(property(get=GetFileConverters))
    FileConvertersPtr FileConverters;
    __declspec(property(get=GetCustomDictionaries))
    DictionariesPtr CustomDictionaries;
    __declspec(property(get=GetDialogs))
    DialogsPtr Dialogs;
    __declspec(property(get=GetCaptionLabels))
    CaptionLabelsPtr CaptionLabels;
    __declspec(property(get=GetAutoCaptions))
    AutoCaptionsPtr AutoCaptions;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPrintPreview,put=PutPrintPreview))
    VARIANT_BOOL PrintPreview;
    __declspec(property(get=GetTasks))
    TasksPtr Tasks;
    __declspec(property(get=GetShowVisualBasicEditor,put=PutShowVisualBasicEditor))
    VARIANT_BOOL ShowVisualBasicEditor;
    __declspec(property(get=GetIsObjectValid))
    VARIANT_BOOL IsObjectValid[];
    __declspec(property(get=GetHangulHanjaDictionaries))
    HangulHanjaConversionDictionariesPtr HangulHanjaDictionaries;
    __declspec(property(get=GetLanguageSettings))
    Office::LanguageSettingsPtr LanguageSettings;
    __declspec(property(get=GetAnswerWizard))
    Office::AnswerWizardPtr AnswerWizard;
    __declspec(property(get=GetMacroContainer))
    IDispatchPtr MacroContainer;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetSynonymInfo))
    SynonymInfoPtr SynonymInfo[][];
    __declspec(property(get=GetVBE))
    VBIDE::VBEPtr VBE;
    __declspec(property(get=GetListGalleries))
    ListGalleriesPtr ListGalleries;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter;
    __declspec(property(get=GetTemplates))
    TemplatesPtr Templates;
    __declspec(property(get=GetCustomizationContext,put=PutCustomizationContext))
    IDispatchPtr CustomizationContext;
    __declspec(property(get=GetKeyBindings))
    KeyBindingsPtr KeyBindings;
    __declspec(property(get=GetKeysBoundTo))
    KeysBoundToPtr KeysBoundTo[][][];
    __declspec(property(get=GetFindKey))
    KeyBindingPtr FindKey[][];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    DocumentsPtr GetDocuments ( );
    WindowsPtr GetWindows ( );
    _DocumentPtr GetActiveDocument ( );
    WindowPtr GetActiveWindow ( );
    SelectionPtr GetSelection ( );
    IDispatchPtr GetWordBasic ( );
    VARIANT_BOOL GetPrintPreview ( );
    void PutPrintPreview (
        VARIANT_BOOL prop );
    RecentFilesPtr GetRecentFiles ( );
    TemplatePtr GetNormalTemplate ( );
    SystemPtr GetSystem ( );
    AutoCorrectPtr GetAutoCorrect ( );
    FontNamesPtr GetFontNames ( );
    FontNamesPtr GetLandscapeFontNames ( );
    FontNamesPtr GetPortraitFontNames ( );
    LanguagesPtr GetLanguages ( );
    Office::AssistantPtr GetAssistant ( );
    FileConvertersPtr GetFileConverters ( );
    DialogsPtr GetDialogs ( );
    CaptionLabelsPtr GetCaptionLabels ( );
    AutoCaptionsPtr GetAutoCaptions ( );
    AddInsPtr GetAddIns ( );
    TasksPtr GetTasks ( );
    IDispatchPtr GetMacroContainer ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    SynonymInfoPtr GetSynonymInfo (
        _bstr_t Word,
        VARIANT * LanguageID = &vtMissing );
    VBIDE::VBEPtr GetVBE ( );
    ListGalleriesPtr GetListGalleries ( );
    _bstr_t GetActivePrinter ( );
    void PutActivePrinter (
        _bstr_t prop );
    TemplatesPtr GetTemplates ( );
    IDispatchPtr GetCustomizationContext ( );
    void PutCustomizationContext (
        IDispatch * prop );
    KeyBindingsPtr GetKeyBindings ( );
    KeysBoundToPtr GetKeysBoundTo (
        enum WdKeyCategory KeyCategory,
        _bstr_t Command,
        VARIANT * CommandParameter = &vtMissing );
    KeyBindingPtr GetFindKey (
        long KeyCode,
        VARIANT * KeyCode2 = &vtMissing );
    OptionsPtr GetOptions ( );
    DictionariesPtr GetCustomDictionaries ( );
    void PutStatusBar (
        _bstr_t _arg1 );
    VARIANT_BOOL GetShowVisualBasicEditor ( );
    void PutShowVisualBasicEditor (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetIsObjectValid (
        IDispatch * Object );
    HangulHanjaConversionDictionariesPtr GetHangulHanjaDictionaries ( );
    VARIANT_BOOL Repeat (
        VARIANT * Times = &vtMissing );
    HRESULT DDEExecute (
        long Channel,
        _bstr_t Command );
    long DDEInitiate (
        _bstr_t App,
        _bstr_t Topic );
    HRESULT DDEPoke (
        long Channel,
        _bstr_t Item,
        _bstr_t Data );
    _bstr_t DDERequest (
        long Channel,
        _bstr_t Item );
    HRESULT DDETerminate (
        long Channel );
    HRESULT DDETerminateAll ( );
    long BuildKeyCode (
        enum WdKey Arg1,
        VARIANT * Arg2 = &vtMissing,
        VARIANT * Arg3 = &vtMissing,
        VARIANT * Arg4 = &vtMissing );
    _bstr_t KeyString (
        long KeyCode,
        VARIANT * KeyCode2 = &vtMissing );
    VARIANT_BOOL CheckSpelling (
        _bstr_t Word,
        VARIANT * CustomDictionary = &vtMissing,
        VARIANT * IgnoreUppercase = &vtMissing,
        VARIANT * MainDictionary = &vtMissing,
        VARIANT * CustomDictionary2 = &vtMissing,
        VARIANT * CustomDictionary3 = &vtMissing,
        VARIANT * CustomDictionary4 = &vtMissing,
        VARIANT * CustomDictionary5 = &vtMissing,
        VARIANT * CustomDictionary6 = &vtMissing,
        VARIANT * CustomDictionary7 = &vtMissing,
        VARIANT * CustomDictionary8 = &vtMissing,
        VARIANT * CustomDictionary9 = &vtMissing,
        VARIANT * CustomDictionary10 = &vtMissing );
    SpellingSuggestionsPtr GetSpellingSuggestions (
        _bstr_t Word,
        VARIANT * CustomDictionary = &vtMissing,
        VARIANT * IgnoreUppercase = &vtMissing,
        VARIANT * MainDictionary = &vtMissing,
        VARIANT * SuggestionMode = &vtMissing,
        VARIANT * CustomDictionary2 = &vtMissing,
        VARIANT * CustomDictionary3 = &vtMissing,
        VARIANT * CustomDictionary4 = &vtMissing,
        VARIANT * CustomDictionary5 = &vtMissing,
        VARIANT * CustomDictionary6 = &vtMissing,
        VARIANT * CustomDictionary7 = &vtMissing,
        VARIANT * CustomDictionary8 = &vtMissing,
        VARIANT * CustomDictionary9 = &vtMissing,
        VARIANT * CustomDictionary10 = &vtMissing );
    HRESULT Help (
        VARIANT * HelpType );
    WindowPtr NewWindow ( );
    _bstr_t CleanString (
        _bstr_t String );
    HRESULT ChangeFileOpenDirectory (
        _bstr_t Path );
    float InchesToPoints (
        float Inches );
    float CentimetersToPoints (
        float Centimeters );
    float MillimetersToPoints (
        float Millimeters );
    float PicasToPoints (
        float Picas );
    float LinesToPoints (
        float Lines );
    float PointsToInches (
        float Points );
    float PointsToCentimeters (
        float Points );
    float PointsToMillimeters (
        float Points );
    float PointsToPicas (
        float Points );
    float PointsToLines (
        float Points );
    float PointsToPixels (
        float Points,
        VARIANT * fVertical = &vtMissing );
    float PixelsToPoints (
        float Pixels,
        VARIANT * fVertical = &vtMissing );
    Office::LanguageSettingsPtr GetLanguageSettings ( );
    Office::AnswerWizardPtr GetAnswerWizard ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Documents (
        struct Documents * * prop ) = 0;
    virtual HRESULT __stdcall get_Windows (
        struct Windows * * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveDocument (
        struct _Document * * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveWindow (
        struct Window * * prop ) = 0;
    virtual HRESULT __stdcall get_Selection (
        struct Selection * * prop ) = 0;
    virtual HRESULT __stdcall get_WordBasic (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_PrintPreview (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintPreview (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_RecentFiles (
        struct RecentFiles * * prop ) = 0;
    virtual HRESULT __stdcall get_NormalTemplate (
        struct Template * * prop ) = 0;
    virtual HRESULT __stdcall get_System (
        struct System * * prop ) = 0;
    virtual HRESULT __stdcall get_AutoCorrect (
        struct AutoCorrect * * prop ) = 0;
    virtual HRESULT __stdcall get_FontNames (
        struct FontNames * * prop ) = 0;
    virtual HRESULT __stdcall get_LandscapeFontNames (
        struct FontNames * * prop ) = 0;
    virtual HRESULT __stdcall get_PortraitFontNames (
        struct FontNames * * prop ) = 0;
    virtual HRESULT __stdcall get_Languages (
        struct Languages * * prop ) = 0;
    virtual HRESULT __stdcall get_Assistant (
        struct Office::Assistant * * prop ) = 0;
    virtual HRESULT __stdcall get_FileConverters (
        struct FileConverters * * prop ) = 0;
    virtual HRESULT __stdcall get_Dialogs (
        struct Dialogs * * prop ) = 0;
    virtual HRESULT __stdcall get_CaptionLabels (
        struct CaptionLabels * * prop ) = 0;
    virtual HRESULT __stdcall get_AutoCaptions (
        struct AutoCaptions * * prop ) = 0;
    virtual HRESULT __stdcall get_AddIns (
        struct AddIns * * prop ) = 0;
    virtual HRESULT __stdcall get_Tasks (
        struct Tasks * * prop ) = 0;
    virtual HRESULT __stdcall get_MacroContainer (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_CommandBars (
        struct Office::_CommandBars * * prop ) = 0;
    virtual HRESULT __stdcall get_SynonymInfo (
        BSTR Word,
        VARIANT * LanguageID,
        struct SynonymInfo * * prop ) = 0;
    virtual HRESULT __stdcall get_VBE (
        struct VBIDE::VBE * * prop ) = 0;
    virtual HRESULT __stdcall get_ListGalleries (
        struct ListGalleries * * prop ) = 0;
    virtual HRESULT __stdcall get_ActivePrinter (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ActivePrinter (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Templates (
        struct Templates * * prop ) = 0;
    virtual HRESULT __stdcall get_CustomizationContext (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall put_CustomizationContext (
        IDispatch * prop ) = 0;
    virtual HRESULT __stdcall get_KeyBindings (
        struct KeyBindings * * prop ) = 0;
    virtual HRESULT __stdcall get_KeysBoundTo (
        enum WdKeyCategory KeyCategory,
        BSTR Command,
        VARIANT * CommandParameter,
        struct KeysBoundTo * * prop ) = 0;
    virtual HRESULT __stdcall get_FindKey (
        long KeyCode,
        VARIANT * KeyCode2,
        struct KeyBinding * * prop ) = 0;
    virtual HRESULT __stdcall get_Options (
        struct Options * * prop ) = 0;
    virtual HRESULT __stdcall get_CustomDictionaries (
        struct Dictionaries * * prop ) = 0;
    virtual HRESULT __stdcall put_StatusBar (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall get_ShowVisualBasicEditor (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowVisualBasicEditor (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_IsObjectValid (
        IDispatch * Object,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_HangulHanjaDictionaries (
        struct HangulHanjaConversionDictionaries * * prop ) = 0;
    virtual HRESULT __stdcall raw_Repeat (
        VARIANT * Times,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_DDEExecute (
        long Channel,
        BSTR Command ) = 0;
    virtual HRESULT __stdcall raw_DDEInitiate (
        BSTR App,
        BSTR Topic,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_DDEPoke (
        long Channel,
        BSTR Item,
        BSTR Data ) = 0;
    virtual HRESULT __stdcall raw_DDERequest (
        long Channel,
        BSTR Item,
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_DDETerminate (
        long Channel ) = 0;
    virtual HRESULT __stdcall raw_DDETerminateAll ( ) = 0;
    virtual HRESULT __stdcall raw_BuildKeyCode (
        enum WdKey Arg1,
        VARIANT * Arg2,
        VARIANT * Arg3,
        VARIANT * Arg4,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_KeyString (
        long KeyCode,
        VARIANT * KeyCode2,
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        BSTR Word,
        VARIANT * CustomDictionary,
        VARIANT * IgnoreUppercase,
        VARIANT * MainDictionary,
        VARIANT * CustomDictionary2,
        VARIANT * CustomDictionary3,
        VARIANT * CustomDictionary4,
        VARIANT * CustomDictionary5,
        VARIANT * CustomDictionary6,
        VARIANT * CustomDictionary7,
        VARIANT * CustomDictionary8,
        VARIANT * CustomDictionary9,
        VARIANT * CustomDictionary10,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_GetSpellingSuggestions (
        BSTR Word,
        VARIANT * CustomDictionary,
        VARIANT * IgnoreUppercase,
        VARIANT * MainDictionary,
        VARIANT * SuggestionMode,
        VARIANT * CustomDictionary2,
        VARIANT * CustomDictionary3,
        VARIANT * CustomDictionary4,
        VARIANT * CustomDictionary5,
        VARIANT * CustomDictionary6,
        VARIANT * CustomDictionary7,
        VARIANT * CustomDictionary8,
        VARIANT * CustomDictionary9,
        VARIANT * CustomDictionary10,
        struct SpellingSuggestions * * prop ) = 0;
    virtual HRESULT __stdcall raw_Help (
        VARIANT * HelpType ) = 0;
    virtual HRESULT __stdcall raw_NewWindow (
        struct Window * * prop ) = 0;
    virtual HRESULT __stdcall raw_CleanString (
        BSTR String,
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_ChangeFileOpenDirectory (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall raw_InchesToPoints (
        float Inches,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_CentimetersToPoints (
        float Centimeters,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_MillimetersToPoints (
        float Millimeters,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PicasToPoints (
        float Picas,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_LinesToPoints (
        float Lines,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PointsToInches (
        float Points,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PointsToCentimeters (
        float Points,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PointsToMillimeters (
        float Points,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PointsToPicas (
        float Points,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PointsToLines (
        float Points,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PointsToPixels (
        float Points,
        VARIANT * fVertical,
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_PixelsToPoints (
        float Pixels,
        VARIANT * fVertical,
        float * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageSettings (
        struct Office::LanguageSettings * * prop ) = 0;
    virtual HRESULT __stdcall get_AnswerWizard (
        struct Office::AnswerWizard * * prop ) = 0;
};

struct __declspec(uuid("0002096f-0000-0000-c000-000000000046"))
FontNames : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Item (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        BSTR * prop ) = 0;
};

struct __declspec(uuid("0002096e-0000-0000-c000-000000000046"))
Languages : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    LanguagePtr Item (
        VARIANT * Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Language * * prop ) = 0;
};

struct __declspec(uuid("0002096d-0000-0000-c000-000000000046"))
Language : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetID))
    enum WdLanguageID ID;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetActiveGrammarDictionary))
    DictionaryPtr ActiveGrammarDictionary;
    __declspec(property(get=GetActiveHyphenationDictionary))
    DictionaryPtr ActiveHyphenationDictionary;
    __declspec(property(get=GetActiveSpellingDictionary))
    DictionaryPtr ActiveSpellingDictionary;
    __declspec(property(get=GetActiveThesaurusDictionary))
    DictionaryPtr ActiveThesaurusDictionary;
    __declspec(property(get=GetDefaultWritingStyle,put=PutDefaultWritingStyle))
    _bstr_t DefaultWritingStyle;
    __declspec(property(get=GetWritingStyleList))
    _variant_t WritingStyleList;
    __declspec(property(get=GetSpellingDictionaryType,put=PutSpellingDictionaryType))
    enum WdDictionaryType SpellingDictionaryType;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdLanguageID GetID ( );
    _bstr_t GetNameLocal ( );
    _bstr_t GetName ( );
    DictionaryPtr GetActiveGrammarDictionary ( );
    DictionaryPtr GetActiveHyphenationDictionary ( );
    DictionaryPtr GetActiveSpellingDictionary ( );
    DictionaryPtr GetActiveThesaurusDictionary ( );
    _bstr_t GetDefaultWritingStyle ( );
    void PutDefaultWritingStyle (
        _bstr_t prop );
    _variant_t GetWritingStyleList ( );
    enum WdDictionaryType GetSpellingDictionaryType ( );
    void PutSpellingDictionaryType (
        enum WdDictionaryType prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_ID (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall get_NameLocal (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveGrammarDictionary (
        struct Dictionary * * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveHyphenationDictionary (
        struct Dictionary * * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveSpellingDictionary (
        struct Dictionary * * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveThesaurusDictionary (
        struct Dictionary * * prop ) = 0;
    virtual HRESULT __stdcall get_DefaultWritingStyle (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultWritingStyle (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_WritingStyleList (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_SpellingDictionaryType (
        enum WdDictionaryType * prop ) = 0;
    virtual HRESULT __stdcall put_SpellingDictionaryType (
        enum WdDictionaryType prop ) = 0;
};

struct __declspec(uuid("0002096c-0000-0000-c000-000000000046"))
Documents : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _DocumentPtr Item (
        VARIANT * Index );
    HRESULT Close (
        VARIANT * SaveChanges = &vtMissing,
        VARIANT * OriginalFormat = &vtMissing,
        VARIANT * RouteDocument = &vtMissing );
    _DocumentPtr AddOld (
        VARIANT * Template = &vtMissing,
        VARIANT * NewTemplate = &vtMissing );
    _DocumentPtr OpenOld (
        VARIANT * FileName,
        VARIANT * ConfirmConversions = &vtMissing,
        VARIANT * ReadOnly = &vtMissing,
        VARIANT * AddToRecentFiles = &vtMissing,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * PasswordTemplate = &vtMissing,
        VARIANT * Revert = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * WritePasswordTemplate = &vtMissing,
        VARIANT * Format = &vtMissing );
    HRESULT Save (
        VARIANT * NoPrompt = &vtMissing,
        VARIANT * OriginalFormat = &vtMissing );
    _DocumentPtr Add (
        VARIANT * Template = &vtMissing,
        VARIANT * NewTemplate = &vtMissing,
        VARIANT * DocumentType = &vtMissing,
        VARIANT * Visible = &vtMissing );
    _DocumentPtr Open (
        VARIANT * FileName,
        VARIANT * ConfirmConversions = &vtMissing,
        VARIANT * ReadOnly = &vtMissing,
        VARIANT * AddToRecentFiles = &vtMissing,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * PasswordTemplate = &vtMissing,
        VARIANT * Revert = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * WritePasswordTemplate = &vtMissing,
        VARIANT * Format = &vtMissing,
        VARIANT * Encoding = &vtMissing,
        VARIANT * Visible = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct _Document * * prop ) = 0;
    virtual HRESULT __stdcall raw_Close (
        VARIANT * SaveChanges = &vtMissing,
        VARIANT * OriginalFormat = &vtMissing,
        VARIANT * RouteDocument = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_AddOld (
        VARIANT * Template,
        VARIANT * NewTemplate,
        struct _Document * * prop ) = 0;
    virtual HRESULT __stdcall raw_OpenOld (
        VARIANT * FileName,
        VARIANT * ConfirmConversions,
        VARIANT * ReadOnly,
        VARIANT * AddToRecentFiles,
        VARIANT * PasswordDocument,
        VARIANT * PasswordTemplate,
        VARIANT * Revert,
        VARIANT * WritePasswordDocument,
        VARIANT * WritePasswordTemplate,
        VARIANT * Format,
        struct _Document * * prop ) = 0;
    virtual HRESULT __stdcall raw_Save (
        VARIANT * NoPrompt = &vtMissing,
        VARIANT * OriginalFormat = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * Template,
        VARIANT * NewTemplate,
        VARIANT * DocumentType,
        VARIANT * Visible,
        struct _Document * * prop ) = 0;
    virtual HRESULT __stdcall raw_Open (
        VARIANT * FileName,
        VARIANT * ConfirmConversions,
        VARIANT * ReadOnly,
        VARIANT * AddToRecentFiles,
        VARIANT * PasswordDocument,
        VARIANT * PasswordTemplate,
        VARIANT * Revert,
        VARIANT * WritePasswordDocument,
        VARIANT * WritePasswordTemplate,
        VARIANT * Format,
        VARIANT * Encoding,
        VARIANT * Visible,
        struct _Document * * prop ) = 0;
};

struct __declspec(uuid("0002096b-0000-0000-c000-000000000046"))
_Document : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCustomDocumentProperties))
    IDispatchPtr CustomDocumentProperties;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetBookmarks))
    BookmarksPtr Bookmarks;
    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetTables))
    TablesPtr Tables;
    __declspec(property(get=GetFootnotes))
    FootnotesPtr Footnotes;
    __declspec(property(get=GetEndnotes))
    EndnotesPtr Endnotes;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetType))
    enum WdDocumentType Type;
    __declspec(property(get=GetAutoHyphenation,put=PutAutoHyphenation))
    VARIANT_BOOL AutoHyphenation;
    __declspec(property(get=GetHyphenateCaps,put=PutHyphenateCaps))
    VARIANT_BOOL HyphenateCaps;
    __declspec(property(get=GetHyphenationZone,put=PutHyphenationZone))
    long HyphenationZone;
    __declspec(property(get=GetConsecutiveHyphensLimit,put=PutConsecutiveHyphensLimit))
    long ConsecutiveHyphensLimit;
    __declspec(property(get=GetSections))
    SectionsPtr Sections;
    __declspec(property(get=GetParagraphs))
    ParagraphsPtr Paragraphs;
    __declspec(property(get=GetWords))
    WordsPtr Words;
    __declspec(property(get=GetSentences))
    SentencesPtr Sentences;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters;
    __declspec(property(get=GetFields))
    FieldsPtr Fields;
    __declspec(property(get=GetFormFields))
    FormFieldsPtr FormFields;
    __declspec(property(get=GetStyles))
    StylesPtr Styles;
    __declspec(property(get=GetFrames))
    FramesPtr Frames;
    __declspec(property(get=GetBuiltInDocumentProperties))
    IDispatchPtr BuiltInDocumentProperties;
    __declspec(property(get=GetTablesOfFigures))
    TablesOfFiguresPtr TablesOfFigures;
    __declspec(property(get=GetVariables))
    VariablesPtr Variables;
    __declspec(property(get=GetMailMerge))
    MailMergePtr MailMerge;
    __declspec(property(get=GetEnvelope))
    EnvelopePtr Envelope;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetRevisions))
    RevisionsPtr Revisions;
    __declspec(property(get=GetTablesOfContents))
    TablesOfContentsPtr TablesOfContents;
    __declspec(property(get=GetTablesOfAuthorities))
    TablesOfAuthoritiesPtr TablesOfAuthorities;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetHasRoutingSlip,put=PutHasRoutingSlip))
    VARIANT_BOOL HasRoutingSlip;
    __declspec(property(get=GetRoutingSlip))
    RoutingSlipPtr RoutingSlip;
    __declspec(property(get=GetRouted))
    VARIANT_BOOL Routed;
    __declspec(property(get=GetTablesOfAuthoritiesCategories))
    TablesOfAuthoritiesCategoriesPtr TablesOfAuthoritiesCategories;
    __declspec(property(get=GetIndexes))
    IndexesPtr Indexes;
    __declspec(property(get=GetSaved,put=PutSaved))
    VARIANT_BOOL Saved;
    __declspec(property(get=GetContent))
    RangePtr Content;
    __declspec(property(get=GetActiveWindow))
    WindowPtr ActiveWindow;
    __declspec(property(get=GetKind,put=PutKind))
    enum WdDocumentKind Kind;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetSubdocuments))
    SubdocumentsPtr Subdocuments;
    __declspec(property(get=GetIsMasterDocument))
    VARIANT_BOOL IsMasterDocument;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDefaultTabStop,put=PutDefaultTabStop))
    float DefaultTabStop;
    __declspec(property(get=GetEmbedTrueTypeFonts,put=PutEmbedTrueTypeFonts))
    VARIANT_BOOL EmbedTrueTypeFonts;
    __declspec(property(get=GetSaveFormsData,put=PutSaveFormsData))
    VARIANT_BOOL SaveFormsData;
    __declspec(property(get=GetReadOnlyRecommended,put=PutReadOnlyRecommended))
    VARIANT_BOOL ReadOnlyRecommended;
    __declspec(property(get=GetSaveSubsetFonts,put=PutSaveSubsetFonts))
    VARIANT_BOOL SaveSubsetFonts;
    __declspec(property(get=GetCompatibility,put=PutCompatibility))
    VARIANT_BOOL Compatibility[];
    __declspec(property(get=GetStoryRanges))
    StoryRangesPtr StoryRanges;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetIsSubdocument))
    VARIANT_BOOL IsSubdocument;
    __declspec(property(get=GetSaveFormat))
    long SaveFormat;
    __declspec(property(get=GetProtectionType))
    enum WdProtectionType ProtectionType;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetListTemplates))
    ListTemplatesPtr ListTemplates;
    __declspec(property(get=GetLists))
    ListsPtr Lists;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetUpdateStylesOnOpen,put=PutUpdateStylesOnOpen))
    VARIANT_BOOL UpdateStylesOnOpen;
    __declspec(property(get=GetInlineShapes))
    InlineShapesPtr InlineShapes;
    __declspec(property(get=GetBackground,put=PutBackground))
    ShapePtr Background;
    __declspec(property(get=GetGrammarChecked,put=PutGrammarChecked))
    VARIANT_BOOL GrammarChecked;
    __declspec(property(get=GetSpellingChecked,put=PutSpellingChecked))
    VARIANT_BOOL SpellingChecked;
    __declspec(property(get=GetShowGrammaticalErrors,put=PutShowGrammaticalErrors))
    VARIANT_BOOL ShowGrammaticalErrors;
    __declspec(property(get=GetShowSpellingErrors,put=PutShowSpellingErrors))
    VARIANT_BOOL ShowSpellingErrors;
    __declspec(property(get=GetVersions))
    VersionsPtr Versions;
    __declspec(property(get=GetShowSummary,put=PutShowSummary))
    VARIANT_BOOL ShowSummary;
    __declspec(property(get=GetSummaryViewMode,put=PutSummaryViewMode))
    enum WdSummaryMode SummaryViewMode;
    __declspec(property(get=GetSummaryLength,put=PutSummaryLength))
    long SummaryLength;
    __declspec(property(get=GetPrintFractionalWidths,put=PutPrintFractionalWidths))
    VARIANT_BOOL PrintFractionalWidths;
    __declspec(property(get=GetPrintPostScriptOverText,put=PutPrintPostScriptOverText))
    VARIANT_BOOL PrintPostScriptOverText;
    __declspec(property(get=GetContainer))
    IDispatchPtr Container;
    __declspec(property(get=GetPrintFormsData,put=PutPrintFormsData))
    VARIANT_BOOL PrintFormsData;
    __declspec(property(get=GetListParagraphs))
    ListParagraphsPtr ListParagraphs;
    __declspec(property(put=PutPassword))
    _bstr_t Password;
    __declspec(property(put=PutWritePassword))
    _bstr_t WritePassword;
    __declspec(property(get=GetHasPassword))
    VARIANT_BOOL HasPassword;
    __declspec(property(get=GetWriteReserved))
    VARIANT_BOOL WriteReserved;
    __declspec(property(get=GetActiveWritingStyle,put=PutActiveWritingStyle))
    _bstr_t ActiveWritingStyle[];
    __declspec(property(get=GetUserControl,put=PutUserControl))
    VARIANT_BOOL UserControl;
    __declspec(property(get=GetHasMailer,put=PutHasMailer))
    VARIANT_BOOL HasMailer;
    __declspec(property(get=GetMailer))
    MailerPtr Mailer;
    __declspec(property(get=GetReadabilityStatistics))
    ReadabilityStatisticsPtr ReadabilityStatistics;
    __declspec(property(get=GetGrammaticalErrors))
    ProofreadingErrorsPtr GrammaticalErrors;
    __declspec(property(get=GetSpellingErrors))
    ProofreadingErrorsPtr SpellingErrors;
    __declspec(property(get=GetVBProject))
    VBIDE::_VBProjectPtr VBProject;
    __declspec(property(get=GetFormsDesign))
    VARIANT_BOOL FormsDesign;
    __declspec(property(get=GetSnapToGrid,put=PutSnapToGrid))
    VARIANT_BOOL SnapToGrid;
    __declspec(property(get=GetSnapToShapes,put=PutSnapToShapes))
    VARIANT_BOOL SnapToShapes;
    __declspec(property(get=GetGridDistanceHorizontal,put=PutGridDistanceHorizontal))
    float GridDistanceHorizontal;
    __declspec(property(get=GetGridDistanceVertical,put=PutGridDistanceVertical))
    float GridDistanceVertical;
    __declspec(property(get=GetGridOriginHorizontal,put=PutGridOriginHorizontal))
    float GridOriginHorizontal;
    __declspec(property(get=GetGridOriginVertical,put=PutGridOriginVertical))
    float GridOriginVertical;
    __declspec(property(get=GetGridSpaceBetweenHorizontalLines,put=PutGridSpaceBetweenHorizontalLines))
    long GridSpaceBetweenHorizontalLines;
    __declspec(property(get=GetGridSpaceBetweenVerticalLines,put=PutGridSpaceBetweenVerticalLines))
    long GridSpaceBetweenVerticalLines;
    __declspec(property(get=GetGridOriginFromMargin,put=PutGridOriginFromMargin))
    VARIANT_BOOL GridOriginFromMargin;
    __declspec(property(get=GetPageSetup,put=PutPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetKerningByAlgorithm,put=PutKerningByAlgorithm))
    VARIANT_BOOL KerningByAlgorithm;
    __declspec(property(get=GetJustificationMode,put=PutJustificationMode))
    enum WdJustificationMode JustificationMode;
    __declspec(property(get=GetFarEastLineBreakLevel,put=PutFarEastLineBreakLevel))
    enum WdFarEastLineBreakLevel FarEastLineBreakLevel;
    __declspec(property(get=GetNoLineBreakBefore,put=PutNoLineBreakBefore))
    _bstr_t NoLineBreakBefore;
    __declspec(property(get=GetNoLineBreakAfter,put=PutNoLineBreakAfter))
    _bstr_t NoLineBreakAfter;
    __declspec(property(get=GetTrackRevisions,put=PutTrackRevisions))
    VARIANT_BOOL TrackRevisions;
    __declspec(property(get=GetPrintRevisions,put=PutPrintRevisions))
    VARIANT_BOOL PrintRevisions;
    __declspec(property(get=GetShowRevisions,put=PutShowRevisions))
    VARIANT_BOOL ShowRevisions;
    __declspec(property(get=GetEmail))
    EmailPtr Email;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetLanguageDetected,put=PutLanguageDetected))
    VARIANT_BOOL LanguageDetected;
    __declspec(property(get=GetFarEastLineBreakLanguage,put=PutFarEastLineBreakLanguage))
    enum WdFarEastLineBreakLanguageID FarEastLineBreakLanguage;
    __declspec(property(get=GetFrameset))
    FramesetPtr Frameset;
    __declspec(property(get=GetHTMLProject))
    Office::HTMLProjectPtr HTMLProject;
    __declspec(property(get=GetWebOptions))
    WebOptionsPtr WebOptions;
    __declspec(property(get=GetOpenEncoding))
    enum Office::MsoEncoding OpenEncoding;
    __declspec(property(get=GetOptimizeForWord97,put=PutOptimizeForWord97))
    VARIANT_BOOL OptimizeForWord97;
    __declspec(property(get=GetVBASigned))
    VARIANT_BOOL VBASigned;
    __declspec(property(get=GetActiveTheme))
    _bstr_t ActiveTheme;
    __declspec(property(get=GetActiveThemeDisplayName))
    _bstr_t ActiveThemeDisplayName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetBuiltInDocumentProperties ( );
    IDispatchPtr GetCustomDocumentProperties ( );
    _bstr_t GetPath ( );
    BookmarksPtr GetBookmarks ( );
    TablesPtr GetTables ( );
    FootnotesPtr GetFootnotes ( );
    EndnotesPtr GetEndnotes ( );
    CommentsPtr GetComments ( );
    enum WdDocumentType GetType ( );
    VARIANT_BOOL GetAutoHyphenation ( );
    void PutAutoHyphenation (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetHyphenateCaps ( );
    void PutHyphenateCaps (
        VARIANT_BOOL prop );
    long GetHyphenationZone ( );
    void PutHyphenationZone (
        long prop );
    long GetConsecutiveHyphensLimit ( );
    void PutConsecutiveHyphensLimit (
        long prop );
    SectionsPtr GetSections ( );
    ParagraphsPtr GetParagraphs ( );
    WordsPtr GetWords ( );
    SentencesPtr GetSentences ( );
    CharactersPtr GetCharacters ( );
    FieldsPtr GetFields ( );
    FormFieldsPtr GetFormFields ( );
    StylesPtr GetStyles ( );
    FramesPtr GetFrames ( );
    TablesOfFiguresPtr GetTablesOfFigures ( );
    VariablesPtr GetVariables ( );
    MailMergePtr GetMailMerge ( );
    EnvelopePtr GetEnvelope ( );
    _bstr_t GetFullName ( );
    RevisionsPtr GetRevisions ( );
    TablesOfContentsPtr GetTablesOfContents ( );
    TablesOfAuthoritiesPtr GetTablesOfAuthorities ( );
    PageSetupPtr GetPageSetup ( );
    void PutPageSetup (
        struct PageSetup * prop );
    WindowsPtr GetWindows ( );
    VARIANT_BOOL GetHasRoutingSlip ( );
    void PutHasRoutingSlip (
        VARIANT_BOOL prop );
    RoutingSlipPtr GetRoutingSlip ( );
    VARIANT_BOOL GetRouted ( );
    TablesOfAuthoritiesCategoriesPtr GetTablesOfAuthoritiesCategories ( );
    IndexesPtr GetIndexes ( );
    VARIANT_BOOL GetSaved ( );
    void PutSaved (
        VARIANT_BOOL prop );
    RangePtr GetContent ( );
    WindowPtr GetActiveWindow ( );
    enum WdDocumentKind GetKind ( );
    void PutKind (
        enum WdDocumentKind prop );
    VARIANT_BOOL GetReadOnly ( );
    SubdocumentsPtr GetSubdocuments ( );
    VARIANT_BOOL GetIsMasterDocument ( );
    float GetDefaultTabStop ( );
    void PutDefaultTabStop (
        float prop );
    VARIANT_BOOL GetEmbedTrueTypeFonts ( );
    void PutEmbedTrueTypeFonts (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSaveFormsData ( );
    void PutSaveFormsData (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetReadOnlyRecommended ( );
    void PutReadOnlyRecommended (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSaveSubsetFonts ( );
    void PutSaveSubsetFonts (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetCompatibility (
        enum WdCompatibility Type );
    void PutCompatibility (
        enum WdCompatibility Type,
        VARIANT_BOOL prop );
    StoryRangesPtr GetStoryRanges ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    VARIANT_BOOL GetIsSubdocument ( );
    long GetSaveFormat ( );
    enum WdProtectionType GetProtectionType ( );
    HyperlinksPtr GetHyperlinks ( );
    ShapesPtr GetShapes ( );
    ListTemplatesPtr GetListTemplates ( );
    ListsPtr GetLists ( );
    VARIANT_BOOL GetUpdateStylesOnOpen ( );
    void PutUpdateStylesOnOpen (
        VARIANT_BOOL prop );
    _variant_t GetAttachedTemplate ( );
    void PutAttachedTemplate (
        VARIANT * prop );
    InlineShapesPtr GetInlineShapes ( );
    ShapePtr GetBackground ( );
    void PutBackground (
        struct Shape * prop );
    VARIANT_BOOL GetGrammarChecked ( );
    void PutGrammarChecked (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSpellingChecked ( );
    void PutSpellingChecked (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowGrammaticalErrors ( );
    void PutShowGrammaticalErrors (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowSpellingErrors ( );
    void PutShowSpellingErrors (
        VARIANT_BOOL prop );
    VersionsPtr GetVersions ( );
    VARIANT_BOOL GetShowSummary ( );
    void PutShowSummary (
        VARIANT_BOOL prop );
    enum WdSummaryMode GetSummaryViewMode ( );
    void PutSummaryViewMode (
        enum WdSummaryMode prop );
    long GetSummaryLength ( );
    void PutSummaryLength (
        long prop );
    VARIANT_BOOL GetPrintFractionalWidths ( );
    void PutPrintFractionalWidths (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPrintPostScriptOverText ( );
    void PutPrintPostScriptOverText (
        VARIANT_BOOL prop );
    IDispatchPtr GetContainer ( );
    VARIANT_BOOL GetPrintFormsData ( );
    void PutPrintFormsData (
        VARIANT_BOOL prop );
    ListParagraphsPtr GetListParagraphs ( );
    void PutPassword (
        _bstr_t _arg1 );
    void PutWritePassword (
        _bstr_t _arg1 );
    VARIANT_BOOL GetHasPassword ( );
    VARIANT_BOOL GetWriteReserved ( );
    _bstr_t GetActiveWritingStyle (
        VARIANT * LanguageID );
    void PutActiveWritingStyle (
        VARIANT * LanguageID,
        _bstr_t prop );
    VARIANT_BOOL GetUserControl ( );
    void PutUserControl (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetHasMailer ( );
    void PutHasMailer (
        VARIANT_BOOL prop );
    MailerPtr GetMailer ( );
    ReadabilityStatisticsPtr GetReadabilityStatistics ( );
    ProofreadingErrorsPtr GetGrammaticalErrors ( );
    ProofreadingErrorsPtr GetSpellingErrors ( );
    VBIDE::_VBProjectPtr GetVBProject ( );
    VARIANT_BOOL GetFormsDesign ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t prop );
    _bstr_t GetCodeName ( );
    VARIANT_BOOL GetSnapToGrid ( );
    void PutSnapToGrid (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSnapToShapes ( );
    void PutSnapToShapes (
        VARIANT_BOOL prop );
    float GetGridDistanceHorizontal ( );
    void PutGridDistanceHorizontal (
        float prop );
    float GetGridDistanceVertical ( );
    void PutGridDistanceVertical (
        float prop );
    float GetGridOriginHorizontal ( );
    void PutGridOriginHorizontal (
        float prop );
    float GetGridOriginVertical ( );
    void PutGridOriginVertical (
        float prop );
    long GetGridSpaceBetweenHorizontalLines ( );
    void PutGridSpaceBetweenHorizontalLines (
        long prop );
    long GetGridSpaceBetweenVerticalLines ( );
    void PutGridSpaceBetweenVerticalLines (
        long prop );
    VARIANT_BOOL GetGridOriginFromMargin ( );
    void PutGridOriginFromMargin (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetKerningByAlgorithm ( );
    void PutKerningByAlgorithm (
        VARIANT_BOOL prop );
    enum WdJustificationMode GetJustificationMode ( );
    void PutJustificationMode (
        enum WdJustificationMode prop );
    enum WdFarEastLineBreakLevel GetFarEastLineBreakLevel ( );
    void PutFarEastLineBreakLevel (
        enum WdFarEastLineBreakLevel prop );
    _bstr_t GetNoLineBreakBefore ( );
    void PutNoLineBreakBefore (
        _bstr_t prop );
    _bstr_t GetNoLineBreakAfter ( );
    void PutNoLineBreakAfter (
        _bstr_t prop );
    VARIANT_BOOL GetTrackRevisions ( );
    void PutTrackRevisions (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPrintRevisions ( );
    void PutPrintRevisions (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowRevisions ( );
    void PutShowRevisions (
        VARIANT_BOOL prop );
    HRESULT Close (
        VARIANT * SaveChanges = &vtMissing,
        VARIANT * OriginalFormat = &vtMissing,
        VARIANT * RouteDocument = &vtMissing );
    HRESULT SaveAs (
        VARIANT * FileName = &vtMissing,
        VARIANT * FileFormat = &vtMissing,
        VARIANT * LockComments = &vtMissing,
        VARIANT * Password = &vtMissing,
        VARIANT * AddToRecentFiles = &vtMissing,
        VARIANT * WritePassword = &vtMissing,
        VARIANT * ReadOnlyRecommended = &vtMissing,
        VARIANT * EmbedTrueTypeFonts = &vtMissing,
        VARIANT * SaveNativePictureFormat = &vtMissing,
        VARIANT * SaveFormsData = &vtMissing,
        VARIANT * SaveAsAOCELetter = &vtMissing );
    HRESULT Repaginate ( );
    HRESULT FitToPages ( );
    HRESULT ManualHyphenation ( );
    HRESULT Select ( );
    HRESULT DataForm ( );
    HRESULT Route ( );
    HRESULT Save ( );
    HRESULT PrintOutOld (
        VARIANT * Background = &vtMissing,
        VARIANT * Append = &vtMissing,
        VARIANT * Range = &vtMissing,
        VARIANT * OutputFileName = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * Item = &vtMissing,
        VARIANT * Copies = &vtMissing,
        VARIANT * Pages = &vtMissing,
        VARIANT * PageType = &vtMissing,
        VARIANT * PrintToFile = &vtMissing,
        VARIANT * Collate = &vtMissing,
        VARIANT * ActivePrinterMacGX = &vtMissing,
        VARIANT * ManualDuplexPrint = &vtMissing );
    HRESULT SendMail ( );
    RangePtr Range (
        VARIANT * Start = &vtMissing,
        VARIANT * End = &vtMissing );
    HRESULT RunAutoMacro (
        enum WdAutoMacros Which );
    HRESULT Activate ( );
    HRESULT PrintPreview ( );
    RangePtr GoTo (
        VARIANT * What = &vtMissing,
        VARIANT * Which = &vtMissing,
        VARIANT * Count = &vtMissing,
        VARIANT * Name = &vtMissing );
    VARIANT_BOOL Undo (
        VARIANT * Times = &vtMissing );
    VARIANT_BOOL Redo (
        VARIANT * Times = &vtMissing );
    long ComputeStatistics (
        enum WdStatistic Statistic,
        VARIANT * IncludeFootnotesAndEndnotes = &vtMissing );
    HRESULT MakeCompatibilityDefault ( );
    HRESULT Protect (
        enum WdProtectionType Type,
        VARIANT * NoReset = &vtMissing,
        VARIANT * Password = &vtMissing );
    HRESULT Unprotect (
        VARIANT * Password = &vtMissing );
    HRESULT EditionOptions (
        enum WdEditionType Type,
        enum WdEditionOption Option,
        _bstr_t Name,
        VARIANT * Format = &vtMissing );
    HRESULT RunLetterWizard (
        VARIANT * LetterContent = &vtMissing,
        VARIANT * WizardMode = &vtMissing );
    _LetterContentPtr GetLetterContent ( );
    HRESULT SetLetterContent (
        VARIANT * LetterContent );
    HRESULT CopyStylesFromTemplate (
        _bstr_t Template );
    HRESULT UpdateStyles ( );
    HRESULT CheckGrammar ( );
    HRESULT CheckSpelling (
        VARIANT * CustomDictionary = &vtMissing,
        VARIANT * IgnoreUppercase = &vtMissing,
        VARIANT * AlwaysSuggest = &vtMissing,
        VARIANT * CustomDictionary2 = &vtMissing,
        VARIANT * CustomDictionary3 = &vtMissing,
        VARIANT * CustomDictionary4 = &vtMissing,
        VARIANT * CustomDictionary5 = &vtMissing,
        VARIANT * CustomDictionary6 = &vtMissing,
        VARIANT * CustomDictionary7 = &vtMissing,
        VARIANT * CustomDictionary8 = &vtMissing,
        VARIANT * CustomDictionary9 = &vtMissing,
        VARIANT * CustomDictionary10 = &vtMissing );
    HRESULT FollowHyperlink (
        VARIANT * Address = &vtMissing,
        VARIANT * SubAddress = &vtMissing,
        VARIANT * NewWindow = &vtMissing,
        VARIANT * AddHistory = &vtMissing,
        VARIANT * ExtraInfo = &vtMissing,
        VARIANT * Method = &vtMissing,
        VARIANT * HeaderInfo = &vtMissing );
    HRESULT AddToFavorites ( );
    HRESULT Reload ( );
    RangePtr AutoSummarize (
        VARIANT * Length = &vtMissing,
        VARIANT * Mode = &vtMissing,
        VARIANT * UpdateProperties = &vtMissing );
    HRESULT RemoveNumbers (
        VARIANT * NumberType = &vtMissing );
    HRESULT ConvertNumbersToText (
        VARIANT * NumberType = &vtMissing );
    long CountNumberedItems (
        VARIANT * NumberType = &vtMissing,
        VARIANT * Level = &vtMissing );
    HRESULT Post ( );
    HRESULT ToggleFormsDesign ( );
    HRESULT Compare (
        _bstr_t Name );
    HRESULT UpdateSummaryProperties ( );
    _variant_t GetCrossReferenceItems (
        VARIANT * ReferenceType );
    HRESULT AutoFormat ( );
    HRESULT ViewCode ( );
    HRESULT ViewPropertyBrowser ( );
    HRESULT ForwardMailer ( );
    HRESULT Reply ( );
    HRESULT ReplyAll ( );
    HRESULT SendMailer (
        VARIANT * FileFormat = &vtMissing,
        VARIANT * Priority = &vtMissing );
    HRESULT UndoClear ( );
    HRESULT PresentIt ( );
    HRESULT SendFax (
        _bstr_t Address,
        VARIANT * Subject = &vtMissing );
    HRESULT Merge (
        _bstr_t FileName );
    HRESULT ClosePrintPreview ( );
    HRESULT CheckConsistency ( );
    _LetterContentPtr CreateLetterContent (
        _bstr_t DateFormat,
        VARIANT_BOOL IncludeHeaderFooter,
        _bstr_t PageDesign,
        enum WdLetterStyle LetterStyle,
        VARIANT_BOOL Letterhead,
        enum WdLetterheadLocation LetterheadLocation,
        float LetterheadSize,
        _bstr_t RecipientName,
        _bstr_t RecipientAddress,
        _bstr_t Salutation,
        enum WdSalutationType SalutationType,
        _bstr_t RecipientReference,
        _bstr_t MailingInstructions,
        _bstr_t AttentionLine,
        _bstr_t Subject,
        _bstr_t CCList,
        _bstr_t ReturnAddress,
        _bstr_t SenderName,
        _bstr_t Closing,
        _bstr_t SenderCompany,
        _bstr_t SenderJobTitle,
        _bstr_t SenderInitials,
        long EnclosureNumber,
        VARIANT * InfoBlock = &vtMissing,
        VARIANT * RecipientCode = &vtMissing,
        VARIANT * RecipientGender = &vtMissing,
        VARIANT * ReturnAddressShortForm = &vtMissing,
        VARIANT * SenderCity = &vtMissing,
        VARIANT * SenderCode = &vtMissing,
        VARIANT * SenderGender = &vtMissing,
        VARIANT * SenderReference = &vtMissing );
    HRESULT AcceptAllRevisions ( );
    HRESULT RejectAllRevisions ( );
    HRESULT DetectLanguage ( );
    HRESULT ApplyTheme (
        _bstr_t Name );
    HRESULT RemoveTheme ( );
    HRESULT WebPagePreview ( );
    HRESULT ReloadAs (
        enum Office::MsoEncoding Encoding );
    _bstr_t GetActiveTheme ( );
    _bstr_t GetActiveThemeDisplayName ( );
    EmailPtr GetEmail ( );
    Office::ScriptsPtr GetScripts ( );
    VARIANT_BOOL GetLanguageDetected ( );
    void PutLanguageDetected (
        VARIANT_BOOL prop );
    enum WdFarEastLineBreakLanguageID GetFarEastLineBreakLanguage ( );
    void PutFarEastLineBreakLanguage (
        enum WdFarEastLineBreakLanguageID prop );
    FramesetPtr GetFrameset ( );
    _variant_t GetClickAndTypeParagraphStyle ( );
    void PutClickAndTypeParagraphStyle (
        VARIANT * prop );
    Office::HTMLProjectPtr GetHTMLProject ( );
    WebOptionsPtr GetWebOptions ( );
    enum Office::MsoEncoding GetOpenEncoding ( );
    enum Office::MsoEncoding GetSaveEncoding ( );
    void PutSaveEncoding (
        enum Office::MsoEncoding prop );
    VARIANT_BOOL GetOptimizeForWord97 ( );
    void PutOptimizeForWord97 (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetVBASigned ( );
    HRESULT PrintOut (
        VARIANT * Background = &vtMissing,
        VARIANT * Append = &vtMissing,
        VARIANT * Range = &vtMissing,
        VARIANT * OutputFileName = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * Item = &vtMissing,
        VARIANT * Copies = &vtMissing,
        VARIANT * Pages = &vtMissing,
        VARIANT * PageType = &vtMissing,
        VARIANT * PrintToFile = &vtMissing,
        VARIANT * Collate = &vtMissing,
        VARIANT * ActivePrinterMacGX = &vtMissing,
        VARIANT * ManualDuplexPrint = &vtMissing,
        VARIANT * PrintZoomColumn = &vtMissing,
        VARIANT * PrintZoomRow = &vtMissing,
        VARIANT * PrintZoomPaperWidth = &vtMissing,
        VARIANT * PrintZoomPaperHeight = &vtMissing );
    HRESULT sblt (
        _bstr_t s );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_BuiltInDocumentProperties (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_CustomDocumentProperties (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Bookmarks (
        struct Bookmarks * * prop ) = 0;
    virtual HRESULT __stdcall get_Tables (
        struct Tables * * prop ) = 0;
    virtual HRESULT __stdcall get_Footnotes (
        struct Footnotes * * prop ) = 0;
    virtual HRESULT __stdcall get_Endnotes (
        struct Endnotes * * prop ) = 0;
    virtual HRESULT __stdcall get_Comments (
        struct Comments * * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdDocumentType * prop ) = 0;
    virtual HRESULT __stdcall get_AutoHyphenation (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoHyphenation (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HyphenateCaps (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_HyphenateCaps (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HyphenationZone (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_HyphenationZone (
        long prop ) = 0;
    virtual HRESULT __stdcall get_ConsecutiveHyphensLimit (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_ConsecutiveHyphensLimit (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Sections (
        struct Sections * * prop ) = 0;
    virtual HRESULT __stdcall get_Paragraphs (
        struct Paragraphs * * prop ) = 0;
    virtual HRESULT __stdcall get_Words (
        struct Words * * prop ) = 0;
    virtual HRESULT __stdcall get_Sentences (
        struct Sentences * * prop ) = 0;
    virtual HRESULT __stdcall get_Characters (
        struct Characters * * prop ) = 0;
    virtual HRESULT __stdcall get_Fields (
        struct Fields * * prop ) = 0;
    virtual HRESULT __stdcall get_FormFields (
        struct FormFields * * prop ) = 0;
    virtual HRESULT __stdcall get_Styles (
        struct Styles * * prop ) = 0;
    virtual HRESULT __stdcall get_Frames (
        struct Frames * * prop ) = 0;
    virtual HRESULT __stdcall get_TablesOfFigures (
        struct TablesOfFigures * * prop ) = 0;
    virtual HRESULT __stdcall get_Variables (
        struct Variables * * prop ) = 0;
    virtual HRESULT __stdcall get_MailMerge (
        struct MailMerge * * prop ) = 0;
    virtual HRESULT __stdcall get_Envelope (
        struct Envelope * * prop ) = 0;
    virtual HRESULT __stdcall get_FullName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Revisions (
        struct Revisions * * prop ) = 0;
    virtual HRESULT __stdcall get_TablesOfContents (
        struct TablesOfContents * * prop ) = 0;
    virtual HRESULT __stdcall get_TablesOfAuthorities (
        struct TablesOfAuthorities * * prop ) = 0;
    virtual HRESULT __stdcall get_PageSetup (
        struct PageSetup * * prop ) = 0;
    virtual HRESULT __stdcall put_PageSetup (
        struct PageSetup * prop ) = 0;
    virtual HRESULT __stdcall get_Windows (
        struct Windows * * prop ) = 0;
    virtual HRESULT __stdcall get_HasRoutingSlip (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_HasRoutingSlip (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_RoutingSlip (
        struct RoutingSlip * * prop ) = 0;
    virtual HRESULT __stdcall get_Routed (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_TablesOfAuthoritiesCategories (
        struct TablesOfAuthoritiesCategories * * prop ) = 0;
    virtual HRESULT __stdcall get_Indexes (
        struct Indexes * * prop ) = 0;
    virtual HRESULT __stdcall get_Saved (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Saved (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Content (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveWindow (
        struct Window * * prop ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum WdDocumentKind * prop ) = 0;
    virtual HRESULT __stdcall put_Kind (
        enum WdDocumentKind prop ) = 0;
    virtual HRESULT __stdcall get_ReadOnly (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Subdocuments (
        struct Subdocuments * * prop ) = 0;
    virtual HRESULT __stdcall get_IsMasterDocument (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_DefaultTabStop (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultTabStop (
        float prop ) = 0;
    virtual HRESULT __stdcall get_EmbedTrueTypeFonts (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_EmbedTrueTypeFonts (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SaveFormsData (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SaveFormsData (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ReadOnlyRecommended (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ReadOnlyRecommended (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SaveSubsetFonts (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SaveSubsetFonts (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Compatibility (
        enum WdCompatibility Type,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Compatibility (
        enum WdCompatibility Type,
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_StoryRanges (
        struct StoryRanges * * prop ) = 0;
    virtual HRESULT __stdcall get_CommandBars (
        struct Office::_CommandBars * * prop ) = 0;
    virtual HRESULT __stdcall get_IsSubdocument (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_SaveFormat (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_ProtectionType (
        enum WdProtectionType * prop ) = 0;
    virtual HRESULT __stdcall get_Hyperlinks (
        struct Hyperlinks * * prop ) = 0;
    virtual HRESULT __stdcall get_Shapes (
        struct Shapes * * prop ) = 0;
    virtual HRESULT __stdcall get_ListTemplates (
        struct ListTemplates * * prop ) = 0;
    virtual HRESULT __stdcall get_Lists (
        struct Lists * * prop ) = 0;
    virtual HRESULT __stdcall get_UpdateStylesOnOpen (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UpdateStylesOnOpen (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AttachedTemplate (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_AttachedTemplate (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_InlineShapes (
        struct InlineShapes * * prop ) = 0;
    virtual HRESULT __stdcall get_Background (
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall put_Background (
        struct Shape * prop ) = 0;
    virtual HRESULT __stdcall get_GrammarChecked (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_GrammarChecked (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SpellingChecked (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SpellingChecked (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowGrammaticalErrors (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowGrammaticalErrors (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowSpellingErrors (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowSpellingErrors (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Versions (
        struct Versions * * prop ) = 0;
    virtual HRESULT __stdcall get_ShowSummary (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowSummary (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SummaryViewMode (
        enum WdSummaryMode * prop ) = 0;
    virtual HRESULT __stdcall put_SummaryViewMode (
        enum WdSummaryMode prop ) = 0;
    virtual HRESULT __stdcall get_SummaryLength (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_SummaryLength (
        long prop ) = 0;
    virtual HRESULT __stdcall get_PrintFractionalWidths (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintFractionalWidths (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PrintPostScriptOverText (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintPostScriptOverText (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Container (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_PrintFormsData (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintFormsData (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ListParagraphs (
        struct ListParagraphs * * prop ) = 0;
    virtual HRESULT __stdcall put_Password (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall put_WritePassword (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall get_HasPassword (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_WriteReserved (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveWritingStyle (
        VARIANT * LanguageID,
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ActiveWritingStyle (
        VARIANT * LanguageID,
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_UserControl (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UserControl (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HasMailer (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_HasMailer (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Mailer (
        struct Mailer * * prop ) = 0;
    virtual HRESULT __stdcall get_ReadabilityStatistics (
        struct ReadabilityStatistics * * prop ) = 0;
    virtual HRESULT __stdcall get_GrammaticalErrors (
        struct ProofreadingErrors * * prop ) = 0;
    virtual HRESULT __stdcall get_SpellingErrors (
        struct ProofreadingErrors * * prop ) = 0;
    virtual HRESULT __stdcall get_VBProject (
        struct VBIDE::_VBProject * * prop ) = 0;
    virtual HRESULT __stdcall get_FormsDesign (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get__CodeName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put__CodeName (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_CodeName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_SnapToGrid (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SnapToGrid (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SnapToShapes (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SnapToShapes (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_GridDistanceHorizontal (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_GridDistanceHorizontal (
        float prop ) = 0;
    virtual HRESULT __stdcall get_GridDistanceVertical (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_GridDistanceVertical (
        float prop ) = 0;
    virtual HRESULT __stdcall get_GridOriginHorizontal (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_GridOriginHorizontal (
        float prop ) = 0;
    virtual HRESULT __stdcall get_GridOriginVertical (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_GridOriginVertical (
        float prop ) = 0;
    virtual HRESULT __stdcall get_GridSpaceBetweenHorizontalLines (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_GridSpaceBetweenHorizontalLines (
        long prop ) = 0;
    virtual HRESULT __stdcall get_GridSpaceBetweenVerticalLines (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_GridSpaceBetweenVerticalLines (
        long prop ) = 0;
    virtual HRESULT __stdcall get_GridOriginFromMargin (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_GridOriginFromMargin (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_KerningByAlgorithm (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_KerningByAlgorithm (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_JustificationMode (
        enum WdJustificationMode * prop ) = 0;
    virtual HRESULT __stdcall put_JustificationMode (
        enum WdJustificationMode prop ) = 0;
    virtual HRESULT __stdcall get_FarEastLineBreakLevel (
        enum WdFarEastLineBreakLevel * prop ) = 0;
    virtual HRESULT __stdcall put_FarEastLineBreakLevel (
        enum WdFarEastLineBreakLevel prop ) = 0;
    virtual HRESULT __stdcall get_NoLineBreakBefore (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_NoLineBreakBefore (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_NoLineBreakAfter (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_NoLineBreakAfter (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_TrackRevisions (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_TrackRevisions (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PrintRevisions (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintRevisions (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowRevisions (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowRevisions (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_Close (
        VARIANT * SaveChanges = &vtMissing,
        VARIANT * OriginalFormat = &vtMissing,
        VARIANT * RouteDocument = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SaveAs (
        VARIANT * FileName = &vtMissing,
        VARIANT * FileFormat = &vtMissing,
        VARIANT * LockComments = &vtMissing,
        VARIANT * Password = &vtMissing,
        VARIANT * AddToRecentFiles = &vtMissing,
        VARIANT * WritePassword = &vtMissing,
        VARIANT * ReadOnlyRecommended = &vtMissing,
        VARIANT * EmbedTrueTypeFonts = &vtMissing,
        VARIANT * SaveNativePictureFormat = &vtMissing,
        VARIANT * SaveFormsData = &vtMissing,
        VARIANT * SaveAsAOCELetter = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Repaginate ( ) = 0;
    virtual HRESULT __stdcall raw_FitToPages ( ) = 0;
    virtual HRESULT __stdcall raw_ManualHyphenation ( ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_DataForm ( ) = 0;
    virtual HRESULT __stdcall raw_Route ( ) = 0;
    virtual HRESULT __stdcall raw_Save ( ) = 0;
    virtual HRESULT __stdcall raw_PrintOutOld (
        VARIANT * Background = &vtMissing,
        VARIANT * Append = &vtMissing,
        VARIANT * Range = &vtMissing,
        VARIANT * OutputFileName = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * Item = &vtMissing,
        VARIANT * Copies = &vtMissing,
        VARIANT * Pages = &vtMissing,
        VARIANT * PageType = &vtMissing,
        VARIANT * PrintToFile = &vtMissing,
        VARIANT * Collate = &vtMissing,
        VARIANT * ActivePrinterMacGX = &vtMissing,
        VARIANT * ManualDuplexPrint = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SendMail ( ) = 0;
    virtual HRESULT __stdcall raw_Range (
        VARIANT * Start,
        VARIANT * End,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_RunAutoMacro (
        enum WdAutoMacros Which ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall raw_PrintPreview ( ) = 0;
    virtual HRESULT __stdcall raw_GoTo (
        VARIANT * What,
        VARIANT * Which,
        VARIANT * Count,
        VARIANT * Name,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_Undo (
        VARIANT * Times,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_Redo (
        VARIANT * Times,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_ComputeStatistics (
        enum WdStatistic Statistic,
        VARIANT * IncludeFootnotesAndEndnotes,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MakeCompatibilityDefault ( ) = 0;
    virtual HRESULT __stdcall raw_Protect (
        enum WdProtectionType Type,
        VARIANT * NoReset = &vtMissing,
        VARIANT * Password = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Unprotect (
        VARIANT * Password = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_EditionOptions (
        enum WdEditionType Type,
        enum WdEditionOption Option,
        BSTR Name,
        VARIANT * Format = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_RunLetterWizard (
        VARIANT * LetterContent = &vtMissing,
        VARIANT * WizardMode = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_GetLetterContent (
        struct _LetterContent * * prop ) = 0;
    virtual HRESULT __stdcall raw_SetLetterContent (
        VARIANT * LetterContent ) = 0;
    virtual HRESULT __stdcall raw_CopyStylesFromTemplate (
        BSTR Template ) = 0;
    virtual HRESULT __stdcall raw_UpdateStyles ( ) = 0;
    virtual HRESULT __stdcall raw_CheckGrammar ( ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT * CustomDictionary = &vtMissing,
        VARIANT * IgnoreUppercase = &vtMissing,
        VARIANT * AlwaysSuggest = &vtMissing,
        VARIANT * CustomDictionary2 = &vtMissing,
        VARIANT * CustomDictionary3 = &vtMissing,
        VARIANT * CustomDictionary4 = &vtMissing,
        VARIANT * CustomDictionary5 = &vtMissing,
        VARIANT * CustomDictionary6 = &vtMissing,
        VARIANT * CustomDictionary7 = &vtMissing,
        VARIANT * CustomDictionary8 = &vtMissing,
        VARIANT * CustomDictionary9 = &vtMissing,
        VARIANT * CustomDictionary10 = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_FollowHyperlink (
        VARIANT * Address = &vtMissing,
        VARIANT * SubAddress = &vtMissing,
        VARIANT * NewWindow = &vtMissing,
        VARIANT * AddHistory = &vtMissing,
        VARIANT * ExtraInfo = &vtMissing,
        VARIANT * Method = &vtMissing,
        VARIANT * HeaderInfo = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
    virtual HRESULT __stdcall raw_Reload ( ) = 0;
    virtual HRESULT __stdcall raw_AutoSummarize (
        VARIANT * Length,
        VARIANT * Mode,
        VARIANT * UpdateProperties,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_RemoveNumbers (
        VARIANT * NumberType = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ConvertNumbersToText (
        VARIANT * NumberType = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_CountNumberedItems (
        VARIANT * NumberType,
        VARIANT * Level,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Post ( ) = 0;
    virtual HRESULT __stdcall raw_ToggleFormsDesign ( ) = 0;
    virtual HRESULT __stdcall raw_Compare (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall raw_UpdateSummaryProperties ( ) = 0;
    virtual HRESULT __stdcall raw_GetCrossReferenceItems (
        VARIANT * ReferenceType,
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall raw_AutoFormat ( ) = 0;
    virtual HRESULT __stdcall raw_ViewCode ( ) = 0;
    virtual HRESULT __stdcall raw_ViewPropertyBrowser ( ) = 0;
    virtual HRESULT __stdcall raw_ForwardMailer ( ) = 0;
    virtual HRESULT __stdcall raw_Reply ( ) = 0;
    virtual HRESULT __stdcall raw_ReplyAll ( ) = 0;
    virtual HRESULT __stdcall raw_SendMailer (
        VARIANT * FileFormat = &vtMissing,
        VARIANT * Priority = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_UndoClear ( ) = 0;
    virtual HRESULT __stdcall raw_PresentIt ( ) = 0;
    virtual HRESULT __stdcall raw_SendFax (
        BSTR Address,
        VARIANT * Subject = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Merge (
        BSTR FileName ) = 0;
    virtual HRESULT __stdcall raw_ClosePrintPreview ( ) = 0;
    virtual HRESULT __stdcall raw_CheckConsistency ( ) = 0;
    virtual HRESULT __stdcall raw_CreateLetterContent (
        BSTR DateFormat,
        VARIANT_BOOL IncludeHeaderFooter,
        BSTR PageDesign,
        enum WdLetterStyle LetterStyle,
        VARIANT_BOOL Letterhead,
        enum WdLetterheadLocation LetterheadLocation,
        float LetterheadSize,
        BSTR RecipientName,
        BSTR RecipientAddress,
        BSTR Salutation,
        enum WdSalutationType SalutationType,
        BSTR RecipientReference,
        BSTR MailingInstructions,
        BSTR AttentionLine,
        BSTR Subject,
        BSTR CCList,
        BSTR ReturnAddress,
        BSTR SenderName,
        BSTR Closing,
        BSTR SenderCompany,
        BSTR SenderJobTitle,
        BSTR SenderInitials,
        long EnclosureNumber,
        VARIANT * InfoBlock,
        VARIANT * RecipientCode,
        VARIANT * RecipientGender,
        VARIANT * ReturnAddressShortForm,
        VARIANT * SenderCity,
        VARIANT * SenderCode,
        VARIANT * SenderGender,
        VARIANT * SenderReference,
        struct _LetterContent * * prop ) = 0;
    virtual HRESULT __stdcall raw_AcceptAllRevisions ( ) = 0;
    virtual HRESULT __stdcall raw_RejectAllRevisions ( ) = 0;
    virtual HRESULT __stdcall raw_DetectLanguage ( ) = 0;
    virtual HRESULT __stdcall raw_ApplyTheme (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall raw_RemoveTheme ( ) = 0;
    virtual HRESULT __stdcall raw_WebPagePreview ( ) = 0;
    virtual HRESULT __stdcall raw_ReloadAs (
        enum Office::MsoEncoding Encoding ) = 0;
    virtual HRESULT __stdcall get_ActiveTheme (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveThemeDisplayName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Email (
        struct Email * * prop ) = 0;
    virtual HRESULT __stdcall get_Scripts (
        struct Office::Scripts * * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageDetected (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageDetected (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_FarEastLineBreakLanguage (
        enum WdFarEastLineBreakLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_FarEastLineBreakLanguage (
        enum WdFarEastLineBreakLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_Frameset (
        struct Frameset * * prop ) = 0;
    virtual HRESULT __stdcall get_ClickAndTypeParagraphStyle (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_ClickAndTypeParagraphStyle (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_HTMLProject (
        struct Office::HTMLProject * * prop ) = 0;
    virtual HRESULT __stdcall get_WebOptions (
        struct WebOptions * * prop ) = 0;
    virtual HRESULT __stdcall get_OpenEncoding (
        enum Office::MsoEncoding * prop ) = 0;
    virtual HRESULT __stdcall get_SaveEncoding (
        enum Office::MsoEncoding * prop ) = 0;
    virtual HRESULT __stdcall put_SaveEncoding (
        enum Office::MsoEncoding prop ) = 0;
    virtual HRESULT __stdcall get_OptimizeForWord97 (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_OptimizeForWord97 (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_VBASigned (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT * Background = &vtMissing,
        VARIANT * Append = &vtMissing,
        VARIANT * Range = &vtMissing,
        VARIANT * OutputFileName = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * Item = &vtMissing,
        VARIANT * Copies = &vtMissing,
        VARIANT * Pages = &vtMissing,
        VARIANT * PageType = &vtMissing,
        VARIANT * PrintToFile = &vtMissing,
        VARIANT * Collate = &vtMissing,
        VARIANT * ActivePrinterMacGX = &vtMissing,
        VARIANT * ManualDuplexPrint = &vtMissing,
        VARIANT * PrintZoomColumn = &vtMissing,
        VARIANT * PrintZoomRow = &vtMissing,
        VARIANT * PrintZoomPaperWidth = &vtMissing,
        VARIANT * PrintZoomPaperHeight = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_sblt (
        BSTR s ) = 0;
};

struct __declspec(uuid("0002096a-0000-0000-c000-000000000046"))
Template : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetAutoTextEntries))
    AutoTextEntriesPtr AutoTextEntries;
    __declspec(property(get=GetLanguageID,put=PutLanguageID))
    enum WdLanguageID LanguageID;
    __declspec(property(get=GetSaved,put=PutSaved))
    VARIANT_BOOL Saved;
    __declspec(property(get=GetType))
    enum WdTemplateType Type;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetBuiltInDocumentProperties))
    IDispatchPtr BuiltInDocumentProperties;
    __declspec(property(get=GetCustomDocumentProperties))
    IDispatchPtr CustomDocumentProperties;
    __declspec(property(get=GetListTemplates))
    ListTemplatesPtr ListTemplates;
    __declspec(property(get=GetVBProject))
    VBIDE::_VBProjectPtr VBProject;
    __declspec(property(get=GetLanguageIDFarEast,put=PutLanguageIDFarEast))
    enum WdLanguageID LanguageIDFarEast;
    __declspec(property(get=GetKerningByAlgorithm,put=PutKerningByAlgorithm))
    VARIANT_BOOL KerningByAlgorithm;
    __declspec(property(get=GetJustificationMode,put=PutJustificationMode))
    enum WdJustificationMode JustificationMode;
    __declspec(property(get=GetFarEastLineBreakLevel,put=PutFarEastLineBreakLevel))
    enum WdFarEastLineBreakLevel FarEastLineBreakLevel;
    __declspec(property(get=GetNoLineBreakBefore,put=PutNoLineBreakBefore))
    _bstr_t NoLineBreakBefore;
    __declspec(property(get=GetNoLineBreakAfter,put=PutNoLineBreakAfter))
    _bstr_t NoLineBreakAfter;
    __declspec(property(get=GetNoProofing,put=PutNoProofing))
    long NoProofing;
    __declspec(property(get=GetFarEastLineBreakLanguage,put=PutFarEastLineBreakLanguage))
    enum WdFarEastLineBreakLanguageID FarEastLineBreakLanguage;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetPath ( );
    AutoTextEntriesPtr GetAutoTextEntries ( );
    enum WdLanguageID GetLanguageID ( );
    void PutLanguageID (
        enum WdLanguageID prop );
    VARIANT_BOOL GetSaved ( );
    void PutSaved (
        VARIANT_BOOL prop );
    enum WdTemplateType GetType ( );
    _bstr_t GetFullName ( );
    IDispatchPtr GetBuiltInDocumentProperties ( );
    IDispatchPtr GetCustomDocumentProperties ( );
    ListTemplatesPtr GetListTemplates ( );
    enum WdLanguageID GetLanguageIDFarEast ( );
    void PutLanguageIDFarEast (
        enum WdLanguageID prop );
    VBIDE::_VBProjectPtr GetVBProject ( );
    VARIANT_BOOL GetKerningByAlgorithm ( );
    void PutKerningByAlgorithm (
        VARIANT_BOOL prop );
    enum WdJustificationMode GetJustificationMode ( );
    void PutJustificationMode (
        enum WdJustificationMode prop );
    enum WdFarEastLineBreakLevel GetFarEastLineBreakLevel ( );
    void PutFarEastLineBreakLevel (
        enum WdFarEastLineBreakLevel prop );
    _bstr_t GetNoLineBreakBefore ( );
    void PutNoLineBreakBefore (
        _bstr_t prop );
    _bstr_t GetNoLineBreakAfter ( );
    void PutNoLineBreakAfter (
        _bstr_t prop );
    _DocumentPtr OpenAsDocument ( );
    HRESULT Save ( );
    long GetNoProofing ( );
    void PutNoProofing (
        long prop );
    enum WdFarEastLineBreakLanguageID GetFarEastLineBreakLanguage ( );
    void PutFarEastLineBreakLanguage (
        enum WdFarEastLineBreakLanguageID prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_AutoTextEntries (
        struct AutoTextEntries * * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageID (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageID (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_Saved (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Saved (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdTemplateType * prop ) = 0;
    virtual HRESULT __stdcall get_FullName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_BuiltInDocumentProperties (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_CustomDocumentProperties (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_ListTemplates (
        struct ListTemplates * * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageIDFarEast (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageIDFarEast (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_VBProject (
        struct VBIDE::_VBProject * * prop ) = 0;
    virtual HRESULT __stdcall get_KerningByAlgorithm (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_KerningByAlgorithm (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_JustificationMode (
        enum WdJustificationMode * prop ) = 0;
    virtual HRESULT __stdcall put_JustificationMode (
        enum WdJustificationMode prop ) = 0;
    virtual HRESULT __stdcall get_FarEastLineBreakLevel (
        enum WdFarEastLineBreakLevel * prop ) = 0;
    virtual HRESULT __stdcall put_FarEastLineBreakLevel (
        enum WdFarEastLineBreakLevel prop ) = 0;
    virtual HRESULT __stdcall get_NoLineBreakBefore (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_NoLineBreakBefore (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_NoLineBreakAfter (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_NoLineBreakAfter (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall raw_OpenAsDocument (
        struct _Document * * prop ) = 0;
    virtual HRESULT __stdcall raw_Save ( ) = 0;
    virtual HRESULT __stdcall get_NoProofing (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_NoProofing (
        long prop ) = 0;
    virtual HRESULT __stdcall get_FarEastLineBreakLanguage (
        enum WdFarEastLineBreakLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_FarEastLineBreakLanguage (
        enum WdFarEastLineBreakLanguageID prop ) = 0;
};

struct __declspec(uuid("000209a2-0000-0000-c000-000000000046"))
Templates : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    TemplatePtr Item (
        VARIANT * Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Template * * prop ) = 0;
};

struct __declspec(uuid("00020969-0000-0000-c000-000000000046"))
RoutingSlip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetMessage,put=PutMessage))
    _bstr_t Message;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    enum WdRoutingSlipDelivery Delivery;
    __declspec(property(get=GetTrackStatus,put=PutTrackStatus))
    VARIANT_BOOL TrackStatus;
    __declspec(property(get=GetProtect,put=PutProtect))
    enum WdProtectionType Protect;
    __declspec(property(get=GetReturnWhenDone,put=PutReturnWhenDone))
    VARIANT_BOOL ReturnWhenDone;
    __declspec(property(get=GetStatus))
    enum WdRoutingSlipStatus Status;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRecipients))
    _variant_t Recipients[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t prop );
    _bstr_t GetMessage ( );
    void PutMessage (
        _bstr_t prop );
    enum WdRoutingSlipDelivery GetDelivery ( );
    void PutDelivery (
        enum WdRoutingSlipDelivery prop );
    VARIANT_BOOL GetTrackStatus ( );
    void PutTrackStatus (
        VARIANT_BOOL prop );
    enum WdProtectionType GetProtect ( );
    void PutProtect (
        enum WdProtectionType prop );
    VARIANT_BOOL GetReturnWhenDone ( );
    void PutReturnWhenDone (
        VARIANT_BOOL prop );
    enum WdRoutingSlipStatus GetStatus ( );
    _variant_t GetRecipients (
        VARIANT * Index = &vtMissing );
    HRESULT Reset ( );
    HRESULT AddRecipient (
        _bstr_t Recipient );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Subject (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Subject (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Message (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Message (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Delivery (
        enum WdRoutingSlipDelivery * prop ) = 0;
    virtual HRESULT __stdcall put_Delivery (
        enum WdRoutingSlipDelivery prop ) = 0;
    virtual HRESULT __stdcall get_TrackStatus (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_TrackStatus (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Protect (
        enum WdProtectionType * prop ) = 0;
    virtual HRESULT __stdcall put_Protect (
        enum WdProtectionType prop ) = 0;
    virtual HRESULT __stdcall get_ReturnWhenDone (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ReturnWhenDone (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Status (
        enum WdRoutingSlipStatus * prop ) = 0;
    virtual HRESULT __stdcall get_Recipients (
        VARIANT * Index,
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
    virtual HRESULT __stdcall raw_AddRecipient (
        BSTR Recipient ) = 0;
};

struct __declspec(uuid("00020968-0000-0000-c000-000000000046"))
Bookmark : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetEmpty))
    VARIANT_BOOL Empty;
    __declspec(property(get=GetStart,put=PutStart))
    long Start;
    __declspec(property(get=GetEnd,put=PutEnd))
    long End;
    __declspec(property(get=GetColumn))
    VARIANT_BOOL Column;
    __declspec(property(get=GetStoryType))
    enum WdStoryType StoryType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    RangePtr GetRange ( );
    VARIANT_BOOL GetEmpty ( );
    long GetStart ( );
    void PutStart (
        long prop );
    long GetEnd ( );
    void PutEnd (
        long prop );
    VARIANT_BOOL GetColumn ( );
    enum WdStoryType GetStoryType ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    BookmarkPtr Copy (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Empty (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Start (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Start (
        long prop ) = 0;
    virtual HRESULT __stdcall get_End (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_End (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Column (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_StoryType (
        enum WdStoryType * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        BSTR Name,
        struct Bookmark * * prop ) = 0;
};

struct __declspec(uuid("00020967-0000-0000-c000-000000000046"))
Bookmarks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetDefaultSorting,put=PutDefaultSorting))
    enum WdBookmarkSortBy DefaultSorting;
    __declspec(property(get=GetShowHidden,put=PutShowHidden))
    VARIANT_BOOL ShowHidden;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    enum WdBookmarkSortBy GetDefaultSorting ( );
    void PutDefaultSorting (
        enum WdBookmarkSortBy prop );
    VARIANT_BOOL GetShowHidden ( );
    void PutShowHidden (
        VARIANT_BOOL prop );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    BookmarkPtr Item (
        VARIANT * Index );
    BookmarkPtr Add (
        _bstr_t Name,
        VARIANT * Range = &vtMissing );
    VARIANT_BOOL Exists (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_DefaultSorting (
        enum WdBookmarkSortBy * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultSorting (
        enum WdBookmarkSortBy prop ) = 0;
    virtual HRESULT __stdcall get_ShowHidden (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowHidden (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Bookmark * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT * Range,
        struct Bookmark * * prop ) = 0;
    virtual HRESULT __stdcall raw_Exists (
        BSTR Name,
        VARIANT_BOOL * prop ) = 0;
};

struct __declspec(uuid("00020966-0000-0000-c000-000000000046"))
Variable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t prop );
    long GetIndex ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Value (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Value (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00020965-0000-0000-c000-000000000046"))
Variables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VariablePtr Item (
        VARIANT * Index );
    VariablePtr Add (
        _bstr_t Name,
        VARIANT * Value = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Variable * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT * Value,
        struct Variable * * prop ) = 0;
};

struct __declspec(uuid("00020964-0000-0000-c000-000000000046"))
RecentFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    long GetIndex ( );
    VARIANT_BOOL GetReadOnly ( );
    void PutReadOnly (
        VARIANT_BOOL prop );
    _bstr_t GetPath ( );
    _DocumentPtr Open ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_ReadOnly (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ReadOnly (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_Open (
        struct _Document * * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00020963-0000-0000-c000-000000000046"))
RecentFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMaximum,put=PutMaximum))
    long Maximum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    long GetMaximum ( );
    void PutMaximum (
        long prop );
    RecentFilePtr Item (
        long Index );
    RecentFilePtr Add (
        VARIANT * Document,
        VARIANT * ReadOnly = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Maximum (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Maximum (
        long prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct RecentFile * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * Document,
        VARIANT * ReadOnly,
        struct RecentFile * * prop ) = 0;
};

struct __declspec(uuid("00020962-0000-0000-c000-000000000046"))
Window : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetActivePane))
    PanePtr ActivePane;
    __declspec(property(get=GetDocument))
    _DocumentPtr Document;
    __declspec(property(get=GetPanes))
    PanesPtr Panes;
    __declspec(property(get=GetSelection))
    SelectionPtr Selection;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetSplit,put=PutSplit))
    VARIANT_BOOL Split;
    __declspec(property(get=GetSplitVertical,put=PutSplitVertical))
    long SplitVertical;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum WdWindowState WindowState;
    __declspec(property(get=GetDisplayRulers,put=PutDisplayRulers))
    VARIANT_BOOL DisplayRulers;
    __declspec(property(get=GetDisplayVerticalRuler,put=PutDisplayVerticalRuler))
    VARIANT_BOOL DisplayVerticalRuler;
    __declspec(property(get=GetView))
    ViewPtr View;
    __declspec(property(get=GetType))
    enum WdWindowType Type;
    __declspec(property(get=GetNext))
    WindowPtr Next;
    __declspec(property(get=GetPrevious))
    WindowPtr Previous;
    __declspec(property(get=GetWindowNumber))
    long WindowNumber;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetDisplayHorizontalScrollBar,put=PutDisplayHorizontalScrollBar))
    VARIANT_BOOL DisplayHorizontalScrollBar;
    __declspec(property(get=GetStyleAreaWidth,put=PutStyleAreaWidth))
    float StyleAreaWidth;
    __declspec(property(get=GetDisplayScreenTips,put=PutDisplayScreenTips))
    VARIANT_BOOL DisplayScreenTips;
    __declspec(property(get=GetHorizontalPercentScrolled,put=PutHorizontalPercentScrolled))
    long HorizontalPercentScrolled;
    __declspec(property(get=GetVerticalPercentScrolled,put=PutVerticalPercentScrolled))
    long VerticalPercentScrolled;
    __declspec(property(get=GetDocumentMap,put=PutDocumentMap))
    VARIANT_BOOL DocumentMap;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetDocumentMapPercentWidth,put=PutDocumentMapPercentWidth))
    long DocumentMapPercentWidth;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetIMEMode,put=PutIMEMode))
    enum WdIMEMode IMEMode;
    __declspec(property(get=GetUsableWidth))
    long UsableWidth;
    __declspec(property(get=GetUsableHeight))
    long UsableHeight;
    __declspec(property(get=GetEnvelopeVisible,put=PutEnvelopeVisible))
    VARIANT_BOOL EnvelopeVisible;
    __declspec(property(get=GetDisplayLeftScrollBar,put=PutDisplayLeftScrollBar))
    VARIANT_BOOL DisplayLeftScrollBar;
    __declspec(property(get=GetDisplayRightRuler,put=PutDisplayRightRuler))
    VARIANT_BOOL DisplayRightRuler;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    PanePtr GetActivePane ( );
    _DocumentPtr GetDocument ( );
    PanesPtr GetPanes ( );
    SelectionPtr GetSelection ( );
    long GetLeft ( );
    void PutLeft (
        long prop );
    long GetTop ( );
    void PutTop (
        long prop );
    long GetWidth ( );
    void PutWidth (
        long prop );
    long GetHeight ( );
    void PutHeight (
        long prop );
    VARIANT_BOOL GetSplit ( );
    void PutSplit (
        VARIANT_BOOL prop );
    long GetSplitVertical ( );
    void PutSplitVertical (
        long prop );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t prop );
    enum WdWindowState GetWindowState ( );
    void PutWindowState (
        enum WdWindowState prop );
    VARIANT_BOOL GetDisplayRulers ( );
    void PutDisplayRulers (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetDisplayVerticalRuler ( );
    void PutDisplayVerticalRuler (
        VARIANT_BOOL prop );
    ViewPtr GetView ( );
    enum WdWindowType GetType ( );
    WindowPtr GetNext ( );
    WindowPtr GetPrevious ( );
    long GetWindowNumber ( );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetDisplayHorizontalScrollBar ( );
    void PutDisplayHorizontalScrollBar (
        VARIANT_BOOL prop );
    float GetStyleAreaWidth ( );
    void PutStyleAreaWidth (
        float prop );
    VARIANT_BOOL GetDisplayScreenTips ( );
    void PutDisplayScreenTips (
        VARIANT_BOOL prop );
    long GetHorizontalPercentScrolled ( );
    void PutHorizontalPercentScrolled (
        long prop );
    long GetVerticalPercentScrolled ( );
    void PutVerticalPercentScrolled (
        long prop );
    VARIANT_BOOL GetDocumentMap ( );
    void PutDocumentMap (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetActive ( );
    long GetDocumentMapPercentWidth ( );
    void PutDocumentMapPercentWidth (
        long prop );
    long GetIndex ( );
    enum WdIMEMode GetIMEMode ( );
    void PutIMEMode (
        enum WdIMEMode prop );
    HRESULT Activate ( );
    HRESULT Close (
        VARIANT * SaveChanges = &vtMissing,
        VARIANT * RouteDocument = &vtMissing );
    HRESULT LargeScroll (
        VARIANT * Down = &vtMissing,
        VARIANT * Up = &vtMissing,
        VARIANT * ToRight = &vtMissing,
        VARIANT * ToLeft = &vtMissing );
    HRESULT SmallScroll (
        VARIANT * Down = &vtMissing,
        VARIANT * Up = &vtMissing,
        VARIANT * ToRight = &vtMissing,
        VARIANT * ToLeft = &vtMissing );
    WindowPtr NewWindow ( );
    HRESULT PrintOutOld (
        VARIANT * Background = &vtMissing,
        VARIANT * Append = &vtMissing,
        VARIANT * Range = &vtMissing,
        VARIANT * OutputFileName = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * Item = &vtMissing,
        VARIANT * Copies = &vtMissing,
        VARIANT * Pages = &vtMissing,
        VARIANT * PageType = &vtMissing,
        VARIANT * PrintToFile = &vtMissing,
        VARIANT * Collate = &vtMissing,
        VARIANT * ActivePrinterMacGX = &vtMissing,
        VARIANT * ManualDuplexPrint = &vtMissing );
    HRESULT PageScroll (
        VARIANT * Down = &vtMissing,
        VARIANT * Up = &vtMissing );
    HRESULT SetFocus ( );
    IDispatchPtr RangeFromPoint (
        long x,
        long y );
    HRESULT ScrollIntoView (
        IDispatch * obj,
        VARIANT * Start = &vtMissing );
    HRESULT GetPoint (
        long * ScreenPixelsLeft,
        long * ScreenPixelsTop,
        long * ScreenPixelsWidth,
        long * ScreenPixelsHeight,
        IDispatch * obj );
    HRESULT PrintOut (
        VARIANT * Background = &vtMissing,
        VARIANT * Append = &vtMissing,
        VARIANT * Range = &vtMissing,
        VARIANT * OutputFileName = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * Item = &vtMissing,
        VARIANT * Copies = &vtMissing,
        VARIANT * Pages = &vtMissing,
        VARIANT * PageType = &vtMissing,
        VARIANT * PrintToFile = &vtMissing,
        VARIANT * Collate = &vtMissing,
        VARIANT * ActivePrinterMacGX = &vtMissing,
        VARIANT * ManualDuplexPrint = &vtMissing,
        VARIANT * PrintZoomColumn = &vtMissing,
        VARIANT * PrintZoomRow = &vtMissing,
        VARIANT * PrintZoomPaperWidth = &vtMissing,
        VARIANT * PrintZoomPaperHeight = &vtMissing );
    long GetUsableWidth ( );
    long GetUsableHeight ( );
    VARIANT_BOOL GetEnvelopeVisible ( );
    void PutEnvelopeVisible (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetDisplayRightRuler ( );
    void PutDisplayRightRuler (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetDisplayLeftScrollBar ( );
    void PutDisplayLeftScrollBar (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_ActivePane (
        struct Pane * * prop ) = 0;
    virtual HRESULT __stdcall get_Document (
        struct _Document * * prop ) = 0;
    virtual HRESULT __stdcall get_Panes (
        struct Panes * * prop ) = 0;
    virtual HRESULT __stdcall get_Selection (
        struct Selection * * prop ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Left (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Split (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Split (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SplitVertical (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_SplitVertical (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_WindowState (
        enum WdWindowState * prop ) = 0;
    virtual HRESULT __stdcall put_WindowState (
        enum WdWindowState prop ) = 0;
    virtual HRESULT __stdcall get_DisplayRulers (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayRulers (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DisplayVerticalRuler (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayVerticalRuler (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_View (
        struct View * * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdWindowType * prop ) = 0;
    virtual HRESULT __stdcall get_Next (
        struct Window * * prop ) = 0;
    virtual HRESULT __stdcall get_Previous (
        struct Window * * prop ) = 0;
    virtual HRESULT __stdcall get_WindowNumber (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DisplayHorizontalScrollBar (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayHorizontalScrollBar (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_StyleAreaWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_StyleAreaWidth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_DisplayScreenTips (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayScreenTips (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HorizontalPercentScrolled (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_HorizontalPercentScrolled (
        long prop ) = 0;
    virtual HRESULT __stdcall get_VerticalPercentScrolled (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_VerticalPercentScrolled (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DocumentMap (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DocumentMap (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Active (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_DocumentMapPercentWidth (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_DocumentMapPercentWidth (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_IMEMode (
        enum WdIMEMode * prop ) = 0;
    virtual HRESULT __stdcall put_IMEMode (
        enum WdIMEMode prop ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall raw_Close (
        VARIANT * SaveChanges = &vtMissing,
        VARIANT * RouteDocument = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_LargeScroll (
        VARIANT * Down = &vtMissing,
        VARIANT * Up = &vtMissing,
        VARIANT * ToRight = &vtMissing,
        VARIANT * ToLeft = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SmallScroll (
        VARIANT * Down = &vtMissing,
        VARIANT * Up = &vtMissing,
        VARIANT * ToRight = &vtMissing,
        VARIANT * ToLeft = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_NewWindow (
        struct Window * * prop ) = 0;
    virtual HRESULT __stdcall raw_PrintOutOld (
        VARIANT * Background = &vtMissing,
        VARIANT * Append = &vtMissing,
        VARIANT * Range = &vtMissing,
        VARIANT * OutputFileName = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * Item = &vtMissing,
        VARIANT * Copies = &vtMissing,
        VARIANT * Pages = &vtMissing,
        VARIANT * PageType = &vtMissing,
        VARIANT * PrintToFile = &vtMissing,
        VARIANT * Collate = &vtMissing,
        VARIANT * ActivePrinterMacGX = &vtMissing,
        VARIANT * ManualDuplexPrint = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_PageScroll (
        VARIANT * Down = &vtMissing,
        VARIANT * Up = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetFocus ( ) = 0;
    virtual HRESULT __stdcall raw_RangeFromPoint (
        long x,
        long y,
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_ScrollIntoView (
        IDispatch * obj,
        VARIANT * Start = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_GetPoint (
        long * ScreenPixelsLeft,
        long * ScreenPixelsTop,
        long * ScreenPixelsWidth,
        long * ScreenPixelsHeight,
        IDispatch * obj ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT * Background = &vtMissing,
        VARIANT * Append = &vtMissing,
        VARIANT * Range = &vtMissing,
        VARIANT * OutputFileName = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * Item = &vtMissing,
        VARIANT * Copies = &vtMissing,
        VARIANT * Pages = &vtMissing,
        VARIANT * PageType = &vtMissing,
        VARIANT * PrintToFile = &vtMissing,
        VARIANT * Collate = &vtMissing,
        VARIANT * ActivePrinterMacGX = &vtMissing,
        VARIANT * ManualDuplexPrint = &vtMissing,
        VARIANT * PrintZoomColumn = &vtMissing,
        VARIANT * PrintZoomRow = &vtMissing,
        VARIANT * PrintZoomPaperWidth = &vtMissing,
        VARIANT * PrintZoomPaperHeight = &vtMissing ) = 0;
    virtual HRESULT __stdcall get_UsableWidth (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_UsableHeight (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_EnvelopeVisible (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_EnvelopeVisible (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DisplayRightRuler (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayRightRuler (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DisplayLeftScrollBar (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayLeftScrollBar (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL prop ) = 0;
};

struct __declspec(uuid("00020961-0000-0000-c000-000000000046"))
Windows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    WindowPtr Item (
        VARIANT * Index );
    WindowPtr Add (
        VARIANT * Window = &vtMissing );
    HRESULT Arrange (
        VARIANT * ArrangeStyle = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Window * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * Window,
        struct Window * * prop ) = 0;
    virtual HRESULT __stdcall raw_Arrange (
        VARIANT * ArrangeStyle = &vtMissing ) = 0;
};

struct __declspec(uuid("00020960-0000-0000-c000-000000000046"))
Pane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDocument))
    _DocumentPtr Document;
    __declspec(property(get=GetSelection))
    SelectionPtr Selection;
    __declspec(property(get=GetDisplayRulers,put=PutDisplayRulers))
    VARIANT_BOOL DisplayRulers;
    __declspec(property(get=GetDisplayVerticalRuler,put=PutDisplayVerticalRuler))
    VARIANT_BOOL DisplayVerticalRuler;
    __declspec(property(get=GetZooms))
    ZoomsPtr Zooms;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetView))
    ViewPtr View;
    __declspec(property(get=GetNext))
    PanePtr Next;
    __declspec(property(get=GetPrevious))
    PanePtr Previous;
    __declspec(property(get=GetHorizontalPercentScrolled,put=PutHorizontalPercentScrolled))
    long HorizontalPercentScrolled;
    __declspec(property(get=GetVerticalPercentScrolled,put=PutVerticalPercentScrolled))
    long VerticalPercentScrolled;
    __declspec(property(get=GetMinimumFontSize,put=PutMinimumFontSize))
    long MinimumFontSize;
    __declspec(property(get=GetBrowseToWindow,put=PutBrowseToWindow))
    VARIANT_BOOL BrowseToWindow;
    __declspec(property(get=GetBrowseWidth))
    long BrowseWidth;
    __declspec(property(get=GetFrameset))
    FramesetPtr Frameset;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _DocumentPtr GetDocument ( );
    SelectionPtr GetSelection ( );
    VARIANT_BOOL GetDisplayRulers ( );
    void PutDisplayRulers (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetDisplayVerticalRuler ( );
    void PutDisplayVerticalRuler (
        VARIANT_BOOL prop );
    ZoomsPtr GetZooms ( );
    long GetIndex ( );
    ViewPtr GetView ( );
    PanePtr GetNext ( );
    PanePtr GetPrevious ( );
    long GetHorizontalPercentScrolled ( );
    void PutHorizontalPercentScrolled (
        long prop );
    long GetVerticalPercentScrolled ( );
    void PutVerticalPercentScrolled (
        long prop );
    long GetMinimumFontSize ( );
    void PutMinimumFontSize (
        long prop );
    VARIANT_BOOL GetBrowseToWindow ( );
    void PutBrowseToWindow (
        VARIANT_BOOL prop );
    long GetBrowseWidth ( );
    HRESULT Activate ( );
    HRESULT Close ( );
    HRESULT LargeScroll (
        VARIANT * Down = &vtMissing,
        VARIANT * Up = &vtMissing,
        VARIANT * ToRight = &vtMissing,
        VARIANT * ToLeft = &vtMissing );
    HRESULT SmallScroll (
        VARIANT * Down = &vtMissing,
        VARIANT * Up = &vtMissing,
        VARIANT * ToRight = &vtMissing,
        VARIANT * ToLeft = &vtMissing );
    HRESULT AutoScroll (
        long Velocity );
    HRESULT PageScroll (
        VARIANT * Down = &vtMissing,
        VARIANT * Up = &vtMissing );
    HRESULT NewFrameset ( );
    HRESULT TOCInFrameset ( );
    FramesetPtr GetFrameset ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Document (
        struct _Document * * prop ) = 0;
    virtual HRESULT __stdcall get_Selection (
        struct Selection * * prop ) = 0;
    virtual HRESULT __stdcall get_DisplayRulers (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayRulers (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DisplayVerticalRuler (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayVerticalRuler (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Zooms (
        struct Zooms * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_View (
        struct View * * prop ) = 0;
    virtual HRESULT __stdcall get_Next (
        struct Pane * * prop ) = 0;
    virtual HRESULT __stdcall get_Previous (
        struct Pane * * prop ) = 0;
    virtual HRESULT __stdcall get_HorizontalPercentScrolled (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_HorizontalPercentScrolled (
        long prop ) = 0;
    virtual HRESULT __stdcall get_VerticalPercentScrolled (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_VerticalPercentScrolled (
        long prop ) = 0;
    virtual HRESULT __stdcall get_MinimumFontSize (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_MinimumFontSize (
        long prop ) = 0;
    virtual HRESULT __stdcall get_BrowseToWindow (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_BrowseToWindow (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_BrowseWidth (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall raw_Close ( ) = 0;
    virtual HRESULT __stdcall raw_LargeScroll (
        VARIANT * Down = &vtMissing,
        VARIANT * Up = &vtMissing,
        VARIANT * ToRight = &vtMissing,
        VARIANT * ToLeft = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SmallScroll (
        VARIANT * Down = &vtMissing,
        VARIANT * Up = &vtMissing,
        VARIANT * ToRight = &vtMissing,
        VARIANT * ToLeft = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_AutoScroll (
        long Velocity ) = 0;
    virtual HRESULT __stdcall raw_PageScroll (
        VARIANT * Down = &vtMissing,
        VARIANT * Up = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_NewFrameset ( ) = 0;
    virtual HRESULT __stdcall raw_TOCInFrameset ( ) = 0;
    virtual HRESULT __stdcall get_Frameset (
        struct Frameset * * prop ) = 0;
};

struct __declspec(uuid("0002095f-0000-0000-c000-000000000046"))
Panes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    PanePtr Item (
        long Index );
    PanePtr Add (
        VARIANT * SplitVertical = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Pane * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * SplitVertical,
        struct Pane * * prop ) = 0;
};

struct __declspec(uuid("0002095e-0000-0000-c000-000000000046"))
Range : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFormattedText,put=PutFormattedText))
    RangePtr FormattedText;
    __declspec(property(get=GetStart,put=PutStart))
    long Start;
    __declspec(property(get=GetEnd,put=PutEnd))
    long End;
    __declspec(property(get=GetFont,put=PutFont))
    _FontPtr Font;
    __declspec(property(get=GetDuplicate))
    RangePtr Duplicate;
    __declspec(property(get=GetStoryType))
    enum WdStoryType StoryType;
    __declspec(property(get=GetRevisions))
    RevisionsPtr Revisions;
    __declspec(property(get=GetStoryLength))
    long StoryLength;
    __declspec(property(get=GetLanguageID,put=PutLanguageID))
    enum WdLanguageID LanguageID;
    __declspec(property(get=GetSynonymInfo))
    SynonymInfoPtr SynonymInfo;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetListParagraphs))
    ListParagraphsPtr ListParagraphs;
    __declspec(property(get=GetSubdocuments))
    SubdocumentsPtr Subdocuments;
    __declspec(property(get=GetHighlightColorIndex,put=PutHighlightColorIndex))
    enum WdColorIndex HighlightColorIndex;
    __declspec(property(get=GetColumns))
    ColumnsPtr Columns;
    __declspec(property(get=GetRows))
    RowsPtr Rows;
    __declspec(property(get=GetCanEdit))
    long CanEdit;
    __declspec(property(get=GetCanPaste))
    long CanPaste;
    __declspec(property(get=GetIsEndOfRowMark))
    VARIANT_BOOL IsEndOfRowMark;
    __declspec(property(get=GetBookmarkID))
    long BookmarkID;
    __declspec(property(get=GetPreviousBookmarkID))
    long PreviousBookmarkID;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCase,put=PutCase))
    enum WdCharacterCase Case;
    __declspec(property(get=GetInformation))
    _variant_t Information[];
    __declspec(property(get=GetReadabilityStatistics))
    ReadabilityStatisticsPtr ReadabilityStatistics;
    __declspec(property(get=GetGrammaticalErrors))
    ProofreadingErrorsPtr GrammaticalErrors;
    __declspec(property(get=GetSpellingErrors))
    ProofreadingErrorsPtr SpellingErrors;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum WdTextOrientation Orientation;
    __declspec(property(get=GetInlineShapes))
    InlineShapesPtr InlineShapes;
    __declspec(property(get=GetNextStoryRange))
    RangePtr NextStoryRange;
    __declspec(property(get=GetLanguageIDFarEast,put=PutLanguageIDFarEast))
    enum WdLanguageID LanguageIDFarEast;
    __declspec(property(get=GetLanguageIDOther,put=PutLanguageIDOther))
    enum WdLanguageID LanguageIDOther;
    __declspec(property(get=GetNoProofing,put=PutNoProofing))
    long NoProofing;
    __declspec(property(get=GetTopLevelTables))
    TablesPtr TopLevelTables;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetCharacterWidth,put=PutCharacterWidth))
    enum WdCharacterWidth CharacterWidth;
    __declspec(property(get=GetKana,put=PutKana))
    enum WdKana Kana;
    __declspec(property(get=GetTables))
    TablesPtr Tables;
    __declspec(property(get=GetWords))
    WordsPtr Words;
    __declspec(property(get=GetSentences))
    SentencesPtr Sentences;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters;
    __declspec(property(get=GetFootnotes))
    FootnotesPtr Footnotes;
    __declspec(property(get=GetEndnotes))
    EndnotesPtr Endnotes;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetCells))
    CellsPtr Cells;
    __declspec(property(get=GetSections))
    SectionsPtr Sections;
    __declspec(property(get=GetParagraphs))
    ParagraphsPtr Paragraphs;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetTextRetrievalMode,put=PutTextRetrievalMode))
    TextRetrievalModePtr TextRetrievalMode;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetPageSetup,put=PutPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetParagraphFormat,put=PutParagraphFormat))
    _ParagraphFormatPtr ParagraphFormat;
    __declspec(property(get=GetFields))
    FieldsPtr Fields;
    __declspec(property(get=GetFormFields))
    FormFieldsPtr FormFields;
    __declspec(property(get=GetFrames))
    FramesPtr Frames;
    __declspec(property(get=GetListFormat))
    ListFormatPtr ListFormat;
    __declspec(property(get=GetBookmarks))
    BookmarksPtr Bookmarks;
    __declspec(property(get=GetBoldBi,put=PutBoldBi))
    long BoldBi;
    __declspec(property(get=GetItalicBi,put=PutItalicBi))
    long ItalicBi;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetGrammarChecked,put=PutGrammarChecked))
    VARIANT_BOOL GrammarChecked;
    __declspec(property(get=GetSpellingChecked,put=PutSpellingChecked))
    VARIANT_BOOL SpellingChecked;
    __declspec(property(get=GetFind))
    FindPtr Find;
    __declspec(property(get=GetLanguageDetected,put=PutLanguageDetected))
    VARIANT_BOOL LanguageDetected;
    __declspec(property(get=GetFitTextWidth,put=PutFitTextWidth))
    float FitTextWidth;
    __declspec(property(get=GetHorizontalInVertical,put=PutHorizontalInVertical))
    enum WdHorizontalInVerticalType HorizontalInVertical;
    __declspec(property(get=GetTwoLinesInOne,put=PutTwoLinesInOne))
    enum WdTwoLinesInOneType TwoLinesInOne;
    __declspec(property(get=GetCombineCharacters,put=PutCombineCharacters))
    VARIANT_BOOL CombineCharacters;
    __declspec(property(get=GetBold,put=PutBold))
    long Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    long Italic;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    enum WdUnderline Underline;
    __declspec(property(get=GetEmphasisMark,put=PutEmphasisMark))
    enum WdEmphasisMark EmphasisMark;
    __declspec(property(get=GetDisableCharacterSpaceGrid,put=PutDisableCharacterSpaceGrid))
    VARIANT_BOOL DisableCharacterSpaceGrid;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t prop );
    RangePtr GetFormattedText ( );
    void PutFormattedText (
        struct Range * prop );
    long GetStart ( );
    void PutStart (
        long prop );
    long GetEnd ( );
    void PutEnd (
        long prop );
    _FontPtr GetFont ( );
    void PutFont (
        struct _Font * prop );
    RangePtr GetDuplicate ( );
    enum WdStoryType GetStoryType ( );
    TablesPtr GetTables ( );
    WordsPtr GetWords ( );
    SentencesPtr GetSentences ( );
    CharactersPtr GetCharacters ( );
    FootnotesPtr GetFootnotes ( );
    EndnotesPtr GetEndnotes ( );
    CommentsPtr GetComments ( );
    CellsPtr GetCells ( );
    SectionsPtr GetSections ( );
    ParagraphsPtr GetParagraphs ( );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    ShadingPtr GetShading ( );
    TextRetrievalModePtr GetTextRetrievalMode ( );
    void PutTextRetrievalMode (
        struct TextRetrievalMode * prop );
    FieldsPtr GetFields ( );
    FormFieldsPtr GetFormFields ( );
    FramesPtr GetFrames ( );
    _ParagraphFormatPtr GetParagraphFormat ( );
    void PutParagraphFormat (
        struct _ParagraphFormat * prop );
    ListFormatPtr GetListFormat ( );
    BookmarksPtr GetBookmarks ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetBold ( );
    void PutBold (
        long prop );
    long GetItalic ( );
    void PutItalic (
        long prop );
    enum WdUnderline GetUnderline ( );
    void PutUnderline (
        enum WdUnderline prop );
    enum WdEmphasisMark GetEmphasisMark ( );
    void PutEmphasisMark (
        enum WdEmphasisMark prop );
    VARIANT_BOOL GetDisableCharacterSpaceGrid ( );
    void PutDisableCharacterSpaceGrid (
        VARIANT_BOOL prop );
    RevisionsPtr GetRevisions ( );
    _variant_t GetStyle ( );
    void PutStyle (
        VARIANT * prop );
    long GetStoryLength ( );
    enum WdLanguageID GetLanguageID ( );
    void PutLanguageID (
        enum WdLanguageID prop );
    SynonymInfoPtr GetSynonymInfo ( );
    HyperlinksPtr GetHyperlinks ( );
    ListParagraphsPtr GetListParagraphs ( );
    SubdocumentsPtr GetSubdocuments ( );
    VARIANT_BOOL GetGrammarChecked ( );
    void PutGrammarChecked (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSpellingChecked ( );
    void PutSpellingChecked (
        VARIANT_BOOL prop );
    enum WdColorIndex GetHighlightColorIndex ( );
    void PutHighlightColorIndex (
        enum WdColorIndex prop );
    ColumnsPtr GetColumns ( );
    RowsPtr GetRows ( );
    long GetCanEdit ( );
    long GetCanPaste ( );
    VARIANT_BOOL GetIsEndOfRowMark ( );
    long GetBookmarkID ( );
    long GetPreviousBookmarkID ( );
    FindPtr GetFind ( );
    PageSetupPtr GetPageSetup ( );
    void PutPageSetup (
        struct PageSetup * prop );
    ShapeRangePtr GetShapeRange ( );
    enum WdCharacterCase GetCase ( );
    void PutCase (
        enum WdCharacterCase prop );
    _variant_t GetInformation (
        enum WdInformation Type );
    ReadabilityStatisticsPtr GetReadabilityStatistics ( );
    ProofreadingErrorsPtr GetGrammaticalErrors ( );
    ProofreadingErrorsPtr GetSpellingErrors ( );
    enum WdTextOrientation GetOrientation ( );
    void PutOrientation (
        enum WdTextOrientation prop );
    InlineShapesPtr GetInlineShapes ( );
    RangePtr GetNextStoryRange ( );
    enum WdLanguageID GetLanguageIDFarEast ( );
    void PutLanguageIDFarEast (
        enum WdLanguageID prop );
    enum WdLanguageID GetLanguageIDOther ( );
    void PutLanguageIDOther (
        enum WdLanguageID prop );
    HRESULT Select ( );
    HRESULT SetRange (
        long Start,
        long End );
    HRESULT Collapse (
        VARIANT * Direction = &vtMissing );
    HRESULT InsertBefore (
        _bstr_t Text );
    HRESULT InsertAfter (
        _bstr_t Text );
    RangePtr Next (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing );
    RangePtr Previous (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing );
    long StartOf (
        VARIANT * Unit = &vtMissing,
        VARIANT * Extend = &vtMissing );
    long EndOf (
        VARIANT * Unit = &vtMissing,
        VARIANT * Extend = &vtMissing );
    long Move (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing );
    long MoveStart (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing );
    long MoveEnd (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing );
    long MoveWhile (
        VARIANT * Cset,
        VARIANT * Count = &vtMissing );
    long MoveStartWhile (
        VARIANT * Cset,
        VARIANT * Count = &vtMissing );
    long MoveEndWhile (
        VARIANT * Cset,
        VARIANT * Count = &vtMissing );
    long MoveUntil (
        VARIANT * Cset,
        VARIANT * Count = &vtMissing );
    long MoveStartUntil (
        VARIANT * Cset,
        VARIANT * Count = &vtMissing );
    long MoveEndUntil (
        VARIANT * Cset,
        VARIANT * Count = &vtMissing );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Paste ( );
    HRESULT InsertBreak (
        VARIANT * Type = &vtMissing );
    HRESULT InsertFile (
        _bstr_t FileName,
        VARIANT * Range = &vtMissing,
        VARIANT * ConfirmConversions = &vtMissing,
        VARIANT * Link = &vtMissing,
        VARIANT * Attachment = &vtMissing );
    VARIANT_BOOL InStory (
        struct Range * Range );
    VARIANT_BOOL InRange (
        struct Range * Range );
    long Delete (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing );
    HRESULT WholeStory ( );
    long Expand (
        VARIANT * Unit = &vtMissing );
    HRESULT InsertParagraph ( );
    HRESULT InsertParagraphAfter ( );
    TablePtr ConvertToTableOld (
        VARIANT * Separator = &vtMissing,
        VARIANT * NumRows = &vtMissing,
        VARIANT * NumColumns = &vtMissing,
        VARIANT * InitialColumnWidth = &vtMissing,
        VARIANT * Format = &vtMissing,
        VARIANT * ApplyBorders = &vtMissing,
        VARIANT * ApplyShading = &vtMissing,
        VARIANT * ApplyFont = &vtMissing,
        VARIANT * ApplyColor = &vtMissing,
        VARIANT * ApplyHeadingRows = &vtMissing,
        VARIANT * ApplyLastRow = &vtMissing,
        VARIANT * ApplyFirstColumn = &vtMissing,
        VARIANT * ApplyLastColumn = &vtMissing,
        VARIANT * AutoFit = &vtMissing );
    HRESULT InsertDateTimeOld (
        VARIANT * DateTimeFormat = &vtMissing,
        VARIANT * InsertAsField = &vtMissing,
        VARIANT * InsertAsFullWidth = &vtMissing );
    HRESULT InsertSymbol (
        long CharacterNumber,
        VARIANT * Font = &vtMissing,
        VARIANT * Unicode = &vtMissing,
        VARIANT * Bias = &vtMissing );
    HRESULT InsertCrossReference (
        VARIANT * ReferenceType,
        enum WdReferenceKind ReferenceKind,
        VARIANT * ReferenceItem,
        VARIANT * InsertAsHyperlink = &vtMissing,
        VARIANT * IncludePosition = &vtMissing );
    HRESULT InsertCaption (
        VARIANT * Label,
        VARIANT * Title = &vtMissing,
        VARIANT * TitleAutoText = &vtMissing,
        VARIANT * Position = &vtMissing );
    HRESULT CopyAsPicture ( );
    HRESULT SortOld (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * FieldNumber = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * FieldNumber2 = &vtMissing,
        VARIANT * SortFieldType2 = &vtMissing,
        VARIANT * SortOrder2 = &vtMissing,
        VARIANT * FieldNumber3 = &vtMissing,
        VARIANT * SortFieldType3 = &vtMissing,
        VARIANT * SortOrder3 = &vtMissing,
        VARIANT * SortColumn = &vtMissing,
        VARIANT * Separator = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * LanguageID = &vtMissing );
    HRESULT SortAscending ( );
    HRESULT SortDescending ( );
    VARIANT_BOOL IsEqual (
        struct Range * Range );
    float Calculate ( );
    RangePtr GoTo (
        VARIANT * What = &vtMissing,
        VARIANT * Which = &vtMissing,
        VARIANT * Count = &vtMissing,
        VARIANT * Name = &vtMissing );
    RangePtr GoToNext (
        enum WdGoToItem What );
    RangePtr GoToPrevious (
        enum WdGoToItem What );
    HRESULT PasteSpecial (
        VARIANT * IconIndex = &vtMissing,
        VARIANT * Link = &vtMissing,
        VARIANT * Placement = &vtMissing,
        VARIANT * DisplayAsIcon = &vtMissing,
        VARIANT * DataType = &vtMissing,
        VARIANT * IconFileName = &vtMissing,
        VARIANT * IconLabel = &vtMissing );
    HRESULT LookupNameProperties ( );
    long ComputeStatistics (
        enum WdStatistic Statistic );
    HRESULT Relocate (
        long Direction );
    HRESULT CheckSynonyms ( );
    HRESULT SubscribeTo (
        _bstr_t Edition,
        VARIANT * Format = &vtMissing );
    HRESULT CreatePublisher (
        VARIANT * Edition = &vtMissing,
        VARIANT * ContainsPICT = &vtMissing,
        VARIANT * ContainsRTF = &vtMissing,
        VARIANT * ContainsText = &vtMissing );
    HRESULT InsertAutoText ( );
    HRESULT InsertDatabase (
        VARIANT * Format = &vtMissing,
        VARIANT * Style = &vtMissing,
        VARIANT * LinkToSource = &vtMissing,
        VARIANT * Connection = &vtMissing,
        VARIANT * SQLStatement = &vtMissing,
        VARIANT * SQLStatement1 = &vtMissing,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * PasswordTemplate = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * WritePasswordTemplate = &vtMissing,
        VARIANT * DataSource = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * IncludeFields = &vtMissing );
    HRESULT AutoFormat ( );
    HRESULT CheckGrammar ( );
    HRESULT CheckSpelling (
        VARIANT * CustomDictionary = &vtMissing,
        VARIANT * IgnoreUppercase = &vtMissing,
        VARIANT * AlwaysSuggest = &vtMissing,
        VARIANT * CustomDictionary2 = &vtMissing,
        VARIANT * CustomDictionary3 = &vtMissing,
        VARIANT * CustomDictionary4 = &vtMissing,
        VARIANT * CustomDictionary5 = &vtMissing,
        VARIANT * CustomDictionary6 = &vtMissing,
        VARIANT * CustomDictionary7 = &vtMissing,
        VARIANT * CustomDictionary8 = &vtMissing,
        VARIANT * CustomDictionary9 = &vtMissing,
        VARIANT * CustomDictionary10 = &vtMissing );
    SpellingSuggestionsPtr GetSpellingSuggestions (
        VARIANT * CustomDictionary = &vtMissing,
        VARIANT * IgnoreUppercase = &vtMissing,
        VARIANT * MainDictionary = &vtMissing,
        VARIANT * SuggestionMode = &vtMissing,
        VARIANT * CustomDictionary2 = &vtMissing,
        VARIANT * CustomDictionary3 = &vtMissing,
        VARIANT * CustomDictionary4 = &vtMissing,
        VARIANT * CustomDictionary5 = &vtMissing,
        VARIANT * CustomDictionary6 = &vtMissing,
        VARIANT * CustomDictionary7 = &vtMissing,
        VARIANT * CustomDictionary8 = &vtMissing,
        VARIANT * CustomDictionary9 = &vtMissing,
        VARIANT * CustomDictionary10 = &vtMissing );
    HRESULT InsertParagraphBefore ( );
    HRESULT NextSubdocument ( );
    HRESULT PreviousSubdocument ( );
    HRESULT ConvertHangulAndHanja (
        VARIANT * ConversionsMode = &vtMissing,
        VARIANT * FastConversion = &vtMissing,
        VARIANT * CheckHangulEnding = &vtMissing,
        VARIANT * EnableRecentOrdering = &vtMissing,
        VARIANT * CustomDictionary = &vtMissing );
    HRESULT PasteAsNestedTable ( );
    HRESULT ModifyEnclosure (
        VARIANT * Style,
        VARIANT * Symbol = &vtMissing,
        VARIANT * EnclosedText = &vtMissing );
    HRESULT PhoneticGuide (
        _bstr_t Text,
        enum WdPhoneticGuideAlignmentType Alignment,
        long Raise,
        long FontSize,
        _bstr_t FontName );
    HRESULT InsertDateTime (
        VARIANT * DateTimeFormat = &vtMissing,
        VARIANT * InsertAsField = &vtMissing,
        VARIANT * InsertAsFullWidth = &vtMissing,
        VARIANT * DateLanguage = &vtMissing,
        VARIANT * CalendarType = &vtMissing );
    HRESULT Sort (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * FieldNumber = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * FieldNumber2 = &vtMissing,
        VARIANT * SortFieldType2 = &vtMissing,
        VARIANT * SortOrder2 = &vtMissing,
        VARIANT * FieldNumber3 = &vtMissing,
        VARIANT * SortFieldType3 = &vtMissing,
        VARIANT * SortOrder3 = &vtMissing,
        VARIANT * SortColumn = &vtMissing,
        VARIANT * Separator = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * BidiSort = &vtMissing,
        VARIANT * IgnoreThe = &vtMissing,
        VARIANT * IgnoreKashida = &vtMissing,
        VARIANT * IgnoreDiacritics = &vtMissing,
        VARIANT * IgnoreHe = &vtMissing,
        VARIANT * LanguageID = &vtMissing );
    HRESULT DetectLanguage ( );
    TablePtr ConvertToTable (
        VARIANT * Separator = &vtMissing,
        VARIANT * NumRows = &vtMissing,
        VARIANT * NumColumns = &vtMissing,
        VARIANT * InitialColumnWidth = &vtMissing,
        VARIANT * Format = &vtMissing,
        VARIANT * ApplyBorders = &vtMissing,
        VARIANT * ApplyShading = &vtMissing,
        VARIANT * ApplyFont = &vtMissing,
        VARIANT * ApplyColor = &vtMissing,
        VARIANT * ApplyHeadingRows = &vtMissing,
        VARIANT * ApplyLastRow = &vtMissing,
        VARIANT * ApplyFirstColumn = &vtMissing,
        VARIANT * ApplyLastColumn = &vtMissing,
        VARIANT * AutoFit = &vtMissing,
        VARIANT * AutoFitBehavior = &vtMissing,
        VARIANT * DefaultTableBehavior = &vtMissing );
    HRESULT TCSCConverter (
        enum WdTCSCConverterDirection WdTCSCConverterDirection,
        VARIANT_BOOL CommonTerms,
        VARIANT_BOOL UseVariants );
    VARIANT_BOOL GetLanguageDetected ( );
    void PutLanguageDetected (
        VARIANT_BOOL prop );
    float GetFitTextWidth ( );
    void PutFitTextWidth (
        float prop );
    enum WdHorizontalInVerticalType GetHorizontalInVertical ( );
    void PutHorizontalInVertical (
        enum WdHorizontalInVerticalType prop );
    enum WdTwoLinesInOneType GetTwoLinesInOne ( );
    void PutTwoLinesInOne (
        enum WdTwoLinesInOneType prop );
    VARIANT_BOOL GetCombineCharacters ( );
    void PutCombineCharacters (
        VARIANT_BOOL prop );
    long GetNoProofing ( );
    void PutNoProofing (
        long prop );
    TablesPtr GetTopLevelTables ( );
    Office::ScriptsPtr GetScripts ( );
    enum WdCharacterWidth GetCharacterWidth ( );
    void PutCharacterWidth (
        enum WdCharacterWidth prop );
    enum WdKana GetKana ( );
    void PutKana (
        enum WdKana prop );
    long GetBoldBi ( );
    void PutBoldBi (
        long prop );
    long GetItalicBi ( );
    void PutItalicBi (
        long prop );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Text (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_FormattedText (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall put_FormattedText (
        struct Range * prop ) = 0;
    virtual HRESULT __stdcall get_Start (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Start (
        long prop ) = 0;
    virtual HRESULT __stdcall get_End (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_End (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct _Font * * prop ) = 0;
    virtual HRESULT __stdcall put_Font (
        struct _Font * prop ) = 0;
    virtual HRESULT __stdcall get_Duplicate (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_StoryType (
        enum WdStoryType * prop ) = 0;
    virtual HRESULT __stdcall get_Tables (
        struct Tables * * prop ) = 0;
    virtual HRESULT __stdcall get_Words (
        struct Words * * prop ) = 0;
    virtual HRESULT __stdcall get_Sentences (
        struct Sentences * * prop ) = 0;
    virtual HRESULT __stdcall get_Characters (
        struct Characters * * prop ) = 0;
    virtual HRESULT __stdcall get_Footnotes (
        struct Footnotes * * prop ) = 0;
    virtual HRESULT __stdcall get_Endnotes (
        struct Endnotes * * prop ) = 0;
    virtual HRESULT __stdcall get_Comments (
        struct Comments * * prop ) = 0;
    virtual HRESULT __stdcall get_Cells (
        struct Cells * * prop ) = 0;
    virtual HRESULT __stdcall get_Sections (
        struct Sections * * prop ) = 0;
    virtual HRESULT __stdcall get_Paragraphs (
        struct Paragraphs * * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall get_TextRetrievalMode (
        struct TextRetrievalMode * * prop ) = 0;
    virtual HRESULT __stdcall put_TextRetrievalMode (
        struct TextRetrievalMode * prop ) = 0;
    virtual HRESULT __stdcall get_Fields (
        struct Fields * * prop ) = 0;
    virtual HRESULT __stdcall get_FormFields (
        struct FormFields * * prop ) = 0;
    virtual HRESULT __stdcall get_Frames (
        struct Frames * * prop ) = 0;
    virtual HRESULT __stdcall get_ParagraphFormat (
        struct _ParagraphFormat * * prop ) = 0;
    virtual HRESULT __stdcall put_ParagraphFormat (
        struct _ParagraphFormat * prop ) = 0;
    virtual HRESULT __stdcall get_ListFormat (
        struct ListFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Bookmarks (
        struct Bookmarks * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Bold (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Bold (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Italic (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Italic (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Underline (
        enum WdUnderline * prop ) = 0;
    virtual HRESULT __stdcall put_Underline (
        enum WdUnderline prop ) = 0;
    virtual HRESULT __stdcall get_EmphasisMark (
        enum WdEmphasisMark * prop ) = 0;
    virtual HRESULT __stdcall put_EmphasisMark (
        enum WdEmphasisMark prop ) = 0;
    virtual HRESULT __stdcall get_DisableCharacterSpaceGrid (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisableCharacterSpaceGrid (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Revisions (
        struct Revisions * * prop ) = 0;
    virtual HRESULT __stdcall get_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_StoryLength (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageID (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageID (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_SynonymInfo (
        struct SynonymInfo * * prop ) = 0;
    virtual HRESULT __stdcall get_Hyperlinks (
        struct Hyperlinks * * prop ) = 0;
    virtual HRESULT __stdcall get_ListParagraphs (
        struct ListParagraphs * * prop ) = 0;
    virtual HRESULT __stdcall get_Subdocuments (
        struct Subdocuments * * prop ) = 0;
    virtual HRESULT __stdcall get_GrammarChecked (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_GrammarChecked (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SpellingChecked (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SpellingChecked (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HighlightColorIndex (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_HighlightColorIndex (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_Columns (
        struct Columns * * prop ) = 0;
    virtual HRESULT __stdcall get_Rows (
        struct Rows * * prop ) = 0;
    virtual HRESULT __stdcall get_CanEdit (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_CanPaste (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_IsEndOfRowMark (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_BookmarkID (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_PreviousBookmarkID (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Find (
        struct Find * * prop ) = 0;
    virtual HRESULT __stdcall get_PageSetup (
        struct PageSetup * * prop ) = 0;
    virtual HRESULT __stdcall put_PageSetup (
        struct PageSetup * prop ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * prop ) = 0;
    virtual HRESULT __stdcall get_Case (
        enum WdCharacterCase * prop ) = 0;
    virtual HRESULT __stdcall put_Case (
        enum WdCharacterCase prop ) = 0;
    virtual HRESULT __stdcall get_Information (
        enum WdInformation Type,
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_ReadabilityStatistics (
        struct ReadabilityStatistics * * prop ) = 0;
    virtual HRESULT __stdcall get_GrammaticalErrors (
        struct ProofreadingErrors * * prop ) = 0;
    virtual HRESULT __stdcall get_SpellingErrors (
        struct ProofreadingErrors * * prop ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        enum WdTextOrientation * prop ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        enum WdTextOrientation prop ) = 0;
    virtual HRESULT __stdcall get_InlineShapes (
        struct InlineShapes * * prop ) = 0;
    virtual HRESULT __stdcall get_NextStoryRange (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageIDFarEast (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageIDFarEast (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_LanguageIDOther (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageIDOther (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_SetRange (
        long Start,
        long End ) = 0;
    virtual HRESULT __stdcall raw_Collapse (
        VARIANT * Direction = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertBefore (
        BSTR Text ) = 0;
    virtual HRESULT __stdcall raw_InsertAfter (
        BSTR Text ) = 0;
    virtual HRESULT __stdcall raw_Next (
        VARIANT * Unit,
        VARIANT * Count,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_Previous (
        VARIANT * Unit,
        VARIANT * Count,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_StartOf (
        VARIANT * Unit,
        VARIANT * Extend,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_EndOf (
        VARIANT * Unit,
        VARIANT * Extend,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT * Unit,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveStart (
        VARIANT * Unit,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveEnd (
        VARIANT * Unit,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveWhile (
        VARIANT * Cset,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveStartWhile (
        VARIANT * Cset,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveEndWhile (
        VARIANT * Cset,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveUntil (
        VARIANT * Cset,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveStartUntil (
        VARIANT * Cset,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveEndUntil (
        VARIANT * Cset,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Cut ( ) = 0;
    virtual HRESULT __stdcall raw_Copy ( ) = 0;
    virtual HRESULT __stdcall raw_Paste ( ) = 0;
    virtual HRESULT __stdcall raw_InsertBreak (
        VARIANT * Type = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertFile (
        BSTR FileName,
        VARIANT * Range = &vtMissing,
        VARIANT * ConfirmConversions = &vtMissing,
        VARIANT * Link = &vtMissing,
        VARIANT * Attachment = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InStory (
        struct Range * Range,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_InRange (
        struct Range * Range,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * Unit,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_WholeStory ( ) = 0;
    virtual HRESULT __stdcall raw_Expand (
        VARIANT * Unit,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_InsertParagraph ( ) = 0;
    virtual HRESULT __stdcall raw_InsertParagraphAfter ( ) = 0;
    virtual HRESULT __stdcall raw_ConvertToTableOld (
        VARIANT * Separator,
        VARIANT * NumRows,
        VARIANT * NumColumns,
        VARIANT * InitialColumnWidth,
        VARIANT * Format,
        VARIANT * ApplyBorders,
        VARIANT * ApplyShading,
        VARIANT * ApplyFont,
        VARIANT * ApplyColor,
        VARIANT * ApplyHeadingRows,
        VARIANT * ApplyLastRow,
        VARIANT * ApplyFirstColumn,
        VARIANT * ApplyLastColumn,
        VARIANT * AutoFit,
        struct Table * * prop ) = 0;
    virtual HRESULT __stdcall raw_InsertDateTimeOld (
        VARIANT * DateTimeFormat = &vtMissing,
        VARIANT * InsertAsField = &vtMissing,
        VARIANT * InsertAsFullWidth = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertSymbol (
        long CharacterNumber,
        VARIANT * Font = &vtMissing,
        VARIANT * Unicode = &vtMissing,
        VARIANT * Bias = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertCrossReference (
        VARIANT * ReferenceType,
        enum WdReferenceKind ReferenceKind,
        VARIANT * ReferenceItem,
        VARIANT * InsertAsHyperlink = &vtMissing,
        VARIANT * IncludePosition = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertCaption (
        VARIANT * Label,
        VARIANT * Title = &vtMissing,
        VARIANT * TitleAutoText = &vtMissing,
        VARIANT * Position = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_CopyAsPicture ( ) = 0;
    virtual HRESULT __stdcall raw_SortOld (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * FieldNumber = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * FieldNumber2 = &vtMissing,
        VARIANT * SortFieldType2 = &vtMissing,
        VARIANT * SortOrder2 = &vtMissing,
        VARIANT * FieldNumber3 = &vtMissing,
        VARIANT * SortFieldType3 = &vtMissing,
        VARIANT * SortOrder3 = &vtMissing,
        VARIANT * SortColumn = &vtMissing,
        VARIANT * Separator = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * LanguageID = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SortAscending ( ) = 0;
    virtual HRESULT __stdcall raw_SortDescending ( ) = 0;
    virtual HRESULT __stdcall raw_IsEqual (
        struct Range * Range,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_Calculate (
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_GoTo (
        VARIANT * What,
        VARIANT * Which,
        VARIANT * Count,
        VARIANT * Name,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_GoToNext (
        enum WdGoToItem What,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_GoToPrevious (
        enum WdGoToItem What,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_PasteSpecial (
        VARIANT * IconIndex = &vtMissing,
        VARIANT * Link = &vtMissing,
        VARIANT * Placement = &vtMissing,
        VARIANT * DisplayAsIcon = &vtMissing,
        VARIANT * DataType = &vtMissing,
        VARIANT * IconFileName = &vtMissing,
        VARIANT * IconLabel = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_LookupNameProperties ( ) = 0;
    virtual HRESULT __stdcall raw_ComputeStatistics (
        enum WdStatistic Statistic,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Relocate (
        long Direction ) = 0;
    virtual HRESULT __stdcall raw_CheckSynonyms ( ) = 0;
    virtual HRESULT __stdcall raw_SubscribeTo (
        BSTR Edition,
        VARIANT * Format = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_CreatePublisher (
        VARIANT * Edition = &vtMissing,
        VARIANT * ContainsPICT = &vtMissing,
        VARIANT * ContainsRTF = &vtMissing,
        VARIANT * ContainsText = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertAutoText ( ) = 0;
    virtual HRESULT __stdcall raw_InsertDatabase (
        VARIANT * Format = &vtMissing,
        VARIANT * Style = &vtMissing,
        VARIANT * LinkToSource = &vtMissing,
        VARIANT * Connection = &vtMissing,
        VARIANT * SQLStatement = &vtMissing,
        VARIANT * SQLStatement1 = &vtMissing,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * PasswordTemplate = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * WritePasswordTemplate = &vtMissing,
        VARIANT * DataSource = &vtMissing,
        VARIANT * From = &vtMissing,
        VARIANT * To = &vtMissing,
        VARIANT * IncludeFields = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_AutoFormat ( ) = 0;
    virtual HRESULT __stdcall raw_CheckGrammar ( ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT * CustomDictionary = &vtMissing,
        VARIANT * IgnoreUppercase = &vtMissing,
        VARIANT * AlwaysSuggest = &vtMissing,
        VARIANT * CustomDictionary2 = &vtMissing,
        VARIANT * CustomDictionary3 = &vtMissing,
        VARIANT * CustomDictionary4 = &vtMissing,
        VARIANT * CustomDictionary5 = &vtMissing,
        VARIANT * CustomDictionary6 = &vtMissing,
        VARIANT * CustomDictionary7 = &vtMissing,
        VARIANT * CustomDictionary8 = &vtMissing,
        VARIANT * CustomDictionary9 = &vtMissing,
        VARIANT * CustomDictionary10 = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_GetSpellingSuggestions (
        VARIANT * CustomDictionary,
        VARIANT * IgnoreUppercase,
        VARIANT * MainDictionary,
        VARIANT * SuggestionMode,
        VARIANT * CustomDictionary2,
        VARIANT * CustomDictionary3,
        VARIANT * CustomDictionary4,
        VARIANT * CustomDictionary5,
        VARIANT * CustomDictionary6,
        VARIANT * CustomDictionary7,
        VARIANT * CustomDictionary8,
        VARIANT * CustomDictionary9,
        VARIANT * CustomDictionary10,
        struct SpellingSuggestions * * prop ) = 0;
    virtual HRESULT __stdcall raw_InsertParagraphBefore ( ) = 0;
    virtual HRESULT __stdcall raw_NextSubdocument ( ) = 0;
    virtual HRESULT __stdcall raw_PreviousSubdocument ( ) = 0;
    virtual HRESULT __stdcall raw_ConvertHangulAndHanja (
        VARIANT * ConversionsMode = &vtMissing,
        VARIANT * FastConversion = &vtMissing,
        VARIANT * CheckHangulEnding = &vtMissing,
        VARIANT * EnableRecentOrdering = &vtMissing,
        VARIANT * CustomDictionary = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_PasteAsNestedTable ( ) = 0;
    virtual HRESULT __stdcall raw_ModifyEnclosure (
        VARIANT * Style,
        VARIANT * Symbol = &vtMissing,
        VARIANT * EnclosedText = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_PhoneticGuide (
        BSTR Text,
        enum WdPhoneticGuideAlignmentType Alignment,
        long Raise,
        long FontSize,
        BSTR FontName ) = 0;
    virtual HRESULT __stdcall raw_InsertDateTime (
        VARIANT * DateTimeFormat = &vtMissing,
        VARIANT * InsertAsField = &vtMissing,
        VARIANT * InsertAsFullWidth = &vtMissing,
        VARIANT * DateLanguage = &vtMissing,
        VARIANT * CalendarType = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Sort (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * FieldNumber = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * FieldNumber2 = &vtMissing,
        VARIANT * SortFieldType2 = &vtMissing,
        VARIANT * SortOrder2 = &vtMissing,
        VARIANT * FieldNumber3 = &vtMissing,
        VARIANT * SortFieldType3 = &vtMissing,
        VARIANT * SortOrder3 = &vtMissing,
        VARIANT * SortColumn = &vtMissing,
        VARIANT * Separator = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * BidiSort = &vtMissing,
        VARIANT * IgnoreThe = &vtMissing,
        VARIANT * IgnoreKashida = &vtMissing,
        VARIANT * IgnoreDiacritics = &vtMissing,
        VARIANT * IgnoreHe = &vtMissing,
        VARIANT * LanguageID = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_DetectLanguage ( ) = 0;
    virtual HRESULT __stdcall raw_ConvertToTable (
        VARIANT * Separator,
        VARIANT * NumRows,
        VARIANT * NumColumns,
        VARIANT * InitialColumnWidth,
        VARIANT * Format,
        VARIANT * ApplyBorders,
        VARIANT * ApplyShading,
        VARIANT * ApplyFont,
        VARIANT * ApplyColor,
        VARIANT * ApplyHeadingRows,
        VARIANT * ApplyLastRow,
        VARIANT * ApplyFirstColumn,
        VARIANT * ApplyLastColumn,
        VARIANT * AutoFit,
        VARIANT * AutoFitBehavior,
        VARIANT * DefaultTableBehavior,
        struct Table * * prop ) = 0;
    virtual HRESULT __stdcall raw_TCSCConverter (
        enum WdTCSCConverterDirection WdTCSCConverterDirection,
        VARIANT_BOOL CommonTerms,
        VARIANT_BOOL UseVariants ) = 0;
    virtual HRESULT __stdcall get_LanguageDetected (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageDetected (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_FitTextWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_FitTextWidth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_HorizontalInVertical (
        enum WdHorizontalInVerticalType * prop ) = 0;
    virtual HRESULT __stdcall put_HorizontalInVertical (
        enum WdHorizontalInVerticalType prop ) = 0;
    virtual HRESULT __stdcall get_TwoLinesInOne (
        enum WdTwoLinesInOneType * prop ) = 0;
    virtual HRESULT __stdcall put_TwoLinesInOne (
        enum WdTwoLinesInOneType prop ) = 0;
    virtual HRESULT __stdcall get_CombineCharacters (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CombineCharacters (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_NoProofing (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_NoProofing (
        long prop ) = 0;
    virtual HRESULT __stdcall get_TopLevelTables (
        struct Tables * * prop ) = 0;
    virtual HRESULT __stdcall get_Scripts (
        struct Office::Scripts * * prop ) = 0;
    virtual HRESULT __stdcall get_CharacterWidth (
        enum WdCharacterWidth * prop ) = 0;
    virtual HRESULT __stdcall put_CharacterWidth (
        enum WdCharacterWidth prop ) = 0;
    virtual HRESULT __stdcall get_Kana (
        enum WdKana * prop ) = 0;
    virtual HRESULT __stdcall put_Kana (
        enum WdKana prop ) = 0;
    virtual HRESULT __stdcall get_BoldBi (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_BoldBi (
        long prop ) = 0;
    virtual HRESULT __stdcall get_ItalicBi (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_ItalicBi (
        long prop ) = 0;
    virtual HRESULT __stdcall get_ID (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ID (
        BSTR prop ) = 0;
};

struct __declspec(uuid("000209c0-0000-0000-c000-000000000046"))
ListFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetListLevelNumber,put=PutListLevelNumber))
    long ListLevelNumber;
    __declspec(property(get=GetList))
    ListPtr List;
    __declspec(property(get=GetListTemplate))
    ListTemplatePtr ListTemplate;
    __declspec(property(get=GetListValue))
    long ListValue;
    __declspec(property(get=GetSingleList))
    VARIANT_BOOL SingleList;
    __declspec(property(get=GetSingleListTemplate))
    VARIANT_BOOL SingleListTemplate;
    __declspec(property(get=GetListType))
    enum WdListType ListType;
    __declspec(property(get=GetListString))
    _bstr_t ListString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    long GetListLevelNumber ( );
    void PutListLevelNumber (
        long prop );
    ListPtr GetList ( );
    ListTemplatePtr GetListTemplate ( );
    long GetListValue ( );
    VARIANT_BOOL GetSingleList ( );
    VARIANT_BOOL GetSingleListTemplate ( );
    enum WdListType GetListType ( );
    _bstr_t GetListString ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdContinue CanContinuePreviousList (
        struct ListTemplate * ListTemplate );
    HRESULT RemoveNumbers (
        VARIANT * NumberType = &vtMissing );
    HRESULT ConvertNumbersToText (
        VARIANT * NumberType = &vtMissing );
    long CountNumberedItems (
        VARIANT * NumberType = &vtMissing,
        VARIANT * Level = &vtMissing );
    HRESULT ApplyBulletDefaultOld ( );
    HRESULT ApplyNumberDefaultOld ( );
    HRESULT ApplyOutlineNumberDefaultOld ( );
    HRESULT ApplyListTemplateOld (
        struct ListTemplate * ListTemplate,
        VARIANT * ContinuePreviousList = &vtMissing,
        VARIANT * ApplyTo = &vtMissing );
    HRESULT ListOutdent ( );
    HRESULT ListIndent ( );
    HRESULT ApplyBulletDefault (
        VARIANT * DefaultListBehavior = &vtMissing );
    HRESULT ApplyNumberDefault (
        VARIANT * DefaultListBehavior = &vtMissing );
    HRESULT ApplyOutlineNumberDefault (
        VARIANT * DefaultListBehavior = &vtMissing );
    HRESULT ApplyListTemplate (
        struct ListTemplate * ListTemplate,
        VARIANT * ContinuePreviousList = &vtMissing,
        VARIANT * ApplyTo = &vtMissing,
        VARIANT * DefaultListBehavior = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ListLevelNumber (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_ListLevelNumber (
        long prop ) = 0;
    virtual HRESULT __stdcall get_List (
        struct List * * prop ) = 0;
    virtual HRESULT __stdcall get_ListTemplate (
        struct ListTemplate * * prop ) = 0;
    virtual HRESULT __stdcall get_ListValue (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_SingleList (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_SingleListTemplate (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_ListType (
        enum WdListType * prop ) = 0;
    virtual HRESULT __stdcall get_ListString (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_CanContinuePreviousList (
        struct ListTemplate * ListTemplate,
        enum WdContinue * prop ) = 0;
    virtual HRESULT __stdcall raw_RemoveNumbers (
        VARIANT * NumberType = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ConvertNumbersToText (
        VARIANT * NumberType = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_CountNumberedItems (
        VARIANT * NumberType,
        VARIANT * Level,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_ApplyBulletDefaultOld ( ) = 0;
    virtual HRESULT __stdcall raw_ApplyNumberDefaultOld ( ) = 0;
    virtual HRESULT __stdcall raw_ApplyOutlineNumberDefaultOld ( ) = 0;
    virtual HRESULT __stdcall raw_ApplyListTemplateOld (
        struct ListTemplate * ListTemplate,
        VARIANT * ContinuePreviousList = &vtMissing,
        VARIANT * ApplyTo = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ListOutdent ( ) = 0;
    virtual HRESULT __stdcall raw_ListIndent ( ) = 0;
    virtual HRESULT __stdcall raw_ApplyBulletDefault (
        VARIANT * DefaultListBehavior = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ApplyNumberDefault (
        VARIANT * DefaultListBehavior = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ApplyOutlineNumberDefault (
        VARIANT * DefaultListBehavior = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ApplyListTemplate (
        struct ListTemplate * ListTemplate,
        VARIANT * ContinuePreviousList = &vtMissing,
        VARIANT * ApplyTo = &vtMissing,
        VARIANT * DefaultListBehavior = &vtMissing ) = 0;
};

struct __declspec(uuid("000209b0-0000-0000-c000-000000000046"))
Find : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLanguageIDOther,put=PutLanguageIDOther))
    enum WdLanguageID LanguageIDOther;
    __declspec(property(get=GetCorrectHangulEndings,put=PutCorrectHangulEndings))
    VARIANT_BOOL CorrectHangulEndings;
    __declspec(property(get=GetForward,put=PutForward))
    VARIANT_BOOL Forward;
    __declspec(property(get=GetFont,put=PutFont))
    _FontPtr Font;
    __declspec(property(get=GetFound))
    VARIANT_BOOL Found;
    __declspec(property(get=GetMatchAllWordForms,put=PutMatchAllWordForms))
    VARIANT_BOOL MatchAllWordForms;
    __declspec(property(get=GetMatchCase,put=PutMatchCase))
    VARIANT_BOOL MatchCase;
    __declspec(property(get=GetMatchWildcards,put=PutMatchWildcards))
    VARIANT_BOOL MatchWildcards;
    __declspec(property(get=GetMatchSoundsLike,put=PutMatchSoundsLike))
    VARIANT_BOOL MatchSoundsLike;
    __declspec(property(get=GetMatchWholeWord,put=PutMatchWholeWord))
    VARIANT_BOOL MatchWholeWord;
    __declspec(property(get=GetParagraphFormat,put=PutParagraphFormat))
    _ParagraphFormatPtr ParagraphFormat;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetLanguageID,put=PutLanguageID))
    enum WdLanguageID LanguageID;
    __declspec(property(get=GetHighlight,put=PutHighlight))
    long Highlight;
    __declspec(property(get=GetReplacement))
    ReplacementPtr Replacement;
    __declspec(property(get=GetFrame))
    FramePtr Frame;
    __declspec(property(get=GetWrap,put=PutWrap))
    enum WdFindWrap Wrap;
    __declspec(property(get=GetFormat,put=PutFormat))
    VARIANT_BOOL Format;
    __declspec(property(get=GetLanguageIDFarEast,put=PutLanguageIDFarEast))
    enum WdLanguageID LanguageIDFarEast;
    __declspec(property(get=GetNoProofing,put=PutNoProofing))
    long NoProofing;
    __declspec(property(get=GetMatchKashida,put=PutMatchKashida))
    VARIANT_BOOL MatchKashida;
    __declspec(property(get=GetMatchDiacritics,put=PutMatchDiacritics))
    VARIANT_BOOL MatchDiacritics;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMatchAlefHamza,put=PutMatchAlefHamza))
    VARIANT_BOOL MatchAlefHamza;
    __declspec(property(get=GetMatchControl,put=PutMatchControl))
    VARIANT_BOOL MatchControl;
    __declspec(property(get=GetMatchFuzzy,put=PutMatchFuzzy))
    VARIANT_BOOL MatchFuzzy;
    __declspec(property(get=GetMatchByte,put=PutMatchByte))
    VARIANT_BOOL MatchByte;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetForward ( );
    void PutForward (
        VARIANT_BOOL prop );
    _FontPtr GetFont ( );
    void PutFont (
        struct _Font * prop );
    VARIANT_BOOL GetFound ( );
    VARIANT_BOOL GetMatchAllWordForms ( );
    void PutMatchAllWordForms (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchCase ( );
    void PutMatchCase (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchWildcards ( );
    void PutMatchWildcards (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchSoundsLike ( );
    void PutMatchSoundsLike (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchWholeWord ( );
    void PutMatchWholeWord (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzy ( );
    void PutMatchFuzzy (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchByte ( );
    void PutMatchByte (
        VARIANT_BOOL prop );
    _ParagraphFormatPtr GetParagraphFormat ( );
    void PutParagraphFormat (
        struct _ParagraphFormat * prop );
    _variant_t GetStyle ( );
    void PutStyle (
        VARIANT * prop );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t prop );
    enum WdLanguageID GetLanguageID ( );
    void PutLanguageID (
        enum WdLanguageID prop );
    long GetHighlight ( );
    void PutHighlight (
        long prop );
    ReplacementPtr GetReplacement ( );
    FramePtr GetFrame ( );
    enum WdFindWrap GetWrap ( );
    void PutWrap (
        enum WdFindWrap prop );
    VARIANT_BOOL GetFormat ( );
    void PutFormat (
        VARIANT_BOOL prop );
    enum WdLanguageID GetLanguageIDFarEast ( );
    void PutLanguageIDFarEast (
        enum WdLanguageID prop );
    enum WdLanguageID GetLanguageIDOther ( );
    void PutLanguageIDOther (
        enum WdLanguageID prop );
    VARIANT_BOOL GetCorrectHangulEndings ( );
    void PutCorrectHangulEndings (
        VARIANT_BOOL prop );
    VARIANT_BOOL ExecuteOld (
        VARIANT * FindText = &vtMissing,
        VARIANT * MatchCase = &vtMissing,
        VARIANT * MatchWholeWord = &vtMissing,
        VARIANT * MatchWildcards = &vtMissing,
        VARIANT * MatchSoundsLike = &vtMissing,
        VARIANT * MatchAllWordForms = &vtMissing,
        VARIANT * Forward = &vtMissing,
        VARIANT * Wrap = &vtMissing,
        VARIANT * Format = &vtMissing,
        VARIANT * ReplaceWith = &vtMissing,
        VARIANT * Replace = &vtMissing );
    HRESULT ClearFormatting ( );
    HRESULT SetAllFuzzyOptions ( );
    HRESULT ClearAllFuzzyOptions ( );
    VARIANT_BOOL Execute (
        VARIANT * FindText = &vtMissing,
        VARIANT * MatchCase = &vtMissing,
        VARIANT * MatchWholeWord = &vtMissing,
        VARIANT * MatchWildcards = &vtMissing,
        VARIANT * MatchSoundsLike = &vtMissing,
        VARIANT * MatchAllWordForms = &vtMissing,
        VARIANT * Forward = &vtMissing,
        VARIANT * Wrap = &vtMissing,
        VARIANT * Format = &vtMissing,
        VARIANT * ReplaceWith = &vtMissing,
        VARIANT * Replace = &vtMissing,
        VARIANT * MatchKashida = &vtMissing,
        VARIANT * MatchDiacritics = &vtMissing,
        VARIANT * MatchAlefHamza = &vtMissing,
        VARIANT * MatchControl = &vtMissing );
    long GetNoProofing ( );
    void PutNoProofing (
        long prop );
    VARIANT_BOOL GetMatchKashida ( );
    void PutMatchKashida (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchDiacritics ( );
    void PutMatchDiacritics (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchAlefHamza ( );
    void PutMatchAlefHamza (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchControl ( );
    void PutMatchControl (
        VARIANT_BOOL prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Forward (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Forward (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct _Font * * prop ) = 0;
    virtual HRESULT __stdcall put_Font (
        struct _Font * prop ) = 0;
    virtual HRESULT __stdcall get_Found (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_MatchAllWordForms (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchAllWordForms (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchCase (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchCase (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchWildcards (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchWildcards (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchSoundsLike (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchSoundsLike (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchWholeWord (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchWholeWord (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzy (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzy (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchByte (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchByte (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ParagraphFormat (
        struct _ParagraphFormat * * prop ) = 0;
    virtual HRESULT __stdcall put_ParagraphFormat (
        struct _ParagraphFormat * prop ) = 0;
    virtual HRESULT __stdcall get_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_LanguageID (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageID (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_Highlight (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Highlight (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Replacement (
        struct Replacement * * prop ) = 0;
    virtual HRESULT __stdcall get_Frame (
        struct Frame * * prop ) = 0;
    virtual HRESULT __stdcall get_Wrap (
        enum WdFindWrap * prop ) = 0;
    virtual HRESULT __stdcall put_Wrap (
        enum WdFindWrap prop ) = 0;
    virtual HRESULT __stdcall get_Format (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Format (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_LanguageIDFarEast (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageIDFarEast (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_LanguageIDOther (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageIDOther (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_CorrectHangulEndings (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CorrectHangulEndings (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_ExecuteOld (
        VARIANT * FindText,
        VARIANT * MatchCase,
        VARIANT * MatchWholeWord,
        VARIANT * MatchWildcards,
        VARIANT * MatchSoundsLike,
        VARIANT * MatchAllWordForms,
        VARIANT * Forward,
        VARIANT * Wrap,
        VARIANT * Format,
        VARIANT * ReplaceWith,
        VARIANT * Replace,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_ClearFormatting ( ) = 0;
    virtual HRESULT __stdcall raw_SetAllFuzzyOptions ( ) = 0;
    virtual HRESULT __stdcall raw_ClearAllFuzzyOptions ( ) = 0;
    virtual HRESULT __stdcall raw_Execute (
        VARIANT * FindText,
        VARIANT * MatchCase,
        VARIANT * MatchWholeWord,
        VARIANT * MatchWildcards,
        VARIANT * MatchSoundsLike,
        VARIANT * MatchAllWordForms,
        VARIANT * Forward,
        VARIANT * Wrap,
        VARIANT * Format,
        VARIANT * ReplaceWith,
        VARIANT * Replace,
        VARIANT * MatchKashida,
        VARIANT * MatchDiacritics,
        VARIANT * MatchAlefHamza,
        VARIANT * MatchControl,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_NoProofing (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_NoProofing (
        long prop ) = 0;
    virtual HRESULT __stdcall get_MatchKashida (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchKashida (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchDiacritics (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchDiacritics (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchAlefHamza (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchAlefHamza (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchControl (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchControl (
        VARIANT_BOOL prop ) = 0;
};

struct __declspec(uuid("000209b1-0000-0000-c000-000000000046"))
Replacement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFont,put=PutFont))
    _FontPtr Font;
    __declspec(property(get=GetParagraphFormat,put=PutParagraphFormat))
    _ParagraphFormatPtr ParagraphFormat;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetLanguageID,put=PutLanguageID))
    enum WdLanguageID LanguageID;
    __declspec(property(get=GetHighlight,put=PutHighlight))
    long Highlight;
    __declspec(property(get=GetFrame))
    FramePtr Frame;
    __declspec(property(get=GetLanguageIDFarEast,put=PutLanguageIDFarEast))
    enum WdLanguageID LanguageIDFarEast;
    __declspec(property(get=GetNoProofing,put=PutNoProofing))
    long NoProofing;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _FontPtr GetFont ( );
    void PutFont (
        struct _Font * prop );
    _ParagraphFormatPtr GetParagraphFormat ( );
    void PutParagraphFormat (
        struct _ParagraphFormat * prop );
    _variant_t GetStyle ( );
    void PutStyle (
        VARIANT * prop );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t prop );
    enum WdLanguageID GetLanguageID ( );
    void PutLanguageID (
        enum WdLanguageID prop );
    long GetHighlight ( );
    void PutHighlight (
        long prop );
    FramePtr GetFrame ( );
    enum WdLanguageID GetLanguageIDFarEast ( );
    void PutLanguageIDFarEast (
        enum WdLanguageID prop );
    HRESULT ClearFormatting ( );
    long GetNoProofing ( );
    void PutNoProofing (
        long prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct _Font * * prop ) = 0;
    virtual HRESULT __stdcall put_Font (
        struct _Font * prop ) = 0;
    virtual HRESULT __stdcall get_ParagraphFormat (
        struct _ParagraphFormat * * prop ) = 0;
    virtual HRESULT __stdcall put_ParagraphFormat (
        struct _ParagraphFormat * prop ) = 0;
    virtual HRESULT __stdcall get_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_LanguageID (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageID (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_Highlight (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Highlight (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Frame (
        struct Frame * * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageIDFarEast (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageIDFarEast (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall raw_ClearFormatting ( ) = 0;
    virtual HRESULT __stdcall get_NoProofing (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_NoProofing (
        long prop ) = 0;
};

struct __declspec(uuid("0002095d-0000-0000-c000-000000000046"))
Characters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    RangePtr First;
    __declspec(property(get=GetLast))
    RangePtr Last;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    RangePtr GetFirst ( );
    RangePtr GetLast ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr Item (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_First (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Last (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Range * * prop ) = 0;
};

struct __declspec(uuid("0002095c-0000-0000-c000-000000000046"))
Words : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    RangePtr First;
    __declspec(property(get=GetLast))
    RangePtr Last;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    RangePtr GetFirst ( );
    RangePtr GetLast ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr Item (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_First (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Last (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Range * * prop ) = 0;
};

struct __declspec(uuid("0002095b-0000-0000-c000-000000000046"))
Sentences : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    RangePtr First;
    __declspec(property(get=GetLast))
    RangePtr Last;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    RangePtr GetFirst ( );
    RangePtr GetLast ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr Item (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_First (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Last (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Range * * prop ) = 0;
};

struct __declspec(uuid("0002095a-0000-0000-c000-000000000046"))
Sections : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    SectionPtr First;
    __declspec(property(get=GetLast))
    SectionPtr Last;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPageSetup,put=PutPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    SectionPtr GetFirst ( );
    SectionPtr GetLast ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    PageSetupPtr GetPageSetup ( );
    void PutPageSetup (
        struct PageSetup * prop );
    SectionPtr Item (
        long Index );
    SectionPtr Add (
        VARIANT * Range = &vtMissing,
        VARIANT * Start = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_First (
        struct Section * * prop ) = 0;
    virtual HRESULT __stdcall get_Last (
        struct Section * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_PageSetup (
        struct PageSetup * * prop ) = 0;
    virtual HRESULT __stdcall put_PageSetup (
        struct PageSetup * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Section * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * Range,
        VARIANT * Start,
        struct Section * * prop ) = 0;
};

struct __declspec(uuid("00020959-0000-0000-c000-000000000046"))
Section : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetPageSetup,put=PutPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetHeaders))
    HeadersFootersPtr Headers;
    __declspec(property(get=GetFooters))
    HeadersFootersPtr Footers;
    __declspec(property(get=GetProtectedForForms,put=PutProtectedForForms))
    VARIANT_BOOL ProtectedForForms;
    __declspec(property(get=GetIndex))
    long Index;

    //
    // Wrapper methods for error-handling
    //

    RangePtr GetRange ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    PageSetupPtr GetPageSetup ( );
    void PutPageSetup (
        struct PageSetup * prop );
    HeadersFootersPtr GetHeaders ( );
    HeadersFootersPtr GetFooters ( );
    VARIANT_BOOL GetProtectedForForms ( );
    void PutProtectedForForms (
        VARIANT_BOOL prop );
    long GetIndex ( );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_PageSetup (
        struct PageSetup * * prop ) = 0;
    virtual HRESULT __stdcall put_PageSetup (
        struct PageSetup * prop ) = 0;
    virtual HRESULT __stdcall get_Headers (
        struct HeadersFooters * * prop ) = 0;
    virtual HRESULT __stdcall get_Footers (
        struct HeadersFooters * * prop ) = 0;
    virtual HRESULT __stdcall get_ProtectedForForms (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ProtectedForForms (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
};

struct __declspec(uuid("00020958-0000-0000-c000-000000000046"))
Paragraphs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    ParagraphPtr First;
    __declspec(property(get=GetLast))
    ParagraphPtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum WdParagraphAlignment Alignment;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    long KeepTogether;
    __declspec(property(get=GetKeepWithNext,put=PutKeepWithNext))
    long KeepWithNext;
    __declspec(property(get=GetPageBreakBefore,put=PutPageBreakBefore))
    long PageBreakBefore;
    __declspec(property(get=GetNoLineNumber,put=PutNoLineNumber))
    long NoLineNumber;
    __declspec(property(get=GetRightIndent,put=PutRightIndent))
    float RightIndent;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    float LeftIndent;
    __declspec(property(get=GetFirstLineIndent,put=PutFirstLineIndent))
    float FirstLineIndent;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    float LineSpacing;
    __declspec(property(get=GetLineSpacingRule,put=PutLineSpacingRule))
    enum WdLineSpacing LineSpacingRule;
    __declspec(property(get=GetSpaceBefore,put=PutSpaceBefore))
    float SpaceBefore;
    __declspec(property(get=GetSpaceAfter,put=PutSpaceAfter))
    float SpaceAfter;
    __declspec(property(get=GetHyphenation,put=PutHyphenation))
    long Hyphenation;
    __declspec(property(get=GetWidowControl,put=PutWidowControl))
    long WidowControl;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetFormat,put=PutFormat))
    _ParagraphFormatPtr Format;
    __declspec(property(get=GetTabStops,put=PutTabStops))
    TabStopsPtr TabStops;
    __declspec(property(get=GetHalfWidthPunctuationOnTopOfLine,put=PutHalfWidthPunctuationOnTopOfLine))
    long HalfWidthPunctuationOnTopOfLine;
    __declspec(property(get=GetAddSpaceBetweenFarEastAndAlpha,put=PutAddSpaceBetweenFarEastAndAlpha))
    long AddSpaceBetweenFarEastAndAlpha;
    __declspec(property(get=GetAddSpaceBetweenFarEastAndDigit,put=PutAddSpaceBetweenFarEastAndDigit))
    long AddSpaceBetweenFarEastAndDigit;
    __declspec(property(get=GetBaseLineAlignment,put=PutBaseLineAlignment))
    enum WdBaselineAlignment BaseLineAlignment;
    __declspec(property(get=GetAutoAdjustRightIndent,put=PutAutoAdjustRightIndent))
    long AutoAdjustRightIndent;
    __declspec(property(get=GetDisableLineHeightGrid,put=PutDisableLineHeightGrid))
    long DisableLineHeightGrid;
    __declspec(property(get=GetCharacterUnitRightIndent,put=PutCharacterUnitRightIndent))
    float CharacterUnitRightIndent;
    __declspec(property(get=GetCharacterUnitLeftIndent,put=PutCharacterUnitLeftIndent))
    float CharacterUnitLeftIndent;
    __declspec(property(get=GetCharacterUnitFirstLineIndent,put=PutCharacterUnitFirstLineIndent))
    float CharacterUnitFirstLineIndent;
    __declspec(property(get=GetLineUnitBefore,put=PutLineUnitBefore))
    float LineUnitBefore;
    __declspec(property(get=GetLineUnitAfter,put=PutLineUnitAfter))
    float LineUnitAfter;
    __declspec(property(get=GetOutlineLevel,put=PutOutlineLevel))
    enum WdOutlineLevel OutlineLevel;
    __declspec(property(get=GetFarEastLineBreakControl,put=PutFarEastLineBreakControl))
    long FarEastLineBreakControl;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    long WordWrap;
    __declspec(property(get=GetHangingPunctuation,put=PutHangingPunctuation))
    long HangingPunctuation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    enum WdReadingOrder ReadingOrder;
    __declspec(property(get=GetSpaceBeforeAuto,put=PutSpaceBeforeAuto))
    long SpaceBeforeAuto;
    __declspec(property(get=GetSpaceAfterAuto,put=PutSpaceAfterAuto))
    long SpaceAfterAuto;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    ParagraphPtr GetFirst ( );
    ParagraphPtr GetLast ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _ParagraphFormatPtr GetFormat ( );
    void PutFormat (
        struct _ParagraphFormat * prop );
    TabStopsPtr GetTabStops ( );
    void PutTabStops (
        struct TabStops * prop );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    _variant_t GetStyle ( );
    void PutStyle (
        VARIANT * prop );
    enum WdParagraphAlignment GetAlignment ( );
    void PutAlignment (
        enum WdParagraphAlignment prop );
    long GetKeepTogether ( );
    void PutKeepTogether (
        long prop );
    long GetKeepWithNext ( );
    void PutKeepWithNext (
        long prop );
    long GetPageBreakBefore ( );
    void PutPageBreakBefore (
        long prop );
    long GetNoLineNumber ( );
    void PutNoLineNumber (
        long prop );
    float GetRightIndent ( );
    void PutRightIndent (
        float prop );
    float GetLeftIndent ( );
    void PutLeftIndent (
        float prop );
    float GetFirstLineIndent ( );
    void PutFirstLineIndent (
        float prop );
    float GetLineSpacing ( );
    void PutLineSpacing (
        float prop );
    enum WdLineSpacing GetLineSpacingRule ( );
    void PutLineSpacingRule (
        enum WdLineSpacing prop );
    float GetSpaceBefore ( );
    void PutSpaceBefore (
        float prop );
    float GetSpaceAfter ( );
    void PutSpaceAfter (
        float prop );
    long GetHyphenation ( );
    void PutHyphenation (
        long prop );
    long GetWidowControl ( );
    void PutWidowControl (
        long prop );
    ShadingPtr GetShading ( );
    long GetFarEastLineBreakControl ( );
    void PutFarEastLineBreakControl (
        long prop );
    long GetWordWrap ( );
    void PutWordWrap (
        long prop );
    long GetHangingPunctuation ( );
    void PutHangingPunctuation (
        long prop );
    long GetHalfWidthPunctuationOnTopOfLine ( );
    void PutHalfWidthPunctuationOnTopOfLine (
        long prop );
    long GetAddSpaceBetweenFarEastAndAlpha ( );
    void PutAddSpaceBetweenFarEastAndAlpha (
        long prop );
    long GetAddSpaceBetweenFarEastAndDigit ( );
    void PutAddSpaceBetweenFarEastAndDigit (
        long prop );
    enum WdBaselineAlignment GetBaseLineAlignment ( );
    void PutBaseLineAlignment (
        enum WdBaselineAlignment prop );
    long GetAutoAdjustRightIndent ( );
    void PutAutoAdjustRightIndent (
        long prop );
    long GetDisableLineHeightGrid ( );
    void PutDisableLineHeightGrid (
        long prop );
    enum WdOutlineLevel GetOutlineLevel ( );
    void PutOutlineLevel (
        enum WdOutlineLevel prop );
    ParagraphPtr Item (
        long Index );
    ParagraphPtr Add (
        VARIANT * Range = &vtMissing );
    HRESULT CloseUp ( );
    HRESULT OpenUp ( );
    HRESULT OpenOrCloseUp ( );
    HRESULT TabHangingIndent (
        short Count );
    HRESULT TabIndent (
        short Count );
    HRESULT Reset ( );
    HRESULT Space1 ( );
    HRESULT Space15 ( );
    HRESULT Space2 ( );
    HRESULT IndentCharWidth (
        short Count );
    HRESULT IndentFirstLineCharWidth (
        short Count );
    HRESULT OutlinePromote ( );
    HRESULT OutlineDemote ( );
    HRESULT OutlineDemoteToBody ( );
    HRESULT Indent ( );
    HRESULT Outdent ( );
    float GetCharacterUnitRightIndent ( );
    void PutCharacterUnitRightIndent (
        float prop );
    float GetCharacterUnitLeftIndent ( );
    void PutCharacterUnitLeftIndent (
        float prop );
    float GetCharacterUnitFirstLineIndent ( );
    void PutCharacterUnitFirstLineIndent (
        float prop );
    float GetLineUnitBefore ( );
    void PutLineUnitBefore (
        float prop );
    float GetLineUnitAfter ( );
    void PutLineUnitAfter (
        float prop );
    enum WdReadingOrder GetReadingOrder ( );
    void PutReadingOrder (
        enum WdReadingOrder prop );
    long GetSpaceBeforeAuto ( );
    void PutSpaceBeforeAuto (
        long prop );
    long GetSpaceAfterAuto ( );
    void PutSpaceAfterAuto (
        long prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_First (
        struct Paragraph * * prop ) = 0;
    virtual HRESULT __stdcall get_Last (
        struct Paragraph * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Format (
        struct _ParagraphFormat * * prop ) = 0;
    virtual HRESULT __stdcall put_Format (
        struct _ParagraphFormat * prop ) = 0;
    virtual HRESULT __stdcall get_TabStops (
        struct TabStops * * prop ) = 0;
    virtual HRESULT __stdcall put_TabStops (
        struct TabStops * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum WdParagraphAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum WdParagraphAlignment prop ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        long prop ) = 0;
    virtual HRESULT __stdcall get_KeepWithNext (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_KeepWithNext (
        long prop ) = 0;
    virtual HRESULT __stdcall get_PageBreakBefore (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_PageBreakBefore (
        long prop ) = 0;
    virtual HRESULT __stdcall get_NoLineNumber (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_NoLineNumber (
        long prop ) = 0;
    virtual HRESULT __stdcall get_RightIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_RightIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LeftIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LeftIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_FirstLineIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_FirstLineIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LineSpacing (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LineSpacing (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LineSpacingRule (
        enum WdLineSpacing * prop ) = 0;
    virtual HRESULT __stdcall put_LineSpacingRule (
        enum WdLineSpacing prop ) = 0;
    virtual HRESULT __stdcall get_SpaceBefore (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceBefore (
        float prop ) = 0;
    virtual HRESULT __stdcall get_SpaceAfter (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceAfter (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Hyphenation (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Hyphenation (
        long prop ) = 0;
    virtual HRESULT __stdcall get_WidowControl (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_WidowControl (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall get_FarEastLineBreakControl (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_FarEastLineBreakControl (
        long prop ) = 0;
    virtual HRESULT __stdcall get_WordWrap (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_WordWrap (
        long prop ) = 0;
    virtual HRESULT __stdcall get_HangingPunctuation (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_HangingPunctuation (
        long prop ) = 0;
    virtual HRESULT __stdcall get_HalfWidthPunctuationOnTopOfLine (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_HalfWidthPunctuationOnTopOfLine (
        long prop ) = 0;
    virtual HRESULT __stdcall get_AddSpaceBetweenFarEastAndAlpha (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AddSpaceBetweenFarEastAndAlpha (
        long prop ) = 0;
    virtual HRESULT __stdcall get_AddSpaceBetweenFarEastAndDigit (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AddSpaceBetweenFarEastAndDigit (
        long prop ) = 0;
    virtual HRESULT __stdcall get_BaseLineAlignment (
        enum WdBaselineAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_BaseLineAlignment (
        enum WdBaselineAlignment prop ) = 0;
    virtual HRESULT __stdcall get_AutoAdjustRightIndent (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AutoAdjustRightIndent (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DisableLineHeightGrid (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_DisableLineHeightGrid (
        long prop ) = 0;
    virtual HRESULT __stdcall get_OutlineLevel (
        enum WdOutlineLevel * prop ) = 0;
    virtual HRESULT __stdcall put_OutlineLevel (
        enum WdOutlineLevel prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Paragraph * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * Range,
        struct Paragraph * * prop ) = 0;
    virtual HRESULT __stdcall raw_CloseUp ( ) = 0;
    virtual HRESULT __stdcall raw_OpenUp ( ) = 0;
    virtual HRESULT __stdcall raw_OpenOrCloseUp ( ) = 0;
    virtual HRESULT __stdcall raw_TabHangingIndent (
        short Count ) = 0;
    virtual HRESULT __stdcall raw_TabIndent (
        short Count ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
    virtual HRESULT __stdcall raw_Space1 ( ) = 0;
    virtual HRESULT __stdcall raw_Space15 ( ) = 0;
    virtual HRESULT __stdcall raw_Space2 ( ) = 0;
    virtual HRESULT __stdcall raw_IndentCharWidth (
        short Count ) = 0;
    virtual HRESULT __stdcall raw_IndentFirstLineCharWidth (
        short Count ) = 0;
    virtual HRESULT __stdcall raw_OutlinePromote ( ) = 0;
    virtual HRESULT __stdcall raw_OutlineDemote ( ) = 0;
    virtual HRESULT __stdcall raw_OutlineDemoteToBody ( ) = 0;
    virtual HRESULT __stdcall raw_Indent ( ) = 0;
    virtual HRESULT __stdcall raw_Outdent ( ) = 0;
    virtual HRESULT __stdcall get_CharacterUnitRightIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CharacterUnitRightIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_CharacterUnitLeftIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CharacterUnitLeftIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_CharacterUnitFirstLineIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CharacterUnitFirstLineIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LineUnitBefore (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LineUnitBefore (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LineUnitAfter (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LineUnitAfter (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        enum WdReadingOrder * prop ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        enum WdReadingOrder prop ) = 0;
    virtual HRESULT __stdcall get_SpaceBeforeAuto (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceBeforeAuto (
        long prop ) = 0;
    virtual HRESULT __stdcall get_SpaceAfterAuto (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceAfterAuto (
        long prop ) = 0;
};

struct __declspec(uuid("00020957-0000-0000-c000-000000000046"))
Paragraph : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetDropCap))
    DropCapPtr DropCap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum WdParagraphAlignment Alignment;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    long KeepTogether;
    __declspec(property(get=GetKeepWithNext,put=PutKeepWithNext))
    long KeepWithNext;
    __declspec(property(get=GetPageBreakBefore,put=PutPageBreakBefore))
    long PageBreakBefore;
    __declspec(property(get=GetNoLineNumber,put=PutNoLineNumber))
    long NoLineNumber;
    __declspec(property(get=GetRightIndent,put=PutRightIndent))
    float RightIndent;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    float LeftIndent;
    __declspec(property(get=GetFirstLineIndent,put=PutFirstLineIndent))
    float FirstLineIndent;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    float LineSpacing;
    __declspec(property(get=GetLineSpacingRule,put=PutLineSpacingRule))
    enum WdLineSpacing LineSpacingRule;
    __declspec(property(get=GetSpaceBefore,put=PutSpaceBefore))
    float SpaceBefore;
    __declspec(property(get=GetSpaceAfter,put=PutSpaceAfter))
    float SpaceAfter;
    __declspec(property(get=GetHyphenation,put=PutHyphenation))
    long Hyphenation;
    __declspec(property(get=GetWidowControl,put=PutWidowControl))
    long WidowControl;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetFormat,put=PutFormat))
    _ParagraphFormatPtr Format;
    __declspec(property(get=GetTabStops,put=PutTabStops))
    TabStopsPtr TabStops;
    __declspec(property(get=GetHalfWidthPunctuationOnTopOfLine,put=PutHalfWidthPunctuationOnTopOfLine))
    long HalfWidthPunctuationOnTopOfLine;
    __declspec(property(get=GetAddSpaceBetweenFarEastAndAlpha,put=PutAddSpaceBetweenFarEastAndAlpha))
    long AddSpaceBetweenFarEastAndAlpha;
    __declspec(property(get=GetAddSpaceBetweenFarEastAndDigit,put=PutAddSpaceBetweenFarEastAndDigit))
    long AddSpaceBetweenFarEastAndDigit;
    __declspec(property(get=GetBaseLineAlignment,put=PutBaseLineAlignment))
    enum WdBaselineAlignment BaseLineAlignment;
    __declspec(property(get=GetAutoAdjustRightIndent,put=PutAutoAdjustRightIndent))
    long AutoAdjustRightIndent;
    __declspec(property(get=GetDisableLineHeightGrid,put=PutDisableLineHeightGrid))
    long DisableLineHeightGrid;
    __declspec(property(get=GetCharacterUnitRightIndent,put=PutCharacterUnitRightIndent))
    float CharacterUnitRightIndent;
    __declspec(property(get=GetCharacterUnitLeftIndent,put=PutCharacterUnitLeftIndent))
    float CharacterUnitLeftIndent;
    __declspec(property(get=GetCharacterUnitFirstLineIndent,put=PutCharacterUnitFirstLineIndent))
    float CharacterUnitFirstLineIndent;
    __declspec(property(get=GetLineUnitBefore,put=PutLineUnitBefore))
    float LineUnitBefore;
    __declspec(property(get=GetLineUnitAfter,put=PutLineUnitAfter))
    float LineUnitAfter;
    __declspec(property(get=GetOutlineLevel,put=PutOutlineLevel))
    enum WdOutlineLevel OutlineLevel;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    enum WdReadingOrder ReadingOrder;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetFarEastLineBreakControl,put=PutFarEastLineBreakControl))
    long FarEastLineBreakControl;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    long WordWrap;
    __declspec(property(get=GetHangingPunctuation,put=PutHangingPunctuation))
    long HangingPunctuation;
    __declspec(property(get=GetSpaceBeforeAuto,put=PutSpaceBeforeAuto))
    long SpaceBeforeAuto;
    __declspec(property(get=GetSpaceAfterAuto,put=PutSpaceAfterAuto))
    long SpaceAfterAuto;

    //
    // Wrapper methods for error-handling
    //

    RangePtr GetRange ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _ParagraphFormatPtr GetFormat ( );
    void PutFormat (
        struct _ParagraphFormat * prop );
    TabStopsPtr GetTabStops ( );
    void PutTabStops (
        struct TabStops * prop );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    DropCapPtr GetDropCap ( );
    _variant_t GetStyle ( );
    void PutStyle (
        VARIANT * prop );
    enum WdParagraphAlignment GetAlignment ( );
    void PutAlignment (
        enum WdParagraphAlignment prop );
    long GetKeepTogether ( );
    void PutKeepTogether (
        long prop );
    long GetKeepWithNext ( );
    void PutKeepWithNext (
        long prop );
    long GetPageBreakBefore ( );
    void PutPageBreakBefore (
        long prop );
    long GetNoLineNumber ( );
    void PutNoLineNumber (
        long prop );
    float GetRightIndent ( );
    void PutRightIndent (
        float prop );
    float GetLeftIndent ( );
    void PutLeftIndent (
        float prop );
    float GetFirstLineIndent ( );
    void PutFirstLineIndent (
        float prop );
    float GetLineSpacing ( );
    void PutLineSpacing (
        float prop );
    enum WdLineSpacing GetLineSpacingRule ( );
    void PutLineSpacingRule (
        enum WdLineSpacing prop );
    float GetSpaceBefore ( );
    void PutSpaceBefore (
        float prop );
    float GetSpaceAfter ( );
    void PutSpaceAfter (
        float prop );
    long GetHyphenation ( );
    void PutHyphenation (
        long prop );
    long GetWidowControl ( );
    void PutWidowControl (
        long prop );
    ShadingPtr GetShading ( );
    long GetFarEastLineBreakControl ( );
    void PutFarEastLineBreakControl (
        long prop );
    long GetWordWrap ( );
    void PutWordWrap (
        long prop );
    long GetHangingPunctuation ( );
    void PutHangingPunctuation (
        long prop );
    long GetHalfWidthPunctuationOnTopOfLine ( );
    void PutHalfWidthPunctuationOnTopOfLine (
        long prop );
    long GetAddSpaceBetweenFarEastAndAlpha ( );
    void PutAddSpaceBetweenFarEastAndAlpha (
        long prop );
    long GetAddSpaceBetweenFarEastAndDigit ( );
    void PutAddSpaceBetweenFarEastAndDigit (
        long prop );
    enum WdBaselineAlignment GetBaseLineAlignment ( );
    void PutBaseLineAlignment (
        enum WdBaselineAlignment prop );
    long GetAutoAdjustRightIndent ( );
    void PutAutoAdjustRightIndent (
        long prop );
    long GetDisableLineHeightGrid ( );
    void PutDisableLineHeightGrid (
        long prop );
    enum WdOutlineLevel GetOutlineLevel ( );
    void PutOutlineLevel (
        enum WdOutlineLevel prop );
    HRESULT CloseUp ( );
    HRESULT OpenUp ( );
    HRESULT OpenOrCloseUp ( );
    HRESULT TabHangingIndent (
        short Count );
    HRESULT TabIndent (
        short Count );
    HRESULT Reset ( );
    HRESULT Space1 ( );
    HRESULT Space15 ( );
    HRESULT Space2 ( );
    HRESULT IndentCharWidth (
        short Count );
    HRESULT IndentFirstLineCharWidth (
        short Count );
    ParagraphPtr Next (
        VARIANT * Count = &vtMissing );
    ParagraphPtr Previous (
        VARIANT * Count = &vtMissing );
    HRESULT OutlinePromote ( );
    HRESULT OutlineDemote ( );
    HRESULT OutlineDemoteToBody ( );
    HRESULT Indent ( );
    HRESULT Outdent ( );
    float GetCharacterUnitRightIndent ( );
    void PutCharacterUnitRightIndent (
        float prop );
    float GetCharacterUnitLeftIndent ( );
    void PutCharacterUnitLeftIndent (
        float prop );
    float GetCharacterUnitFirstLineIndent ( );
    void PutCharacterUnitFirstLineIndent (
        float prop );
    float GetLineUnitBefore ( );
    void PutLineUnitBefore (
        float prop );
    float GetLineUnitAfter ( );
    void PutLineUnitAfter (
        float prop );
    enum WdReadingOrder GetReadingOrder ( );
    void PutReadingOrder (
        enum WdReadingOrder prop );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t prop );
    long GetSpaceBeforeAuto ( );
    void PutSpaceBeforeAuto (
        long prop );
    long GetSpaceAfterAuto ( );
    void PutSpaceAfterAuto (
        long prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Format (
        struct _ParagraphFormat * * prop ) = 0;
    virtual HRESULT __stdcall put_Format (
        struct _ParagraphFormat * prop ) = 0;
    virtual HRESULT __stdcall get_TabStops (
        struct TabStops * * prop ) = 0;
    virtual HRESULT __stdcall put_TabStops (
        struct TabStops * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_DropCap (
        struct DropCap * * prop ) = 0;
    virtual HRESULT __stdcall get_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum WdParagraphAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum WdParagraphAlignment prop ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        long prop ) = 0;
    virtual HRESULT __stdcall get_KeepWithNext (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_KeepWithNext (
        long prop ) = 0;
    virtual HRESULT __stdcall get_PageBreakBefore (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_PageBreakBefore (
        long prop ) = 0;
    virtual HRESULT __stdcall get_NoLineNumber (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_NoLineNumber (
        long prop ) = 0;
    virtual HRESULT __stdcall get_RightIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_RightIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LeftIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LeftIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_FirstLineIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_FirstLineIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LineSpacing (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LineSpacing (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LineSpacingRule (
        enum WdLineSpacing * prop ) = 0;
    virtual HRESULT __stdcall put_LineSpacingRule (
        enum WdLineSpacing prop ) = 0;
    virtual HRESULT __stdcall get_SpaceBefore (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceBefore (
        float prop ) = 0;
    virtual HRESULT __stdcall get_SpaceAfter (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceAfter (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Hyphenation (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Hyphenation (
        long prop ) = 0;
    virtual HRESULT __stdcall get_WidowControl (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_WidowControl (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall get_FarEastLineBreakControl (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_FarEastLineBreakControl (
        long prop ) = 0;
    virtual HRESULT __stdcall get_WordWrap (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_WordWrap (
        long prop ) = 0;
    virtual HRESULT __stdcall get_HangingPunctuation (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_HangingPunctuation (
        long prop ) = 0;
    virtual HRESULT __stdcall get_HalfWidthPunctuationOnTopOfLine (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_HalfWidthPunctuationOnTopOfLine (
        long prop ) = 0;
    virtual HRESULT __stdcall get_AddSpaceBetweenFarEastAndAlpha (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AddSpaceBetweenFarEastAndAlpha (
        long prop ) = 0;
    virtual HRESULT __stdcall get_AddSpaceBetweenFarEastAndDigit (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AddSpaceBetweenFarEastAndDigit (
        long prop ) = 0;
    virtual HRESULT __stdcall get_BaseLineAlignment (
        enum WdBaselineAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_BaseLineAlignment (
        enum WdBaselineAlignment prop ) = 0;
    virtual HRESULT __stdcall get_AutoAdjustRightIndent (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AutoAdjustRightIndent (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DisableLineHeightGrid (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_DisableLineHeightGrid (
        long prop ) = 0;
    virtual HRESULT __stdcall get_OutlineLevel (
        enum WdOutlineLevel * prop ) = 0;
    virtual HRESULT __stdcall put_OutlineLevel (
        enum WdOutlineLevel prop ) = 0;
    virtual HRESULT __stdcall raw_CloseUp ( ) = 0;
    virtual HRESULT __stdcall raw_OpenUp ( ) = 0;
    virtual HRESULT __stdcall raw_OpenOrCloseUp ( ) = 0;
    virtual HRESULT __stdcall raw_TabHangingIndent (
        short Count ) = 0;
    virtual HRESULT __stdcall raw_TabIndent (
        short Count ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
    virtual HRESULT __stdcall raw_Space1 ( ) = 0;
    virtual HRESULT __stdcall raw_Space15 ( ) = 0;
    virtual HRESULT __stdcall raw_Space2 ( ) = 0;
    virtual HRESULT __stdcall raw_IndentCharWidth (
        short Count ) = 0;
    virtual HRESULT __stdcall raw_IndentFirstLineCharWidth (
        short Count ) = 0;
    virtual HRESULT __stdcall raw_Next (
        VARIANT * Count,
        struct Paragraph * * prop ) = 0;
    virtual HRESULT __stdcall raw_Previous (
        VARIANT * Count,
        struct Paragraph * * prop ) = 0;
    virtual HRESULT __stdcall raw_OutlinePromote ( ) = 0;
    virtual HRESULT __stdcall raw_OutlineDemote ( ) = 0;
    virtual HRESULT __stdcall raw_OutlineDemoteToBody ( ) = 0;
    virtual HRESULT __stdcall raw_Indent ( ) = 0;
    virtual HRESULT __stdcall raw_Outdent ( ) = 0;
    virtual HRESULT __stdcall get_CharacterUnitRightIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CharacterUnitRightIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_CharacterUnitLeftIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CharacterUnitLeftIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_CharacterUnitFirstLineIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CharacterUnitFirstLineIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LineUnitBefore (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LineUnitBefore (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LineUnitAfter (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LineUnitAfter (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        enum WdReadingOrder * prop ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        enum WdReadingOrder prop ) = 0;
    virtual HRESULT __stdcall get_ID (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ID (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_SpaceBeforeAuto (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceBeforeAuto (
        long prop ) = 0;
    virtual HRESULT __stdcall get_SpaceAfterAuto (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceAfterAuto (
        long prop ) = 0;
};

struct __declspec(uuid("00020956-0000-0000-c000-000000000046"))
DropCap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum WdDropPosition Position;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetLinesToDrop,put=PutLinesToDrop))
    long LinesToDrop;
    __declspec(property(get=GetDistanceFromText,put=PutDistanceFromText))
    float DistanceFromText;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdDropPosition GetPosition ( );
    void PutPosition (
        enum WdDropPosition prop );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t prop );
    long GetLinesToDrop ( );
    void PutLinesToDrop (
        long prop );
    float GetDistanceFromText ( );
    void PutDistanceFromText (
        float prop );
    HRESULT Clear ( );
    HRESULT Enable ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Position (
        enum WdDropPosition * prop ) = 0;
    virtual HRESULT __stdcall put_Position (
        enum WdDropPosition prop ) = 0;
    virtual HRESULT __stdcall get_FontName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_FontName (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_LinesToDrop (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_LinesToDrop (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DistanceFromText (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceFromText (
        float prop ) = 0;
    virtual HRESULT __stdcall raw_Clear ( ) = 0;
    virtual HRESULT __stdcall raw_Enable ( ) = 0;
};

struct __declspec(uuid("00020955-0000-0000-c000-000000000046"))
TabStops : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    TabStopPtr Item (
        VARIANT * Index );
    TabStopPtr Add (
        float Position,
        VARIANT * Alignment = &vtMissing,
        VARIANT * Leader = &vtMissing );
    HRESULT ClearAll ( );
    TabStopPtr Before (
        float Position );
    TabStopPtr After (
        float Position );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct TabStop * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        float Position,
        VARIANT * Alignment,
        VARIANT * Leader,
        struct TabStop * * prop ) = 0;
    virtual HRESULT __stdcall raw_ClearAll ( ) = 0;
    virtual HRESULT __stdcall raw_Before (
        float Position,
        struct TabStop * * prop ) = 0;
    virtual HRESULT __stdcall raw_After (
        float Position,
        struct TabStop * * prop ) = 0;
};

struct __declspec(uuid("00020954-0000-0000-c000-000000000046"))
TabStop : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum WdTabAlignment Alignment;
    __declspec(property(get=GetLeader,put=PutLeader))
    enum WdTabLeader Leader;
    __declspec(property(get=GetPosition,put=PutPosition))
    float Position;
    __declspec(property(get=GetCustomTab))
    VARIANT_BOOL CustomTab;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNext))
    TabStopPtr Next;
    __declspec(property(get=GetPrevious))
    TabStopPtr Previous;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdTabAlignment GetAlignment ( );
    void PutAlignment (
        enum WdTabAlignment prop );
    enum WdTabLeader GetLeader ( );
    void PutLeader (
        enum WdTabLeader prop );
    float GetPosition ( );
    void PutPosition (
        float prop );
    VARIANT_BOOL GetCustomTab ( );
    TabStopPtr GetNext ( );
    TabStopPtr GetPrevious ( );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum WdTabAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum WdTabAlignment prop ) = 0;
    virtual HRESULT __stdcall get_Leader (
        enum WdTabLeader * prop ) = 0;
    virtual HRESULT __stdcall put_Leader (
        enum WdTabLeader prop ) = 0;
    virtual HRESULT __stdcall get_Position (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Position (
        float prop ) = 0;
    virtual HRESULT __stdcall get_CustomTab (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Next (
        struct TabStop * * prop ) = 0;
    virtual HRESULT __stdcall get_Previous (
        struct TabStop * * prop ) = 0;
    virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("00020953-0000-0000-c000-000000000046"))
_ParagraphFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHalfWidthPunctuationOnTopOfLine,put=PutHalfWidthPunctuationOnTopOfLine))
    long HalfWidthPunctuationOnTopOfLine;
    __declspec(property(get=GetAddSpaceBetweenFarEastAndAlpha,put=PutAddSpaceBetweenFarEastAndAlpha))
    long AddSpaceBetweenFarEastAndAlpha;
    __declspec(property(get=GetAddSpaceBetweenFarEastAndDigit,put=PutAddSpaceBetweenFarEastAndDigit))
    long AddSpaceBetweenFarEastAndDigit;
    __declspec(property(get=GetBaseLineAlignment,put=PutBaseLineAlignment))
    enum WdBaselineAlignment BaseLineAlignment;
    __declspec(property(get=GetAutoAdjustRightIndent,put=PutAutoAdjustRightIndent))
    long AutoAdjustRightIndent;
    __declspec(property(get=GetDisableLineHeightGrid,put=PutDisableLineHeightGrid))
    long DisableLineHeightGrid;
    __declspec(property(get=GetCharacterUnitRightIndent,put=PutCharacterUnitRightIndent))
    float CharacterUnitRightIndent;
    __declspec(property(get=GetCharacterUnitLeftIndent,put=PutCharacterUnitLeftIndent))
    float CharacterUnitLeftIndent;
    __declspec(property(get=GetCharacterUnitFirstLineIndent,put=PutCharacterUnitFirstLineIndent))
    float CharacterUnitFirstLineIndent;
    __declspec(property(get=GetDuplicate))
    _ParagraphFormatPtr Duplicate;
    __declspec(property(get=GetLineUnitBefore,put=PutLineUnitBefore))
    float LineUnitBefore;
    __declspec(property(get=GetLineUnitAfter,put=PutLineUnitAfter))
    float LineUnitAfter;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    enum WdReadingOrder ReadingOrder;
    __declspec(property(get=GetSpaceBeforeAuto,put=PutSpaceBeforeAuto))
    long SpaceBeforeAuto;
    __declspec(property(get=GetSpaceAfterAuto,put=PutSpaceAfterAuto))
    long SpaceAfterAuto;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetOutlineLevel,put=PutOutlineLevel))
    enum WdOutlineLevel OutlineLevel;
    __declspec(property(get=GetTabStops,put=PutTabStops))
    TabStopsPtr TabStops;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum WdParagraphAlignment Alignment;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    long KeepTogether;
    __declspec(property(get=GetKeepWithNext,put=PutKeepWithNext))
    long KeepWithNext;
    __declspec(property(get=GetPageBreakBefore,put=PutPageBreakBefore))
    long PageBreakBefore;
    __declspec(property(get=GetNoLineNumber,put=PutNoLineNumber))
    long NoLineNumber;
    __declspec(property(get=GetRightIndent,put=PutRightIndent))
    float RightIndent;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    float LeftIndent;
    __declspec(property(get=GetFirstLineIndent,put=PutFirstLineIndent))
    float FirstLineIndent;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    float LineSpacing;
    __declspec(property(get=GetLineSpacingRule,put=PutLineSpacingRule))
    enum WdLineSpacing LineSpacingRule;
    __declspec(property(get=GetSpaceBefore,put=PutSpaceBefore))
    float SpaceBefore;
    __declspec(property(get=GetSpaceAfter,put=PutSpaceAfter))
    float SpaceAfter;
    __declspec(property(get=GetHyphenation,put=PutHyphenation))
    long Hyphenation;
    __declspec(property(get=GetWidowControl,put=PutWidowControl))
    long WidowControl;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetFarEastLineBreakControl,put=PutFarEastLineBreakControl))
    long FarEastLineBreakControl;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    long WordWrap;
    __declspec(property(get=GetHangingPunctuation,put=PutHangingPunctuation))
    long HangingPunctuation;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _ParagraphFormatPtr GetDuplicate ( );
    _variant_t GetStyle ( );
    void PutStyle (
        VARIANT * prop );
    enum WdParagraphAlignment GetAlignment ( );
    void PutAlignment (
        enum WdParagraphAlignment prop );
    long GetKeepTogether ( );
    void PutKeepTogether (
        long prop );
    long GetKeepWithNext ( );
    void PutKeepWithNext (
        long prop );
    long GetPageBreakBefore ( );
    void PutPageBreakBefore (
        long prop );
    long GetNoLineNumber ( );
    void PutNoLineNumber (
        long prop );
    float GetRightIndent ( );
    void PutRightIndent (
        float prop );
    float GetLeftIndent ( );
    void PutLeftIndent (
        float prop );
    float GetFirstLineIndent ( );
    void PutFirstLineIndent (
        float prop );
    float GetLineSpacing ( );
    void PutLineSpacing (
        float prop );
    enum WdLineSpacing GetLineSpacingRule ( );
    void PutLineSpacingRule (
        enum WdLineSpacing prop );
    float GetSpaceBefore ( );
    void PutSpaceBefore (
        float prop );
    float GetSpaceAfter ( );
    void PutSpaceAfter (
        float prop );
    long GetHyphenation ( );
    void PutHyphenation (
        long prop );
    long GetWidowControl ( );
    void PutWidowControl (
        long prop );
    long GetFarEastLineBreakControl ( );
    void PutFarEastLineBreakControl (
        long prop );
    long GetWordWrap ( );
    void PutWordWrap (
        long prop );
    long GetHangingPunctuation ( );
    void PutHangingPunctuation (
        long prop );
    long GetHalfWidthPunctuationOnTopOfLine ( );
    void PutHalfWidthPunctuationOnTopOfLine (
        long prop );
    long GetAddSpaceBetweenFarEastAndAlpha ( );
    void PutAddSpaceBetweenFarEastAndAlpha (
        long prop );
    long GetAddSpaceBetweenFarEastAndDigit ( );
    void PutAddSpaceBetweenFarEastAndDigit (
        long prop );
    enum WdBaselineAlignment GetBaseLineAlignment ( );
    void PutBaseLineAlignment (
        enum WdBaselineAlignment prop );
    long GetAutoAdjustRightIndent ( );
    void PutAutoAdjustRightIndent (
        long prop );
    long GetDisableLineHeightGrid ( );
    void PutDisableLineHeightGrid (
        long prop );
    TabStopsPtr GetTabStops ( );
    void PutTabStops (
        struct TabStops * prop );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    ShadingPtr GetShading ( );
    enum WdOutlineLevel GetOutlineLevel ( );
    void PutOutlineLevel (
        enum WdOutlineLevel prop );
    HRESULT CloseUp ( );
    HRESULT OpenUp ( );
    HRESULT OpenOrCloseUp ( );
    HRESULT TabHangingIndent (
        short Count );
    HRESULT TabIndent (
        short Count );
    HRESULT Reset ( );
    HRESULT Space1 ( );
    HRESULT Space15 ( );
    HRESULT Space2 ( );
    HRESULT IndentCharWidth (
        short Count );
    HRESULT IndentFirstLineCharWidth (
        short Count );
    float GetCharacterUnitRightIndent ( );
    void PutCharacterUnitRightIndent (
        float prop );
    float GetCharacterUnitLeftIndent ( );
    void PutCharacterUnitLeftIndent (
        float prop );
    float GetCharacterUnitFirstLineIndent ( );
    void PutCharacterUnitFirstLineIndent (
        float prop );
    float GetLineUnitBefore ( );
    void PutLineUnitBefore (
        float prop );
    float GetLineUnitAfter ( );
    void PutLineUnitAfter (
        float prop );
    enum WdReadingOrder GetReadingOrder ( );
    void PutReadingOrder (
        enum WdReadingOrder prop );
    long GetSpaceBeforeAuto ( );
    void PutSpaceBeforeAuto (
        long prop );
    long GetSpaceAfterAuto ( );
    void PutSpaceAfterAuto (
        long prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Duplicate (
        struct _ParagraphFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum WdParagraphAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum WdParagraphAlignment prop ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        long prop ) = 0;
    virtual HRESULT __stdcall get_KeepWithNext (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_KeepWithNext (
        long prop ) = 0;
    virtual HRESULT __stdcall get_PageBreakBefore (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_PageBreakBefore (
        long prop ) = 0;
    virtual HRESULT __stdcall get_NoLineNumber (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_NoLineNumber (
        long prop ) = 0;
    virtual HRESULT __stdcall get_RightIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_RightIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LeftIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LeftIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_FirstLineIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_FirstLineIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LineSpacing (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LineSpacing (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LineSpacingRule (
        enum WdLineSpacing * prop ) = 0;
    virtual HRESULT __stdcall put_LineSpacingRule (
        enum WdLineSpacing prop ) = 0;
    virtual HRESULT __stdcall get_SpaceBefore (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceBefore (
        float prop ) = 0;
    virtual HRESULT __stdcall get_SpaceAfter (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceAfter (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Hyphenation (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Hyphenation (
        long prop ) = 0;
    virtual HRESULT __stdcall get_WidowControl (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_WidowControl (
        long prop ) = 0;
    virtual HRESULT __stdcall get_FarEastLineBreakControl (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_FarEastLineBreakControl (
        long prop ) = 0;
    virtual HRESULT __stdcall get_WordWrap (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_WordWrap (
        long prop ) = 0;
    virtual HRESULT __stdcall get_HangingPunctuation (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_HangingPunctuation (
        long prop ) = 0;
    virtual HRESULT __stdcall get_HalfWidthPunctuationOnTopOfLine (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_HalfWidthPunctuationOnTopOfLine (
        long prop ) = 0;
    virtual HRESULT __stdcall get_AddSpaceBetweenFarEastAndAlpha (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AddSpaceBetweenFarEastAndAlpha (
        long prop ) = 0;
    virtual HRESULT __stdcall get_AddSpaceBetweenFarEastAndDigit (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AddSpaceBetweenFarEastAndDigit (
        long prop ) = 0;
    virtual HRESULT __stdcall get_BaseLineAlignment (
        enum WdBaselineAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_BaseLineAlignment (
        enum WdBaselineAlignment prop ) = 0;
    virtual HRESULT __stdcall get_AutoAdjustRightIndent (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AutoAdjustRightIndent (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DisableLineHeightGrid (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_DisableLineHeightGrid (
        long prop ) = 0;
    virtual HRESULT __stdcall get_TabStops (
        struct TabStops * * prop ) = 0;
    virtual HRESULT __stdcall put_TabStops (
        struct TabStops * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall get_OutlineLevel (
        enum WdOutlineLevel * prop ) = 0;
    virtual HRESULT __stdcall put_OutlineLevel (
        enum WdOutlineLevel prop ) = 0;
    virtual HRESULT __stdcall raw_CloseUp ( ) = 0;
    virtual HRESULT __stdcall raw_OpenUp ( ) = 0;
    virtual HRESULT __stdcall raw_OpenOrCloseUp ( ) = 0;
    virtual HRESULT __stdcall raw_TabHangingIndent (
        short Count ) = 0;
    virtual HRESULT __stdcall raw_TabIndent (
        short Count ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
    virtual HRESULT __stdcall raw_Space1 ( ) = 0;
    virtual HRESULT __stdcall raw_Space15 ( ) = 0;
    virtual HRESULT __stdcall raw_Space2 ( ) = 0;
    virtual HRESULT __stdcall raw_IndentCharWidth (
        short Count ) = 0;
    virtual HRESULT __stdcall raw_IndentFirstLineCharWidth (
        short Count ) = 0;
    virtual HRESULT __stdcall get_CharacterUnitRightIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CharacterUnitRightIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_CharacterUnitLeftIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CharacterUnitLeftIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_CharacterUnitFirstLineIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CharacterUnitFirstLineIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LineUnitBefore (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LineUnitBefore (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LineUnitAfter (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LineUnitAfter (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        enum WdReadingOrder * prop ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        enum WdReadingOrder prop ) = 0;
    virtual HRESULT __stdcall get_SpaceBeforeAuto (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceBeforeAuto (
        long prop ) = 0;
    virtual HRESULT __stdcall get_SpaceAfterAuto (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceAfterAuto (
        long prop ) = 0;
};

struct __declspec(uuid("00020952-0000-0000-c000-000000000046"))
_Font : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndexBi,put=PutColorIndexBi))
    enum WdColorIndex ColorIndexBi;
    __declspec(property(get=GetDiacriticColor,put=PutDiacriticColor))
    enum WdColor DiacriticColor;
    __declspec(property(get=GetUnderlineColor,put=PutUnderlineColor))
    enum WdColor UnderlineColor;
    __declspec(property(get=GetDuplicate))
    _FontPtr Duplicate;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetBold,put=PutBold))
    long Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    long Italic;
    __declspec(property(get=GetHidden,put=PutHidden))
    long Hidden;
    __declspec(property(get=GetSmallCaps,put=PutSmallCaps))
    long SmallCaps;
    __declspec(property(get=GetAllCaps,put=PutAllCaps))
    long AllCaps;
    __declspec(property(get=GetStrikeThrough,put=PutStrikeThrough))
    long StrikeThrough;
    __declspec(property(get=GetDoubleStrikeThrough,put=PutDoubleStrikeThrough))
    long DoubleStrikeThrough;
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    enum WdColorIndex ColorIndex;
    __declspec(property(get=GetSubscript,put=PutSubscript))
    long Subscript;
    __declspec(property(get=GetSuperscript,put=PutSuperscript))
    long Superscript;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    enum WdUnderline Underline;
    __declspec(property(get=GetSize,put=PutSize))
    float Size;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetSpacing,put=PutSpacing))
    float Spacing;
    __declspec(property(get=GetScaling,put=PutScaling))
    long Scaling;
    __declspec(property(get=GetShadow,put=PutShadow))
    long Shadow;
    __declspec(property(get=GetOutline,put=PutOutline))
    long Outline;
    __declspec(property(get=GetEmboss,put=PutEmboss))
    long Emboss;
    __declspec(property(get=GetKerning,put=PutKerning))
    float Kerning;
    __declspec(property(get=GetEngrave,put=PutEngrave))
    long Engrave;
    __declspec(property(get=GetAnimation,put=PutAnimation))
    enum WdAnimation Animation;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetEmphasisMark,put=PutEmphasisMark))
    enum WdEmphasisMark EmphasisMark;
    __declspec(property(get=GetDisableCharacterSpaceGrid,put=PutDisableCharacterSpaceGrid))
    VARIANT_BOOL DisableCharacterSpaceGrid;
    __declspec(property(get=GetNameFarEast,put=PutNameFarEast))
    _bstr_t NameFarEast;
    __declspec(property(get=GetNameAscii,put=PutNameAscii))
    _bstr_t NameAscii;
    __declspec(property(get=GetNameOther,put=PutNameOther))
    _bstr_t NameOther;
    __declspec(property(get=GetColor,put=PutColor))
    enum WdColor Color;
    __declspec(property(get=GetBoldBi,put=PutBoldBi))
    long BoldBi;
    __declspec(property(get=GetItalicBi,put=PutItalicBi))
    long ItalicBi;
    __declspec(property(get=GetSizeBi,put=PutSizeBi))
    float SizeBi;
    __declspec(property(get=GetNameBi,put=PutNameBi))
    _bstr_t NameBi;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _FontPtr GetDuplicate ( );
    long GetBold ( );
    void PutBold (
        long prop );
    long GetItalic ( );
    void PutItalic (
        long prop );
    long GetHidden ( );
    void PutHidden (
        long prop );
    long GetSmallCaps ( );
    void PutSmallCaps (
        long prop );
    long GetAllCaps ( );
    void PutAllCaps (
        long prop );
    long GetStrikeThrough ( );
    void PutStrikeThrough (
        long prop );
    long GetDoubleStrikeThrough ( );
    void PutDoubleStrikeThrough (
        long prop );
    enum WdColorIndex GetColorIndex ( );
    void PutColorIndex (
        enum WdColorIndex prop );
    long GetSubscript ( );
    void PutSubscript (
        long prop );
    long GetSuperscript ( );
    void PutSuperscript (
        long prop );
    enum WdUnderline GetUnderline ( );
    void PutUnderline (
        enum WdUnderline prop );
    float GetSize ( );
    void PutSize (
        float prop );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t prop );
    long GetPosition ( );
    void PutPosition (
        long prop );
    float GetSpacing ( );
    void PutSpacing (
        float prop );
    long GetScaling ( );
    void PutScaling (
        long prop );
    long GetShadow ( );
    void PutShadow (
        long prop );
    long GetOutline ( );
    void PutOutline (
        long prop );
    long GetEmboss ( );
    void PutEmboss (
        long prop );
    float GetKerning ( );
    void PutKerning (
        float prop );
    long GetEngrave ( );
    void PutEngrave (
        long prop );
    enum WdAnimation GetAnimation ( );
    void PutAnimation (
        enum WdAnimation prop );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    ShadingPtr GetShading ( );
    enum WdEmphasisMark GetEmphasisMark ( );
    void PutEmphasisMark (
        enum WdEmphasisMark prop );
    VARIANT_BOOL GetDisableCharacterSpaceGrid ( );
    void PutDisableCharacterSpaceGrid (
        VARIANT_BOOL prop );
    _bstr_t GetNameFarEast ( );
    void PutNameFarEast (
        _bstr_t prop );
    _bstr_t GetNameAscii ( );
    void PutNameAscii (
        _bstr_t prop );
    _bstr_t GetNameOther ( );
    void PutNameOther (
        _bstr_t prop );
    HRESULT Grow ( );
    HRESULT Shrink ( );
    HRESULT Reset ( );
    HRESULT SetAsTemplateDefault ( );
    enum WdColor GetColor ( );
    void PutColor (
        enum WdColor prop );
    long GetBoldBi ( );
    void PutBoldBi (
        long prop );
    long GetItalicBi ( );
    void PutItalicBi (
        long prop );
    float GetSizeBi ( );
    void PutSizeBi (
        float prop );
    _bstr_t GetNameBi ( );
    void PutNameBi (
        _bstr_t prop );
    enum WdColorIndex GetColorIndexBi ( );
    void PutColorIndexBi (
        enum WdColorIndex prop );
    enum WdColor GetDiacriticColor ( );
    void PutDiacriticColor (
        enum WdColor prop );
    enum WdColor GetUnderlineColor ( );
    void PutUnderlineColor (
        enum WdColor prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Duplicate (
        struct _Font * * prop ) = 0;
    virtual HRESULT __stdcall get_Bold (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Bold (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Italic (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Italic (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Hidden (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Hidden (
        long prop ) = 0;
    virtual HRESULT __stdcall get_SmallCaps (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_SmallCaps (
        long prop ) = 0;
    virtual HRESULT __stdcall get_AllCaps (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AllCaps (
        long prop ) = 0;
    virtual HRESULT __stdcall get_StrikeThrough (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_StrikeThrough (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DoubleStrikeThrough (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_DoubleStrikeThrough (
        long prop ) = 0;
    virtual HRESULT __stdcall get_ColorIndex (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_ColorIndex (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_Subscript (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Subscript (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Superscript (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Superscript (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Underline (
        enum WdUnderline * prop ) = 0;
    virtual HRESULT __stdcall put_Underline (
        enum WdUnderline prop ) = 0;
    virtual HRESULT __stdcall get_Size (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Size (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Position (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Position (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Spacing (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Spacing (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Scaling (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Scaling (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Outline (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Outline (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Emboss (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Emboss (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Kerning (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Kerning (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Engrave (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Engrave (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Animation (
        enum WdAnimation * prop ) = 0;
    virtual HRESULT __stdcall put_Animation (
        enum WdAnimation prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall get_EmphasisMark (
        enum WdEmphasisMark * prop ) = 0;
    virtual HRESULT __stdcall put_EmphasisMark (
        enum WdEmphasisMark prop ) = 0;
    virtual HRESULT __stdcall get_DisableCharacterSpaceGrid (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisableCharacterSpaceGrid (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_NameFarEast (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_NameFarEast (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_NameAscii (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_NameAscii (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_NameOther (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_NameOther (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall raw_Grow ( ) = 0;
    virtual HRESULT __stdcall raw_Shrink ( ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
    virtual HRESULT __stdcall raw_SetAsTemplateDefault ( ) = 0;
    virtual HRESULT __stdcall get_Color (
        enum WdColor * prop ) = 0;
    virtual HRESULT __stdcall put_Color (
        enum WdColor prop ) = 0;
    virtual HRESULT __stdcall get_BoldBi (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_BoldBi (
        long prop ) = 0;
    virtual HRESULT __stdcall get_ItalicBi (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_ItalicBi (
        long prop ) = 0;
    virtual HRESULT __stdcall get_SizeBi (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_SizeBi (
        float prop ) = 0;
    virtual HRESULT __stdcall get_NameBi (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_NameBi (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_ColorIndexBi (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_ColorIndexBi (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_DiacriticColor (
        enum WdColor * prop ) = 0;
    virtual HRESULT __stdcall put_DiacriticColor (
        enum WdColor prop ) = 0;
    virtual HRESULT __stdcall get_UnderlineColor (
        enum WdColor * prop ) = 0;
    virtual HRESULT __stdcall put_UnderlineColor (
        enum WdColor prop ) = 0;
};

struct __declspec(uuid("00020951-0000-0000-c000-000000000046"))
Table : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetColumns))
    ColumnsPtr Columns;
    __declspec(property(get=GetRows))
    RowsPtr Rows;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetUniform))
    VARIANT_BOOL Uniform;
    __declspec(property(get=GetAutoFormatType))
    long AutoFormatType;
    __declspec(property(get=GetTables))
    TablesPtr Tables;
    __declspec(property(get=GetNestingLevel))
    long NestingLevel;
    __declspec(property(get=GetAllowPageBreaks,put=PutAllowPageBreaks))
    VARIANT_BOOL AllowPageBreaks;
    __declspec(property(get=GetAllowAutoFit,put=PutAllowAutoFit))
    VARIANT_BOOL AllowAutoFit;
    __declspec(property(get=GetPreferredWidth,put=PutPreferredWidth))
    float PreferredWidth;
    __declspec(property(get=GetPreferredWidthType,put=PutPreferredWidthType))
    enum WdPreferredWidthType PreferredWidthType;
    __declspec(property(get=GetTopPadding,put=PutTopPadding))
    float TopPadding;
    __declspec(property(get=GetBottomPadding,put=PutBottomPadding))
    float BottomPadding;
    __declspec(property(get=GetLeftPadding,put=PutLeftPadding))
    float LeftPadding;
    __declspec(property(get=GetRightPadding,put=PutRightPadding))
    float RightPadding;
    __declspec(property(get=GetSpacing,put=PutSpacing))
    float Spacing;
    __declspec(property(get=GetTableDirection,put=PutTableDirection))
    enum WdTableDirection TableDirection;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    RangePtr GetRange ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ColumnsPtr GetColumns ( );
    RowsPtr GetRows ( );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    ShadingPtr GetShading ( );
    VARIANT_BOOL GetUniform ( );
    long GetAutoFormatType ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    HRESULT SortOld (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * FieldNumber = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * FieldNumber2 = &vtMissing,
        VARIANT * SortFieldType2 = &vtMissing,
        VARIANT * SortOrder2 = &vtMissing,
        VARIANT * FieldNumber3 = &vtMissing,
        VARIANT * SortFieldType3 = &vtMissing,
        VARIANT * SortOrder3 = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * LanguageID = &vtMissing );
    HRESULT SortAscending ( );
    HRESULT SortDescending ( );
    HRESULT AutoFormat (
        VARIANT * Format = &vtMissing,
        VARIANT * ApplyBorders = &vtMissing,
        VARIANT * ApplyShading = &vtMissing,
        VARIANT * ApplyFont = &vtMissing,
        VARIANT * ApplyColor = &vtMissing,
        VARIANT * ApplyHeadingRows = &vtMissing,
        VARIANT * ApplyLastRow = &vtMissing,
        VARIANT * ApplyFirstColumn = &vtMissing,
        VARIANT * ApplyLastColumn = &vtMissing,
        VARIANT * AutoFit = &vtMissing );
    HRESULT UpdateAutoFormat ( );
    RangePtr ConvertToTextOld (
        VARIANT * Separator = &vtMissing );
    CellPtr Cell (
        long Row,
        long Column );
    TablePtr Split (
        VARIANT * BeforeRow );
    RangePtr ConvertToText (
        VARIANT * Separator = &vtMissing,
        VARIANT * NestedTables = &vtMissing );
    HRESULT AutoFitBehavior (
        enum WdAutoFitBehavior Behavior );
    HRESULT Sort (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * FieldNumber = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * FieldNumber2 = &vtMissing,
        VARIANT * SortFieldType2 = &vtMissing,
        VARIANT * SortOrder2 = &vtMissing,
        VARIANT * FieldNumber3 = &vtMissing,
        VARIANT * SortFieldType3 = &vtMissing,
        VARIANT * SortOrder3 = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * BidiSort = &vtMissing,
        VARIANT * IgnoreThe = &vtMissing,
        VARIANT * IgnoreKashida = &vtMissing,
        VARIANT * IgnoreDiacritics = &vtMissing,
        VARIANT * IgnoreHe = &vtMissing,
        VARIANT * LanguageID = &vtMissing );
    TablesPtr GetTables ( );
    long GetNestingLevel ( );
    VARIANT_BOOL GetAllowPageBreaks ( );
    void PutAllowPageBreaks (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAllowAutoFit ( );
    void PutAllowAutoFit (
        VARIANT_BOOL prop );
    float GetPreferredWidth ( );
    void PutPreferredWidth (
        float prop );
    enum WdPreferredWidthType GetPreferredWidthType ( );
    void PutPreferredWidthType (
        enum WdPreferredWidthType prop );
    float GetTopPadding ( );
    void PutTopPadding (
        float prop );
    float GetBottomPadding ( );
    void PutBottomPadding (
        float prop );
    float GetLeftPadding ( );
    void PutLeftPadding (
        float prop );
    float GetRightPadding ( );
    void PutRightPadding (
        float prop );
    float GetSpacing ( );
    void PutSpacing (
        float prop );
    enum WdTableDirection GetTableDirection ( );
    void PutTableDirection (
        enum WdTableDirection prop );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Columns (
        struct Columns * * prop ) = 0;
    virtual HRESULT __stdcall get_Rows (
        struct Rows * * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall get_Uniform (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatType (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_SortOld (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * FieldNumber = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * FieldNumber2 = &vtMissing,
        VARIANT * SortFieldType2 = &vtMissing,
        VARIANT * SortOrder2 = &vtMissing,
        VARIANT * FieldNumber3 = &vtMissing,
        VARIANT * SortFieldType3 = &vtMissing,
        VARIANT * SortOrder3 = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * LanguageID = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SortAscending ( ) = 0;
    virtual HRESULT __stdcall raw_SortDescending ( ) = 0;
    virtual HRESULT __stdcall raw_AutoFormat (
        VARIANT * Format = &vtMissing,
        VARIANT * ApplyBorders = &vtMissing,
        VARIANT * ApplyShading = &vtMissing,
        VARIANT * ApplyFont = &vtMissing,
        VARIANT * ApplyColor = &vtMissing,
        VARIANT * ApplyHeadingRows = &vtMissing,
        VARIANT * ApplyLastRow = &vtMissing,
        VARIANT * ApplyFirstColumn = &vtMissing,
        VARIANT * ApplyLastColumn = &vtMissing,
        VARIANT * AutoFit = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_UpdateAutoFormat ( ) = 0;
    virtual HRESULT __stdcall raw_ConvertToTextOld (
        VARIANT * Separator,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_Cell (
        long Row,
        long Column,
        struct Cell * * prop ) = 0;
    virtual HRESULT __stdcall raw_Split (
        VARIANT * BeforeRow,
        struct Table * * prop ) = 0;
    virtual HRESULT __stdcall raw_ConvertToText (
        VARIANT * Separator,
        VARIANT * NestedTables,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_AutoFitBehavior (
        enum WdAutoFitBehavior Behavior ) = 0;
    virtual HRESULT __stdcall raw_Sort (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * FieldNumber = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * FieldNumber2 = &vtMissing,
        VARIANT * SortFieldType2 = &vtMissing,
        VARIANT * SortOrder2 = &vtMissing,
        VARIANT * FieldNumber3 = &vtMissing,
        VARIANT * SortFieldType3 = &vtMissing,
        VARIANT * SortOrder3 = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * BidiSort = &vtMissing,
        VARIANT * IgnoreThe = &vtMissing,
        VARIANT * IgnoreKashida = &vtMissing,
        VARIANT * IgnoreDiacritics = &vtMissing,
        VARIANT * IgnoreHe = &vtMissing,
        VARIANT * LanguageID = &vtMissing ) = 0;
    virtual HRESULT __stdcall get_Tables (
        struct Tables * * prop ) = 0;
    virtual HRESULT __stdcall get_NestingLevel (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_AllowPageBreaks (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AllowPageBreaks (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AllowAutoFit (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AllowAutoFit (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PreferredWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_PreferredWidth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_PreferredWidthType (
        enum WdPreferredWidthType * prop ) = 0;
    virtual HRESULT __stdcall put_PreferredWidthType (
        enum WdPreferredWidthType prop ) = 0;
    virtual HRESULT __stdcall get_TopPadding (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_TopPadding (
        float prop ) = 0;
    virtual HRESULT __stdcall get_BottomPadding (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_BottomPadding (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LeftPadding (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LeftPadding (
        float prop ) = 0;
    virtual HRESULT __stdcall get_RightPadding (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_RightPadding (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Spacing (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Spacing (
        float prop ) = 0;
    virtual HRESULT __stdcall get_TableDirection (
        enum WdTableDirection * prop ) = 0;
    virtual HRESULT __stdcall put_TableDirection (
        enum WdTableDirection prop ) = 0;
    virtual HRESULT __stdcall get_ID (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ID (
        BSTR prop ) = 0;
};

struct __declspec(uuid("00020950-0000-0000-c000-000000000046"))
Row : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetAllowBreakAcrossPages,put=PutAllowBreakAcrossPages))
    long AllowBreakAcrossPages;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum WdRowAlignment Alignment;
    __declspec(property(get=GetHeadingFormat,put=PutHeadingFormat))
    long HeadingFormat;
    __declspec(property(get=GetSpaceBetweenColumns,put=PutSpaceBetweenColumns))
    float SpaceBetweenColumns;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHeightRule,put=PutHeightRule))
    enum WdRowHeightRule HeightRule;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    float LeftIndent;
    __declspec(property(get=GetIsLast))
    VARIANT_BOOL IsLast;
    __declspec(property(get=GetIsFirst))
    VARIANT_BOOL IsFirst;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCells))
    CellsPtr Cells;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetNext))
    RowPtr Next;
    __declspec(property(get=GetPrevious))
    RowPtr Previous;
    __declspec(property(get=GetNestingLevel))
    long NestingLevel;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;

    //
    // Wrapper methods for error-handling
    //

    RangePtr GetRange ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetAllowBreakAcrossPages ( );
    void PutAllowBreakAcrossPages (
        long prop );
    enum WdRowAlignment GetAlignment ( );
    void PutAlignment (
        enum WdRowAlignment prop );
    long GetHeadingFormat ( );
    void PutHeadingFormat (
        long prop );
    float GetSpaceBetweenColumns ( );
    void PutSpaceBetweenColumns (
        float prop );
    float GetHeight ( );
    void PutHeight (
        float prop );
    enum WdRowHeightRule GetHeightRule ( );
    void PutHeightRule (
        enum WdRowHeightRule prop );
    float GetLeftIndent ( );
    void PutLeftIndent (
        float prop );
    VARIANT_BOOL GetIsLast ( );
    VARIANT_BOOL GetIsFirst ( );
    long GetIndex ( );
    CellsPtr GetCells ( );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    ShadingPtr GetShading ( );
    RowPtr GetNext ( );
    RowPtr GetPrevious ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    HRESULT SetLeftIndent (
        float LeftIndent,
        enum WdRulerStyle RulerStyle );
    HRESULT SetHeight (
        float RowHeight,
        enum WdRowHeightRule HeightRule );
    RangePtr ConvertToTextOld (
        VARIANT * Separator = &vtMissing );
    RangePtr ConvertToText (
        VARIANT * Separator = &vtMissing,
        VARIANT * NestedTables = &vtMissing );
    long GetNestingLevel ( );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_AllowBreakAcrossPages (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AllowBreakAcrossPages (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum WdRowAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum WdRowAlignment prop ) = 0;
    virtual HRESULT __stdcall get_HeadingFormat (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_HeadingFormat (
        long prop ) = 0;
    virtual HRESULT __stdcall get_SpaceBetweenColumns (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceBetweenColumns (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        float prop ) = 0;
    virtual HRESULT __stdcall get_HeightRule (
        enum WdRowHeightRule * prop ) = 0;
    virtual HRESULT __stdcall put_HeightRule (
        enum WdRowHeightRule prop ) = 0;
    virtual HRESULT __stdcall get_LeftIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LeftIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_IsLast (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_IsFirst (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Cells (
        struct Cells * * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall get_Next (
        struct Row * * prop ) = 0;
    virtual HRESULT __stdcall get_Previous (
        struct Row * * prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_SetLeftIndent (
        float LeftIndent,
        enum WdRulerStyle RulerStyle ) = 0;
    virtual HRESULT __stdcall raw_SetHeight (
        float RowHeight,
        enum WdRowHeightRule HeightRule ) = 0;
    virtual HRESULT __stdcall raw_ConvertToTextOld (
        VARIANT * Separator,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_ConvertToText (
        VARIANT * Separator,
        VARIANT * NestedTables,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_NestingLevel (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_ID (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ID (
        BSTR prop ) = 0;
};

struct __declspec(uuid("0002094f-0000-0000-c000-000000000046"))
Column : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetIsFirst))
    VARIANT_BOOL IsFirst;
    __declspec(property(get=GetIsLast))
    VARIANT_BOOL IsLast;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCells))
    CellsPtr Cells;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetNext))
    ColumnPtr Next;
    __declspec(property(get=GetPrevious))
    ColumnPtr Previous;
    __declspec(property(get=GetNestingLevel))
    long NestingLevel;
    __declspec(property(get=GetPreferredWidth,put=PutPreferredWidth))
    float PreferredWidth;
    __declspec(property(get=GetPreferredWidthType,put=PutPreferredWidthType))
    enum WdPreferredWidthType PreferredWidthType;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetWidth ( );
    void PutWidth (
        float prop );
    VARIANT_BOOL GetIsFirst ( );
    VARIANT_BOOL GetIsLast ( );
    long GetIndex ( );
    CellsPtr GetCells ( );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    ShadingPtr GetShading ( );
    ColumnPtr GetNext ( );
    ColumnPtr GetPrevious ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    HRESULT SetWidth (
        float ColumnWidth,
        enum WdRulerStyle RulerStyle );
    HRESULT AutoFit ( );
    HRESULT SortOld (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * LanguageID = &vtMissing );
    HRESULT Sort (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * BidiSort = &vtMissing,
        VARIANT * IgnoreThe = &vtMissing,
        VARIANT * IgnoreKashida = &vtMissing,
        VARIANT * IgnoreDiacritics = &vtMissing,
        VARIANT * IgnoreHe = &vtMissing,
        VARIANT * LanguageID = &vtMissing );
    long GetNestingLevel ( );
    float GetPreferredWidth ( );
    void PutPreferredWidth (
        float prop );
    enum WdPreferredWidthType GetPreferredWidthType ( );
    void PutPreferredWidthType (
        enum WdPreferredWidthType prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        float prop ) = 0;
    virtual HRESULT __stdcall get_IsFirst (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_IsLast (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Cells (
        struct Cells * * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall get_Next (
        struct Column * * prop ) = 0;
    virtual HRESULT __stdcall get_Previous (
        struct Column * * prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_SetWidth (
        float ColumnWidth,
        enum WdRulerStyle RulerStyle ) = 0;
    virtual HRESULT __stdcall raw_AutoFit ( ) = 0;
    virtual HRESULT __stdcall raw_SortOld (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * LanguageID = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Sort (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * BidiSort = &vtMissing,
        VARIANT * IgnoreThe = &vtMissing,
        VARIANT * IgnoreKashida = &vtMissing,
        VARIANT * IgnoreDiacritics = &vtMissing,
        VARIANT * IgnoreHe = &vtMissing,
        VARIANT * LanguageID = &vtMissing ) = 0;
    virtual HRESULT __stdcall get_NestingLevel (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_PreferredWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_PreferredWidth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_PreferredWidthType (
        enum WdPreferredWidthType * prop ) = 0;
    virtual HRESULT __stdcall put_PreferredWidthType (
        enum WdPreferredWidthType prop ) = 0;
};

struct __declspec(uuid("0002094e-0000-0000-c000-000000000046"))
Cell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetRowIndex))
    long RowIndex;
    __declspec(property(get=GetColumnIndex))
    long ColumnIndex;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHeightRule,put=PutHeightRule))
    enum WdRowHeightRule HeightRule;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum WdCellVerticalAlignment VerticalAlignment;
    __declspec(property(get=GetColumn))
    ColumnPtr Column;
    __declspec(property(get=GetRow))
    RowPtr Row;
    __declspec(property(get=GetNext))
    CellPtr Next;
    __declspec(property(get=GetPrevious))
    CellPtr Previous;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetTables))
    TablesPtr Tables;
    __declspec(property(get=GetNestingLevel))
    long NestingLevel;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    VARIANT_BOOL WordWrap;
    __declspec(property(get=GetPreferredWidth,put=PutPreferredWidth))
    float PreferredWidth;
    __declspec(property(get=GetFitText,put=PutFitText))
    VARIANT_BOOL FitText;
    __declspec(property(get=GetTopPadding,put=PutTopPadding))
    float TopPadding;
    __declspec(property(get=GetBottomPadding,put=PutBottomPadding))
    float BottomPadding;
    __declspec(property(get=GetLeftPadding,put=PutLeftPadding))
    float LeftPadding;
    __declspec(property(get=GetRightPadding,put=PutRightPadding))
    float RightPadding;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetPreferredWidthType,put=PutPreferredWidthType))
    enum WdPreferredWidthType PreferredWidthType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    RangePtr GetRange ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetRowIndex ( );
    long GetColumnIndex ( );
    float GetWidth ( );
    void PutWidth (
        float prop );
    float GetHeight ( );
    void PutHeight (
        float prop );
    enum WdRowHeightRule GetHeightRule ( );
    void PutHeightRule (
        enum WdRowHeightRule prop );
    enum WdCellVerticalAlignment GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum WdCellVerticalAlignment prop );
    ColumnPtr GetColumn ( );
    RowPtr GetRow ( );
    CellPtr GetNext ( );
    CellPtr GetPrevious ( );
    ShadingPtr GetShading ( );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    HRESULT Select ( );
    HRESULT Delete (
        VARIANT * ShiftCells = &vtMissing );
    HRESULT Formula (
        VARIANT * Formula = &vtMissing,
        VARIANT * NumFormat = &vtMissing );
    HRESULT SetWidth (
        float ColumnWidth,
        enum WdRulerStyle RulerStyle );
    HRESULT SetHeight (
        VARIANT * RowHeight,
        enum WdRowHeightRule HeightRule );
    HRESULT Merge (
        struct Cell * MergeTo );
    HRESULT Split (
        VARIANT * NumRows = &vtMissing,
        VARIANT * NumColumns = &vtMissing );
    HRESULT AutoSum ( );
    TablesPtr GetTables ( );
    long GetNestingLevel ( );
    VARIANT_BOOL GetWordWrap ( );
    void PutWordWrap (
        VARIANT_BOOL prop );
    float GetPreferredWidth ( );
    void PutPreferredWidth (
        float prop );
    VARIANT_BOOL GetFitText ( );
    void PutFitText (
        VARIANT_BOOL prop );
    float GetTopPadding ( );
    void PutTopPadding (
        float prop );
    float GetBottomPadding ( );
    void PutBottomPadding (
        float prop );
    float GetLeftPadding ( );
    void PutLeftPadding (
        float prop );
    float GetRightPadding ( );
    void PutRightPadding (
        float prop );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t prop );
    enum WdPreferredWidthType GetPreferredWidthType ( );
    void PutPreferredWidthType (
        enum WdPreferredWidthType prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_RowIndex (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_ColumnIndex (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        float prop ) = 0;
    virtual HRESULT __stdcall get_HeightRule (
        enum WdRowHeightRule * prop ) = 0;
    virtual HRESULT __stdcall put_HeightRule (
        enum WdRowHeightRule prop ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        enum WdCellVerticalAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        enum WdCellVerticalAlignment prop ) = 0;
    virtual HRESULT __stdcall get_Column (
        struct Column * * prop ) = 0;
    virtual HRESULT __stdcall get_Row (
        struct Row * * prop ) = 0;
    virtual HRESULT __stdcall get_Next (
        struct Cell * * prop ) = 0;
    virtual HRESULT __stdcall get_Previous (
        struct Cell * * prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * ShiftCells = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Formula (
        VARIANT * Formula = &vtMissing,
        VARIANT * NumFormat = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetWidth (
        float ColumnWidth,
        enum WdRulerStyle RulerStyle ) = 0;
    virtual HRESULT __stdcall raw_SetHeight (
        VARIANT * RowHeight,
        enum WdRowHeightRule HeightRule ) = 0;
    virtual HRESULT __stdcall raw_Merge (
        struct Cell * MergeTo ) = 0;
    virtual HRESULT __stdcall raw_Split (
        VARIANT * NumRows = &vtMissing,
        VARIANT * NumColumns = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_AutoSum ( ) = 0;
    virtual HRESULT __stdcall get_Tables (
        struct Tables * * prop ) = 0;
    virtual HRESULT __stdcall get_NestingLevel (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_WordWrap (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_WordWrap (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PreferredWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_PreferredWidth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_FitText (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_FitText (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_TopPadding (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_TopPadding (
        float prop ) = 0;
    virtual HRESULT __stdcall get_BottomPadding (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_BottomPadding (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LeftPadding (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LeftPadding (
        float prop ) = 0;
    virtual HRESULT __stdcall get_RightPadding (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_RightPadding (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ID (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ID (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_PreferredWidthType (
        enum WdPreferredWidthType * prop ) = 0;
    virtual HRESULT __stdcall put_PreferredWidthType (
        enum WdPreferredWidthType prop ) = 0;
};

struct __declspec(uuid("0002094d-0000-0000-c000-000000000046"))
Tables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetNestingLevel))
    long NestingLevel;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    TablePtr Item (
        long Index );
    TablePtr AddOld (
        struct Range * Range,
        long NumRows,
        long NumColumns );
    TablePtr Add (
        struct Range * Range,
        long NumRows,
        long NumColumns,
        VARIANT * DefaultTableBehavior = &vtMissing,
        VARIANT * AutoFitBehavior = &vtMissing );
    long GetNestingLevel ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Table * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddOld (
        struct Range * Range,
        long NumRows,
        long NumColumns,
        struct Table * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct Range * Range,
        long NumRows,
        long NumColumns,
        VARIANT * DefaultTableBehavior,
        VARIANT * AutoFitBehavior,
        struct Table * * prop ) = 0;
    virtual HRESULT __stdcall get_NestingLevel (
        long * prop ) = 0;
};

struct __declspec(uuid("0002094c-0000-0000-c000-000000000046"))
Rows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAllowBreakAcrossPages,put=PutAllowBreakAcrossPages))
    long AllowBreakAcrossPages;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum WdRowAlignment Alignment;
    __declspec(property(get=GetHeadingFormat,put=PutHeadingFormat))
    long HeadingFormat;
    __declspec(property(get=GetSpaceBetweenColumns,put=PutSpaceBetweenColumns))
    float SpaceBetweenColumns;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHeightRule,put=PutHeightRule))
    enum WdRowHeightRule HeightRule;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    float LeftIndent;
    __declspec(property(get=GetFirst))
    RowPtr First;
    __declspec(property(get=GetLast))
    RowPtr Last;
    __declspec(property(get=GetWrapAroundText,put=PutWrapAroundText))
    long WrapAroundText;
    __declspec(property(get=GetDistanceTop,put=PutDistanceTop))
    float DistanceTop;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetDistanceBottom,put=PutDistanceBottom))
    float DistanceBottom;
    __declspec(property(get=GetHorizontalPosition,put=PutHorizontalPosition))
    float HorizontalPosition;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetVerticalPosition,put=PutVerticalPosition))
    float VerticalPosition;
    __declspec(property(get=GetRelativeHorizontalPosition,put=PutRelativeHorizontalPosition))
    enum WdRelativeHorizontalPosition RelativeHorizontalPosition;
    __declspec(property(get=GetDistanceLeft,put=PutDistanceLeft))
    float DistanceLeft;
    __declspec(property(get=GetDistanceRight,put=PutDistanceRight))
    float DistanceRight;
    __declspec(property(get=GetRelativeVerticalPosition,put=PutRelativeVerticalPosition))
    enum WdRelativeVerticalPosition RelativeVerticalPosition;
    __declspec(property(get=GetAllowOverlap,put=PutAllowOverlap))
    long AllowOverlap;
    __declspec(property(get=GetNestingLevel))
    long NestingLevel;
    __declspec(property(get=GetTableDirection,put=PutTableDirection))
    enum WdTableDirection TableDirection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    long GetAllowBreakAcrossPages ( );
    void PutAllowBreakAcrossPages (
        long prop );
    enum WdRowAlignment GetAlignment ( );
    void PutAlignment (
        enum WdRowAlignment prop );
    long GetHeadingFormat ( );
    void PutHeadingFormat (
        long prop );
    float GetSpaceBetweenColumns ( );
    void PutSpaceBetweenColumns (
        float prop );
    float GetHeight ( );
    void PutHeight (
        float prop );
    enum WdRowHeightRule GetHeightRule ( );
    void PutHeightRule (
        enum WdRowHeightRule prop );
    float GetLeftIndent ( );
    void PutLeftIndent (
        float prop );
    RowPtr GetFirst ( );
    RowPtr GetLast ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    ShadingPtr GetShading ( );
    RowPtr Item (
        long Index );
    RowPtr Add (
        VARIANT * BeforeRow = &vtMissing );
    HRESULT Select ( );
    HRESULT Delete ( );
    HRESULT SetLeftIndent (
        float LeftIndent,
        enum WdRulerStyle RulerStyle );
    HRESULT SetHeight (
        float RowHeight,
        enum WdRowHeightRule HeightRule );
    RangePtr ConvertToTextOld (
        VARIANT * Separator = &vtMissing );
    HRESULT DistributeHeight ( );
    RangePtr ConvertToText (
        VARIANT * Separator = &vtMissing,
        VARIANT * NestedTables = &vtMissing );
    long GetWrapAroundText ( );
    void PutWrapAroundText (
        long prop );
    float GetDistanceTop ( );
    void PutDistanceTop (
        float prop );
    float GetDistanceBottom ( );
    void PutDistanceBottom (
        float prop );
    float GetDistanceLeft ( );
    void PutDistanceLeft (
        float prop );
    float GetDistanceRight ( );
    void PutDistanceRight (
        float prop );
    float GetHorizontalPosition ( );
    void PutHorizontalPosition (
        float prop );
    float GetVerticalPosition ( );
    void PutVerticalPosition (
        float prop );
    enum WdRelativeHorizontalPosition GetRelativeHorizontalPosition ( );
    void PutRelativeHorizontalPosition (
        enum WdRelativeHorizontalPosition prop );
    enum WdRelativeVerticalPosition GetRelativeVerticalPosition ( );
    void PutRelativeVerticalPosition (
        enum WdRelativeVerticalPosition prop );
    long GetAllowOverlap ( );
    void PutAllowOverlap (
        long prop );
    long GetNestingLevel ( );
    enum WdTableDirection GetTableDirection ( );
    void PutTableDirection (
        enum WdTableDirection prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_AllowBreakAcrossPages (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AllowBreakAcrossPages (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum WdRowAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum WdRowAlignment prop ) = 0;
    virtual HRESULT __stdcall get_HeadingFormat (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_HeadingFormat (
        long prop ) = 0;
    virtual HRESULT __stdcall get_SpaceBetweenColumns (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceBetweenColumns (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        float prop ) = 0;
    virtual HRESULT __stdcall get_HeightRule (
        enum WdRowHeightRule * prop ) = 0;
    virtual HRESULT __stdcall put_HeightRule (
        enum WdRowHeightRule prop ) = 0;
    virtual HRESULT __stdcall get_LeftIndent (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LeftIndent (
        float prop ) = 0;
    virtual HRESULT __stdcall get_First (
        struct Row * * prop ) = 0;
    virtual HRESULT __stdcall get_Last (
        struct Row * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Row * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * BeforeRow,
        struct Row * * prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_SetLeftIndent (
        float LeftIndent,
        enum WdRulerStyle RulerStyle ) = 0;
    virtual HRESULT __stdcall raw_SetHeight (
        float RowHeight,
        enum WdRowHeightRule HeightRule ) = 0;
    virtual HRESULT __stdcall raw_ConvertToTextOld (
        VARIANT * Separator,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_DistributeHeight ( ) = 0;
    virtual HRESULT __stdcall raw_ConvertToText (
        VARIANT * Separator,
        VARIANT * NestedTables,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_WrapAroundText (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_WrapAroundText (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DistanceTop (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceTop (
        float prop ) = 0;
    virtual HRESULT __stdcall get_DistanceBottom (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceBottom (
        float prop ) = 0;
    virtual HRESULT __stdcall get_DistanceLeft (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceLeft (
        float prop ) = 0;
    virtual HRESULT __stdcall get_DistanceRight (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceRight (
        float prop ) = 0;
    virtual HRESULT __stdcall get_HorizontalPosition (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_HorizontalPosition (
        float prop ) = 0;
    virtual HRESULT __stdcall get_VerticalPosition (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_VerticalPosition (
        float prop ) = 0;
    virtual HRESULT __stdcall get_RelativeHorizontalPosition (
        enum WdRelativeHorizontalPosition * prop ) = 0;
    virtual HRESULT __stdcall put_RelativeHorizontalPosition (
        enum WdRelativeHorizontalPosition prop ) = 0;
    virtual HRESULT __stdcall get_RelativeVerticalPosition (
        enum WdRelativeVerticalPosition * prop ) = 0;
    virtual HRESULT __stdcall put_RelativeVerticalPosition (
        enum WdRelativeVerticalPosition prop ) = 0;
    virtual HRESULT __stdcall get_AllowOverlap (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AllowOverlap (
        long prop ) = 0;
    virtual HRESULT __stdcall get_NestingLevel (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_TableDirection (
        enum WdTableDirection * prop ) = 0;
    virtual HRESULT __stdcall put_TableDirection (
        enum WdTableDirection prop ) = 0;
};

struct __declspec(uuid("0002094b-0000-0000-c000-000000000046"))
Columns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetFirst))
    ColumnPtr First;
    __declspec(property(get=GetLast))
    ColumnPtr Last;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNestingLevel))
    long NestingLevel;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetPreferredWidth,put=PutPreferredWidth))
    float PreferredWidth;
    __declspec(property(get=GetPreferredWidthType,put=PutPreferredWidthType))
    enum WdPreferredWidthType PreferredWidthType;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ColumnPtr GetFirst ( );
    ColumnPtr GetLast ( );
    float GetWidth ( );
    void PutWidth (
        float prop );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    ShadingPtr GetShading ( );
    ColumnPtr Item (
        long Index );
    ColumnPtr Add (
        VARIANT * BeforeColumn = &vtMissing );
    HRESULT Select ( );
    HRESULT Delete ( );
    HRESULT SetWidth (
        float ColumnWidth,
        enum WdRulerStyle RulerStyle );
    HRESULT AutoFit ( );
    HRESULT DistributeWidth ( );
    long GetNestingLevel ( );
    float GetPreferredWidth ( );
    void PutPreferredWidth (
        float prop );
    enum WdPreferredWidthType GetPreferredWidthType ( );
    void PutPreferredWidthType (
        enum WdPreferredWidthType prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_First (
        struct Column * * prop ) = 0;
    virtual HRESULT __stdcall get_Last (
        struct Column * * prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Column * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * BeforeColumn,
        struct Column * * prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_SetWidth (
        float ColumnWidth,
        enum WdRulerStyle RulerStyle ) = 0;
    virtual HRESULT __stdcall raw_AutoFit ( ) = 0;
    virtual HRESULT __stdcall raw_DistributeWidth ( ) = 0;
    virtual HRESULT __stdcall get_NestingLevel (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_PreferredWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_PreferredWidth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_PreferredWidthType (
        enum WdPreferredWidthType * prop ) = 0;
    virtual HRESULT __stdcall put_PreferredWidthType (
        enum WdPreferredWidthType prop ) = 0;
};

struct __declspec(uuid("0002094a-0000-0000-c000-000000000046"))
Cells : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHeightRule,put=PutHeightRule))
    enum WdRowHeightRule HeightRule;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetNestingLevel))
    long NestingLevel;
    __declspec(property(get=GetPreferredWidth,put=PutPreferredWidth))
    float PreferredWidth;
    __declspec(property(get=GetPreferredWidthType,put=PutPreferredWidthType))
    enum WdPreferredWidthType PreferredWidthType;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum WdCellVerticalAlignment VerticalAlignment;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetWidth ( );
    void PutWidth (
        float prop );
    float GetHeight ( );
    void PutHeight (
        float prop );
    enum WdRowHeightRule GetHeightRule ( );
    void PutHeightRule (
        enum WdRowHeightRule prop );
    enum WdCellVerticalAlignment GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum WdCellVerticalAlignment prop );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    ShadingPtr GetShading ( );
    CellPtr Item (
        long Index );
    CellPtr Add (
        VARIANT * BeforeCell = &vtMissing );
    HRESULT Delete (
        VARIANT * ShiftCells = &vtMissing );
    HRESULT SetWidth (
        float ColumnWidth,
        enum WdRulerStyle RulerStyle );
    HRESULT SetHeight (
        VARIANT * RowHeight,
        enum WdRowHeightRule HeightRule );
    HRESULT Merge ( );
    HRESULT Split (
        VARIANT * NumRows = &vtMissing,
        VARIANT * NumColumns = &vtMissing,
        VARIANT * MergeBeforeSplit = &vtMissing );
    HRESULT DistributeHeight ( );
    HRESULT DistributeWidth ( );
    HRESULT AutoFit ( );
    long GetNestingLevel ( );
    float GetPreferredWidth ( );
    void PutPreferredWidth (
        float prop );
    enum WdPreferredWidthType GetPreferredWidthType ( );
    void PutPreferredWidthType (
        enum WdPreferredWidthType prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        float prop ) = 0;
    virtual HRESULT __stdcall get_HeightRule (
        enum WdRowHeightRule * prop ) = 0;
    virtual HRESULT __stdcall put_HeightRule (
        enum WdRowHeightRule prop ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        enum WdCellVerticalAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        enum WdCellVerticalAlignment prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Cell * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * BeforeCell,
        struct Cell * * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * ShiftCells = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetWidth (
        float ColumnWidth,
        enum WdRulerStyle RulerStyle ) = 0;
    virtual HRESULT __stdcall raw_SetHeight (
        VARIANT * RowHeight,
        enum WdRowHeightRule HeightRule ) = 0;
    virtual HRESULT __stdcall raw_Merge ( ) = 0;
    virtual HRESULT __stdcall raw_Split (
        VARIANT * NumRows = &vtMissing,
        VARIANT * NumColumns = &vtMissing,
        VARIANT * MergeBeforeSplit = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_DistributeHeight ( ) = 0;
    virtual HRESULT __stdcall raw_DistributeWidth ( ) = 0;
    virtual HRESULT __stdcall raw_AutoFit ( ) = 0;
    virtual HRESULT __stdcall get_NestingLevel (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_PreferredWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_PreferredWidth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_PreferredWidthType (
        enum WdPreferredWidthType * prop ) = 0;
    virtual HRESULT __stdcall put_PreferredWidthType (
        enum WdPreferredWidthType prop ) = 0;
};

struct __declspec(uuid("00020949-0000-0000-c000-000000000046"))
AutoCorrect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCorrectDays,put=PutCorrectDays))
    VARIANT_BOOL CorrectDays;
    __declspec(property(get=GetCorrectInitialCaps,put=PutCorrectInitialCaps))
    VARIANT_BOOL CorrectInitialCaps;
    __declspec(property(get=GetCorrectSentenceCaps,put=PutCorrectSentenceCaps))
    VARIANT_BOOL CorrectSentenceCaps;
    __declspec(property(get=GetReplaceText,put=PutReplaceText))
    VARIANT_BOOL ReplaceText;
    __declspec(property(get=GetEntries))
    AutoCorrectEntriesPtr Entries;
    __declspec(property(get=GetFirstLetterExceptions))
    FirstLetterExceptionsPtr FirstLetterExceptions;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFirstLetterAutoAdd,put=PutFirstLetterAutoAdd))
    VARIANT_BOOL FirstLetterAutoAdd;
    __declspec(property(get=GetTwoInitialCapsExceptions))
    TwoInitialCapsExceptionsPtr TwoInitialCapsExceptions;
    __declspec(property(get=GetTwoInitialCapsAutoAdd,put=PutTwoInitialCapsAutoAdd))
    VARIANT_BOOL TwoInitialCapsAutoAdd;
    __declspec(property(get=GetCorrectCapsLock,put=PutCorrectCapsLock))
    VARIANT_BOOL CorrectCapsLock;
    __declspec(property(get=GetCorrectHangulAndAlphabet,put=PutCorrectHangulAndAlphabet))
    VARIANT_BOOL CorrectHangulAndAlphabet;
    __declspec(property(get=GetHangulAndAlphabetExceptions))
    HangulAndAlphabetExceptionsPtr HangulAndAlphabetExceptions;
    __declspec(property(get=GetHangulAndAlphabetAutoAdd,put=PutHangulAndAlphabetAutoAdd))
    VARIANT_BOOL HangulAndAlphabetAutoAdd;
    __declspec(property(get=GetReplaceTextFromSpellingChecker,put=PutReplaceTextFromSpellingChecker))
    VARIANT_BOOL ReplaceTextFromSpellingChecker;
    __declspec(property(get=GetOtherCorrectionsAutoAdd,put=PutOtherCorrectionsAutoAdd))
    VARIANT_BOOL OtherCorrectionsAutoAdd;
    __declspec(property(get=GetOtherCorrectionsExceptions))
    OtherCorrectionsExceptionsPtr OtherCorrectionsExceptions;
    __declspec(property(get=GetCorrectKeyboardSetting,put=PutCorrectKeyboardSetting))
    VARIANT_BOOL CorrectKeyboardSetting;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetCorrectDays ( );
    void PutCorrectDays (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetCorrectInitialCaps ( );
    void PutCorrectInitialCaps (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetCorrectSentenceCaps ( );
    void PutCorrectSentenceCaps (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetReplaceText ( );
    void PutReplaceText (
        VARIANT_BOOL prop );
    AutoCorrectEntriesPtr GetEntries ( );
    FirstLetterExceptionsPtr GetFirstLetterExceptions ( );
    VARIANT_BOOL GetFirstLetterAutoAdd ( );
    void PutFirstLetterAutoAdd (
        VARIANT_BOOL prop );
    TwoInitialCapsExceptionsPtr GetTwoInitialCapsExceptions ( );
    VARIANT_BOOL GetTwoInitialCapsAutoAdd ( );
    void PutTwoInitialCapsAutoAdd (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetCorrectCapsLock ( );
    void PutCorrectCapsLock (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetCorrectHangulAndAlphabet ( );
    void PutCorrectHangulAndAlphabet (
        VARIANT_BOOL prop );
    HangulAndAlphabetExceptionsPtr GetHangulAndAlphabetExceptions ( );
    VARIANT_BOOL GetHangulAndAlphabetAutoAdd ( );
    void PutHangulAndAlphabetAutoAdd (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetReplaceTextFromSpellingChecker ( );
    void PutReplaceTextFromSpellingChecker (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetOtherCorrectionsAutoAdd ( );
    void PutOtherCorrectionsAutoAdd (
        VARIANT_BOOL prop );
    OtherCorrectionsExceptionsPtr GetOtherCorrectionsExceptions ( );
    VARIANT_BOOL GetCorrectKeyboardSetting ( );
    void PutCorrectKeyboardSetting (
        VARIANT_BOOL prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_CorrectDays (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CorrectDays (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_CorrectInitialCaps (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CorrectInitialCaps (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_CorrectSentenceCaps (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CorrectSentenceCaps (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ReplaceText (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ReplaceText (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Entries (
        struct AutoCorrectEntries * * prop ) = 0;
    virtual HRESULT __stdcall get_FirstLetterExceptions (
        struct FirstLetterExceptions * * prop ) = 0;
    virtual HRESULT __stdcall get_FirstLetterAutoAdd (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_FirstLetterAutoAdd (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_TwoInitialCapsExceptions (
        struct TwoInitialCapsExceptions * * prop ) = 0;
    virtual HRESULT __stdcall get_TwoInitialCapsAutoAdd (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_TwoInitialCapsAutoAdd (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_CorrectCapsLock (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CorrectCapsLock (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_CorrectHangulAndAlphabet (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CorrectHangulAndAlphabet (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HangulAndAlphabetExceptions (
        struct HangulAndAlphabetExceptions * * prop ) = 0;
    virtual HRESULT __stdcall get_HangulAndAlphabetAutoAdd (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_HangulAndAlphabetAutoAdd (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ReplaceTextFromSpellingChecker (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ReplaceTextFromSpellingChecker (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_OtherCorrectionsAutoAdd (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_OtherCorrectionsAutoAdd (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_OtherCorrectionsExceptions (
        struct OtherCorrectionsExceptions * * prop ) = 0;
    virtual HRESULT __stdcall get_CorrectKeyboardSetting (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CorrectKeyboardSetting (
        VARIANT_BOOL prop ) = 0;
};

struct __declspec(uuid("00020948-0000-0000-c000-000000000046"))
AutoCorrectEntries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    AutoCorrectEntryPtr Item (
        VARIANT * Index );
    AutoCorrectEntryPtr Add (
        _bstr_t Name,
        _bstr_t Value );
    AutoCorrectEntryPtr AddRichText (
        _bstr_t Name,
        struct Range * Range );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct AutoCorrectEntry * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        BSTR Value,
        struct AutoCorrectEntry * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddRichText (
        BSTR Name,
        struct Range * Range,
        struct AutoCorrectEntry * * prop ) = 0;
};

struct __declspec(uuid("00020947-0000-0000-c000-000000000046"))
AutoCorrectEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetRichText))
    VARIANT_BOOL RichText;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t prop );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t prop );
    VARIANT_BOOL GetRichText ( );
    HRESULT Delete ( );
    HRESULT Apply (
        struct Range * Range );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Value (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Value (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_RichText (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Apply (
        struct Range * Range ) = 0;
};

struct __declspec(uuid("00020946-0000-0000-c000-000000000046"))
FirstLetterExceptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    FirstLetterExceptionPtr Item (
        VARIANT * Index );
    FirstLetterExceptionPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct FirstLetterException * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct FirstLetterException * * prop ) = 0;
};

struct __declspec(uuid("00020945-0000-0000-c000-000000000046"))
FirstLetterException : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00020944-0000-0000-c000-000000000046"))
TwoInitialCapsExceptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    TwoInitialCapsExceptionPtr Item (
        VARIANT * Index );
    TwoInitialCapsExceptionPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct TwoInitialCapsException * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct TwoInitialCapsException * * prop ) = 0;
};

struct __declspec(uuid("00020943-0000-0000-c000-000000000046"))
TwoInitialCapsException : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00020942-0000-0000-c000-000000000046"))
Footnotes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLocation,put=PutLocation))
    enum WdFootnoteLocation Location;
    __declspec(property(get=GetNumberStyle,put=PutNumberStyle))
    enum WdNoteNumberStyle NumberStyle;
    __declspec(property(get=GetStartingNumber,put=PutStartingNumber))
    long StartingNumber;
    __declspec(property(get=GetNumberingRule,put=PutNumberingRule))
    enum WdNumberingRule NumberingRule;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSeparator))
    RangePtr Separator;
    __declspec(property(get=GetContinuationSeparator))
    RangePtr ContinuationSeparator;
    __declspec(property(get=GetContinuationNotice))
    RangePtr ContinuationNotice;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdFootnoteLocation GetLocation ( );
    void PutLocation (
        enum WdFootnoteLocation prop );
    enum WdNoteNumberStyle GetNumberStyle ( );
    void PutNumberStyle (
        enum WdNoteNumberStyle prop );
    long GetStartingNumber ( );
    void PutStartingNumber (
        long prop );
    enum WdNumberingRule GetNumberingRule ( );
    void PutNumberingRule (
        enum WdNumberingRule prop );
    RangePtr GetSeparator ( );
    RangePtr GetContinuationSeparator ( );
    RangePtr GetContinuationNotice ( );
    FootnotePtr Item (
        long Index );
    FootnotePtr Add (
        struct Range * Range,
        VARIANT * Reference = &vtMissing,
        VARIANT * Text = &vtMissing );
    HRESULT Convert ( );
    HRESULT SwapWithEndnotes ( );
    HRESULT ResetSeparator ( );
    HRESULT ResetContinuationSeparator ( );
    HRESULT ResetContinuationNotice ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Location (
        enum WdFootnoteLocation * prop ) = 0;
    virtual HRESULT __stdcall put_Location (
        enum WdFootnoteLocation prop ) = 0;
    virtual HRESULT __stdcall get_NumberStyle (
        enum WdNoteNumberStyle * prop ) = 0;
    virtual HRESULT __stdcall put_NumberStyle (
        enum WdNoteNumberStyle prop ) = 0;
    virtual HRESULT __stdcall get_StartingNumber (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_StartingNumber (
        long prop ) = 0;
    virtual HRESULT __stdcall get_NumberingRule (
        enum WdNumberingRule * prop ) = 0;
    virtual HRESULT __stdcall put_NumberingRule (
        enum WdNumberingRule prop ) = 0;
    virtual HRESULT __stdcall get_Separator (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_ContinuationSeparator (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_ContinuationNotice (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Footnote * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct Range * Range,
        VARIANT * Reference,
        VARIANT * Text,
        struct Footnote * * prop ) = 0;
    virtual HRESULT __stdcall raw_Convert ( ) = 0;
    virtual HRESULT __stdcall raw_SwapWithEndnotes ( ) = 0;
    virtual HRESULT __stdcall raw_ResetSeparator ( ) = 0;
    virtual HRESULT __stdcall raw_ResetContinuationSeparator ( ) = 0;
    virtual HRESULT __stdcall raw_ResetContinuationNotice ( ) = 0;
};

struct __declspec(uuid("00020941-0000-0000-c000-000000000046"))
Endnotes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLocation,put=PutLocation))
    enum WdEndnoteLocation Location;
    __declspec(property(get=GetNumberStyle,put=PutNumberStyle))
    enum WdNoteNumberStyle NumberStyle;
    __declspec(property(get=GetStartingNumber,put=PutStartingNumber))
    long StartingNumber;
    __declspec(property(get=GetNumberingRule,put=PutNumberingRule))
    enum WdNumberingRule NumberingRule;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSeparator))
    RangePtr Separator;
    __declspec(property(get=GetContinuationSeparator))
    RangePtr ContinuationSeparator;
    __declspec(property(get=GetContinuationNotice))
    RangePtr ContinuationNotice;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdEndnoteLocation GetLocation ( );
    void PutLocation (
        enum WdEndnoteLocation prop );
    enum WdNoteNumberStyle GetNumberStyle ( );
    void PutNumberStyle (
        enum WdNoteNumberStyle prop );
    long GetStartingNumber ( );
    void PutStartingNumber (
        long prop );
    enum WdNumberingRule GetNumberingRule ( );
    void PutNumberingRule (
        enum WdNumberingRule prop );
    RangePtr GetSeparator ( );
    RangePtr GetContinuationSeparator ( );
    RangePtr GetContinuationNotice ( );
    EndnotePtr Item (
        long Index );
    EndnotePtr Add (
        struct Range * Range,
        VARIANT * Reference = &vtMissing,
        VARIANT * Text = &vtMissing );
    HRESULT Convert ( );
    HRESULT SwapWithFootnotes ( );
    HRESULT ResetSeparator ( );
    HRESULT ResetContinuationSeparator ( );
    HRESULT ResetContinuationNotice ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Location (
        enum WdEndnoteLocation * prop ) = 0;
    virtual HRESULT __stdcall put_Location (
        enum WdEndnoteLocation prop ) = 0;
    virtual HRESULT __stdcall get_NumberStyle (
        enum WdNoteNumberStyle * prop ) = 0;
    virtual HRESULT __stdcall put_NumberStyle (
        enum WdNoteNumberStyle prop ) = 0;
    virtual HRESULT __stdcall get_StartingNumber (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_StartingNumber (
        long prop ) = 0;
    virtual HRESULT __stdcall get_NumberingRule (
        enum WdNumberingRule * prop ) = 0;
    virtual HRESULT __stdcall put_NumberingRule (
        enum WdNumberingRule prop ) = 0;
    virtual HRESULT __stdcall get_Separator (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_ContinuationSeparator (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_ContinuationNotice (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Endnote * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct Range * Range,
        VARIANT * Reference,
        VARIANT * Text,
        struct Endnote * * prop ) = 0;
    virtual HRESULT __stdcall raw_Convert ( ) = 0;
    virtual HRESULT __stdcall raw_SwapWithFootnotes ( ) = 0;
    virtual HRESULT __stdcall raw_ResetSeparator ( ) = 0;
    virtual HRESULT __stdcall raw_ResetContinuationSeparator ( ) = 0;
    virtual HRESULT __stdcall raw_ResetContinuationNotice ( ) = 0;
};

struct __declspec(uuid("00020940-0000-0000-c000-000000000046"))
Comments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShowBy,put=PutShowBy))
    _bstr_t ShowBy;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetShowBy ( );
    void PutShowBy (
        _bstr_t prop );
    CommentPtr Item (
        long Index );
    CommentPtr Add (
        struct Range * Range,
        VARIANT * Text = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_ShowBy (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ShowBy (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Comment * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct Range * Range,
        VARIANT * Text,
        struct Comment * * prop ) = 0;
};

struct __declspec(uuid("0002093f-0000-0000-c000-000000000046"))
Footnote : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetReference))
    RangePtr Reference;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetRange ( );
    RangePtr GetReference ( );
    long GetIndex ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Reference (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002093e-0000-0000-c000-000000000046"))
Endnote : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetReference))
    RangePtr Reference;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetRange ( );
    RangePtr GetReference ( );
    long GetIndex ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Reference (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002093d-0000-0000-c000-000000000046"))
Comment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetReference))
    RangePtr Reference;
    __declspec(property(get=GetScope))
    RangePtr Scope;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetInitial,put=PutInitial))
    _bstr_t Initial;
    __declspec(property(get=GetShowTip,put=PutShowTip))
    VARIANT_BOOL ShowTip;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetRange ( );
    RangePtr GetReference ( );
    RangePtr GetScope ( );
    long GetIndex ( );
    _bstr_t GetAuthor ( );
    void PutAuthor (
        _bstr_t prop );
    _bstr_t GetInitial ( );
    void PutInitial (
        _bstr_t prop );
    VARIANT_BOOL GetShowTip ( );
    void PutShowTip (
        VARIANT_BOOL prop );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Reference (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Scope (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Author (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Author (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Initial (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Initial (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_ShowTip (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowTip (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002093c-0000-0000-c000-000000000046"))
Borders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnable,put=PutEnable))
    long Enable;
    __declspec(property(get=GetDistanceFromTop,put=PutDistanceFromTop))
    long DistanceFromTop;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetInsideLineStyle,put=PutInsideLineStyle))
    enum WdLineStyle InsideLineStyle;
    __declspec(property(get=GetOutsideLineStyle,put=PutOutsideLineStyle))
    enum WdLineStyle OutsideLineStyle;
    __declspec(property(get=GetInsideLineWidth,put=PutInsideLineWidth))
    enum WdLineWidth InsideLineWidth;
    __declspec(property(get=GetOutsideLineWidth,put=PutOutsideLineWidth))
    enum WdLineWidth OutsideLineWidth;
    __declspec(property(get=GetInsideColorIndex,put=PutInsideColorIndex))
    enum WdColorIndex InsideColorIndex;
    __declspec(property(get=GetOutsideColorIndex,put=PutOutsideColorIndex))
    enum WdColorIndex OutsideColorIndex;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetDistanceFromLeft,put=PutDistanceFromLeft))
    long DistanceFromLeft;
    __declspec(property(get=GetDistanceFromBottom,put=PutDistanceFromBottom))
    long DistanceFromBottom;
    __declspec(property(get=GetDistanceFromRight,put=PutDistanceFromRight))
    long DistanceFromRight;
    __declspec(property(get=GetAlwaysInFront,put=PutAlwaysInFront))
    VARIANT_BOOL AlwaysInFront;
    __declspec(property(get=GetSurroundHeader,put=PutSurroundHeader))
    VARIANT_BOOL SurroundHeader;
    __declspec(property(get=GetSurroundFooter,put=PutSurroundFooter))
    VARIANT_BOOL SurroundFooter;
    __declspec(property(get=GetJoinBorders,put=PutJoinBorders))
    VARIANT_BOOL JoinBorders;
    __declspec(property(get=GetHasHorizontal))
    VARIANT_BOOL HasHorizontal;
    __declspec(property(get=GetHasVertical))
    VARIANT_BOOL HasVertical;
    __declspec(property(get=GetDistanceFrom,put=PutDistanceFrom))
    enum WdBorderDistanceFrom DistanceFrom;
    __declspec(property(get=GetEnableFirstPageInSection,put=PutEnableFirstPageInSection))
    VARIANT_BOOL EnableFirstPageInSection;
    __declspec(property(get=GetEnableOtherPagesInSection,put=PutEnableOtherPagesInSection))
    VARIANT_BOOL EnableOtherPagesInSection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInsideColor,put=PutInsideColor))
    enum WdColor InsideColor;
    __declspec(property(get=GetOutsideColor,put=PutOutsideColor))
    enum WdColor OutsideColor;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    long GetEnable ( );
    void PutEnable (
        long prop );
    long GetDistanceFromTop ( );
    void PutDistanceFromTop (
        long prop );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL prop );
    enum WdLineStyle GetInsideLineStyle ( );
    void PutInsideLineStyle (
        enum WdLineStyle prop );
    enum WdLineStyle GetOutsideLineStyle ( );
    void PutOutsideLineStyle (
        enum WdLineStyle prop );
    enum WdLineWidth GetInsideLineWidth ( );
    void PutInsideLineWidth (
        enum WdLineWidth prop );
    enum WdLineWidth GetOutsideLineWidth ( );
    void PutOutsideLineWidth (
        enum WdLineWidth prop );
    enum WdColorIndex GetInsideColorIndex ( );
    void PutInsideColorIndex (
        enum WdColorIndex prop );
    enum WdColorIndex GetOutsideColorIndex ( );
    void PutOutsideColorIndex (
        enum WdColorIndex prop );
    long GetDistanceFromLeft ( );
    void PutDistanceFromLeft (
        long prop );
    long GetDistanceFromBottom ( );
    void PutDistanceFromBottom (
        long prop );
    long GetDistanceFromRight ( );
    void PutDistanceFromRight (
        long prop );
    VARIANT_BOOL GetAlwaysInFront ( );
    void PutAlwaysInFront (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSurroundHeader ( );
    void PutSurroundHeader (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSurroundFooter ( );
    void PutSurroundFooter (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetJoinBorders ( );
    void PutJoinBorders (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetHasHorizontal ( );
    VARIANT_BOOL GetHasVertical ( );
    enum WdBorderDistanceFrom GetDistanceFrom ( );
    void PutDistanceFrom (
        enum WdBorderDistanceFrom prop );
    VARIANT_BOOL GetEnableFirstPageInSection ( );
    void PutEnableFirstPageInSection (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetEnableOtherPagesInSection ( );
    void PutEnableOtherPagesInSection (
        VARIANT_BOOL prop );
    BorderPtr Item (
        enum WdBorderType Index );
    HRESULT ApplyPageBordersToAllSections ( );
    enum WdColor GetInsideColor ( );
    void PutInsideColor (
        enum WdColor prop );
    enum WdColor GetOutsideColor ( );
    void PutOutsideColor (
        enum WdColor prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Enable (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Enable (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DistanceFromTop (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceFromTop (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_InsideLineStyle (
        enum WdLineStyle * prop ) = 0;
    virtual HRESULT __stdcall put_InsideLineStyle (
        enum WdLineStyle prop ) = 0;
    virtual HRESULT __stdcall get_OutsideLineStyle (
        enum WdLineStyle * prop ) = 0;
    virtual HRESULT __stdcall put_OutsideLineStyle (
        enum WdLineStyle prop ) = 0;
    virtual HRESULT __stdcall get_InsideLineWidth (
        enum WdLineWidth * prop ) = 0;
    virtual HRESULT __stdcall put_InsideLineWidth (
        enum WdLineWidth prop ) = 0;
    virtual HRESULT __stdcall get_OutsideLineWidth (
        enum WdLineWidth * prop ) = 0;
    virtual HRESULT __stdcall put_OutsideLineWidth (
        enum WdLineWidth prop ) = 0;
    virtual HRESULT __stdcall get_InsideColorIndex (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_InsideColorIndex (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_OutsideColorIndex (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_OutsideColorIndex (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_DistanceFromLeft (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceFromLeft (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DistanceFromBottom (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceFromBottom (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DistanceFromRight (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceFromRight (
        long prop ) = 0;
    virtual HRESULT __stdcall get_AlwaysInFront (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AlwaysInFront (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SurroundHeader (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SurroundHeader (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SurroundFooter (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SurroundFooter (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_JoinBorders (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_JoinBorders (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HasHorizontal (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_HasVertical (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_DistanceFrom (
        enum WdBorderDistanceFrom * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceFrom (
        enum WdBorderDistanceFrom prop ) = 0;
    virtual HRESULT __stdcall get_EnableFirstPageInSection (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_EnableFirstPageInSection (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_EnableOtherPagesInSection (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_EnableOtherPagesInSection (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        enum WdBorderType Index,
        struct Border * * prop ) = 0;
    virtual HRESULT __stdcall raw_ApplyPageBordersToAllSections ( ) = 0;
    virtual HRESULT __stdcall get_InsideColor (
        enum WdColor * prop ) = 0;
    virtual HRESULT __stdcall put_InsideColor (
        enum WdColor prop ) = 0;
    virtual HRESULT __stdcall get_OutsideColor (
        enum WdColor * prop ) = 0;
    virtual HRESULT __stdcall put_OutsideColor (
        enum WdColor prop ) = 0;
};

struct __declspec(uuid("0002093b-0000-0000-c000-000000000046"))
Border : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    enum WdColorIndex ColorIndex;
    __declspec(property(get=GetInside))
    VARIANT_BOOL Inside;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    enum WdLineStyle LineStyle;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum WdLineWidth LineWidth;
    __declspec(property(get=GetArtStyle,put=PutArtStyle))
    enum WdPageBorderArt ArtStyle;
    __declspec(property(get=GetArtWidth,put=PutArtWidth))
    long ArtWidth;
    __declspec(property(get=GetColor,put=PutColor))
    enum WdColor Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL prop );
    enum WdColorIndex GetColorIndex ( );
    void PutColorIndex (
        enum WdColorIndex prop );
    VARIANT_BOOL GetInside ( );
    enum WdLineStyle GetLineStyle ( );
    void PutLineStyle (
        enum WdLineStyle prop );
    enum WdLineWidth GetLineWidth ( );
    void PutLineWidth (
        enum WdLineWidth prop );
    enum WdPageBorderArt GetArtStyle ( );
    void PutArtStyle (
        enum WdPageBorderArt prop );
    long GetArtWidth ( );
    void PutArtWidth (
        long prop );
    enum WdColor GetColor ( );
    void PutColor (
        enum WdColor prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ColorIndex (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_ColorIndex (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_Inside (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_LineStyle (
        enum WdLineStyle * prop ) = 0;
    virtual HRESULT __stdcall put_LineStyle (
        enum WdLineStyle prop ) = 0;
    virtual HRESULT __stdcall get_LineWidth (
        enum WdLineWidth * prop ) = 0;
    virtual HRESULT __stdcall put_LineWidth (
        enum WdLineWidth prop ) = 0;
    virtual HRESULT __stdcall get_ArtStyle (
        enum WdPageBorderArt * prop ) = 0;
    virtual HRESULT __stdcall put_ArtStyle (
        enum WdPageBorderArt prop ) = 0;
    virtual HRESULT __stdcall get_ArtWidth (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_ArtWidth (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Color (
        enum WdColor * prop ) = 0;
    virtual HRESULT __stdcall put_Color (
        enum WdColor prop ) = 0;
};

struct __declspec(uuid("0002093a-0000-0000-c000-000000000046"))
Shading : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetForegroundPatternColorIndex,put=PutForegroundPatternColorIndex))
    enum WdColorIndex ForegroundPatternColorIndex;
    __declspec(property(get=GetBackgroundPatternColorIndex,put=PutBackgroundPatternColorIndex))
    enum WdColorIndex BackgroundPatternColorIndex;
    __declspec(property(get=GetTexture,put=PutTexture))
    enum WdTextureIndex Texture;
    __declspec(property(get=GetForegroundPatternColor,put=PutForegroundPatternColor))
    enum WdColor ForegroundPatternColor;
    __declspec(property(get=GetBackgroundPatternColor,put=PutBackgroundPatternColor))
    enum WdColor BackgroundPatternColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdColorIndex GetForegroundPatternColorIndex ( );
    void PutForegroundPatternColorIndex (
        enum WdColorIndex prop );
    enum WdColorIndex GetBackgroundPatternColorIndex ( );
    void PutBackgroundPatternColorIndex (
        enum WdColorIndex prop );
    enum WdTextureIndex GetTexture ( );
    void PutTexture (
        enum WdTextureIndex prop );
    enum WdColor GetForegroundPatternColor ( );
    void PutForegroundPatternColor (
        enum WdColor prop );
    enum WdColor GetBackgroundPatternColor ( );
    void PutBackgroundPatternColor (
        enum WdColor prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_ForegroundPatternColorIndex (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_ForegroundPatternColorIndex (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_BackgroundPatternColorIndex (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_BackgroundPatternColorIndex (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_Texture (
        enum WdTextureIndex * prop ) = 0;
    virtual HRESULT __stdcall put_Texture (
        enum WdTextureIndex prop ) = 0;
    virtual HRESULT __stdcall get_ForegroundPatternColor (
        enum WdColor * prop ) = 0;
    virtual HRESULT __stdcall put_ForegroundPatternColor (
        enum WdColor prop ) = 0;
    virtual HRESULT __stdcall get_BackgroundPatternColor (
        enum WdColor * prop ) = 0;
    virtual HRESULT __stdcall put_BackgroundPatternColor (
        enum WdColor prop ) = 0;
};

struct __declspec(uuid("00020939-0000-0000-c000-000000000046"))
TextRetrievalMode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetViewType,put=PutViewType))
    enum WdViewType ViewType;
    __declspec(property(get=GetDuplicate))
    TextRetrievalModePtr Duplicate;
    __declspec(property(get=GetIncludeHiddenText,put=PutIncludeHiddenText))
    VARIANT_BOOL IncludeHiddenText;
    __declspec(property(get=GetIncludeFieldCodes,put=PutIncludeFieldCodes))
    VARIANT_BOOL IncludeFieldCodes;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdViewType GetViewType ( );
    void PutViewType (
        enum WdViewType prop );
    TextRetrievalModePtr GetDuplicate ( );
    VARIANT_BOOL GetIncludeHiddenText ( );
    void PutIncludeHiddenText (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetIncludeFieldCodes ( );
    void PutIncludeFieldCodes (
        VARIANT_BOOL prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_ViewType (
        enum WdViewType * prop ) = 0;
    virtual HRESULT __stdcall put_ViewType (
        enum WdViewType prop ) = 0;
    virtual HRESULT __stdcall get_Duplicate (
        struct TextRetrievalMode * * prop ) = 0;
    virtual HRESULT __stdcall get_IncludeHiddenText (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IncludeHiddenText (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_IncludeFieldCodes (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IncludeFieldCodes (
        VARIANT_BOOL prop ) = 0;
};

struct __declspec(uuid("00020937-0000-0000-c000-000000000046"))
AutoTextEntries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    AutoTextEntryPtr Item (
        VARIANT * Index );
    AutoTextEntryPtr Add (
        _bstr_t Name,
        struct Range * Range );
    AutoTextEntryPtr AppendToSpike (
        struct Range * Range );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct AutoTextEntry * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct Range * Range,
        struct AutoTextEntry * * prop ) = 0;
    virtual HRESULT __stdcall raw_AppendToSpike (
        struct Range * Range,
        struct AutoTextEntry * * prop ) = 0;
};

struct __declspec(uuid("00020936-0000-0000-c000-000000000046"))
AutoTextEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t prop );
    _bstr_t GetStyleName ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t prop );
    HRESULT Delete ( );
    RangePtr Insert (
        struct Range * Where,
        VARIANT * RichText = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_StyleName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Value (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Value (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Insert (
        struct Range * Where,
        VARIANT * RichText,
        struct Range * * prop ) = 0;
};

struct __declspec(uuid("00020935-0000-0000-c000-000000000046"))
System : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOperatingSystem))
    _bstr_t OperatingSystem;
    __declspec(property(get=GetProcessorType))
    _bstr_t ProcessorType;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetFreeDiskSpace))
    long FreeDiskSpace;
    __declspec(property(get=GetCountry))
    enum WdCountry Country;
    __declspec(property(get=GetLanguageDesignation))
    _bstr_t LanguageDesignation;
    __declspec(property(get=GetHorizontalResolution))
    long HorizontalResolution;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVerticalResolution))
    long VerticalResolution;
    __declspec(property(get=GetProfileString,put=PutProfileString))
    _bstr_t ProfileString[][];
    __declspec(property(get=GetPrivateProfileString,put=PutPrivateProfileString))
    _bstr_t PrivateProfileString[][][];
    __declspec(property(get=GetMathCoprocessorInstalled))
    VARIANT_BOOL MathCoprocessorInstalled;
    __declspec(property(get=GetComputerType))
    _bstr_t ComputerType;
    __declspec(property(get=GetMacintoshName))
    _bstr_t MacintoshName;
    __declspec(property(get=GetQuickDrawInstalled))
    VARIANT_BOOL QuickDrawInstalled;
    __declspec(property(get=GetCursor,put=PutCursor))
    enum WdCursorType Cursor;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetOperatingSystem ( );
    _bstr_t GetProcessorType ( );
    _bstr_t GetVersion ( );
    long GetFreeDiskSpace ( );
    enum WdCountry GetCountry ( );
    _bstr_t GetLanguageDesignation ( );
    long GetHorizontalResolution ( );
    long GetVerticalResolution ( );
    _bstr_t GetProfileString (
        _bstr_t Section,
        _bstr_t Key );
    void PutProfileString (
        _bstr_t Section,
        _bstr_t Key,
        _bstr_t prop );
    _bstr_t GetPrivateProfileString (
        _bstr_t FileName,
        _bstr_t Section,
        _bstr_t Key );
    void PutPrivateProfileString (
        _bstr_t FileName,
        _bstr_t Section,
        _bstr_t Key,
        _bstr_t prop );
    VARIANT_BOOL GetMathCoprocessorInstalled ( );
    _bstr_t GetComputerType ( );
    _bstr_t GetMacintoshName ( );
    VARIANT_BOOL GetQuickDrawInstalled ( );
    enum WdCursorType GetCursor ( );
    void PutCursor (
        enum WdCursorType prop );
    HRESULT MSInfo ( );
    HRESULT Connect (
        _bstr_t Path,
        VARIANT * Drive = &vtMissing,
        VARIANT * Password = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_OperatingSystem (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_ProcessorType (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Version (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_FreeDiskSpace (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Country (
        enum WdCountry * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageDesignation (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_HorizontalResolution (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_VerticalResolution (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_ProfileString (
        BSTR Section,
        BSTR Key,
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ProfileString (
        BSTR Section,
        BSTR Key,
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_PrivateProfileString (
        BSTR FileName,
        BSTR Section,
        BSTR Key,
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_PrivateProfileString (
        BSTR FileName,
        BSTR Section,
        BSTR Key,
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_MathCoprocessorInstalled (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_ComputerType (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_MacintoshName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_QuickDrawInstalled (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Cursor (
        enum WdCursorType * prop ) = 0;
    virtual HRESULT __stdcall put_Cursor (
        enum WdCursorType prop ) = 0;
    virtual HRESULT __stdcall raw_MSInfo ( ) = 0;
    virtual HRESULT __stdcall raw_Connect (
        BSTR Path,
        VARIANT * Drive = &vtMissing,
        VARIANT * Password = &vtMissing ) = 0;
};

struct __declspec(uuid("00020933-0000-0000-c000-000000000046"))
OLEFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetClassType,put=PutClassType))
    _bstr_t ClassType;
    __declspec(property(get=GetDisplayAsIcon,put=PutDisplayAsIcon))
    VARIANT_BOOL DisplayAsIcon;
    __declspec(property(get=GetIconName,put=PutIconName))
    _bstr_t IconName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIconPath))
    _bstr_t IconPath;
    __declspec(property(get=GetIconIndex,put=PutIconIndex))
    long IconIndex;
    __declspec(property(get=GetIconLabel,put=PutIconLabel))
    _bstr_t IconLabel;
    __declspec(property(get=GetLabel))
    _bstr_t Label;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetProgID))
    _bstr_t ProgID;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetClassType ( );
    void PutClassType (
        _bstr_t prop );
    VARIANT_BOOL GetDisplayAsIcon ( );
    void PutDisplayAsIcon (
        VARIANT_BOOL prop );
    _bstr_t GetIconName ( );
    void PutIconName (
        _bstr_t prop );
    _bstr_t GetIconPath ( );
    long GetIconIndex ( );
    void PutIconIndex (
        long prop );
    _bstr_t GetIconLabel ( );
    void PutIconLabel (
        _bstr_t prop );
    _bstr_t GetLabel ( );
    IDispatchPtr GetObject ( );
    _bstr_t GetProgID ( );
    HRESULT Activate ( );
    HRESULT Edit ( );
    HRESULT Open ( );
    HRESULT DoVerb (
        VARIANT * VerbIndex = &vtMissing );
    HRESULT ConvertTo (
        VARIANT * ClassType = &vtMissing,
        VARIANT * DisplayAsIcon = &vtMissing,
        VARIANT * IconFileName = &vtMissing,
        VARIANT * IconIndex = &vtMissing,
        VARIANT * IconLabel = &vtMissing );
    HRESULT ActivateAs (
        _bstr_t ClassType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_ClassType (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ClassType (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_DisplayAsIcon (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayAsIcon (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_IconName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_IconName (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_IconPath (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_IconIndex (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_IconIndex (
        long prop ) = 0;
    virtual HRESULT __stdcall get_IconLabel (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_IconLabel (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Label (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Object (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_ProgID (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall raw_Edit ( ) = 0;
    virtual HRESULT __stdcall raw_Open ( ) = 0;
    virtual HRESULT __stdcall raw_DoVerb (
        VARIANT * VerbIndex = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ConvertTo (
        VARIANT * ClassType = &vtMissing,
        VARIANT * DisplayAsIcon = &vtMissing,
        VARIANT * IconFileName = &vtMissing,
        VARIANT * IconIndex = &vtMissing,
        VARIANT * IconLabel = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ActivateAs (
        BSTR ClassType ) = 0;
};

struct __declspec(uuid("00020931-0000-0000-c000-000000000046"))
LinkFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetSourcePath))
    _bstr_t SourcePath;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetType))
    enum WdLinkType Type;
    __declspec(property(get=GetSourceFullName,put=PutSourceFullName))
    _bstr_t SourceFullName;
    __declspec(property(get=GetSavePictureWithDocument,put=PutSavePictureWithDocument))
    VARIANT_BOOL SavePictureWithDocument;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL prop );
    _bstr_t GetSourceName ( );
    _bstr_t GetSourcePath ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL prop );
    enum WdLinkType GetType ( );
    _bstr_t GetSourceFullName ( );
    void PutSourceFullName (
        _bstr_t prop );
    VARIANT_BOOL GetSavePictureWithDocument ( );
    void PutSavePictureWithDocument (
        VARIANT_BOOL prop );
    HRESULT BreakLink ( );
    HRESULT Update ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_AutoUpdate (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoUpdate (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SourceName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_SourcePath (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdLinkType * prop ) = 0;
    virtual HRESULT __stdcall get_SourceFullName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_SourceFullName (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_SavePictureWithDocument (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SavePictureWithDocument (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_BreakLink ( ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
};

struct __declspec(uuid("000209a4-0000-0000-c000-000000000046"))
_OLEControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetAutomation))
    IDispatchPtr Automation;
    __declspec(property(get=GetAltHTML,put=PutAltHTML))
    _bstr_t AltHTML;

    //
    // Wrapper methods for error-handling
    //

    float GetLeft ( );
    void PutLeft (
        float prop );
    float GetTop ( );
    void PutTop (
        float prop );
    float GetHeight ( );
    void PutHeight (
        float prop );
    float GetWidth ( );
    void PutWidth (
        float prop );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t prop );
    IDispatchPtr GetAutomation ( );
    HRESULT Select ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Activate ( );
    _bstr_t GetAltHTML ( );
    void PutAltHTML (
        _bstr_t prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Left (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Left (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Top (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Top (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Automation (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Copy ( ) = 0;
    virtual HRESULT __stdcall raw_Cut ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall get_AltHTML (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_AltHTML (
        BSTR prop ) = 0;
};

struct __declspec(uuid("00020930-0000-0000-c000-000000000046"))
Fields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLocked,put=PutLocked))
    long Locked;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    long GetLocked ( );
    void PutLocked (
        long prop );
    IUnknownPtr Get_NewEnum ( );
    FieldPtr Item (
        long Index );
    HRESULT ToggleShowCodes ( );
    long Update ( );
    HRESULT Unlink ( );
    HRESULT UpdateSource ( );
    FieldPtr Add (
        struct Range * Range,
        VARIANT * Type = &vtMissing,
        VARIANT * Text = &vtMissing,
        VARIANT * PreserveFormatting = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Locked (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Locked (
        long prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Field * * prop ) = 0;
    virtual HRESULT __stdcall raw_ToggleShowCodes ( ) = 0;
    virtual HRESULT __stdcall raw_Update (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Unlink ( ) = 0;
    virtual HRESULT __stdcall raw_UpdateSource ( ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct Range * Range,
        VARIANT * Type,
        VARIANT * Text,
        VARIANT * PreserveFormatting,
        struct Field * * prop ) = 0;
};

struct __declspec(uuid("0002092f-0000-0000-c000-000000000046"))
Field : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCode,put=PutCode))
    RangePtr Code;
    __declspec(property(get=GetType))
    enum WdFieldType Type;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetKind))
    enum WdFieldKind Kind;
    __declspec(property(get=GetResult,put=PutResult))
    RangePtr Result;
    __declspec(property(get=GetData,put=PutData))
    _bstr_t Data;
    __declspec(property(get=GetNext))
    FieldPtr Next;
    __declspec(property(get=GetPrevious))
    FieldPtr Previous;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetShowCodes,put=PutShowCodes))
    VARIANT_BOOL ShowCodes;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetInlineShape))
    InlineShapePtr InlineShape;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetCode ( );
    void PutCode (
        struct Range * prop );
    enum WdFieldType GetType ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL prop );
    enum WdFieldKind GetKind ( );
    RangePtr GetResult ( );
    void PutResult (
        struct Range * prop );
    _bstr_t GetData ( );
    void PutData (
        _bstr_t prop );
    FieldPtr GetNext ( );
    FieldPtr GetPrevious ( );
    long GetIndex ( );
    VARIANT_BOOL GetShowCodes ( );
    void PutShowCodes (
        VARIANT_BOOL prop );
    LinkFormatPtr GetLinkFormat ( );
    OLEFormatPtr GetOLEFormat ( );
    InlineShapePtr GetInlineShape ( );
    HRESULT Select ( );
    VARIANT_BOOL Update ( );
    HRESULT Unlink ( );
    HRESULT UpdateSource ( );
    HRESULT DoClick ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Code (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall put_Code (
        struct Range * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdFieldType * prop ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum WdFieldKind * prop ) = 0;
    virtual HRESULT __stdcall get_Result (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall put_Result (
        struct Range * prop ) = 0;
    virtual HRESULT __stdcall get_Data (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Data (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Next (
        struct Field * * prop ) = 0;
    virtual HRESULT __stdcall get_Previous (
        struct Field * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_ShowCodes (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowCodes (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_LinkFormat (
        struct LinkFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_OLEFormat (
        struct OLEFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_InlineShape (
        struct InlineShape * * prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Update (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_Unlink ( ) = 0;
    virtual HRESULT __stdcall raw_UpdateSource ( ) = 0;
    virtual HRESULT __stdcall raw_DoClick ( ) = 0;
    virtual HRESULT __stdcall raw_Copy ( ) = 0;
    virtual HRESULT __stdcall raw_Cut ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002092e-0000-0000-c000-000000000046"))
Browser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTarget,put=PutTarget))
    enum WdBrowseTarget Target;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdBrowseTarget GetTarget ( );
    void PutTarget (
        enum WdBrowseTarget prop );
    HRESULT Next ( );
    HRESULT Previous ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Target (
        enum WdBrowseTarget * prop ) = 0;
    virtual HRESULT __stdcall put_Target (
        enum WdBrowseTarget prop ) = 0;
    virtual HRESULT __stdcall raw_Next ( ) = 0;
    virtual HRESULT __stdcall raw_Previous ( ) = 0;
};

struct __declspec(uuid("0002092d-0000-0000-c000-000000000046"))
Styles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    StylePtr Item (
        VARIANT * Index );
    StylePtr Add (
        _bstr_t Name,
        VARIANT * Type = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Style * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT * Type,
        struct Style * * prop ) = 0;
};

struct __declspec(uuid("0002092c-0000-0000-c000-000000000046"))
Style : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetType))
    enum WdStyleType Type;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetInUse))
    VARIANT_BOOL InUse;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetParagraphFormat,put=PutParagraphFormat))
    _ParagraphFormatPtr ParagraphFormat;
    __declspec(property(get=GetFont,put=PutFont))
    _FontPtr Font;
    __declspec(property(get=GetFrame))
    FramePtr Frame;
    __declspec(property(get=GetLanguageID,put=PutLanguageID))
    enum WdLanguageID LanguageID;
    __declspec(property(get=GetAutomaticallyUpdate,put=PutAutomaticallyUpdate))
    VARIANT_BOOL AutomaticallyUpdate;
    __declspec(property(get=GetListTemplate))
    ListTemplatePtr ListTemplate;
    __declspec(property(get=GetListLevelNumber))
    long ListLevelNumber;
    __declspec(property(get=GetLanguageIDFarEast,put=PutLanguageIDFarEast))
    enum WdLanguageID LanguageIDFarEast;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetNoProofing,put=PutNoProofing))
    long NoProofing;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t prop );
    _variant_t GetBaseStyle ( );
    void PutBaseStyle (
        VARIANT * prop );
    _bstr_t GetDescription ( );
    enum WdStyleType GetType ( );
    VARIANT_BOOL GetBuiltIn ( );
    _variant_t GetNextParagraphStyle ( );
    void PutNextParagraphStyle (
        VARIANT * prop );
    VARIANT_BOOL GetInUse ( );
    ShadingPtr GetShading ( );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    _ParagraphFormatPtr GetParagraphFormat ( );
    void PutParagraphFormat (
        struct _ParagraphFormat * prop );
    _FontPtr GetFont ( );
    void PutFont (
        struct _Font * prop );
    FramePtr GetFrame ( );
    enum WdLanguageID GetLanguageID ( );
    void PutLanguageID (
        enum WdLanguageID prop );
    VARIANT_BOOL GetAutomaticallyUpdate ( );
    void PutAutomaticallyUpdate (
        VARIANT_BOOL prop );
    ListTemplatePtr GetListTemplate ( );
    long GetListLevelNumber ( );
    enum WdLanguageID GetLanguageIDFarEast ( );
    void PutLanguageIDFarEast (
        enum WdLanguageID prop );
    VARIANT_BOOL GetHidden ( );
    void PutHidden (
        VARIANT_BOOL prop );
    HRESULT Delete ( );
    HRESULT LinkToListTemplate (
        struct ListTemplate * ListTemplate,
        VARIANT * ListLevelNumber = &vtMissing );
    long GetNoProofing ( );
    void PutNoProofing (
        long prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_NameLocal (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_NameLocal (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_BaseStyle (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_BaseStyle (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Description (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdStyleType * prop ) = 0;
    virtual HRESULT __stdcall get_BuiltIn (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_NextParagraphStyle (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_NextParagraphStyle (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_InUse (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_ParagraphFormat (
        struct _ParagraphFormat * * prop ) = 0;
    virtual HRESULT __stdcall put_ParagraphFormat (
        struct _ParagraphFormat * prop ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct _Font * * prop ) = 0;
    virtual HRESULT __stdcall put_Font (
        struct _Font * prop ) = 0;
    virtual HRESULT __stdcall get_Frame (
        struct Frame * * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageID (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageID (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_AutomaticallyUpdate (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutomaticallyUpdate (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ListTemplate (
        struct ListTemplate * * prop ) = 0;
    virtual HRESULT __stdcall get_ListLevelNumber (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageIDFarEast (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageIDFarEast (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_Hidden (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Hidden (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_LinkToListTemplate (
        struct ListTemplate * ListTemplate,
        VARIANT * ListLevelNumber = &vtMissing ) = 0;
    virtual HRESULT __stdcall get_NoProofing (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_NoProofing (
        long prop ) = 0;
};

struct __declspec(uuid("0002092b-0000-0000-c000-000000000046"))
Frames : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    FramePtr Item (
        long Index );
    FramePtr Add (
        struct Range * Range );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Frame * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct Range * Range,
        struct Frame * * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002092a-0000-0000-c000-000000000046"))
Frame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeightRule,put=PutHeightRule))
    enum WdFrameSizeRule HeightRule;
    __declspec(property(get=GetWidthRule,put=PutWidthRule))
    enum WdFrameSizeRule WidthRule;
    __declspec(property(get=GetHorizontalDistanceFromText,put=PutHorizontalDistanceFromText))
    float HorizontalDistanceFromText;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHorizontalPosition,put=PutHorizontalPosition))
    float HorizontalPosition;
    __declspec(property(get=GetLockAnchor,put=PutLockAnchor))
    VARIANT_BOOL LockAnchor;
    __declspec(property(get=GetRelativeHorizontalPosition,put=PutRelativeHorizontalPosition))
    enum WdRelativeHorizontalPosition RelativeHorizontalPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRelativeVerticalPosition,put=PutRelativeVerticalPosition))
    enum WdRelativeVerticalPosition RelativeVerticalPosition;
    __declspec(property(get=GetVerticalDistanceFromText,put=PutVerticalDistanceFromText))
    float VerticalDistanceFromText;
    __declspec(property(get=GetVerticalPosition,put=PutVerticalPosition))
    float VerticalPosition;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetTextWrap,put=PutTextWrap))
    VARIANT_BOOL TextWrap;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetRange))
    RangePtr Range;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdFrameSizeRule GetHeightRule ( );
    void PutHeightRule (
        enum WdFrameSizeRule prop );
    enum WdFrameSizeRule GetWidthRule ( );
    void PutWidthRule (
        enum WdFrameSizeRule prop );
    float GetHorizontalDistanceFromText ( );
    void PutHorizontalDistanceFromText (
        float prop );
    float GetHeight ( );
    void PutHeight (
        float prop );
    float GetHorizontalPosition ( );
    void PutHorizontalPosition (
        float prop );
    VARIANT_BOOL GetLockAnchor ( );
    void PutLockAnchor (
        VARIANT_BOOL prop );
    enum WdRelativeHorizontalPosition GetRelativeHorizontalPosition ( );
    void PutRelativeHorizontalPosition (
        enum WdRelativeHorizontalPosition prop );
    enum WdRelativeVerticalPosition GetRelativeVerticalPosition ( );
    void PutRelativeVerticalPosition (
        enum WdRelativeVerticalPosition prop );
    float GetVerticalDistanceFromText ( );
    void PutVerticalDistanceFromText (
        float prop );
    float GetVerticalPosition ( );
    void PutVerticalPosition (
        float prop );
    float GetWidth ( );
    void PutWidth (
        float prop );
    VARIANT_BOOL GetTextWrap ( );
    void PutTextWrap (
        VARIANT_BOOL prop );
    ShadingPtr GetShading ( );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    RangePtr GetRange ( );
    HRESULT Delete ( );
    HRESULT Select ( );
    HRESULT Copy ( );
    HRESULT Cut ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_HeightRule (
        enum WdFrameSizeRule * prop ) = 0;
    virtual HRESULT __stdcall put_HeightRule (
        enum WdFrameSizeRule prop ) = 0;
    virtual HRESULT __stdcall get_WidthRule (
        enum WdFrameSizeRule * prop ) = 0;
    virtual HRESULT __stdcall put_WidthRule (
        enum WdFrameSizeRule prop ) = 0;
    virtual HRESULT __stdcall get_HorizontalDistanceFromText (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_HorizontalDistanceFromText (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        float prop ) = 0;
    virtual HRESULT __stdcall get_HorizontalPosition (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_HorizontalPosition (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LockAnchor (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_LockAnchor (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_RelativeHorizontalPosition (
        enum WdRelativeHorizontalPosition * prop ) = 0;
    virtual HRESULT __stdcall put_RelativeHorizontalPosition (
        enum WdRelativeHorizontalPosition prop ) = 0;
    virtual HRESULT __stdcall get_RelativeVerticalPosition (
        enum WdRelativeVerticalPosition * prop ) = 0;
    virtual HRESULT __stdcall put_RelativeVerticalPosition (
        enum WdRelativeVerticalPosition prop ) = 0;
    virtual HRESULT __stdcall get_VerticalDistanceFromText (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_VerticalDistanceFromText (
        float prop ) = 0;
    virtual HRESULT __stdcall get_VerticalPosition (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_VerticalPosition (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        float prop ) = 0;
    virtual HRESULT __stdcall get_TextWrap (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_TextWrap (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Copy ( ) = 0;
    virtual HRESULT __stdcall raw_Cut ( ) = 0;
};

struct __declspec(uuid("00020929-0000-0000-c000-000000000046"))
FormFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShaded,put=PutShaded))
    VARIANT_BOOL Shaded;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    VARIANT_BOOL GetShaded ( );
    void PutShaded (
        VARIANT_BOOL prop );
    IUnknownPtr Get_NewEnum ( );
    FormFieldPtr Item (
        VARIANT * Index );
    FormFieldPtr Add (
        struct Range * Range,
        enum WdFieldType Type );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Shaded (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Shaded (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct FormField * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct Range * Range,
        enum WdFieldType Type,
        struct FormField * * prop ) = 0;
};

struct __declspec(uuid("00020928-0000-0000-c000-000000000046"))
FormField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum WdFieldType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetEntryMacro,put=PutEntryMacro))
    _bstr_t EntryMacro;
    __declspec(property(get=GetExitMacro,put=PutExitMacro))
    _bstr_t ExitMacro;
    __declspec(property(get=GetOwnHelp,put=PutOwnHelp))
    VARIANT_BOOL OwnHelp;
    __declspec(property(get=GetOwnStatus,put=PutOwnStatus))
    VARIANT_BOOL OwnStatus;
    __declspec(property(get=GetHelpText,put=PutHelpText))
    _bstr_t HelpText;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStatusText,put=PutStatusText))
    _bstr_t StatusText;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetResult,put=PutResult))
    _bstr_t Result;
    __declspec(property(get=GetTextInput))
    TextInputPtr TextInput;
    __declspec(property(get=GetCheckBox))
    CheckBoxPtr CheckBox;
    __declspec(property(get=GetDropDown))
    DropDownPtr DropDown;
    __declspec(property(get=GetNext))
    FormFieldPtr Next;
    __declspec(property(get=GetPrevious))
    FormFieldPtr Previous;
    __declspec(property(get=GetCalculateOnExit,put=PutCalculateOnExit))
    VARIANT_BOOL CalculateOnExit;
    __declspec(property(get=GetRange))
    RangePtr Range;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdFieldType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t prop );
    _bstr_t GetEntryMacro ( );
    void PutEntryMacro (
        _bstr_t prop );
    _bstr_t GetExitMacro ( );
    void PutExitMacro (
        _bstr_t prop );
    VARIANT_BOOL GetOwnHelp ( );
    void PutOwnHelp (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetOwnStatus ( );
    void PutOwnStatus (
        VARIANT_BOOL prop );
    _bstr_t GetHelpText ( );
    void PutHelpText (
        _bstr_t prop );
    _bstr_t GetStatusText ( );
    void PutStatusText (
        _bstr_t prop );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL prop );
    _bstr_t GetResult ( );
    void PutResult (
        _bstr_t prop );
    TextInputPtr GetTextInput ( );
    CheckBoxPtr GetCheckBox ( );
    DropDownPtr GetDropDown ( );
    FormFieldPtr GetNext ( );
    FormFieldPtr GetPrevious ( );
    VARIANT_BOOL GetCalculateOnExit ( );
    void PutCalculateOnExit (
        VARIANT_BOOL prop );
    RangePtr GetRange ( );
    HRESULT Select ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdFieldType * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_EntryMacro (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_EntryMacro (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_ExitMacro (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ExitMacro (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_OwnHelp (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_OwnHelp (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_OwnStatus (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_OwnStatus (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HelpText (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_HelpText (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_StatusText (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_StatusText (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Result (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Result (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_TextInput (
        struct TextInput * * prop ) = 0;
    virtual HRESULT __stdcall get_CheckBox (
        struct CheckBox * * prop ) = 0;
    virtual HRESULT __stdcall get_DropDown (
        struct DropDown * * prop ) = 0;
    virtual HRESULT __stdcall get_Next (
        struct FormField * * prop ) = 0;
    virtual HRESULT __stdcall get_Previous (
        struct FormField * * prop ) = 0;
    virtual HRESULT __stdcall get_CalculateOnExit (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CalculateOnExit (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Copy ( ) = 0;
    virtual HRESULT __stdcall raw_Cut ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00020927-0000-0000-c000-000000000046"))
TextInput : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetDefault,put=PutDefault))
    _bstr_t Default;
    __declspec(property(get=GetType))
    enum WdTextFormFieldType Type;
    __declspec(property(get=GetFormat))
    _bstr_t Format;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetValid ( );
    _bstr_t GetDefault ( );
    void PutDefault (
        _bstr_t prop );
    enum WdTextFormFieldType GetType ( );
    _bstr_t GetFormat ( );
    long GetWidth ( );
    void PutWidth (
        long prop );
    HRESULT Clear ( );
    HRESULT EditType (
        enum WdTextFormFieldType Type,
        VARIANT * Default = &vtMissing,
        VARIANT * Format = &vtMissing,
        VARIANT * Enabled = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Valid (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Default (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Default (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdTextFormFieldType * prop ) = 0;
    virtual HRESULT __stdcall get_Format (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        long prop ) = 0;
    virtual HRESULT __stdcall raw_Clear ( ) = 0;
    virtual HRESULT __stdcall raw_EditType (
        enum WdTextFormFieldType Type,
        VARIANT * Default = &vtMissing,
        VARIANT * Format = &vtMissing,
        VARIANT * Enabled = &vtMissing ) = 0;
};

struct __declspec(uuid("00020926-0000-0000-c000-000000000046"))
CheckBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetSize,put=PutSize))
    float Size;
    __declspec(property(get=GetDefault,put=PutDefault))
    VARIANT_BOOL Default;
    __declspec(property(get=GetValue,put=PutValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetValid ( );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL prop );
    float GetSize ( );
    void PutSize (
        float prop );
    VARIANT_BOOL GetDefault ( );
    void PutDefault (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetValue ( );
    void PutValue (
        VARIANT_BOOL prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Valid (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Size (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Size (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Default (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Default (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Value (
        VARIANT_BOOL prop ) = 0;
};

struct __declspec(uuid("00020925-0000-0000-c000-000000000046"))
DropDown : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetDefault,put=PutDefault))
    long Default;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListEntries))
    ListEntriesPtr ListEntries;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetValid ( );
    long GetDefault ( );
    void PutDefault (
        long prop );
    long GetValue ( );
    void PutValue (
        long prop );
    ListEntriesPtr GetListEntries ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Valid (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Default (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Default (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Value (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Value (
        long prop ) = 0;
    virtual HRESULT __stdcall get_ListEntries (
        struct ListEntries * * prop ) = 0;
};

struct __declspec(uuid("00020924-0000-0000-c000-000000000046"))
ListEntries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    ListEntryPtr Item (
        VARIANT * Index );
    ListEntryPtr Add (
        _bstr_t Name,
        VARIANT * Index = &vtMissing );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct ListEntry * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT * Index,
        struct ListEntry * * prop ) = 0;
    virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("00020923-0000-0000-c000-000000000046"))
ListEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t prop );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00020922-0000-0000-c000-000000000046"))
TablesOfFigures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFormat,put=PutFormat))
    enum WdTofFormat Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    enum WdTofFormat GetFormat ( );
    void PutFormat (
        enum WdTofFormat prop );
    TableOfFiguresPtr Item (
        long Index );
    TableOfFiguresPtr AddOld (
        struct Range * Range,
        VARIANT * Caption = &vtMissing,
        VARIANT * IncludeLabel = &vtMissing,
        VARIANT * UseHeadingStyles = &vtMissing,
        VARIANT * UpperHeadingLevel = &vtMissing,
        VARIANT * LowerHeadingLevel = &vtMissing,
        VARIANT * UseFields = &vtMissing,
        VARIANT * TableID = &vtMissing,
        VARIANT * RightAlignPageNumbers = &vtMissing,
        VARIANT * IncludePageNumbers = &vtMissing,
        VARIANT * AddedStyles = &vtMissing );
    FieldPtr MarkEntry (
        struct Range * Range,
        VARIANT * Entry = &vtMissing,
        VARIANT * EntryAutoText = &vtMissing,
        VARIANT * TableID = &vtMissing,
        VARIANT * Level = &vtMissing );
    TableOfFiguresPtr Add (
        struct Range * Range,
        VARIANT * Caption = &vtMissing,
        VARIANT * IncludeLabel = &vtMissing,
        VARIANT * UseHeadingStyles = &vtMissing,
        VARIANT * UpperHeadingLevel = &vtMissing,
        VARIANT * LowerHeadingLevel = &vtMissing,
        VARIANT * UseFields = &vtMissing,
        VARIANT * TableID = &vtMissing,
        VARIANT * RightAlignPageNumbers = &vtMissing,
        VARIANT * IncludePageNumbers = &vtMissing,
        VARIANT * AddedStyles = &vtMissing,
        VARIANT * UseHyperlinks = &vtMissing,
        VARIANT * HidePageNumbersInWeb = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Format (
        enum WdTofFormat * prop ) = 0;
    virtual HRESULT __stdcall put_Format (
        enum WdTofFormat prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct TableOfFigures * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddOld (
        struct Range * Range,
        VARIANT * Caption,
        VARIANT * IncludeLabel,
        VARIANT * UseHeadingStyles,
        VARIANT * UpperHeadingLevel,
        VARIANT * LowerHeadingLevel,
        VARIANT * UseFields,
        VARIANT * TableID,
        VARIANT * RightAlignPageNumbers,
        VARIANT * IncludePageNumbers,
        VARIANT * AddedStyles,
        struct TableOfFigures * * prop ) = 0;
    virtual HRESULT __stdcall raw_MarkEntry (
        struct Range * Range,
        VARIANT * Entry,
        VARIANT * EntryAutoText,
        VARIANT * TableID,
        VARIANT * Level,
        struct Field * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct Range * Range,
        VARIANT * Caption,
        VARIANT * IncludeLabel,
        VARIANT * UseHeadingStyles,
        VARIANT * UpperHeadingLevel,
        VARIANT * LowerHeadingLevel,
        VARIANT * UseFields,
        VARIANT * TableID,
        VARIANT * RightAlignPageNumbers,
        VARIANT * IncludePageNumbers,
        VARIANT * AddedStyles,
        VARIANT * UseHyperlinks,
        VARIANT * HidePageNumbersInWeb,
        struct TableOfFigures * * prop ) = 0;
};

struct __declspec(uuid("00020921-0000-0000-c000-000000000046"))
TableOfFigures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetIncludeLabel,put=PutIncludeLabel))
    VARIANT_BOOL IncludeLabel;
    __declspec(property(get=GetRightAlignPageNumbers,put=PutRightAlignPageNumbers))
    VARIANT_BOOL RightAlignPageNumbers;
    __declspec(property(get=GetUseHeadingStyles,put=PutUseHeadingStyles))
    VARIANT_BOOL UseHeadingStyles;
    __declspec(property(get=GetLowerHeadingLevel,put=PutLowerHeadingLevel))
    long LowerHeadingLevel;
    __declspec(property(get=GetUpperHeadingLevel,put=PutUpperHeadingLevel))
    long UpperHeadingLevel;
    __declspec(property(get=GetIncludePageNumbers,put=PutIncludePageNumbers))
    VARIANT_BOOL IncludePageNumbers;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetUseFields,put=PutUseFields))
    VARIANT_BOOL UseFields;
    __declspec(property(get=GetTableID,put=PutTableID))
    _bstr_t TableID;
    __declspec(property(get=GetHeadingStyles))
    HeadingStylesPtr HeadingStyles;
    __declspec(property(get=GetTabLeader,put=PutTabLeader))
    enum WdTabLeader TabLeader;
    __declspec(property(get=GetUseHyperlinks,put=PutUseHyperlinks))
    VARIANT_BOOL UseHyperlinks;
    __declspec(property(get=GetHidePageNumbersInWeb,put=PutHidePageNumbersInWeb))
    VARIANT_BOOL HidePageNumbersInWeb;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t prop );
    VARIANT_BOOL GetIncludeLabel ( );
    void PutIncludeLabel (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetRightAlignPageNumbers ( );
    void PutRightAlignPageNumbers (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetUseHeadingStyles ( );
    void PutUseHeadingStyles (
        VARIANT_BOOL prop );
    long GetLowerHeadingLevel ( );
    void PutLowerHeadingLevel (
        long prop );
    long GetUpperHeadingLevel ( );
    void PutUpperHeadingLevel (
        long prop );
    VARIANT_BOOL GetIncludePageNumbers ( );
    void PutIncludePageNumbers (
        VARIANT_BOOL prop );
    RangePtr GetRange ( );
    VARIANT_BOOL GetUseFields ( );
    void PutUseFields (
        VARIANT_BOOL prop );
    _bstr_t GetTableID ( );
    void PutTableID (
        _bstr_t prop );
    HeadingStylesPtr GetHeadingStyles ( );
    enum WdTabLeader GetTabLeader ( );
    void PutTabLeader (
        enum WdTabLeader prop );
    HRESULT Delete ( );
    HRESULT UpdatePageNumbers ( );
    HRESULT Update ( );
    VARIANT_BOOL GetUseHyperlinks ( );
    void PutUseHyperlinks (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetHidePageNumbersInWeb ( );
    void PutHidePageNumbersInWeb (
        VARIANT_BOOL prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_IncludeLabel (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IncludeLabel (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_RightAlignPageNumbers (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_RightAlignPageNumbers (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_UseHeadingStyles (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UseHeadingStyles (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_LowerHeadingLevel (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_LowerHeadingLevel (
        long prop ) = 0;
    virtual HRESULT __stdcall get_UpperHeadingLevel (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_UpperHeadingLevel (
        long prop ) = 0;
    virtual HRESULT __stdcall get_IncludePageNumbers (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IncludePageNumbers (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_UseFields (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UseFields (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_TableID (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_TableID (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_HeadingStyles (
        struct HeadingStyles * * prop ) = 0;
    virtual HRESULT __stdcall get_TabLeader (
        enum WdTabLeader * prop ) = 0;
    virtual HRESULT __stdcall put_TabLeader (
        enum WdTabLeader prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_UpdatePageNumbers ( ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
    virtual HRESULT __stdcall get_UseHyperlinks (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UseHyperlinks (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HidePageNumbersInWeb (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_HidePageNumbersInWeb (
        VARIANT_BOOL prop ) = 0;
};

struct __declspec(uuid("00020920-0000-0000-c000-000000000046"))
MailMerge : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMainDocumentType,put=PutMainDocumentType))
    enum WdMailMergeMainDocType MainDocumentType;
    __declspec(property(get=GetState))
    enum WdMailMergeState State;
    __declspec(property(get=GetDestination,put=PutDestination))
    enum WdMailMergeDestination Destination;
    __declspec(property(get=GetDataSource))
    MailMergeDataSourcePtr DataSource;
    __declspec(property(get=GetFields))
    MailMergeFieldsPtr Fields;
    __declspec(property(get=GetViewMailMergeFieldCodes,put=PutViewMailMergeFieldCodes))
    long ViewMailMergeFieldCodes;
    __declspec(property(get=GetSuppressBlankLines,put=PutSuppressBlankLines))
    VARIANT_BOOL SuppressBlankLines;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMailAsAttachment,put=PutMailAsAttachment))
    VARIANT_BOOL MailAsAttachment;
    __declspec(property(get=GetMailAddressFieldName,put=PutMailAddressFieldName))
    _bstr_t MailAddressFieldName;
    __declspec(property(get=GetMailSubject,put=PutMailSubject))
    _bstr_t MailSubject;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdMailMergeMainDocType GetMainDocumentType ( );
    void PutMainDocumentType (
        enum WdMailMergeMainDocType prop );
    enum WdMailMergeState GetState ( );
    enum WdMailMergeDestination GetDestination ( );
    void PutDestination (
        enum WdMailMergeDestination prop );
    MailMergeDataSourcePtr GetDataSource ( );
    MailMergeFieldsPtr GetFields ( );
    long GetViewMailMergeFieldCodes ( );
    void PutViewMailMergeFieldCodes (
        long prop );
    VARIANT_BOOL GetSuppressBlankLines ( );
    void PutSuppressBlankLines (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMailAsAttachment ( );
    void PutMailAsAttachment (
        VARIANT_BOOL prop );
    _bstr_t GetMailAddressFieldName ( );
    void PutMailAddressFieldName (
        _bstr_t prop );
    _bstr_t GetMailSubject ( );
    void PutMailSubject (
        _bstr_t prop );
    HRESULT CreateDataSource (
        VARIANT * Name = &vtMissing,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * HeaderRecord = &vtMissing,
        VARIANT * MSQuery = &vtMissing,
        VARIANT * SQLStatement = &vtMissing,
        VARIANT * SQLStatement1 = &vtMissing,
        VARIANT * Connection = &vtMissing,
        VARIANT * LinkToSource = &vtMissing );
    HRESULT CreateHeaderSource (
        _bstr_t Name,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * HeaderRecord = &vtMissing );
    HRESULT OpenDataSource (
        _bstr_t Name,
        VARIANT * Format = &vtMissing,
        VARIANT * ConfirmConversions = &vtMissing,
        VARIANT * ReadOnly = &vtMissing,
        VARIANT * LinkToSource = &vtMissing,
        VARIANT * AddToRecentFiles = &vtMissing,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * PasswordTemplate = &vtMissing,
        VARIANT * Revert = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * WritePasswordTemplate = &vtMissing,
        VARIANT * Connection = &vtMissing,
        VARIANT * SQLStatement = &vtMissing,
        VARIANT * SQLStatement1 = &vtMissing );
    HRESULT OpenHeaderSource (
        _bstr_t Name,
        VARIANT * Format = &vtMissing,
        VARIANT * ConfirmConversions = &vtMissing,
        VARIANT * ReadOnly = &vtMissing,
        VARIANT * AddToRecentFiles = &vtMissing,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * PasswordTemplate = &vtMissing,
        VARIANT * Revert = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * WritePasswordTemplate = &vtMissing );
    HRESULT Execute (
        VARIANT * Pause = &vtMissing );
    HRESULT Check ( );
    HRESULT EditDataSource ( );
    HRESULT EditHeaderSource ( );
    HRESULT EditMainDocument ( );
    HRESULT UseAddressBook (
        _bstr_t Type );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_MainDocumentType (
        enum WdMailMergeMainDocType * prop ) = 0;
    virtual HRESULT __stdcall put_MainDocumentType (
        enum WdMailMergeMainDocType prop ) = 0;
    virtual HRESULT __stdcall get_State (
        enum WdMailMergeState * prop ) = 0;
    virtual HRESULT __stdcall get_Destination (
        enum WdMailMergeDestination * prop ) = 0;
    virtual HRESULT __stdcall put_Destination (
        enum WdMailMergeDestination prop ) = 0;
    virtual HRESULT __stdcall get_DataSource (
        struct MailMergeDataSource * * prop ) = 0;
    virtual HRESULT __stdcall get_Fields (
        struct MailMergeFields * * prop ) = 0;
    virtual HRESULT __stdcall get_ViewMailMergeFieldCodes (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_ViewMailMergeFieldCodes (
        long prop ) = 0;
    virtual HRESULT __stdcall get_SuppressBlankLines (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SuppressBlankLines (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MailAsAttachment (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MailAsAttachment (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MailAddressFieldName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_MailAddressFieldName (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_MailSubject (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_MailSubject (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall raw_CreateDataSource (
        VARIANT * Name = &vtMissing,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * HeaderRecord = &vtMissing,
        VARIANT * MSQuery = &vtMissing,
        VARIANT * SQLStatement = &vtMissing,
        VARIANT * SQLStatement1 = &vtMissing,
        VARIANT * Connection = &vtMissing,
        VARIANT * LinkToSource = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_CreateHeaderSource (
        BSTR Name,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * HeaderRecord = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_OpenDataSource (
        BSTR Name,
        VARIANT * Format = &vtMissing,
        VARIANT * ConfirmConversions = &vtMissing,
        VARIANT * ReadOnly = &vtMissing,
        VARIANT * LinkToSource = &vtMissing,
        VARIANT * AddToRecentFiles = &vtMissing,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * PasswordTemplate = &vtMissing,
        VARIANT * Revert = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * WritePasswordTemplate = &vtMissing,
        VARIANT * Connection = &vtMissing,
        VARIANT * SQLStatement = &vtMissing,
        VARIANT * SQLStatement1 = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_OpenHeaderSource (
        BSTR Name,
        VARIANT * Format = &vtMissing,
        VARIANT * ConfirmConversions = &vtMissing,
        VARIANT * ReadOnly = &vtMissing,
        VARIANT * AddToRecentFiles = &vtMissing,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * PasswordTemplate = &vtMissing,
        VARIANT * Revert = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * WritePasswordTemplate = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Execute (
        VARIANT * Pause = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Check ( ) = 0;
    virtual HRESULT __stdcall raw_EditDataSource ( ) = 0;
    virtual HRESULT __stdcall raw_EditHeaderSource ( ) = 0;
    virtual HRESULT __stdcall raw_EditMainDocument ( ) = 0;
    virtual HRESULT __stdcall raw_UseAddressBook (
        BSTR Type ) = 0;
};

struct __declspec(uuid("0002091f-0000-0000-c000-000000000046"))
MailMergeFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    MailMergeFieldPtr Item (
        long Index );
    MailMergeFieldPtr Add (
        struct Range * Range,
        _bstr_t Name );
    MailMergeFieldPtr AddAsk (
        struct Range * Range,
        _bstr_t Name,
        VARIANT * Prompt = &vtMissing,
        VARIANT * DefaultAskText = &vtMissing,
        VARIANT * AskOnce = &vtMissing );
    MailMergeFieldPtr AddFillIn (
        struct Range * Range,
        VARIANT * Prompt = &vtMissing,
        VARIANT * DefaultFillInText = &vtMissing,
        VARIANT * AskOnce = &vtMissing );
    MailMergeFieldPtr AddIf (
        struct Range * Range,
        _bstr_t MergeField,
        enum WdMailMergeComparison Comparison,
        VARIANT * CompareTo = &vtMissing,
        VARIANT * TrueAutoText = &vtMissing,
        VARIANT * TrueText = &vtMissing,
        VARIANT * FalseAutoText = &vtMissing,
        VARIANT * FalseText = &vtMissing );
    MailMergeFieldPtr AddMergeRec (
        struct Range * Range );
    MailMergeFieldPtr AddMergeSeq (
        struct Range * Range );
    MailMergeFieldPtr AddNext (
        struct Range * Range );
    MailMergeFieldPtr AddNextIf (
        struct Range * Range,
        _bstr_t MergeField,
        enum WdMailMergeComparison Comparison,
        VARIANT * CompareTo = &vtMissing );
    MailMergeFieldPtr AddSet (
        struct Range * Range,
        _bstr_t Name,
        VARIANT * ValueText = &vtMissing,
        VARIANT * ValueAutoText = &vtMissing );
    MailMergeFieldPtr AddSkipIf (
        struct Range * Range,
        _bstr_t MergeField,
        enum WdMailMergeComparison Comparison,
        VARIANT * CompareTo = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct MailMergeField * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct Range * Range,
        BSTR Name,
        struct MailMergeField * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddAsk (
        struct Range * Range,
        BSTR Name,
        VARIANT * Prompt,
        VARIANT * DefaultAskText,
        VARIANT * AskOnce,
        struct MailMergeField * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddFillIn (
        struct Range * Range,
        VARIANT * Prompt,
        VARIANT * DefaultFillInText,
        VARIANT * AskOnce,
        struct MailMergeField * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddIf (
        struct Range * Range,
        BSTR MergeField,
        enum WdMailMergeComparison Comparison,
        VARIANT * CompareTo,
        VARIANT * TrueAutoText,
        VARIANT * TrueText,
        VARIANT * FalseAutoText,
        VARIANT * FalseText,
        struct MailMergeField * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddMergeRec (
        struct Range * Range,
        struct MailMergeField * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddMergeSeq (
        struct Range * Range,
        struct MailMergeField * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddNext (
        struct Range * Range,
        struct MailMergeField * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddNextIf (
        struct Range * Range,
        BSTR MergeField,
        enum WdMailMergeComparison Comparison,
        VARIANT * CompareTo,
        struct MailMergeField * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddSet (
        struct Range * Range,
        BSTR Name,
        VARIANT * ValueText,
        VARIANT * ValueAutoText,
        struct MailMergeField * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddSkipIf (
        struct Range * Range,
        BSTR MergeField,
        enum WdMailMergeComparison Comparison,
        VARIANT * CompareTo,
        struct MailMergeField * * prop ) = 0;
};

struct __declspec(uuid("0002091e-0000-0000-c000-000000000046"))
MailMergeField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum WdFieldType Type;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCode,put=PutCode))
    RangePtr Code;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNext))
    MailMergeFieldPtr Next;
    __declspec(property(get=GetPrevious))
    MailMergeFieldPtr Previous;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdFieldType GetType ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL prop );
    RangePtr GetCode ( );
    void PutCode (
        struct Range * prop );
    MailMergeFieldPtr GetNext ( );
    MailMergeFieldPtr GetPrevious ( );
    HRESULT Select ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdFieldType * prop ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Code (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall put_Code (
        struct Range * prop ) = 0;
    virtual HRESULT __stdcall get_Next (
        struct MailMergeField * * prop ) = 0;
    virtual HRESULT __stdcall get_Previous (
        struct MailMergeField * * prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Copy ( ) = 0;
    virtual HRESULT __stdcall raw_Cut ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002091d-0000-0000-c000-000000000046"))
MailMergeDataSource : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetHeaderSourceName))
    _bstr_t HeaderSourceName;
    __declspec(property(get=GetType))
    enum WdMailMergeDataSource Type;
    __declspec(property(get=GetHeaderSourceType))
    enum WdMailMergeDataSource HeaderSourceType;
    __declspec(property(get=GetConnectString))
    _bstr_t ConnectString;
    __declspec(property(get=GetQueryString,put=PutQueryString))
    _bstr_t QueryString;
    __declspec(property(get=GetActiveRecord,put=PutActiveRecord))
    enum WdMailMergeActiveRecord ActiveRecord;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFirstRecord,put=PutFirstRecord))
    long FirstRecord;
    __declspec(property(get=GetLastRecord,put=PutLastRecord))
    long LastRecord;
    __declspec(property(get=GetFieldNames))
    MailMergeFieldNamesPtr FieldNames;
    __declspec(property(get=GetDataFields))
    MailMergeDataFieldsPtr DataFields;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetHeaderSourceName ( );
    enum WdMailMergeDataSource GetType ( );
    enum WdMailMergeDataSource GetHeaderSourceType ( );
    _bstr_t GetConnectString ( );
    _bstr_t GetQueryString ( );
    void PutQueryString (
        _bstr_t prop );
    enum WdMailMergeActiveRecord GetActiveRecord ( );
    void PutActiveRecord (
        enum WdMailMergeActiveRecord prop );
    long GetFirstRecord ( );
    void PutFirstRecord (
        long prop );
    long GetLastRecord ( );
    void PutLastRecord (
        long prop );
    MailMergeFieldNamesPtr GetFieldNames ( );
    MailMergeDataFieldsPtr GetDataFields ( );
    VARIANT_BOOL FindRecord (
        _bstr_t FindText,
        _bstr_t Field );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_HeaderSourceName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdMailMergeDataSource * prop ) = 0;
    virtual HRESULT __stdcall get_HeaderSourceType (
        enum WdMailMergeDataSource * prop ) = 0;
    virtual HRESULT __stdcall get_ConnectString (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_QueryString (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_QueryString (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_ActiveRecord (
        enum WdMailMergeActiveRecord * prop ) = 0;
    virtual HRESULT __stdcall put_ActiveRecord (
        enum WdMailMergeActiveRecord prop ) = 0;
    virtual HRESULT __stdcall get_FirstRecord (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_FirstRecord (
        long prop ) = 0;
    virtual HRESULT __stdcall get_LastRecord (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_LastRecord (
        long prop ) = 0;
    virtual HRESULT __stdcall get_FieldNames (
        struct MailMergeFieldNames * * prop ) = 0;
    virtual HRESULT __stdcall get_DataFields (
        struct MailMergeDataFields * * prop ) = 0;
    virtual HRESULT __stdcall raw_FindRecord (
        BSTR FindText,
        BSTR Field,
        VARIANT_BOOL * prop ) = 0;
};

struct __declspec(uuid("0002091c-0000-0000-c000-000000000046"))
MailMergeFieldNames : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    MailMergeFieldNamePtr Item (
        VARIANT * Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct MailMergeFieldName * * prop ) = 0;
};

struct __declspec(uuid("0002091b-0000-0000-c000-000000000046"))
MailMergeFieldName : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    long GetIndex ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
};

struct __declspec(uuid("0002091a-0000-0000-c000-000000000046"))
MailMergeDataFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    MailMergeDataFieldPtr Item (
        VARIANT * Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct MailMergeDataField * * prop ) = 0;
};

struct __declspec(uuid("00020919-0000-0000-c000-000000000046"))
MailMergeDataField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetValue ( );
    _bstr_t GetName ( );
    long GetIndex ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Value (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
};

struct __declspec(uuid("00020918-0000-0000-c000-000000000046"))
Envelope : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDefaultSize,put=PutDefaultSize))
    _bstr_t DefaultSize;
    __declspec(property(get=GetAddress))
    RangePtr Address;
    __declspec(property(get=GetReturnAddress))
    RangePtr ReturnAddress;
    __declspec(property(get=GetDefaultPrintBarCode,put=PutDefaultPrintBarCode))
    VARIANT_BOOL DefaultPrintBarCode;
    __declspec(property(get=GetDefaultPrintFIMA,put=PutDefaultPrintFIMA))
    VARIANT_BOOL DefaultPrintFIMA;
    __declspec(property(get=GetDefaultHeight,put=PutDefaultHeight))
    float DefaultHeight;
    __declspec(property(get=GetDefaultWidth,put=PutDefaultWidth))
    float DefaultWidth;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDefaultOmitReturnAddress,put=PutDefaultOmitReturnAddress))
    VARIANT_BOOL DefaultOmitReturnAddress;
    __declspec(property(get=GetFeedSource,put=PutFeedSource))
    enum WdPaperTray FeedSource;
    __declspec(property(get=GetAddressFromLeft,put=PutAddressFromLeft))
    float AddressFromLeft;
    __declspec(property(get=GetAddressFromTop,put=PutAddressFromTop))
    float AddressFromTop;
    __declspec(property(get=GetReturnAddressFromLeft,put=PutReturnAddressFromLeft))
    float ReturnAddressFromLeft;
    __declspec(property(get=GetReturnAddressFromTop,put=PutReturnAddressFromTop))
    float ReturnAddressFromTop;
    __declspec(property(get=GetAddressStyle))
    StylePtr AddressStyle;
    __declspec(property(get=GetReturnAddressStyle))
    StylePtr ReturnAddressStyle;
    __declspec(property(get=GetDefaultOrientation,put=PutDefaultOrientation))
    enum WdEnvelopeOrientation DefaultOrientation;
    __declspec(property(get=GetDefaultFaceUp,put=PutDefaultFaceUp))
    VARIANT_BOOL DefaultFaceUp;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetAddress ( );
    RangePtr GetReturnAddress ( );
    VARIANT_BOOL GetDefaultPrintBarCode ( );
    void PutDefaultPrintBarCode (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetDefaultPrintFIMA ( );
    void PutDefaultPrintFIMA (
        VARIANT_BOOL prop );
    float GetDefaultHeight ( );
    void PutDefaultHeight (
        float prop );
    float GetDefaultWidth ( );
    void PutDefaultWidth (
        float prop );
    _bstr_t GetDefaultSize ( );
    void PutDefaultSize (
        _bstr_t prop );
    VARIANT_BOOL GetDefaultOmitReturnAddress ( );
    void PutDefaultOmitReturnAddress (
        VARIANT_BOOL prop );
    enum WdPaperTray GetFeedSource ( );
    void PutFeedSource (
        enum WdPaperTray prop );
    float GetAddressFromLeft ( );
    void PutAddressFromLeft (
        float prop );
    float GetAddressFromTop ( );
    void PutAddressFromTop (
        float prop );
    float GetReturnAddressFromLeft ( );
    void PutReturnAddressFromLeft (
        float prop );
    float GetReturnAddressFromTop ( );
    void PutReturnAddressFromTop (
        float prop );
    StylePtr GetAddressStyle ( );
    StylePtr GetReturnAddressStyle ( );
    enum WdEnvelopeOrientation GetDefaultOrientation ( );
    void PutDefaultOrientation (
        enum WdEnvelopeOrientation prop );
    VARIANT_BOOL GetDefaultFaceUp ( );
    void PutDefaultFaceUp (
        VARIANT_BOOL prop );
    HRESULT Insert (
        VARIANT * ExtractAddress = &vtMissing,
        VARIANT * Address = &vtMissing,
        VARIANT * AutoText = &vtMissing,
        VARIANT * OmitReturnAddress = &vtMissing,
        VARIANT * ReturnAddress = &vtMissing,
        VARIANT * ReturnAutoText = &vtMissing,
        VARIANT * PrintBarCode = &vtMissing,
        VARIANT * PrintFIMA = &vtMissing,
        VARIANT * Size = &vtMissing,
        VARIANT * Height = &vtMissing,
        VARIANT * Width = &vtMissing,
        VARIANT * FeedSource = &vtMissing,
        VARIANT * AddressFromLeft = &vtMissing,
        VARIANT * AddressFromTop = &vtMissing,
        VARIANT * ReturnAddressFromLeft = &vtMissing,
        VARIANT * ReturnAddressFromTop = &vtMissing,
        VARIANT * DefaultFaceUp = &vtMissing,
        VARIANT * DefaultOrientation = &vtMissing );
    HRESULT PrintOut (
        VARIANT * ExtractAddress = &vtMissing,
        VARIANT * Address = &vtMissing,
        VARIANT * AutoText = &vtMissing,
        VARIANT * OmitReturnAddress = &vtMissing,
        VARIANT * ReturnAddress = &vtMissing,
        VARIANT * ReturnAutoText = &vtMissing,
        VARIANT * PrintBarCode = &vtMissing,
        VARIANT * PrintFIMA = &vtMissing,
        VARIANT * Size = &vtMissing,
        VARIANT * Height = &vtMissing,
        VARIANT * Width = &vtMissing,
        VARIANT * FeedSource = &vtMissing,
        VARIANT * AddressFromLeft = &vtMissing,
        VARIANT * AddressFromTop = &vtMissing,
        VARIANT * ReturnAddressFromLeft = &vtMissing,
        VARIANT * ReturnAddressFromTop = &vtMissing,
        VARIANT * DefaultFaceUp = &vtMissing,
        VARIANT * DefaultOrientation = &vtMissing );
    HRESULT UpdateDocument ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Address (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_ReturnAddress (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_DefaultPrintBarCode (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultPrintBarCode (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DefaultPrintFIMA (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultPrintFIMA (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DefaultHeight (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultHeight (
        float prop ) = 0;
    virtual HRESULT __stdcall get_DefaultWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultWidth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_DefaultSize (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultSize (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_DefaultOmitReturnAddress (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultOmitReturnAddress (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_FeedSource (
        enum WdPaperTray * prop ) = 0;
    virtual HRESULT __stdcall put_FeedSource (
        enum WdPaperTray prop ) = 0;
    virtual HRESULT __stdcall get_AddressFromLeft (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_AddressFromLeft (
        float prop ) = 0;
    virtual HRESULT __stdcall get_AddressFromTop (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_AddressFromTop (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ReturnAddressFromLeft (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_ReturnAddressFromLeft (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ReturnAddressFromTop (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_ReturnAddressFromTop (
        float prop ) = 0;
    virtual HRESULT __stdcall get_AddressStyle (
        struct Style * * prop ) = 0;
    virtual HRESULT __stdcall get_ReturnAddressStyle (
        struct Style * * prop ) = 0;
    virtual HRESULT __stdcall get_DefaultOrientation (
        enum WdEnvelopeOrientation * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultOrientation (
        enum WdEnvelopeOrientation prop ) = 0;
    virtual HRESULT __stdcall get_DefaultFaceUp (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultFaceUp (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_Insert (
        VARIANT * ExtractAddress = &vtMissing,
        VARIANT * Address = &vtMissing,
        VARIANT * AutoText = &vtMissing,
        VARIANT * OmitReturnAddress = &vtMissing,
        VARIANT * ReturnAddress = &vtMissing,
        VARIANT * ReturnAutoText = &vtMissing,
        VARIANT * PrintBarCode = &vtMissing,
        VARIANT * PrintFIMA = &vtMissing,
        VARIANT * Size = &vtMissing,
        VARIANT * Height = &vtMissing,
        VARIANT * Width = &vtMissing,
        VARIANT * FeedSource = &vtMissing,
        VARIANT * AddressFromLeft = &vtMissing,
        VARIANT * AddressFromTop = &vtMissing,
        VARIANT * ReturnAddressFromLeft = &vtMissing,
        VARIANT * ReturnAddressFromTop = &vtMissing,
        VARIANT * DefaultFaceUp = &vtMissing,
        VARIANT * DefaultOrientation = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT * ExtractAddress = &vtMissing,
        VARIANT * Address = &vtMissing,
        VARIANT * AutoText = &vtMissing,
        VARIANT * OmitReturnAddress = &vtMissing,
        VARIANT * ReturnAddress = &vtMissing,
        VARIANT * ReturnAutoText = &vtMissing,
        VARIANT * PrintBarCode = &vtMissing,
        VARIANT * PrintFIMA = &vtMissing,
        VARIANT * Size = &vtMissing,
        VARIANT * Height = &vtMissing,
        VARIANT * Width = &vtMissing,
        VARIANT * FeedSource = &vtMissing,
        VARIANT * AddressFromLeft = &vtMissing,
        VARIANT * AddressFromTop = &vtMissing,
        VARIANT * ReturnAddressFromLeft = &vtMissing,
        VARIANT * ReturnAddressFromTop = &vtMissing,
        VARIANT * DefaultFaceUp = &vtMissing,
        VARIANT * DefaultOrientation = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_UpdateDocument ( ) = 0;
};

struct __declspec(uuid("00020917-0000-0000-c000-000000000046"))
MailingLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDefaultPrintBarCode,put=PutDefaultPrintBarCode))
    VARIANT_BOOL DefaultPrintBarCode;
    __declspec(property(get=GetDefaultLaserTray,put=PutDefaultLaserTray))
    enum WdPaperTray DefaultLaserTray;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCustomLabels))
    CustomLabelsPtr CustomLabels;
    __declspec(property(get=GetDefaultLabelName,put=PutDefaultLabelName))
    _bstr_t DefaultLabelName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetDefaultPrintBarCode ( );
    void PutDefaultPrintBarCode (
        VARIANT_BOOL prop );
    enum WdPaperTray GetDefaultLaserTray ( );
    void PutDefaultLaserTray (
        enum WdPaperTray prop );
    CustomLabelsPtr GetCustomLabels ( );
    _bstr_t GetDefaultLabelName ( );
    void PutDefaultLabelName (
        _bstr_t prop );
    _DocumentPtr CreateNewDocument (
        VARIANT * Name = &vtMissing,
        VARIANT * Address = &vtMissing,
        VARIANT * AutoText = &vtMissing,
        VARIANT * ExtractAddress = &vtMissing,
        VARIANT * LaserTray = &vtMissing );
    HRESULT PrintOut (
        VARIANT * Name = &vtMissing,
        VARIANT * Address = &vtMissing,
        VARIANT * ExtractAddress = &vtMissing,
        VARIANT * LaserTray = &vtMissing,
        VARIANT * SingleLabel = &vtMissing,
        VARIANT * Row = &vtMissing,
        VARIANT * Column = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_DefaultPrintBarCode (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultPrintBarCode (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DefaultLaserTray (
        enum WdPaperTray * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultLaserTray (
        enum WdPaperTray prop ) = 0;
    virtual HRESULT __stdcall get_CustomLabels (
        struct CustomLabels * * prop ) = 0;
    virtual HRESULT __stdcall get_DefaultLabelName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultLabelName (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall raw_CreateNewDocument (
        VARIANT * Name,
        VARIANT * Address,
        VARIANT * AutoText,
        VARIANT * ExtractAddress,
        VARIANT * LaserTray,
        struct _Document * * prop ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT * Name = &vtMissing,
        VARIANT * Address = &vtMissing,
        VARIANT * ExtractAddress = &vtMissing,
        VARIANT * LaserTray = &vtMissing,
        VARIANT * SingleLabel = &vtMissing,
        VARIANT * Row = &vtMissing,
        VARIANT * Column = &vtMissing ) = 0;
};

struct __declspec(uuid("00020916-0000-0000-c000-000000000046"))
CustomLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    CustomLabelPtr Item (
        VARIANT * Index );
    CustomLabelPtr Add (
        _bstr_t Name,
        VARIANT * DotMatrix = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct CustomLabel * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT * DotMatrix,
        struct CustomLabel * * prop ) = 0;
};

struct __declspec(uuid("00020915-0000-0000-c000-000000000046"))
CustomLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    float TopMargin;
    __declspec(property(get=GetSideMargin,put=PutSideMargin))
    float SideMargin;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetVerticalPitch,put=PutVerticalPitch))
    float VerticalPitch;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHorizontalPitch,put=PutHorizontalPitch))
    float HorizontalPitch;
    __declspec(property(get=GetNumberAcross,put=PutNumberAcross))
    long NumberAcross;
    __declspec(property(get=GetNumberDown,put=PutNumberDown))
    long NumberDown;
    __declspec(property(get=GetDotMatrix))
    VARIANT_BOOL DotMatrix;
    __declspec(property(get=GetPageSize,put=PutPageSize))
    enum WdCustomLabelPageSize PageSize;
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t prop );
    float GetTopMargin ( );
    void PutTopMargin (
        float prop );
    float GetSideMargin ( );
    void PutSideMargin (
        float prop );
    float GetHeight ( );
    void PutHeight (
        float prop );
    float GetWidth ( );
    void PutWidth (
        float prop );
    float GetVerticalPitch ( );
    void PutVerticalPitch (
        float prop );
    float GetHorizontalPitch ( );
    void PutHorizontalPitch (
        float prop );
    long GetNumberAcross ( );
    void PutNumberAcross (
        long prop );
    long GetNumberDown ( );
    void PutNumberDown (
        long prop );
    VARIANT_BOOL GetDotMatrix ( );
    enum WdCustomLabelPageSize GetPageSize ( );
    void PutPageSize (
        enum WdCustomLabelPageSize prop );
    VARIANT_BOOL GetValid ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_TopMargin (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_TopMargin (
        float prop ) = 0;
    virtual HRESULT __stdcall get_SideMargin (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_SideMargin (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        float prop ) = 0;
    virtual HRESULT __stdcall get_VerticalPitch (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_VerticalPitch (
        float prop ) = 0;
    virtual HRESULT __stdcall get_HorizontalPitch (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_HorizontalPitch (
        float prop ) = 0;
    virtual HRESULT __stdcall get_NumberAcross (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_NumberAcross (
        long prop ) = 0;
    virtual HRESULT __stdcall get_NumberDown (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_NumberDown (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DotMatrix (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_PageSize (
        enum WdCustomLabelPageSize * prop ) = 0;
    virtual HRESULT __stdcall put_PageSize (
        enum WdCustomLabelPageSize prop ) = 0;
    virtual HRESULT __stdcall get_Valid (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00020914-0000-0000-c000-000000000046"))
TablesOfContents : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFormat,put=PutFormat))
    enum WdTocFormat Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    enum WdTocFormat GetFormat ( );
    void PutFormat (
        enum WdTocFormat prop );
    TableOfContentsPtr Item (
        long Index );
    TableOfContentsPtr AddOld (
        struct Range * Range,
        VARIANT * UseHeadingStyles = &vtMissing,
        VARIANT * UpperHeadingLevel = &vtMissing,
        VARIANT * LowerHeadingLevel = &vtMissing,
        VARIANT * UseFields = &vtMissing,
        VARIANT * TableID = &vtMissing,
        VARIANT * RightAlignPageNumbers = &vtMissing,
        VARIANT * IncludePageNumbers = &vtMissing,
        VARIANT * AddedStyles = &vtMissing );
    FieldPtr MarkEntry (
        struct Range * Range,
        VARIANT * Entry = &vtMissing,
        VARIANT * EntryAutoText = &vtMissing,
        VARIANT * TableID = &vtMissing,
        VARIANT * Level = &vtMissing );
    TableOfContentsPtr Add (
        struct Range * Range,
        VARIANT * UseHeadingStyles = &vtMissing,
        VARIANT * UpperHeadingLevel = &vtMissing,
        VARIANT * LowerHeadingLevel = &vtMissing,
        VARIANT * UseFields = &vtMissing,
        VARIANT * TableID = &vtMissing,
        VARIANT * RightAlignPageNumbers = &vtMissing,
        VARIANT * IncludePageNumbers = &vtMissing,
        VARIANT * AddedStyles = &vtMissing,
        VARIANT * UseHyperlinks = &vtMissing,
        VARIANT * HidePageNumbersInWeb = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Format (
        enum WdTocFormat * prop ) = 0;
    virtual HRESULT __stdcall put_Format (
        enum WdTocFormat prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct TableOfContents * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddOld (
        struct Range * Range,
        VARIANT * UseHeadingStyles,
        VARIANT * UpperHeadingLevel,
        VARIANT * LowerHeadingLevel,
        VARIANT * UseFields,
        VARIANT * TableID,
        VARIANT * RightAlignPageNumbers,
        VARIANT * IncludePageNumbers,
        VARIANT * AddedStyles,
        struct TableOfContents * * prop ) = 0;
    virtual HRESULT __stdcall raw_MarkEntry (
        struct Range * Range,
        VARIANT * Entry,
        VARIANT * EntryAutoText,
        VARIANT * TableID,
        VARIANT * Level,
        struct Field * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct Range * Range,
        VARIANT * UseHeadingStyles,
        VARIANT * UpperHeadingLevel,
        VARIANT * LowerHeadingLevel,
        VARIANT * UseFields,
        VARIANT * TableID,
        VARIANT * RightAlignPageNumbers,
        VARIANT * IncludePageNumbers,
        VARIANT * AddedStyles,
        VARIANT * UseHyperlinks,
        VARIANT * HidePageNumbersInWeb,
        struct TableOfContents * * prop ) = 0;
};

struct __declspec(uuid("00020913-0000-0000-c000-000000000046"))
TableOfContents : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseHeadingStyles,put=PutUseHeadingStyles))
    VARIANT_BOOL UseHeadingStyles;
    __declspec(property(get=GetUseFields,put=PutUseFields))
    VARIANT_BOOL UseFields;
    __declspec(property(get=GetUpperHeadingLevel,put=PutUpperHeadingLevel))
    long UpperHeadingLevel;
    __declspec(property(get=GetLowerHeadingLevel,put=PutLowerHeadingLevel))
    long LowerHeadingLevel;
    __declspec(property(get=GetTableID,put=PutTableID))
    _bstr_t TableID;
    __declspec(property(get=GetHeadingStyles))
    HeadingStylesPtr HeadingStyles;
    __declspec(property(get=GetRightAlignPageNumbers,put=PutRightAlignPageNumbers))
    VARIANT_BOOL RightAlignPageNumbers;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIncludePageNumbers,put=PutIncludePageNumbers))
    VARIANT_BOOL IncludePageNumbers;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetTabLeader,put=PutTabLeader))
    enum WdTabLeader TabLeader;
    __declspec(property(get=GetUseHyperlinks,put=PutUseHyperlinks))
    VARIANT_BOOL UseHyperlinks;
    __declspec(property(get=GetHidePageNumbersInWeb,put=PutHidePageNumbersInWeb))
    VARIANT_BOOL HidePageNumbersInWeb;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetUseHeadingStyles ( );
    void PutUseHeadingStyles (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetUseFields ( );
    void PutUseFields (
        VARIANT_BOOL prop );
    long GetUpperHeadingLevel ( );
    void PutUpperHeadingLevel (
        long prop );
    long GetLowerHeadingLevel ( );
    void PutLowerHeadingLevel (
        long prop );
    _bstr_t GetTableID ( );
    void PutTableID (
        _bstr_t prop );
    HeadingStylesPtr GetHeadingStyles ( );
    VARIANT_BOOL GetRightAlignPageNumbers ( );
    void PutRightAlignPageNumbers (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetIncludePageNumbers ( );
    void PutIncludePageNumbers (
        VARIANT_BOOL prop );
    RangePtr GetRange ( );
    enum WdTabLeader GetTabLeader ( );
    void PutTabLeader (
        enum WdTabLeader prop );
    HRESULT Delete ( );
    HRESULT UpdatePageNumbers ( );
    HRESULT Update ( );
    VARIANT_BOOL GetUseHyperlinks ( );
    void PutUseHyperlinks (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetHidePageNumbersInWeb ( );
    void PutHidePageNumbersInWeb (
        VARIANT_BOOL prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_UseHeadingStyles (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UseHeadingStyles (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_UseFields (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UseFields (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_UpperHeadingLevel (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_UpperHeadingLevel (
        long prop ) = 0;
    virtual HRESULT __stdcall get_LowerHeadingLevel (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_LowerHeadingLevel (
        long prop ) = 0;
    virtual HRESULT __stdcall get_TableID (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_TableID (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_HeadingStyles (
        struct HeadingStyles * * prop ) = 0;
    virtual HRESULT __stdcall get_RightAlignPageNumbers (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_RightAlignPageNumbers (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_IncludePageNumbers (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IncludePageNumbers (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_TabLeader (
        enum WdTabLeader * prop ) = 0;
    virtual HRESULT __stdcall put_TabLeader (
        enum WdTabLeader prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_UpdatePageNumbers ( ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
    virtual HRESULT __stdcall get_UseHyperlinks (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UseHyperlinks (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HidePageNumbersInWeb (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_HidePageNumbersInWeb (
        VARIANT_BOOL prop ) = 0;
};

struct __declspec(uuid("00020912-0000-0000-c000-000000000046"))
TablesOfAuthorities : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFormat,put=PutFormat))
    enum WdToaFormat Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    enum WdToaFormat GetFormat ( );
    void PutFormat (
        enum WdToaFormat prop );
    TableOfAuthoritiesPtr Item (
        long Index );
    TableOfAuthoritiesPtr Add (
        struct Range * Range,
        VARIANT * Category = &vtMissing,
        VARIANT * Bookmark = &vtMissing,
        VARIANT * Passim = &vtMissing,
        VARIANT * KeepEntryFormatting = &vtMissing,
        VARIANT * Separator = &vtMissing,
        VARIANT * IncludeSequenceName = &vtMissing,
        VARIANT * EntrySeparator = &vtMissing,
        VARIANT * PageRangeSeparator = &vtMissing,
        VARIANT * IncludeCategoryHeader = &vtMissing,
        VARIANT * PageNumberSeparator = &vtMissing );
    HRESULT NextCitation (
        _bstr_t ShortCitation );
    FieldPtr MarkCitation (
        struct Range * Range,
        _bstr_t ShortCitation,
        VARIANT * LongCitation = &vtMissing,
        VARIANT * LongCitationAutoText = &vtMissing,
        VARIANT * Category = &vtMissing );
    HRESULT MarkAllCitations (
        _bstr_t ShortCitation,
        VARIANT * LongCitation = &vtMissing,
        VARIANT * LongCitationAutoText = &vtMissing,
        VARIANT * Category = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Format (
        enum WdToaFormat * prop ) = 0;
    virtual HRESULT __stdcall put_Format (
        enum WdToaFormat prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct TableOfAuthorities * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct Range * Range,
        VARIANT * Category,
        VARIANT * Bookmark,
        VARIANT * Passim,
        VARIANT * KeepEntryFormatting,
        VARIANT * Separator,
        VARIANT * IncludeSequenceName,
        VARIANT * EntrySeparator,
        VARIANT * PageRangeSeparator,
        VARIANT * IncludeCategoryHeader,
        VARIANT * PageNumberSeparator,
        struct TableOfAuthorities * * prop ) = 0;
    virtual HRESULT __stdcall raw_NextCitation (
        BSTR ShortCitation ) = 0;
    virtual HRESULT __stdcall raw_MarkCitation (
        struct Range * Range,
        BSTR ShortCitation,
        VARIANT * LongCitation,
        VARIANT * LongCitationAutoText,
        VARIANT * Category,
        struct Field * * prop ) = 0;
    virtual HRESULT __stdcall raw_MarkAllCitations (
        BSTR ShortCitation,
        VARIANT * LongCitation = &vtMissing,
        VARIANT * LongCitationAutoText = &vtMissing,
        VARIANT * Category = &vtMissing ) = 0;
};

struct __declspec(uuid("00020911-0000-0000-c000-000000000046"))
TableOfAuthorities : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPassim,put=PutPassim))
    VARIANT_BOOL Passim;
    __declspec(property(get=GetKeepEntryFormatting,put=PutKeepEntryFormatting))
    VARIANT_BOOL KeepEntryFormatting;
    __declspec(property(get=GetCategory,put=PutCategory))
    long Category;
    __declspec(property(get=GetBookmark,put=PutBookmark))
    _bstr_t Bookmark;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _bstr_t Separator;
    __declspec(property(get=GetIncludeSequenceName,put=PutIncludeSequenceName))
    _bstr_t IncludeSequenceName;
    __declspec(property(get=GetEntrySeparator,put=PutEntrySeparator))
    _bstr_t EntrySeparator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPageRangeSeparator,put=PutPageRangeSeparator))
    _bstr_t PageRangeSeparator;
    __declspec(property(get=GetIncludeCategoryHeader,put=PutIncludeCategoryHeader))
    VARIANT_BOOL IncludeCategoryHeader;
    __declspec(property(get=GetPageNumberSeparator,put=PutPageNumberSeparator))
    _bstr_t PageNumberSeparator;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetTabLeader,put=PutTabLeader))
    enum WdTabLeader TabLeader;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetPassim ( );
    void PutPassim (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetKeepEntryFormatting ( );
    void PutKeepEntryFormatting (
        VARIANT_BOOL prop );
    long GetCategory ( );
    void PutCategory (
        long prop );
    _bstr_t GetBookmark ( );
    void PutBookmark (
        _bstr_t prop );
    _bstr_t GetSeparator ( );
    void PutSeparator (
        _bstr_t prop );
    _bstr_t GetIncludeSequenceName ( );
    void PutIncludeSequenceName (
        _bstr_t prop );
    _bstr_t GetEntrySeparator ( );
    void PutEntrySeparator (
        _bstr_t prop );
    _bstr_t GetPageRangeSeparator ( );
    void PutPageRangeSeparator (
        _bstr_t prop );
    VARIANT_BOOL GetIncludeCategoryHeader ( );
    void PutIncludeCategoryHeader (
        VARIANT_BOOL prop );
    _bstr_t GetPageNumberSeparator ( );
    void PutPageNumberSeparator (
        _bstr_t prop );
    RangePtr GetRange ( );
    enum WdTabLeader GetTabLeader ( );
    void PutTabLeader (
        enum WdTabLeader prop );
    HRESULT Delete ( );
    HRESULT Update ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Passim (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Passim (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_KeepEntryFormatting (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_KeepEntryFormatting (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Category (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Category (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Bookmark (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Bookmark (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Separator (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Separator (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_IncludeSequenceName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_IncludeSequenceName (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_EntrySeparator (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_EntrySeparator (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_PageRangeSeparator (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_PageRangeSeparator (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_IncludeCategoryHeader (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IncludeCategoryHeader (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PageNumberSeparator (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_PageNumberSeparator (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_TabLeader (
        enum WdTabLeader * prop ) = 0;
    virtual HRESULT __stdcall put_TabLeader (
        enum WdTabLeader prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
};

struct __declspec(uuid("00020910-0000-0000-c000-000000000046"))
Dialogs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    DialogPtr Item (
        enum WdWordDialog Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        enum WdWordDialog Index,
        struct Dialog * * prop ) = 0;
};

struct __declspec(uuid("000209b8-0000-0000-c000-000000000046"))
Dialog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum WdWordDialog Type;
    __declspec(property(get=GetDefaultTab,put=PutDefaultTab))
    enum WdWordDialogTab DefaultTab;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCommandName))
    _bstr_t CommandName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdWordDialogTab GetDefaultTab ( );
    void PutDefaultTab (
        enum WdWordDialogTab prop );
    enum WdWordDialog GetType ( );
    long Show (
        VARIANT * TimeOut = &vtMissing );
    long Display (
        VARIANT * TimeOut = &vtMissing );
    HRESULT Execute ( );
    HRESULT Update ( );
    _bstr_t GetCommandName ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_DefaultTab (
        enum WdWordDialogTab * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultTab (
        enum WdWordDialogTab prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdWordDialog * prop ) = 0;
    virtual HRESULT __stdcall raw_Show (
        VARIANT * TimeOut,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Display (
        VARIANT * TimeOut,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Execute ( ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
    virtual HRESULT __stdcall get_CommandName (
        BSTR * prop ) = 0;
};

struct __declspec(uuid("00020971-0000-0000-c000-000000000046"))
PageSetup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    enum WdPaperSize PaperSize;
    __declspec(property(get=GetTwoPagesOnOne,put=PutTwoPagesOnOne))
    VARIANT_BOOL TwoPagesOnOne;
    __declspec(property(get=GetGutterOnTop,put=PutGutterOnTop))
    VARIANT_BOOL GutterOnTop;
    __declspec(property(get=GetCharsLine,put=PutCharsLine))
    float CharsLine;
    __declspec(property(get=GetLinesPage,put=PutLinesPage))
    float LinesPage;
    __declspec(property(get=GetShowGrid,put=PutShowGrid))
    VARIANT_BOOL ShowGrid;
    __declspec(property(get=GetGutterStyle,put=PutGutterStyle))
    enum WdGutterStyleOld GutterStyle;
    __declspec(property(get=GetSectionDirection,put=PutSectionDirection))
    enum WdSectionDirection SectionDirection;
    __declspec(property(get=GetLayoutMode,put=PutLayoutMode))
    enum WdLayoutMode LayoutMode;
    __declspec(property(get=GetGutterPos,put=PutGutterPos))
    enum WdGutterStyle GutterPos;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    float TopMargin;
    __declspec(property(get=GetBottomMargin,put=PutBottomMargin))
    float BottomMargin;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    float LeftMargin;
    __declspec(property(get=GetRightMargin,put=PutRightMargin))
    float RightMargin;
    __declspec(property(get=GetGutter,put=PutGutter))
    float Gutter;
    __declspec(property(get=GetPageWidth,put=PutPageWidth))
    float PageWidth;
    __declspec(property(get=GetPageHeight,put=PutPageHeight))
    float PageHeight;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum WdOrientation Orientation;
    __declspec(property(get=GetFirstPageTray,put=PutFirstPageTray))
    enum WdPaperTray FirstPageTray;
    __declspec(property(get=GetOtherPagesTray,put=PutOtherPagesTray))
    enum WdPaperTray OtherPagesTray;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum WdVerticalAlignment VerticalAlignment;
    __declspec(property(get=GetMirrorMargins,put=PutMirrorMargins))
    long MirrorMargins;
    __declspec(property(get=GetHeaderDistance,put=PutHeaderDistance))
    float HeaderDistance;
    __declspec(property(get=GetFooterDistance,put=PutFooterDistance))
    float FooterDistance;
    __declspec(property(get=GetSectionStart,put=PutSectionStart))
    enum WdSectionStart SectionStart;
    __declspec(property(get=GetOddAndEvenPagesHeaderFooter,put=PutOddAndEvenPagesHeaderFooter))
    long OddAndEvenPagesHeaderFooter;
    __declspec(property(get=GetDifferentFirstPageHeaderFooter,put=PutDifferentFirstPageHeaderFooter))
    long DifferentFirstPageHeaderFooter;
    __declspec(property(get=GetSuppressEndnotes,put=PutSuppressEndnotes))
    long SuppressEndnotes;
    __declspec(property(get=GetLineNumbering,put=PutLineNumbering))
    LineNumberingPtr LineNumbering;
    __declspec(property(get=GetTextColumns,put=PutTextColumns))
    TextColumnsPtr TextColumns;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetTopMargin ( );
    void PutTopMargin (
        float prop );
    float GetBottomMargin ( );
    void PutBottomMargin (
        float prop );
    float GetLeftMargin ( );
    void PutLeftMargin (
        float prop );
    float GetRightMargin ( );
    void PutRightMargin (
        float prop );
    float GetGutter ( );
    void PutGutter (
        float prop );
    float GetPageWidth ( );
    void PutPageWidth (
        float prop );
    float GetPageHeight ( );
    void PutPageHeight (
        float prop );
    enum WdOrientation GetOrientation ( );
    void PutOrientation (
        enum WdOrientation prop );
    enum WdPaperTray GetFirstPageTray ( );
    void PutFirstPageTray (
        enum WdPaperTray prop );
    enum WdPaperTray GetOtherPagesTray ( );
    void PutOtherPagesTray (
        enum WdPaperTray prop );
    enum WdVerticalAlignment GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum WdVerticalAlignment prop );
    long GetMirrorMargins ( );
    void PutMirrorMargins (
        long prop );
    float GetHeaderDistance ( );
    void PutHeaderDistance (
        float prop );
    float GetFooterDistance ( );
    void PutFooterDistance (
        float prop );
    enum WdSectionStart GetSectionStart ( );
    void PutSectionStart (
        enum WdSectionStart prop );
    long GetOddAndEvenPagesHeaderFooter ( );
    void PutOddAndEvenPagesHeaderFooter (
        long prop );
    long GetDifferentFirstPageHeaderFooter ( );
    void PutDifferentFirstPageHeaderFooter (
        long prop );
    long GetSuppressEndnotes ( );
    void PutSuppressEndnotes (
        long prop );
    LineNumberingPtr GetLineNumbering ( );
    void PutLineNumbering (
        struct LineNumbering * prop );
    TextColumnsPtr GetTextColumns ( );
    void PutTextColumns (
        struct TextColumns * prop );
    enum WdPaperSize GetPaperSize ( );
    void PutPaperSize (
        enum WdPaperSize prop );
    VARIANT_BOOL GetTwoPagesOnOne ( );
    void PutTwoPagesOnOne (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetGutterOnTop ( );
    void PutGutterOnTop (
        VARIANT_BOOL prop );
    float GetCharsLine ( );
    void PutCharsLine (
        float prop );
    float GetLinesPage ( );
    void PutLinesPage (
        float prop );
    VARIANT_BOOL GetShowGrid ( );
    void PutShowGrid (
        VARIANT_BOOL prop );
    HRESULT TogglePortrait ( );
    HRESULT SetAsTemplateDefault ( );
    enum WdGutterStyleOld GetGutterStyle ( );
    void PutGutterStyle (
        enum WdGutterStyleOld prop );
    enum WdSectionDirection GetSectionDirection ( );
    void PutSectionDirection (
        enum WdSectionDirection prop );
    enum WdLayoutMode GetLayoutMode ( );
    void PutLayoutMode (
        enum WdLayoutMode prop );
    enum WdGutterStyle GetGutterPos ( );
    void PutGutterPos (
        enum WdGutterStyle prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_TopMargin (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_TopMargin (
        float prop ) = 0;
    virtual HRESULT __stdcall get_BottomMargin (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_BottomMargin (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LeftMargin (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LeftMargin (
        float prop ) = 0;
    virtual HRESULT __stdcall get_RightMargin (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_RightMargin (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Gutter (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Gutter (
        float prop ) = 0;
    virtual HRESULT __stdcall get_PageWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_PageWidth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_PageHeight (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_PageHeight (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        enum WdOrientation * prop ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        enum WdOrientation prop ) = 0;
    virtual HRESULT __stdcall get_FirstPageTray (
        enum WdPaperTray * prop ) = 0;
    virtual HRESULT __stdcall put_FirstPageTray (
        enum WdPaperTray prop ) = 0;
    virtual HRESULT __stdcall get_OtherPagesTray (
        enum WdPaperTray * prop ) = 0;
    virtual HRESULT __stdcall put_OtherPagesTray (
        enum WdPaperTray prop ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        enum WdVerticalAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        enum WdVerticalAlignment prop ) = 0;
    virtual HRESULT __stdcall get_MirrorMargins (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_MirrorMargins (
        long prop ) = 0;
    virtual HRESULT __stdcall get_HeaderDistance (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_HeaderDistance (
        float prop ) = 0;
    virtual HRESULT __stdcall get_FooterDistance (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_FooterDistance (
        float prop ) = 0;
    virtual HRESULT __stdcall get_SectionStart (
        enum WdSectionStart * prop ) = 0;
    virtual HRESULT __stdcall put_SectionStart (
        enum WdSectionStart prop ) = 0;
    virtual HRESULT __stdcall get_OddAndEvenPagesHeaderFooter (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_OddAndEvenPagesHeaderFooter (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DifferentFirstPageHeaderFooter (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_DifferentFirstPageHeaderFooter (
        long prop ) = 0;
    virtual HRESULT __stdcall get_SuppressEndnotes (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_SuppressEndnotes (
        long prop ) = 0;
    virtual HRESULT __stdcall get_LineNumbering (
        struct LineNumbering * * prop ) = 0;
    virtual HRESULT __stdcall put_LineNumbering (
        struct LineNumbering * prop ) = 0;
    virtual HRESULT __stdcall get_TextColumns (
        struct TextColumns * * prop ) = 0;
    virtual HRESULT __stdcall put_TextColumns (
        struct TextColumns * prop ) = 0;
    virtual HRESULT __stdcall get_PaperSize (
        enum WdPaperSize * prop ) = 0;
    virtual HRESULT __stdcall put_PaperSize (
        enum WdPaperSize prop ) = 0;
    virtual HRESULT __stdcall get_TwoPagesOnOne (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_TwoPagesOnOne (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_GutterOnTop (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_GutterOnTop (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_CharsLine (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CharsLine (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LinesPage (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LinesPage (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ShowGrid (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowGrid (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_TogglePortrait ( ) = 0;
    virtual HRESULT __stdcall raw_SetAsTemplateDefault ( ) = 0;
    virtual HRESULT __stdcall get_GutterStyle (
        enum WdGutterStyleOld * prop ) = 0;
    virtual HRESULT __stdcall put_GutterStyle (
        enum WdGutterStyleOld prop ) = 0;
    virtual HRESULT __stdcall get_SectionDirection (
        enum WdSectionDirection * prop ) = 0;
    virtual HRESULT __stdcall put_SectionDirection (
        enum WdSectionDirection prop ) = 0;
    virtual HRESULT __stdcall get_LayoutMode (
        enum WdLayoutMode * prop ) = 0;
    virtual HRESULT __stdcall put_LayoutMode (
        enum WdLayoutMode prop ) = 0;
    virtual HRESULT __stdcall get_GutterPos (
        enum WdGutterStyle * prop ) = 0;
    virtual HRESULT __stdcall put_GutterPos (
        enum WdGutterStyle prop ) = 0;
};

struct __declspec(uuid("00020972-0000-0000-c000-000000000046"))
LineNumbering : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRestartMode,put=PutRestartMode))
    enum WdNumberingRule RestartMode;
    __declspec(property(get=GetStartingNumber,put=PutStartingNumber))
    long StartingNumber;
    __declspec(property(get=GetDistanceFromText,put=PutDistanceFromText))
    float DistanceFromText;
    __declspec(property(get=GetCountBy,put=PutCountBy))
    long CountBy;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive,put=PutActive))
    long Active;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdNumberingRule GetRestartMode ( );
    void PutRestartMode (
        enum WdNumberingRule prop );
    long GetStartingNumber ( );
    void PutStartingNumber (
        long prop );
    float GetDistanceFromText ( );
    void PutDistanceFromText (
        float prop );
    long GetCountBy ( );
    void PutCountBy (
        long prop );
    long GetActive ( );
    void PutActive (
        long prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_RestartMode (
        enum WdNumberingRule * prop ) = 0;
    virtual HRESULT __stdcall put_RestartMode (
        enum WdNumberingRule prop ) = 0;
    virtual HRESULT __stdcall get_StartingNumber (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_StartingNumber (
        long prop ) = 0;
    virtual HRESULT __stdcall get_DistanceFromText (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceFromText (
        float prop ) = 0;
    virtual HRESULT __stdcall get_CountBy (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_CountBy (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Active (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Active (
        long prop ) = 0;
};

struct __declspec(uuid("00020973-0000-0000-c000-000000000046"))
TextColumns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEvenlySpaced,put=PutEvenlySpaced))
    long EvenlySpaced;
    __declspec(property(get=GetLineBetween,put=PutLineBetween))
    long LineBetween;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetSpacing,put=PutSpacing))
    float Spacing;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFlowDirection,put=PutFlowDirection))
    enum WdFlowDirection FlowDirection;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetEvenlySpaced ( );
    void PutEvenlySpaced (
        long prop );
    long GetLineBetween ( );
    void PutLineBetween (
        long prop );
    float GetWidth ( );
    void PutWidth (
        float prop );
    float GetSpacing ( );
    void PutSpacing (
        float prop );
    TextColumnPtr Item (
        long Index );
    TextColumnPtr Add (
        VARIANT * Width = &vtMissing,
        VARIANT * Spacing = &vtMissing,
        VARIANT * EvenlySpaced = &vtMissing );
    HRESULT SetCount (
        long NumColumns );
    enum WdFlowDirection GetFlowDirection ( );
    void PutFlowDirection (
        enum WdFlowDirection prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_EvenlySpaced (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_EvenlySpaced (
        long prop ) = 0;
    virtual HRESULT __stdcall get_LineBetween (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_LineBetween (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Spacing (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Spacing (
        float prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct TextColumn * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * Width,
        VARIANT * Spacing,
        VARIANT * EvenlySpaced,
        struct TextColumn * * prop ) = 0;
    virtual HRESULT __stdcall raw_SetCount (
        long NumColumns ) = 0;
    virtual HRESULT __stdcall get_FlowDirection (
        enum WdFlowDirection * prop ) = 0;
    virtual HRESULT __stdcall put_FlowDirection (
        enum WdFlowDirection prop ) = 0;
};

struct __declspec(uuid("00020974-0000-0000-c000-000000000046"))
TextColumn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetSpaceAfter,put=PutSpaceAfter))
    float SpaceAfter;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetWidth ( );
    void PutWidth (
        float prop );
    float GetSpaceAfter ( );
    void PutSpaceAfter (
        float prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        float prop ) = 0;
    virtual HRESULT __stdcall get_SpaceAfter (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_SpaceAfter (
        float prop ) = 0;
};

struct __declspec(uuid("00020975-0000-0000-c000-000000000046"))
Selection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetFormattedText,put=PutFormattedText))
    RangePtr FormattedText;
    __declspec(property(get=GetStart,put=PutStart))
    long Start;
    __declspec(property(get=GetEnd,put=PutEnd))
    long End;
    __declspec(property(get=GetFont,put=PutFont))
    _FontPtr Font;
    __declspec(property(get=GetType))
    enum WdSelectionType Type;
    __declspec(property(get=GetStoryType))
    enum WdStoryType StoryType;
    __declspec(property(get=GetPageSetup,put=PutPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDocument))
    _DocumentPtr Document;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetNoProofing,put=PutNoProofing))
    long NoProofing;
    __declspec(property(get=GetTopLevelTables))
    TablesPtr TopLevelTables;
    __declspec(property(get=GetParagraphFormat,put=PutParagraphFormat))
    _ParagraphFormatPtr ParagraphFormat;
    __declspec(property(get=GetLanguageDetected,put=PutLanguageDetected))
    VARIANT_BOOL LanguageDetected;
    __declspec(property(get=GetFitTextWidth,put=PutFitTextWidth))
    float FitTextWidth;
    __declspec(property(get=GetFind))
    FindPtr Find;
    __declspec(property(get=GetStoryLength))
    long StoryLength;
    __declspec(property(get=GetLanguageID,put=PutLanguageID))
    enum WdLanguageID LanguageID;
    __declspec(property(get=GetLanguageIDFarEast,put=PutLanguageIDFarEast))
    enum WdLanguageID LanguageIDFarEast;
    __declspec(property(get=GetLanguageIDOther,put=PutLanguageIDOther))
    enum WdLanguageID LanguageIDOther;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetTables))
    TablesPtr Tables;
    __declspec(property(get=GetWords))
    WordsPtr Words;
    __declspec(property(get=GetSentences))
    SentencesPtr Sentences;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters;
    __declspec(property(get=GetFootnotes))
    FootnotesPtr Footnotes;
    __declspec(property(get=GetEndnotes))
    EndnotesPtr Endnotes;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetCells))
    CellsPtr Cells;
    __declspec(property(get=GetSections))
    SectionsPtr Sections;
    __declspec(property(get=GetParagraphs))
    ParagraphsPtr Paragraphs;
    __declspec(property(get=GetShading))
    ShadingPtr Shading;
    __declspec(property(get=GetFields))
    FieldsPtr Fields;
    __declspec(property(get=GetFormFields))
    FormFieldsPtr FormFields;
    __declspec(property(get=GetFrames))
    FramesPtr Frames;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetInformation))
    _variant_t Information[];
    __declspec(property(get=GetFlags,put=PutFlags))
    enum WdSelectionFlags Flags;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetStartIsActive,put=PutStartIsActive))
    VARIANT_BOOL StartIsActive;
    __declspec(property(get=GetBookmarks))
    BookmarksPtr Bookmarks;
    __declspec(property(get=GetExtendMode,put=PutExtendMode))
    VARIANT_BOOL ExtendMode;
    __declspec(property(get=GetColumnSelectMode,put=PutColumnSelectMode))
    VARIANT_BOOL ColumnSelectMode;
    __declspec(property(get=GetIPAtEndOfLine))
    VARIANT_BOOL IPAtEndOfLine;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum WdTextOrientation Orientation;
    __declspec(property(get=GetInlineShapes))
    InlineShapesPtr InlineShapes;
    __declspec(property(get=GetColumns))
    ColumnsPtr Columns;
    __declspec(property(get=GetRows))
    RowsPtr Rows;
    __declspec(property(get=GetHeaderFooter))
    HeaderFooterPtr HeaderFooter;
    __declspec(property(get=GetIsEndOfRowMark))
    VARIANT_BOOL IsEndOfRowMark;
    __declspec(property(get=GetBookmarkID))
    long BookmarkID;
    __declspec(property(get=GetPreviousBookmarkID))
    long PreviousBookmarkID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t prop );
    RangePtr GetFormattedText ( );
    void PutFormattedText (
        struct Range * prop );
    long GetStart ( );
    void PutStart (
        long prop );
    long GetEnd ( );
    void PutEnd (
        long prop );
    _FontPtr GetFont ( );
    void PutFont (
        struct _Font * prop );
    enum WdSelectionType GetType ( );
    enum WdStoryType GetStoryType ( );
    _variant_t GetStyle ( );
    void PutStyle (
        VARIANT * prop );
    TablesPtr GetTables ( );
    WordsPtr GetWords ( );
    SentencesPtr GetSentences ( );
    CharactersPtr GetCharacters ( );
    FootnotesPtr GetFootnotes ( );
    EndnotesPtr GetEndnotes ( );
    CommentsPtr GetComments ( );
    CellsPtr GetCells ( );
    SectionsPtr GetSections ( );
    ParagraphsPtr GetParagraphs ( );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    ShadingPtr GetShading ( );
    FieldsPtr GetFields ( );
    FormFieldsPtr GetFormFields ( );
    FramesPtr GetFrames ( );
    _ParagraphFormatPtr GetParagraphFormat ( );
    void PutParagraphFormat (
        struct _ParagraphFormat * prop );
    PageSetupPtr GetPageSetup ( );
    void PutPageSetup (
        struct PageSetup * prop );
    BookmarksPtr GetBookmarks ( );
    long GetStoryLength ( );
    enum WdLanguageID GetLanguageID ( );
    void PutLanguageID (
        enum WdLanguageID prop );
    enum WdLanguageID GetLanguageIDFarEast ( );
    void PutLanguageIDFarEast (
        enum WdLanguageID prop );
    enum WdLanguageID GetLanguageIDOther ( );
    void PutLanguageIDOther (
        enum WdLanguageID prop );
    HyperlinksPtr GetHyperlinks ( );
    ColumnsPtr GetColumns ( );
    RowsPtr GetRows ( );
    HeaderFooterPtr GetHeaderFooter ( );
    VARIANT_BOOL GetIsEndOfRowMark ( );
    long GetBookmarkID ( );
    long GetPreviousBookmarkID ( );
    FindPtr GetFind ( );
    RangePtr GetRange ( );
    _variant_t GetInformation (
        enum WdInformation Type );
    enum WdSelectionFlags GetFlags ( );
    void PutFlags (
        enum WdSelectionFlags prop );
    VARIANT_BOOL GetActive ( );
    VARIANT_BOOL GetStartIsActive ( );
    void PutStartIsActive (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetIPAtEndOfLine ( );
    VARIANT_BOOL GetExtendMode ( );
    void PutExtendMode (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetColumnSelectMode ( );
    void PutColumnSelectMode (
        VARIANT_BOOL prop );
    enum WdTextOrientation GetOrientation ( );
    void PutOrientation (
        enum WdTextOrientation prop );
    InlineShapesPtr GetInlineShapes ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _DocumentPtr GetDocument ( );
    ShapeRangePtr GetShapeRange ( );
    HRESULT Select ( );
    HRESULT SetRange (
        long Start,
        long End );
    HRESULT Collapse (
        VARIANT * Direction = &vtMissing );
    HRESULT InsertBefore (
        _bstr_t Text );
    HRESULT InsertAfter (
        _bstr_t Text );
    RangePtr Next (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing );
    RangePtr Previous (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing );
    long StartOf (
        VARIANT * Unit = &vtMissing,
        VARIANT * Extend = &vtMissing );
    long EndOf (
        VARIANT * Unit = &vtMissing,
        VARIANT * Extend = &vtMissing );
    long Move (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing );
    long MoveStart (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing );
    long MoveEnd (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing );
    long MoveWhile (
        VARIANT * Cset,
        VARIANT * Count = &vtMissing );
    long MoveStartWhile (
        VARIANT * Cset,
        VARIANT * Count = &vtMissing );
    long MoveEndWhile (
        VARIANT * Cset,
        VARIANT * Count = &vtMissing );
    long MoveUntil (
        VARIANT * Cset,
        VARIANT * Count = &vtMissing );
    long MoveStartUntil (
        VARIANT * Cset,
        VARIANT * Count = &vtMissing );
    long MoveEndUntil (
        VARIANT * Cset,
        VARIANT * Count = &vtMissing );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Paste ( );
    HRESULT InsertBreak (
        VARIANT * Type = &vtMissing );
    HRESULT InsertFile (
        _bstr_t FileName,
        VARIANT * Range = &vtMissing,
        VARIANT * ConfirmConversions = &vtMissing,
        VARIANT * Link = &vtMissing,
        VARIANT * Attachment = &vtMissing );
    VARIANT_BOOL InStory (
        struct Range * Range );
    VARIANT_BOOL InRange (
        struct Range * Range );
    long Delete (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing );
    long Expand (
        VARIANT * Unit = &vtMissing );
    HRESULT InsertParagraph ( );
    HRESULT InsertParagraphAfter ( );
    TablePtr ConvertToTableOld (
        VARIANT * Separator = &vtMissing,
        VARIANT * NumRows = &vtMissing,
        VARIANT * NumColumns = &vtMissing,
        VARIANT * InitialColumnWidth = &vtMissing,
        VARIANT * Format = &vtMissing,
        VARIANT * ApplyBorders = &vtMissing,
        VARIANT * ApplyShading = &vtMissing,
        VARIANT * ApplyFont = &vtMissing,
        VARIANT * ApplyColor = &vtMissing,
        VARIANT * ApplyHeadingRows = &vtMissing,
        VARIANT * ApplyLastRow = &vtMissing,
        VARIANT * ApplyFirstColumn = &vtMissing,
        VARIANT * ApplyLastColumn = &vtMissing,
        VARIANT * AutoFit = &vtMissing );
    HRESULT InsertDateTimeOld (
        VARIANT * DateTimeFormat = &vtMissing,
        VARIANT * InsertAsField = &vtMissing,
        VARIANT * InsertAsFullWidth = &vtMissing );
    HRESULT InsertSymbol (
        long CharacterNumber,
        VARIANT * Font = &vtMissing,
        VARIANT * Unicode = &vtMissing,
        VARIANT * Bias = &vtMissing );
    HRESULT InsertCrossReference (
        VARIANT * ReferenceType,
        enum WdReferenceKind ReferenceKind,
        VARIANT * ReferenceItem,
        VARIANT * InsertAsHyperlink = &vtMissing,
        VARIANT * IncludePosition = &vtMissing );
    HRESULT InsertCaption (
        VARIANT * Label,
        VARIANT * Title = &vtMissing,
        VARIANT * TitleAutoText = &vtMissing,
        VARIANT * Position = &vtMissing );
    HRESULT CopyAsPicture ( );
    HRESULT SortOld (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * FieldNumber = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * FieldNumber2 = &vtMissing,
        VARIANT * SortFieldType2 = &vtMissing,
        VARIANT * SortOrder2 = &vtMissing,
        VARIANT * FieldNumber3 = &vtMissing,
        VARIANT * SortFieldType3 = &vtMissing,
        VARIANT * SortOrder3 = &vtMissing,
        VARIANT * SortColumn = &vtMissing,
        VARIANT * Separator = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * LanguageID = &vtMissing );
    HRESULT SortAscending ( );
    HRESULT SortDescending ( );
    VARIANT_BOOL IsEqual (
        struct Range * Range );
    float Calculate ( );
    RangePtr GoTo (
        VARIANT * What = &vtMissing,
        VARIANT * Which = &vtMissing,
        VARIANT * Count = &vtMissing,
        VARIANT * Name = &vtMissing );
    RangePtr GoToNext (
        enum WdGoToItem What );
    RangePtr GoToPrevious (
        enum WdGoToItem What );
    HRESULT PasteSpecial (
        VARIANT * IconIndex = &vtMissing,
        VARIANT * Link = &vtMissing,
        VARIANT * Placement = &vtMissing,
        VARIANT * DisplayAsIcon = &vtMissing,
        VARIANT * DataType = &vtMissing,
        VARIANT * IconFileName = &vtMissing,
        VARIANT * IconLabel = &vtMissing );
    FieldPtr PreviousField ( );
    FieldPtr NextField ( );
    HRESULT InsertParagraphBefore ( );
    HRESULT InsertCells (
        VARIANT * ShiftCells = &vtMissing );
    HRESULT Extend (
        VARIANT * Character = &vtMissing );
    HRESULT Shrink ( );
    long MoveLeft (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing,
        VARIANT * Extend = &vtMissing );
    long MoveRight (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing,
        VARIANT * Extend = &vtMissing );
    long MoveUp (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing,
        VARIANT * Extend = &vtMissing );
    long MoveDown (
        VARIANT * Unit = &vtMissing,
        VARIANT * Count = &vtMissing,
        VARIANT * Extend = &vtMissing );
    long HomeKey (
        VARIANT * Unit = &vtMissing,
        VARIANT * Extend = &vtMissing );
    long EndKey (
        VARIANT * Unit = &vtMissing,
        VARIANT * Extend = &vtMissing );
    HRESULT EscapeKey ( );
    HRESULT TypeText (
        _bstr_t Text );
    HRESULT CopyFormat ( );
    HRESULT PasteFormat ( );
    HRESULT TypeParagraph ( );
    HRESULT TypeBackspace ( );
    HRESULT NextSubdocument ( );
    HRESULT PreviousSubdocument ( );
    HRESULT SelectColumn ( );
    HRESULT SelectCurrentFont ( );
    HRESULT SelectCurrentAlignment ( );
    HRESULT SelectCurrentSpacing ( );
    HRESULT SelectCurrentIndent ( );
    HRESULT SelectCurrentTabs ( );
    HRESULT SelectCurrentColor ( );
    HRESULT CreateTextbox ( );
    HRESULT WholeStory ( );
    HRESULT SelectRow ( );
    HRESULT SplitTable ( );
    HRESULT InsertRows (
        VARIANT * NumRows = &vtMissing );
    HRESULT InsertColumns ( );
    HRESULT InsertFormula (
        VARIANT * Formula = &vtMissing,
        VARIANT * NumberFormat = &vtMissing );
    RevisionPtr NextRevision (
        VARIANT * Wrap = &vtMissing );
    RevisionPtr PreviousRevision (
        VARIANT * Wrap = &vtMissing );
    HRESULT PasteAsNestedTable ( );
    AutoTextEntryPtr CreateAutoTextEntry (
        _bstr_t Name,
        _bstr_t StyleName );
    HRESULT DetectLanguage ( );
    HRESULT SelectCell ( );
    HRESULT InsertRowsBelow (
        VARIANT * NumRows = &vtMissing );
    HRESULT InsertColumnsRight ( );
    HRESULT InsertRowsAbove (
        VARIANT * NumRows = &vtMissing );
    HRESULT RtlRun ( );
    HRESULT LtrRun ( );
    HRESULT BoldRun ( );
    HRESULT ItalicRun ( );
    HRESULT RtlPara ( );
    HRESULT LtrPara ( );
    HRESULT InsertDateTime (
        VARIANT * DateTimeFormat = &vtMissing,
        VARIANT * InsertAsField = &vtMissing,
        VARIANT * InsertAsFullWidth = &vtMissing,
        VARIANT * DateLanguage = &vtMissing,
        VARIANT * CalendarType = &vtMissing );
    HRESULT Sort (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * FieldNumber = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * FieldNumber2 = &vtMissing,
        VARIANT * SortFieldType2 = &vtMissing,
        VARIANT * SortOrder2 = &vtMissing,
        VARIANT * FieldNumber3 = &vtMissing,
        VARIANT * SortFieldType3 = &vtMissing,
        VARIANT * SortOrder3 = &vtMissing,
        VARIANT * SortColumn = &vtMissing,
        VARIANT * Separator = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * BidiSort = &vtMissing,
        VARIANT * IgnoreThe = &vtMissing,
        VARIANT * IgnoreKashida = &vtMissing,
        VARIANT * IgnoreDiacritics = &vtMissing,
        VARIANT * IgnoreHe = &vtMissing,
        VARIANT * LanguageID = &vtMissing );
    TablePtr ConvertToTable (
        VARIANT * Separator = &vtMissing,
        VARIANT * NumRows = &vtMissing,
        VARIANT * NumColumns = &vtMissing,
        VARIANT * InitialColumnWidth = &vtMissing,
        VARIANT * Format = &vtMissing,
        VARIANT * ApplyBorders = &vtMissing,
        VARIANT * ApplyShading = &vtMissing,
        VARIANT * ApplyFont = &vtMissing,
        VARIANT * ApplyColor = &vtMissing,
        VARIANT * ApplyHeadingRows = &vtMissing,
        VARIANT * ApplyLastRow = &vtMissing,
        VARIANT * ApplyFirstColumn = &vtMissing,
        VARIANT * ApplyLastColumn = &vtMissing,
        VARIANT * AutoFit = &vtMissing,
        VARIANT * AutoFitBehavior = &vtMissing,
        VARIANT * DefaultTableBehavior = &vtMissing );
    long GetNoProofing ( );
    void PutNoProofing (
        long prop );
    TablesPtr GetTopLevelTables ( );
    VARIANT_BOOL GetLanguageDetected ( );
    void PutLanguageDetected (
        VARIANT_BOOL prop );
    float GetFitTextWidth ( );
    void PutFitTextWidth (
        float prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Text (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_FormattedText (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall put_FormattedText (
        struct Range * prop ) = 0;
    virtual HRESULT __stdcall get_Start (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Start (
        long prop ) = 0;
    virtual HRESULT __stdcall get_End (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_End (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct _Font * * prop ) = 0;
    virtual HRESULT __stdcall put_Font (
        struct _Font * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdSelectionType * prop ) = 0;
    virtual HRESULT __stdcall get_StoryType (
        enum WdStoryType * prop ) = 0;
    virtual HRESULT __stdcall get_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Tables (
        struct Tables * * prop ) = 0;
    virtual HRESULT __stdcall get_Words (
        struct Words * * prop ) = 0;
    virtual HRESULT __stdcall get_Sentences (
        struct Sentences * * prop ) = 0;
    virtual HRESULT __stdcall get_Characters (
        struct Characters * * prop ) = 0;
    virtual HRESULT __stdcall get_Footnotes (
        struct Footnotes * * prop ) = 0;
    virtual HRESULT __stdcall get_Endnotes (
        struct Endnotes * * prop ) = 0;
    virtual HRESULT __stdcall get_Comments (
        struct Comments * * prop ) = 0;
    virtual HRESULT __stdcall get_Cells (
        struct Cells * * prop ) = 0;
    virtual HRESULT __stdcall get_Sections (
        struct Sections * * prop ) = 0;
    virtual HRESULT __stdcall get_Paragraphs (
        struct Paragraphs * * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Shading (
        struct Shading * * prop ) = 0;
    virtual HRESULT __stdcall get_Fields (
        struct Fields * * prop ) = 0;
    virtual HRESULT __stdcall get_FormFields (
        struct FormFields * * prop ) = 0;
    virtual HRESULT __stdcall get_Frames (
        struct Frames * * prop ) = 0;
    virtual HRESULT __stdcall get_ParagraphFormat (
        struct _ParagraphFormat * * prop ) = 0;
    virtual HRESULT __stdcall put_ParagraphFormat (
        struct _ParagraphFormat * prop ) = 0;
    virtual HRESULT __stdcall get_PageSetup (
        struct PageSetup * * prop ) = 0;
    virtual HRESULT __stdcall put_PageSetup (
        struct PageSetup * prop ) = 0;
    virtual HRESULT __stdcall get_Bookmarks (
        struct Bookmarks * * prop ) = 0;
    virtual HRESULT __stdcall get_StoryLength (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageID (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageID (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_LanguageIDFarEast (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageIDFarEast (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_LanguageIDOther (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageIDOther (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_Hyperlinks (
        struct Hyperlinks * * prop ) = 0;
    virtual HRESULT __stdcall get_Columns (
        struct Columns * * prop ) = 0;
    virtual HRESULT __stdcall get_Rows (
        struct Rows * * prop ) = 0;
    virtual HRESULT __stdcall get_HeaderFooter (
        struct HeaderFooter * * prop ) = 0;
    virtual HRESULT __stdcall get_IsEndOfRowMark (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_BookmarkID (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_PreviousBookmarkID (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Find (
        struct Find * * prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Information (
        enum WdInformation Type,
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Flags (
        enum WdSelectionFlags * prop ) = 0;
    virtual HRESULT __stdcall put_Flags (
        enum WdSelectionFlags prop ) = 0;
    virtual HRESULT __stdcall get_Active (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_StartIsActive (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_StartIsActive (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_IPAtEndOfLine (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_ExtendMode (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ExtendMode (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ColumnSelectMode (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ColumnSelectMode (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        enum WdTextOrientation * prop ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        enum WdTextOrientation prop ) = 0;
    virtual HRESULT __stdcall get_InlineShapes (
        struct InlineShapes * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Document (
        struct _Document * * prop ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_SetRange (
        long Start,
        long End ) = 0;
    virtual HRESULT __stdcall raw_Collapse (
        VARIANT * Direction = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertBefore (
        BSTR Text ) = 0;
    virtual HRESULT __stdcall raw_InsertAfter (
        BSTR Text ) = 0;
    virtual HRESULT __stdcall raw_Next (
        VARIANT * Unit,
        VARIANT * Count,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_Previous (
        VARIANT * Unit,
        VARIANT * Count,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_StartOf (
        VARIANT * Unit,
        VARIANT * Extend,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_EndOf (
        VARIANT * Unit,
        VARIANT * Extend,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT * Unit,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveStart (
        VARIANT * Unit,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveEnd (
        VARIANT * Unit,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveWhile (
        VARIANT * Cset,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveStartWhile (
        VARIANT * Cset,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveEndWhile (
        VARIANT * Cset,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveUntil (
        VARIANT * Cset,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveStartUntil (
        VARIANT * Cset,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveEndUntil (
        VARIANT * Cset,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Cut ( ) = 0;
    virtual HRESULT __stdcall raw_Copy ( ) = 0;
    virtual HRESULT __stdcall raw_Paste ( ) = 0;
    virtual HRESULT __stdcall raw_InsertBreak (
        VARIANT * Type = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertFile (
        BSTR FileName,
        VARIANT * Range = &vtMissing,
        VARIANT * ConfirmConversions = &vtMissing,
        VARIANT * Link = &vtMissing,
        VARIANT * Attachment = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InStory (
        struct Range * Range,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_InRange (
        struct Range * Range,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * Unit,
        VARIANT * Count,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Expand (
        VARIANT * Unit,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_InsertParagraph ( ) = 0;
    virtual HRESULT __stdcall raw_InsertParagraphAfter ( ) = 0;
    virtual HRESULT __stdcall raw_ConvertToTableOld (
        VARIANT * Separator,
        VARIANT * NumRows,
        VARIANT * NumColumns,
        VARIANT * InitialColumnWidth,
        VARIANT * Format,
        VARIANT * ApplyBorders,
        VARIANT * ApplyShading,
        VARIANT * ApplyFont,
        VARIANT * ApplyColor,
        VARIANT * ApplyHeadingRows,
        VARIANT * ApplyLastRow,
        VARIANT * ApplyFirstColumn,
        VARIANT * ApplyLastColumn,
        VARIANT * AutoFit,
        struct Table * * prop ) = 0;
    virtual HRESULT __stdcall raw_InsertDateTimeOld (
        VARIANT * DateTimeFormat = &vtMissing,
        VARIANT * InsertAsField = &vtMissing,
        VARIANT * InsertAsFullWidth = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertSymbol (
        long CharacterNumber,
        VARIANT * Font = &vtMissing,
        VARIANT * Unicode = &vtMissing,
        VARIANT * Bias = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertCrossReference (
        VARIANT * ReferenceType,
        enum WdReferenceKind ReferenceKind,
        VARIANT * ReferenceItem,
        VARIANT * InsertAsHyperlink = &vtMissing,
        VARIANT * IncludePosition = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertCaption (
        VARIANT * Label,
        VARIANT * Title = &vtMissing,
        VARIANT * TitleAutoText = &vtMissing,
        VARIANT * Position = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_CopyAsPicture ( ) = 0;
    virtual HRESULT __stdcall raw_SortOld (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * FieldNumber = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * FieldNumber2 = &vtMissing,
        VARIANT * SortFieldType2 = &vtMissing,
        VARIANT * SortOrder2 = &vtMissing,
        VARIANT * FieldNumber3 = &vtMissing,
        VARIANT * SortFieldType3 = &vtMissing,
        VARIANT * SortOrder3 = &vtMissing,
        VARIANT * SortColumn = &vtMissing,
        VARIANT * Separator = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * LanguageID = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SortAscending ( ) = 0;
    virtual HRESULT __stdcall raw_SortDescending ( ) = 0;
    virtual HRESULT __stdcall raw_IsEqual (
        struct Range * Range,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_Calculate (
        float * prop ) = 0;
    virtual HRESULT __stdcall raw_GoTo (
        VARIANT * What,
        VARIANT * Which,
        VARIANT * Count,
        VARIANT * Name,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_GoToNext (
        enum WdGoToItem What,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_GoToPrevious (
        enum WdGoToItem What,
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_PasteSpecial (
        VARIANT * IconIndex = &vtMissing,
        VARIANT * Link = &vtMissing,
        VARIANT * Placement = &vtMissing,
        VARIANT * DisplayAsIcon = &vtMissing,
        VARIANT * DataType = &vtMissing,
        VARIANT * IconFileName = &vtMissing,
        VARIANT * IconLabel = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_PreviousField (
        struct Field * * prop ) = 0;
    virtual HRESULT __stdcall raw_NextField (
        struct Field * * prop ) = 0;
    virtual HRESULT __stdcall raw_InsertParagraphBefore ( ) = 0;
    virtual HRESULT __stdcall raw_InsertCells (
        VARIANT * ShiftCells = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Extend (
        VARIANT * Character = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Shrink ( ) = 0;
    virtual HRESULT __stdcall raw_MoveLeft (
        VARIANT * Unit,
        VARIANT * Count,
        VARIANT * Extend,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveRight (
        VARIANT * Unit,
        VARIANT * Count,
        VARIANT * Extend,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveUp (
        VARIANT * Unit,
        VARIANT * Count,
        VARIANT * Extend,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_MoveDown (
        VARIANT * Unit,
        VARIANT * Count,
        VARIANT * Extend,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_HomeKey (
        VARIANT * Unit,
        VARIANT * Extend,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_EndKey (
        VARIANT * Unit,
        VARIANT * Extend,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_EscapeKey ( ) = 0;
    virtual HRESULT __stdcall raw_TypeText (
        BSTR Text ) = 0;
    virtual HRESULT __stdcall raw_CopyFormat ( ) = 0;
    virtual HRESULT __stdcall raw_PasteFormat ( ) = 0;
    virtual HRESULT __stdcall raw_TypeParagraph ( ) = 0;
    virtual HRESULT __stdcall raw_TypeBackspace ( ) = 0;
    virtual HRESULT __stdcall raw_NextSubdocument ( ) = 0;
    virtual HRESULT __stdcall raw_PreviousSubdocument ( ) = 0;
    virtual HRESULT __stdcall raw_SelectColumn ( ) = 0;
    virtual HRESULT __stdcall raw_SelectCurrentFont ( ) = 0;
    virtual HRESULT __stdcall raw_SelectCurrentAlignment ( ) = 0;
    virtual HRESULT __stdcall raw_SelectCurrentSpacing ( ) = 0;
    virtual HRESULT __stdcall raw_SelectCurrentIndent ( ) = 0;
    virtual HRESULT __stdcall raw_SelectCurrentTabs ( ) = 0;
    virtual HRESULT __stdcall raw_SelectCurrentColor ( ) = 0;
    virtual HRESULT __stdcall raw_CreateTextbox ( ) = 0;
    virtual HRESULT __stdcall raw_WholeStory ( ) = 0;
    virtual HRESULT __stdcall raw_SelectRow ( ) = 0;
    virtual HRESULT __stdcall raw_SplitTable ( ) = 0;
    virtual HRESULT __stdcall raw_InsertRows (
        VARIANT * NumRows = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertColumns ( ) = 0;
    virtual HRESULT __stdcall raw_InsertFormula (
        VARIANT * Formula = &vtMissing,
        VARIANT * NumberFormat = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_NextRevision (
        VARIANT * Wrap,
        struct Revision * * prop ) = 0;
    virtual HRESULT __stdcall raw_PreviousRevision (
        VARIANT * Wrap,
        struct Revision * * prop ) = 0;
    virtual HRESULT __stdcall raw_PasteAsNestedTable ( ) = 0;
    virtual HRESULT __stdcall raw_CreateAutoTextEntry (
        BSTR Name,
        BSTR StyleName,
        struct AutoTextEntry * * prop ) = 0;
    virtual HRESULT __stdcall raw_DetectLanguage ( ) = 0;
    virtual HRESULT __stdcall raw_SelectCell ( ) = 0;
    virtual HRESULT __stdcall raw_InsertRowsBelow (
        VARIANT * NumRows = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_InsertColumnsRight ( ) = 0;
    virtual HRESULT __stdcall raw_InsertRowsAbove (
        VARIANT * NumRows = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_RtlRun ( ) = 0;
    virtual HRESULT __stdcall raw_LtrRun ( ) = 0;
    virtual HRESULT __stdcall raw_BoldRun ( ) = 0;
    virtual HRESULT __stdcall raw_ItalicRun ( ) = 0;
    virtual HRESULT __stdcall raw_RtlPara ( ) = 0;
    virtual HRESULT __stdcall raw_LtrPara ( ) = 0;
    virtual HRESULT __stdcall raw_InsertDateTime (
        VARIANT * DateTimeFormat = &vtMissing,
        VARIANT * InsertAsField = &vtMissing,
        VARIANT * InsertAsFullWidth = &vtMissing,
        VARIANT * DateLanguage = &vtMissing,
        VARIANT * CalendarType = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Sort (
        VARIANT * ExcludeHeader = &vtMissing,
        VARIANT * FieldNumber = &vtMissing,
        VARIANT * SortFieldType = &vtMissing,
        VARIANT * SortOrder = &vtMissing,
        VARIANT * FieldNumber2 = &vtMissing,
        VARIANT * SortFieldType2 = &vtMissing,
        VARIANT * SortOrder2 = &vtMissing,
        VARIANT * FieldNumber3 = &vtMissing,
        VARIANT * SortFieldType3 = &vtMissing,
        VARIANT * SortOrder3 = &vtMissing,
        VARIANT * SortColumn = &vtMissing,
        VARIANT * Separator = &vtMissing,
        VARIANT * CaseSensitive = &vtMissing,
        VARIANT * BidiSort = &vtMissing,
        VARIANT * IgnoreThe = &vtMissing,
        VARIANT * IgnoreKashida = &vtMissing,
        VARIANT * IgnoreDiacritics = &vtMissing,
        VARIANT * IgnoreHe = &vtMissing,
        VARIANT * LanguageID = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ConvertToTable (
        VARIANT * Separator,
        VARIANT * NumRows,
        VARIANT * NumColumns,
        VARIANT * InitialColumnWidth,
        VARIANT * Format,
        VARIANT * ApplyBorders,
        VARIANT * ApplyShading,
        VARIANT * ApplyFont,
        VARIANT * ApplyColor,
        VARIANT * ApplyHeadingRows,
        VARIANT * ApplyLastRow,
        VARIANT * ApplyFirstColumn,
        VARIANT * ApplyLastColumn,
        VARIANT * AutoFit,
        VARIANT * AutoFitBehavior,
        VARIANT * DefaultTableBehavior,
        struct Table * * prop ) = 0;
    virtual HRESULT __stdcall get_NoProofing (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_NoProofing (
        long prop ) = 0;
    virtual HRESULT __stdcall get_TopLevelTables (
        struct Tables * * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageDetected (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageDetected (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_FitTextWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_FitTextWidth (
        float prop ) = 0;
};

struct __declspec(uuid("00020976-0000-0000-c000-000000000046"))
TablesOfAuthoritiesCategories : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    TableOfAuthoritiesCategoryPtr Item (
        VARIANT * Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct TableOfAuthoritiesCategory * * prop ) = 0;
};

struct __declspec(uuid("00020977-0000-0000-c000-000000000046"))
TableOfAuthoritiesCategory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t prop );
    long GetIndex ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
};

struct __declspec(uuid("00020978-0000-0000-c000-000000000046"))
CaptionLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    CaptionLabelPtr Item (
        VARIANT * Index );
    CaptionLabelPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct CaptionLabel * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct CaptionLabel * * prop ) = 0;
};

struct __declspec(uuid("00020979-0000-0000-c000-000000000046"))
CaptionLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetID))
    enum WdCaptionLabelID ID;
    __declspec(property(get=GetIncludeChapterNumber,put=PutIncludeChapterNumber))
    VARIANT_BOOL IncludeChapterNumber;
    __declspec(property(get=GetNumberStyle,put=PutNumberStyle))
    enum WdCaptionNumberStyle NumberStyle;
    __declspec(property(get=GetChapterStyleLevel,put=PutChapterStyleLevel))
    long ChapterStyleLevel;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    enum WdSeparatorType Separator;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum WdCaptionPosition Position;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetBuiltIn ( );
    enum WdCaptionLabelID GetID ( );
    VARIANT_BOOL GetIncludeChapterNumber ( );
    void PutIncludeChapterNumber (
        VARIANT_BOOL prop );
    enum WdCaptionNumberStyle GetNumberStyle ( );
    void PutNumberStyle (
        enum WdCaptionNumberStyle prop );
    long GetChapterStyleLevel ( );
    void PutChapterStyleLevel (
        long prop );
    enum WdSeparatorType GetSeparator ( );
    void PutSeparator (
        enum WdSeparatorType prop );
    enum WdCaptionPosition GetPosition ( );
    void PutPosition (
        enum WdCaptionPosition prop );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_BuiltIn (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_ID (
        enum WdCaptionLabelID * prop ) = 0;
    virtual HRESULT __stdcall get_IncludeChapterNumber (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IncludeChapterNumber (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_NumberStyle (
        enum WdCaptionNumberStyle * prop ) = 0;
    virtual HRESULT __stdcall put_NumberStyle (
        enum WdCaptionNumberStyle prop ) = 0;
    virtual HRESULT __stdcall get_ChapterStyleLevel (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_ChapterStyleLevel (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Separator (
        enum WdSeparatorType * prop ) = 0;
    virtual HRESULT __stdcall put_Separator (
        enum WdSeparatorType prop ) = 0;
    virtual HRESULT __stdcall get_Position (
        enum WdCaptionPosition * prop ) = 0;
    virtual HRESULT __stdcall put_Position (
        enum WdCaptionPosition prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002097a-0000-0000-c000-000000000046"))
AutoCaptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    AutoCaptionPtr Item (
        VARIANT * Index );
    HRESULT CancelAutoInsert ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct AutoCaption * * prop ) = 0;
    virtual HRESULT __stdcall raw_CancelAutoInsert ( ) = 0;
};

struct __declspec(uuid("0002097b-0000-0000-c000-000000000046"))
AutoCaption : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoInsert,put=PutAutoInsert))
    VARIANT_BOOL AutoInsert;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetAutoInsert ( );
    void PutAutoInsert (
        VARIANT_BOOL prop );
    long GetIndex ( );
    _variant_t GetCaptionLabel ( );
    void PutCaptionLabel (
        VARIANT * prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_AutoInsert (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoInsert (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_CaptionLabel (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_CaptionLabel (
        VARIANT * prop ) = 0;
};

struct __declspec(uuid("0002097c-0000-0000-c000-000000000046"))
Indexes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFormat,put=PutFormat))
    enum WdIndexFormat Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    enum WdIndexFormat GetFormat ( );
    void PutFormat (
        enum WdIndexFormat prop );
    IndexPtr Item (
        long Index );
    IndexPtr AddOld (
        struct Range * Range,
        VARIANT * HeadingSeparator = &vtMissing,
        VARIANT * RightAlignPageNumbers = &vtMissing,
        VARIANT * Type = &vtMissing,
        VARIANT * NumberOfColumns = &vtMissing,
        VARIANT * AccentedLetters = &vtMissing );
    FieldPtr MarkEntry (
        struct Range * Range,
        VARIANT * Entry = &vtMissing,
        VARIANT * EntryAutoText = &vtMissing,
        VARIANT * CrossReference = &vtMissing,
        VARIANT * CrossReferenceAutoText = &vtMissing,
        VARIANT * BookmarkName = &vtMissing,
        VARIANT * Bold = &vtMissing,
        VARIANT * Italic = &vtMissing,
        VARIANT * Reading = &vtMissing );
    HRESULT MarkAllEntries (
        struct Range * Range,
        VARIANT * Entry = &vtMissing,
        VARIANT * EntryAutoText = &vtMissing,
        VARIANT * CrossReference = &vtMissing,
        VARIANT * CrossReferenceAutoText = &vtMissing,
        VARIANT * BookmarkName = &vtMissing,
        VARIANT * Bold = &vtMissing,
        VARIANT * Italic = &vtMissing );
    HRESULT AutoMarkEntries (
        _bstr_t ConcordanceFileName );
    IndexPtr Add (
        struct Range * Range,
        VARIANT * HeadingSeparator = &vtMissing,
        VARIANT * RightAlignPageNumbers = &vtMissing,
        VARIANT * Type = &vtMissing,
        VARIANT * NumberOfColumns = &vtMissing,
        VARIANT * AccentedLetters = &vtMissing,
        VARIANT * SortBy = &vtMissing,
        VARIANT * IndexLanguage = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Format (
        enum WdIndexFormat * prop ) = 0;
    virtual HRESULT __stdcall put_Format (
        enum WdIndexFormat prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Index * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddOld (
        struct Range * Range,
        VARIANT * HeadingSeparator,
        VARIANT * RightAlignPageNumbers,
        VARIANT * Type,
        VARIANT * NumberOfColumns,
        VARIANT * AccentedLetters,
        struct Index * * prop ) = 0;
    virtual HRESULT __stdcall raw_MarkEntry (
        struct Range * Range,
        VARIANT * Entry,
        VARIANT * EntryAutoText,
        VARIANT * CrossReference,
        VARIANT * CrossReferenceAutoText,
        VARIANT * BookmarkName,
        VARIANT * Bold,
        VARIANT * Italic,
        VARIANT * Reading,
        struct Field * * prop ) = 0;
    virtual HRESULT __stdcall raw_MarkAllEntries (
        struct Range * Range,
        VARIANT * Entry = &vtMissing,
        VARIANT * EntryAutoText = &vtMissing,
        VARIANT * CrossReference = &vtMissing,
        VARIANT * CrossReferenceAutoText = &vtMissing,
        VARIANT * BookmarkName = &vtMissing,
        VARIANT * Bold = &vtMissing,
        VARIANT * Italic = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_AutoMarkEntries (
        BSTR ConcordanceFileName ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct Range * Range,
        VARIANT * HeadingSeparator,
        VARIANT * RightAlignPageNumbers,
        VARIANT * Type,
        VARIANT * NumberOfColumns,
        VARIANT * AccentedLetters,
        VARIANT * SortBy,
        VARIANT * IndexLanguage,
        struct Index * * prop ) = 0;
};

struct __declspec(uuid("0002097d-0000-0000-c000-000000000046"))
Index : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeadingSeparator,put=PutHeadingSeparator))
    enum WdHeadingSeparator HeadingSeparator;
    __declspec(property(get=GetRightAlignPageNumbers,put=PutRightAlignPageNumbers))
    VARIANT_BOOL RightAlignPageNumbers;
    __declspec(property(get=GetType,put=PutType))
    enum WdIndexType Type;
    __declspec(property(get=GetNumberOfColumns,put=PutNumberOfColumns))
    long NumberOfColumns;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetTabLeader,put=PutTabLeader))
    enum WdTabLeader TabLeader;
    __declspec(property(get=GetAccentedLetters,put=PutAccentedLetters))
    VARIANT_BOOL AccentedLetters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSortBy,put=PutSortBy))
    enum WdIndexSortBy SortBy;
    __declspec(property(get=GetFilter,put=PutFilter))
    enum WdIndexFilter Filter;
    __declspec(property(get=GetIndexLanguage,put=PutIndexLanguage))
    enum WdLanguageID IndexLanguage;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdHeadingSeparator GetHeadingSeparator ( );
    void PutHeadingSeparator (
        enum WdHeadingSeparator prop );
    VARIANT_BOOL GetRightAlignPageNumbers ( );
    void PutRightAlignPageNumbers (
        VARIANT_BOOL prop );
    enum WdIndexType GetType ( );
    void PutType (
        enum WdIndexType prop );
    long GetNumberOfColumns ( );
    void PutNumberOfColumns (
        long prop );
    RangePtr GetRange ( );
    enum WdTabLeader GetTabLeader ( );
    void PutTabLeader (
        enum WdTabLeader prop );
    VARIANT_BOOL GetAccentedLetters ( );
    void PutAccentedLetters (
        VARIANT_BOOL prop );
    enum WdIndexSortBy GetSortBy ( );
    void PutSortBy (
        enum WdIndexSortBy prop );
    enum WdIndexFilter GetFilter ( );
    void PutFilter (
        enum WdIndexFilter prop );
    HRESULT Delete ( );
    HRESULT Update ( );
    enum WdLanguageID GetIndexLanguage ( );
    void PutIndexLanguage (
        enum WdLanguageID prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_HeadingSeparator (
        enum WdHeadingSeparator * prop ) = 0;
    virtual HRESULT __stdcall put_HeadingSeparator (
        enum WdHeadingSeparator prop ) = 0;
    virtual HRESULT __stdcall get_RightAlignPageNumbers (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_RightAlignPageNumbers (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdIndexType * prop ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum WdIndexType prop ) = 0;
    virtual HRESULT __stdcall get_NumberOfColumns (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_NumberOfColumns (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_TabLeader (
        enum WdTabLeader * prop ) = 0;
    virtual HRESULT __stdcall put_TabLeader (
        enum WdTabLeader prop ) = 0;
    virtual HRESULT __stdcall get_AccentedLetters (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AccentedLetters (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SortBy (
        enum WdIndexSortBy * prop ) = 0;
    virtual HRESULT __stdcall put_SortBy (
        enum WdIndexSortBy prop ) = 0;
    virtual HRESULT __stdcall get_Filter (
        enum WdIndexFilter * prop ) = 0;
    virtual HRESULT __stdcall put_Filter (
        enum WdIndexFilter prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
    virtual HRESULT __stdcall get_IndexLanguage (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_IndexLanguage (
        enum WdLanguageID prop ) = 0;
};

struct __declspec(uuid("0002097e-0000-0000-c000-000000000046"))
AddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstalled,put=PutInstalled))
    VARIANT_BOOL Installed;
    __declspec(property(get=GetCompiled))
    VARIANT_BOOL Compiled;
    __declspec(property(get=GetAutoload))
    VARIANT_BOOL Autoload;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    long GetIndex ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetInstalled ( );
    void PutInstalled (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetCompiled ( );
    VARIANT_BOOL GetAutoload ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Installed (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Installed (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Compiled (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Autoload (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002097f-0000-0000-c000-000000000046"))
AddIns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    AddInPtr Item (
        VARIANT * Index );
    AddInPtr Add (
        _bstr_t FileName,
        VARIANT * Install = &vtMissing );
    HRESULT Unload (
        VARIANT_BOOL RemoveFromList );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct AddIn * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR FileName,
        VARIANT * Install,
        struct AddIn * * prop ) = 0;
    virtual HRESULT __stdcall raw_Unload (
        VARIANT_BOOL RemoveFromList ) = 0;
};

struct __declspec(uuid("00020980-0000-0000-c000-000000000046"))
Revisions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    RevisionPtr Item (
        long Index );
    HRESULT AcceptAll ( );
    HRESULT RejectAll ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Revision * * prop ) = 0;
    virtual HRESULT __stdcall raw_AcceptAll ( ) = 0;
    virtual HRESULT __stdcall raw_RejectAll ( ) = 0;
};

struct __declspec(uuid("00020981-0000-0000-c000-000000000046"))
Revision : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAuthor))
    _bstr_t Author;
    __declspec(property(get=GetDate))
    DATE Date;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetType))
    enum WdRevisionType Type;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    DATE GetDate ( );
    RangePtr GetRange ( );
    enum WdRevisionType GetType ( );
    long GetIndex ( );
    HRESULT Accept ( );
    HRESULT Reject ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Author (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Date (
        DATE * prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdRevisionType * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Accept ( ) = 0;
    virtual HRESULT __stdcall raw_Reject ( ) = 0;
};

struct __declspec(uuid("00020982-0000-0000-c000-000000000046"))
Task : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum WdWindowState WindowState;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    long GetLeft ( );
    void PutLeft (
        long prop );
    long GetTop ( );
    void PutTop (
        long prop );
    long GetWidth ( );
    void PutWidth (
        long prop );
    long GetHeight ( );
    void PutHeight (
        long prop );
    enum WdWindowState GetWindowState ( );
    void PutWindowState (
        enum WdWindowState prop );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL prop );
    HRESULT Activate (
        VARIANT * Wait = &vtMissing );
    HRESULT Close ( );
    HRESULT Move (
        long Left,
        long Top );
    HRESULT Resize (
        long Width,
        long Height );
    HRESULT SendWindowMessage (
        long Message,
        long wParam,
        long lParam );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Left (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        long prop ) = 0;
    virtual HRESULT __stdcall get_WindowState (
        enum WdWindowState * prop ) = 0;
    virtual HRESULT __stdcall put_WindowState (
        enum WdWindowState prop ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_Activate (
        VARIANT * Wait = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Close ( ) = 0;
    virtual HRESULT __stdcall raw_Move (
        long Left,
        long Top ) = 0;
    virtual HRESULT __stdcall raw_Resize (
        long Width,
        long Height ) = 0;
    virtual HRESULT __stdcall raw_SendWindowMessage (
        long Message,
        long wParam,
        long lParam ) = 0;
};

struct __declspec(uuid("00020983-0000-0000-c000-000000000046"))
Tasks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    TaskPtr Item (
        VARIANT * Index );
    VARIANT_BOOL Exists (
        _bstr_t Name );
    HRESULT ExitWindows ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Task * * prop ) = 0;
    virtual HRESULT __stdcall raw_Exists (
        BSTR Name,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_ExitWindows ( ) = 0;
};

struct __declspec(uuid("00020984-0000-0000-c000-000000000046"))
HeadersFooters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    HeaderFooterPtr Item (
        enum WdHeaderFooterIndex Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        enum WdHeaderFooterIndex Index,
        struct HeaderFooter * * prop ) = 0;
};

struct __declspec(uuid("00020985-0000-0000-c000-000000000046"))
HeaderFooter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetIndex))
    enum WdHeaderFooterIndex Index;
    __declspec(property(get=GetIsHeader))
    VARIANT_BOOL IsHeader;
    __declspec(property(get=GetExists,put=PutExists))
    VARIANT_BOOL Exists;
    __declspec(property(get=GetPageNumbers))
    PageNumbersPtr PageNumbers;
    __declspec(property(get=GetLinkToPrevious,put=PutLinkToPrevious))
    VARIANT_BOOL LinkToPrevious;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetRange ( );
    enum WdHeaderFooterIndex GetIndex ( );
    VARIANT_BOOL GetIsHeader ( );
    VARIANT_BOOL GetExists ( );
    void PutExists (
        VARIANT_BOOL prop );
    PageNumbersPtr GetPageNumbers ( );
    VARIANT_BOOL GetLinkToPrevious ( );
    void PutLinkToPrevious (
        VARIANT_BOOL prop );
    ShapesPtr GetShapes ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        enum WdHeaderFooterIndex * prop ) = 0;
    virtual HRESULT __stdcall get_IsHeader (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Exists (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Exists (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PageNumbers (
        struct PageNumbers * * prop ) = 0;
    virtual HRESULT __stdcall get_LinkToPrevious (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_LinkToPrevious (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Shapes (
        struct Shapes * * prop ) = 0;
};

struct __declspec(uuid("00020986-0000-0000-c000-000000000046"))
PageNumbers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetNumberStyle,put=PutNumberStyle))
    enum WdPageNumberStyle NumberStyle;
    __declspec(property(get=GetIncludeChapterNumber,put=PutIncludeChapterNumber))
    VARIANT_BOOL IncludeChapterNumber;
    __declspec(property(get=GetHeadingLevelForChapter,put=PutHeadingLevelForChapter))
    long HeadingLevelForChapter;
    __declspec(property(get=GetChapterPageSeparator,put=PutChapterPageSeparator))
    enum WdSeparatorType ChapterPageSeparator;
    __declspec(property(get=GetRestartNumberingAtSection,put=PutRestartNumberingAtSection))
    VARIANT_BOOL RestartNumberingAtSection;
    __declspec(property(get=GetStartingNumber,put=PutStartingNumber))
    long StartingNumber;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShowFirstPageNumber,put=PutShowFirstPageNumber))
    VARIANT_BOOL ShowFirstPageNumber;
    __declspec(property(get=GetDoubleQuote,put=PutDoubleQuote))
    VARIANT_BOOL DoubleQuote;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    enum WdPageNumberStyle GetNumberStyle ( );
    void PutNumberStyle (
        enum WdPageNumberStyle prop );
    VARIANT_BOOL GetIncludeChapterNumber ( );
    void PutIncludeChapterNumber (
        VARIANT_BOOL prop );
    long GetHeadingLevelForChapter ( );
    void PutHeadingLevelForChapter (
        long prop );
    enum WdSeparatorType GetChapterPageSeparator ( );
    void PutChapterPageSeparator (
        enum WdSeparatorType prop );
    VARIANT_BOOL GetRestartNumberingAtSection ( );
    void PutRestartNumberingAtSection (
        VARIANT_BOOL prop );
    long GetStartingNumber ( );
    void PutStartingNumber (
        long prop );
    VARIANT_BOOL GetShowFirstPageNumber ( );
    void PutShowFirstPageNumber (
        VARIANT_BOOL prop );
    PageNumberPtr Item (
        long Index );
    PageNumberPtr Add (
        VARIANT * PageNumberAlignment = &vtMissing,
        VARIANT * FirstPage = &vtMissing );
    VARIANT_BOOL GetDoubleQuote ( );
    void PutDoubleQuote (
        VARIANT_BOOL prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_NumberStyle (
        enum WdPageNumberStyle * prop ) = 0;
    virtual HRESULT __stdcall put_NumberStyle (
        enum WdPageNumberStyle prop ) = 0;
    virtual HRESULT __stdcall get_IncludeChapterNumber (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IncludeChapterNumber (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HeadingLevelForChapter (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_HeadingLevelForChapter (
        long prop ) = 0;
    virtual HRESULT __stdcall get_ChapterPageSeparator (
        enum WdSeparatorType * prop ) = 0;
    virtual HRESULT __stdcall put_ChapterPageSeparator (
        enum WdSeparatorType prop ) = 0;
    virtual HRESULT __stdcall get_RestartNumberingAtSection (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_RestartNumberingAtSection (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_StartingNumber (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_StartingNumber (
        long prop ) = 0;
    virtual HRESULT __stdcall get_ShowFirstPageNumber (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowFirstPageNumber (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct PageNumber * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * PageNumberAlignment,
        VARIANT * FirstPage,
        struct PageNumber * * prop ) = 0;
    virtual HRESULT __stdcall get_DoubleQuote (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DoubleQuote (
        VARIANT_BOOL prop ) = 0;
};

struct __declspec(uuid("00020987-0000-0000-c000-000000000046"))
PageNumber : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum WdPageNumberAlignment Alignment;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetIndex ( );
    enum WdPageNumberAlignment GetAlignment ( );
    void PutAlignment (
        enum WdPageNumberAlignment prop );
    HRESULT Select ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum WdPageNumberAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum WdPageNumberAlignment prop ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Copy ( ) = 0;
    virtual HRESULT __stdcall raw_Cut ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00020988-0000-0000-c000-000000000046"))
Subdocuments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetExpanded,put=PutExpanded))
    VARIANT_BOOL Expanded;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL GetExpanded ( );
    void PutExpanded (
        VARIANT_BOOL prop );
    SubdocumentPtr Item (
        long Index );
    SubdocumentPtr AddFromFile (
        VARIANT * Name,
        VARIANT * ConfirmConversions = &vtMissing,
        VARIANT * ReadOnly = &vtMissing,
        VARIANT * PasswordDocument = &vtMissing,
        VARIANT * PasswordTemplate = &vtMissing,
        VARIANT * Revert = &vtMissing,
        VARIANT * WritePasswordDocument = &vtMissing,
        VARIANT * WritePasswordTemplate = &vtMissing );
    SubdocumentPtr AddFromRange (
        struct Range * Range );
    HRESULT Merge (
        VARIANT * FirstSubdocument = &vtMissing,
        VARIANT * LastSubdocument = &vtMissing );
    HRESULT Delete ( );
    HRESULT Select ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Expanded (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Expanded (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Subdocument * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddFromFile (
        VARIANT * Name,
        VARIANT * ConfirmConversions,
        VARIANT * ReadOnly,
        VARIANT * PasswordDocument,
        VARIANT * PasswordTemplate,
        VARIANT * Revert,
        VARIANT * WritePasswordDocument,
        VARIANT * WritePasswordTemplate,
        struct Subdocument * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddFromRange (
        struct Range * Range,
        struct Subdocument * * prop ) = 0;
    virtual HRESULT __stdcall raw_Merge (
        VARIANT * FirstSubdocument = &vtMissing,
        VARIANT * LastSubdocument = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
};

struct __declspec(uuid("00020989-0000-0000-c000-000000000046"))
Subdocument : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetHasFile))
    VARIANT_BOOL HasFile;
    __declspec(property(get=GetLevel))
    long Level;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL prop );
    RangePtr GetRange ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetHasFile ( );
    long GetLevel ( );
    HRESULT Delete ( );
    HRESULT Split (
        struct Range * Range );
    _DocumentPtr Open ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_HasFile (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Level (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Split (
        struct Range * Range ) = 0;
    virtual HRESULT __stdcall raw_Open (
        struct _Document * * prop ) = 0;
};

struct __declspec(uuid("0002098a-0000-0000-c000-000000000046"))
HeadingStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    HeadingStylePtr Item (
        long Index );
    HeadingStylePtr Add (
        VARIANT * Style,
        short Level );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct HeadingStyle * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * Style,
        short Level,
        struct HeadingStyle * * prop ) = 0;
};

struct __declspec(uuid("0002098b-0000-0000-c000-000000000046"))
HeadingStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLevel,put=PutLevel))
    short Level;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetStyle ( );
    void PutStyle (
        VARIANT * prop );
    short GetLevel ( );
    void PutLevel (
        short prop );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_Style (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Level (
        short * prop ) = 0;
    virtual HRESULT __stdcall put_Level (
        short prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002098c-0000-0000-c000-000000000046"))
StoryRanges : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr Item (
        enum WdStoryType Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        enum WdStoryType Index,
        struct Range * * prop ) = 0;
};

struct __declspec(uuid("0002098d-0000-0000-c000-000000000046"))
ListLevel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetTrailingCharacter,put=PutTrailingCharacter))
    enum WdTrailingCharacter TrailingCharacter;
    __declspec(property(get=GetNumberStyle,put=PutNumberStyle))
    enum WdListNumberStyle NumberStyle;
    __declspec(property(get=GetNumberPosition,put=PutNumberPosition))
    float NumberPosition;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum WdListLevelAlignment Alignment;
    __declspec(property(get=GetTextPosition,put=PutTextPosition))
    float TextPosition;
    __declspec(property(get=GetTabPosition,put=PutTabPosition))
    float TabPosition;
    __declspec(property(get=GetResetOnHigherOld,put=PutResetOnHigherOld))
    VARIANT_BOOL ResetOnHigherOld;
    __declspec(property(get=GetStartAt,put=PutStartAt))
    long StartAt;
    __declspec(property(get=GetLinkedStyle,put=PutLinkedStyle))
    _bstr_t LinkedStyle;
    __declspec(property(get=GetFont,put=PutFont))
    _FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetResetOnHigher,put=PutResetOnHigher))
    long ResetOnHigher;

    //
    // Wrapper methods for error-handling
    //

    long GetIndex ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t prop );
    enum WdTrailingCharacter GetTrailingCharacter ( );
    void PutTrailingCharacter (
        enum WdTrailingCharacter prop );
    enum WdListNumberStyle GetNumberStyle ( );
    void PutNumberStyle (
        enum WdListNumberStyle prop );
    float GetNumberPosition ( );
    void PutNumberPosition (
        float prop );
    enum WdListLevelAlignment GetAlignment ( );
    void PutAlignment (
        enum WdListLevelAlignment prop );
    float GetTextPosition ( );
    void PutTextPosition (
        float prop );
    float GetTabPosition ( );
    void PutTabPosition (
        float prop );
    VARIANT_BOOL GetResetOnHigherOld ( );
    void PutResetOnHigherOld (
        VARIANT_BOOL prop );
    long GetStartAt ( );
    void PutStartAt (
        long prop );
    _bstr_t GetLinkedStyle ( );
    void PutLinkedStyle (
        _bstr_t prop );
    _FontPtr GetFont ( );
    void PutFont (
        struct _Font * prop );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetResetOnHigher ( );
    void PutResetOnHigher (
        long prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_NumberFormat (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_NumberFormat (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_TrailingCharacter (
        enum WdTrailingCharacter * prop ) = 0;
    virtual HRESULT __stdcall put_TrailingCharacter (
        enum WdTrailingCharacter prop ) = 0;
    virtual HRESULT __stdcall get_NumberStyle (
        enum WdListNumberStyle * prop ) = 0;
    virtual HRESULT __stdcall put_NumberStyle (
        enum WdListNumberStyle prop ) = 0;
    virtual HRESULT __stdcall get_NumberPosition (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_NumberPosition (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum WdListLevelAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum WdListLevelAlignment prop ) = 0;
    virtual HRESULT __stdcall get_TextPosition (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_TextPosition (
        float prop ) = 0;
    virtual HRESULT __stdcall get_TabPosition (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_TabPosition (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ResetOnHigherOld (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ResetOnHigherOld (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_StartAt (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_StartAt (
        long prop ) = 0;
    virtual HRESULT __stdcall get_LinkedStyle (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_LinkedStyle (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct _Font * * prop ) = 0;
    virtual HRESULT __stdcall put_Font (
        struct _Font * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_ResetOnHigher (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_ResetOnHigher (
        long prop ) = 0;
};

struct __declspec(uuid("0002098e-0000-0000-c000-000000000046"))
ListLevels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ListLevelPtr Item (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct ListLevel * * prop ) = 0;
};

struct __declspec(uuid("0002098f-0000-0000-c000-000000000046"))
ListTemplate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOutlineNumbered,put=PutOutlineNumbered))
    VARIANT_BOOL OutlineNumbered;
    __declspec(property(get=GetListLevels))
    ListLevelsPtr ListLevels;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetOutlineNumbered ( );
    void PutOutlineNumbered (
        VARIANT_BOOL prop );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t prop );
    ListLevelsPtr GetListLevels ( );
    ListTemplatePtr Convert (
        VARIANT * Level = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_OutlineNumbered (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_OutlineNumbered (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_ListLevels (
        struct ListLevels * * prop ) = 0;
    virtual HRESULT __stdcall raw_Convert (
        VARIANT * Level,
        struct ListTemplate * * prop ) = 0;
};

struct __declspec(uuid("00020990-0000-0000-c000-000000000046"))
ListTemplates : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ListTemplatePtr Item (
        VARIANT * Index );
    ListTemplatePtr Add (
        VARIANT * OutlineNumbered = &vtMissing,
        VARIANT * Name = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct ListTemplate * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT * OutlineNumbered,
        VARIANT * Name,
        struct ListTemplate * * prop ) = 0;
};

struct __declspec(uuid("00020991-0000-0000-c000-000000000046"))
ListParagraphs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ParagraphPtr Item (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Paragraph * * prop ) = 0;
};

struct __declspec(uuid("00020992-0000-0000-c000-000000000046"))
List : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetListParagraphs))
    ListParagraphsPtr ListParagraphs;
    __declspec(property(get=GetSingleListTemplate))
    VARIANT_BOOL SingleListTemplate;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    RangePtr GetRange ( );
    ListParagraphsPtr GetListParagraphs ( );
    VARIANT_BOOL GetSingleListTemplate ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT ConvertNumbersToText (
        VARIANT * NumberType = &vtMissing );
    HRESULT RemoveNumbers (
        VARIANT * NumberType = &vtMissing );
    long CountNumberedItems (
        VARIANT * NumberType = &vtMissing,
        VARIANT * Level = &vtMissing );
    HRESULT ApplyListTemplateOld (
        struct ListTemplate * ListTemplate,
        VARIANT * ContinuePreviousList = &vtMissing );
    enum WdContinue CanContinuePreviousList (
        struct ListTemplate * ListTemplate );
    HRESULT ApplyListTemplate (
        struct ListTemplate * ListTemplate,
        VARIANT * ContinuePreviousList = &vtMissing,
        VARIANT * DefaultListBehavior = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_ListParagraphs (
        struct ListParagraphs * * prop ) = 0;
    virtual HRESULT __stdcall get_SingleListTemplate (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_ConvertNumbersToText (
        VARIANT * NumberType = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_RemoveNumbers (
        VARIANT * NumberType = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_CountNumberedItems (
        VARIANT * NumberType,
        VARIANT * Level,
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_ApplyListTemplateOld (
        struct ListTemplate * ListTemplate,
        VARIANT * ContinuePreviousList = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_CanContinuePreviousList (
        struct ListTemplate * ListTemplate,
        enum WdContinue * prop ) = 0;
    virtual HRESULT __stdcall raw_ApplyListTemplate (
        struct ListTemplate * ListTemplate,
        VARIANT * ContinuePreviousList = &vtMissing,
        VARIANT * DefaultListBehavior = &vtMissing ) = 0;
};

struct __declspec(uuid("00020993-0000-0000-c000-000000000046"))
Lists : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ListPtr Item (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct List * * prop ) = 0;
};

struct __declspec(uuid("00020994-0000-0000-c000-000000000046"))
ListGallery : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetListTemplates))
    ListTemplatesPtr ListTemplates;
    __declspec(property(get=GetModified))
    VARIANT_BOOL Modified[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    ListTemplatesPtr GetListTemplates ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetModified (
        long Index );
    HRESULT Reset (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ListTemplates (
        struct ListTemplates * * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Modified (
        long Index,
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_Reset (
        long Index ) = 0;
};

struct __declspec(uuid("00020995-0000-0000-c000-000000000046"))
ListGalleries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ListGalleryPtr Item (
        enum WdListGalleryType Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        enum WdListGalleryType Index,
        struct ListGallery * * prop ) = 0;
};

struct __declspec(uuid("00020996-0000-0000-c000-000000000046"))
KeyBindings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetContext))
    IDispatchPtr Context;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IDispatchPtr GetContext ( );
    KeyBindingPtr Item (
        long Index );
    KeyBindingPtr Add (
        enum WdKeyCategory KeyCategory,
        _bstr_t Command,
        long KeyCode,
        VARIANT * KeyCode2 = &vtMissing,
        VARIANT * CommandParameter = &vtMissing );
    HRESULT ClearAll ( );
    KeyBindingPtr Key (
        long KeyCode,
        VARIANT * KeyCode2 = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Context (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct KeyBinding * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        enum WdKeyCategory KeyCategory,
        BSTR Command,
        long KeyCode,
        VARIANT * KeyCode2,
        VARIANT * CommandParameter,
        struct KeyBinding * * prop ) = 0;
    virtual HRESULT __stdcall raw_ClearAll ( ) = 0;
    virtual HRESULT __stdcall raw_Key (
        long KeyCode,
        VARIANT * KeyCode2,
        struct KeyBinding * * prop ) = 0;
};

struct __declspec(uuid("00020997-0000-0000-c000-000000000046"))
KeysBoundTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetKeyCategory))
    enum WdKeyCategory KeyCategory;
    __declspec(property(get=GetCommand))
    _bstr_t Command;
    __declspec(property(get=GetCommandParameter))
    _bstr_t CommandParameter;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetContext))
    IDispatchPtr Context;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    enum WdKeyCategory GetKeyCategory ( );
    _bstr_t GetCommand ( );
    _bstr_t GetCommandParameter ( );
    IDispatchPtr GetContext ( );
    KeyBindingPtr Item (
        long Index );
    KeyBindingPtr Key (
        long KeyCode,
        VARIANT * KeyCode2 = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_KeyCategory (
        enum WdKeyCategory * prop ) = 0;
    virtual HRESULT __stdcall get_Command (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_CommandParameter (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Context (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct KeyBinding * * prop ) = 0;
    virtual HRESULT __stdcall raw_Key (
        long KeyCode,
        VARIANT * KeyCode2,
        struct KeyBinding * * prop ) = 0;
};

struct __declspec(uuid("00020998-0000-0000-c000-000000000046"))
KeyBinding : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCommand))
    _bstr_t Command;
    __declspec(property(get=GetKeyString))
    _bstr_t KeyString;
    __declspec(property(get=GetProtected))
    VARIANT_BOOL Protected;
    __declspec(property(get=GetKeyCategory))
    enum WdKeyCategory KeyCategory;
    __declspec(property(get=GetKeyCode))
    long KeyCode;
    __declspec(property(get=GetKeyCode2))
    long KeyCode2;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCommandParameter))
    _bstr_t CommandParameter;
    __declspec(property(get=GetContext))
    IDispatchPtr Context;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCommand ( );
    _bstr_t GetKeyString ( );
    VARIANT_BOOL GetProtected ( );
    enum WdKeyCategory GetKeyCategory ( );
    long GetKeyCode ( );
    long GetKeyCode2 ( );
    _bstr_t GetCommandParameter ( );
    IDispatchPtr GetContext ( );
    HRESULT Clear ( );
    HRESULT Disable ( );
    HRESULT Execute ( );
    HRESULT Rebind (
        enum WdKeyCategory KeyCategory,
        _bstr_t Command,
        VARIANT * CommandParameter = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Command (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_KeyString (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Protected (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_KeyCategory (
        enum WdKeyCategory * prop ) = 0;
    virtual HRESULT __stdcall get_KeyCode (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_KeyCode2 (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_CommandParameter (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Context (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Clear ( ) = 0;
    virtual HRESULT __stdcall raw_Disable ( ) = 0;
    virtual HRESULT __stdcall raw_Execute ( ) = 0;
    virtual HRESULT __stdcall raw_Rebind (
        enum WdKeyCategory KeyCategory,
        BSTR Command,
        VARIANT * CommandParameter = &vtMissing ) = 0;
};

struct __declspec(uuid("00020999-0000-0000-c000-000000000046"))
FileConverter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFormatName))
    _bstr_t FormatName;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetSaveFormat))
    long SaveFormat;
    __declspec(property(get=GetOpenFormat))
    long OpenFormat;
    __declspec(property(get=GetCanSave))
    VARIANT_BOOL CanSave;
    __declspec(property(get=GetCanOpen))
    VARIANT_BOOL CanOpen;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetExtensions))
    _bstr_t Extensions;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetFormatName ( );
    _bstr_t GetClassName ( );
    long GetSaveFormat ( );
    long GetOpenFormat ( );
    VARIANT_BOOL GetCanSave ( );
    VARIANT_BOOL GetCanOpen ( );
    _bstr_t GetPath ( );
    _bstr_t GetName ( );
    _bstr_t GetExtensions ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_FormatName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_ClassName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_SaveFormat (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_OpenFormat (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_CanSave (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_CanOpen (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Extensions (
        BSTR * prop ) = 0;
};

struct __declspec(uuid("0002099a-0000-0000-c000-000000000046"))
FileConverters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetConvertMacWordChevrons,put=PutConvertMacWordChevrons))
    enum WdChevronConvertRule ConvertMacWordChevrons;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    enum WdChevronConvertRule GetConvertMacWordChevrons ( );
    void PutConvertMacWordChevrons (
        enum WdChevronConvertRule prop );
    FileConverterPtr Item (
        VARIANT * Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_ConvertMacWordChevrons (
        enum WdChevronConvertRule * prop ) = 0;
    virtual HRESULT __stdcall put_ConvertMacWordChevrons (
        enum WdChevronConvertRule prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct FileConverter * * prop ) = 0;
};

struct __declspec(uuid("0002099b-0000-0000-c000-000000000046"))
SynonymInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWord))
    _bstr_t Word;
    __declspec(property(get=GetFound))
    VARIANT_BOOL Found;
    __declspec(property(get=GetMeaningCount))
    long MeaningCount;
    __declspec(property(get=GetMeaningList))
    _variant_t MeaningList;
    __declspec(property(get=GetPartOfSpeechList))
    _variant_t PartOfSpeechList;
    __declspec(property(get=GetSynonymList))
    _variant_t SynonymList[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAntonymList))
    _variant_t AntonymList;
    __declspec(property(get=GetRelatedExpressionList))
    _variant_t RelatedExpressionList;
    __declspec(property(get=GetRelatedWordList))
    _variant_t RelatedWordList;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetWord ( );
    VARIANT_BOOL GetFound ( );
    long GetMeaningCount ( );
    _variant_t GetMeaningList ( );
    _variant_t GetPartOfSpeechList ( );
    _variant_t GetSynonymList (
        VARIANT * Meaning );
    _variant_t GetAntonymList ( );
    _variant_t GetRelatedExpressionList ( );
    _variant_t GetRelatedWordList ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Word (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Found (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_MeaningCount (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_MeaningList (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_PartOfSpeechList (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_SynonymList (
        VARIANT * Meaning,
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_AntonymList (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_RelatedExpressionList (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_RelatedWordList (
        VARIANT * prop ) = 0;
};

struct __declspec(uuid("0002099c-0000-0000-c000-000000000046"))
Hyperlinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    HyperlinkPtr Item (
        VARIANT * Index );
    HyperlinkPtr _Add (
        IDispatch * Anchor,
        VARIANT * Address = &vtMissing,
        VARIANT * SubAddress = &vtMissing );
    HyperlinkPtr Add (
        IDispatch * Anchor,
        VARIANT * Address = &vtMissing,
        VARIANT * SubAddress = &vtMissing,
        VARIANT * ScreenTip = &vtMissing,
        VARIANT * TextToDisplay = &vtMissing,
        VARIANT * Target = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Hyperlink * * prop ) = 0;
    virtual HRESULT __stdcall raw__Add (
        IDispatch * Anchor,
        VARIANT * Address,
        VARIANT * SubAddress,
        struct Hyperlink * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        IDispatch * Anchor,
        VARIANT * Address,
        VARIANT * SubAddress,
        VARIANT * ScreenTip,
        VARIANT * TextToDisplay,
        VARIANT * Target,
        struct Hyperlink * * prop ) = 0;
};

struct __declspec(uuid("0002099d-0000-0000-c000-000000000046"))
Hyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAddressOld))
    _bstr_t AddressOld;
    __declspec(property(get=GetType))
    enum Office::MsoHyperlinkType Type;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetSubAddressOld))
    _bstr_t SubAddressOld;
    __declspec(property(get=GetExtraInfoRequired))
    VARIANT_BOOL ExtraInfoRequired;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetSubAddress,put=PutSubAddress))
    _bstr_t SubAddress;
    __declspec(property(get=GetEmailSubject,put=PutEmailSubject))
    _bstr_t EmailSubject;
    __declspec(property(get=GetScreenTip,put=PutScreenTip))
    _bstr_t ScreenTip;
    __declspec(property(get=GetTextToDisplay,put=PutTextToDisplay))
    _bstr_t TextToDisplay;
    __declspec(property(get=GetTarget,put=PutTarget))
    _bstr_t Target;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetAddressOld ( );
    enum Office::MsoHyperlinkType GetType ( );
    RangePtr GetRange ( );
    ShapePtr GetShape ( );
    _bstr_t GetSubAddressOld ( );
    VARIANT_BOOL GetExtraInfoRequired ( );
    HRESULT Delete ( );
    HRESULT Follow (
        VARIANT * NewWindow = &vtMissing,
        VARIANT * AddHistory = &vtMissing,
        VARIANT * ExtraInfo = &vtMissing,
        VARIANT * Method = &vtMissing,
        VARIANT * HeaderInfo = &vtMissing );
    HRESULT AddToFavorites ( );
    HRESULT CreateNewDocument (
        _bstr_t FileName,
        VARIANT_BOOL EditNow,
        VARIANT_BOOL Overwrite );
    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t prop );
    _bstr_t GetSubAddress ( );
    void PutSubAddress (
        _bstr_t prop );
    _bstr_t GetEmailSubject ( );
    void PutEmailSubject (
        _bstr_t prop );
    _bstr_t GetScreenTip ( );
    void PutScreenTip (
        _bstr_t prop );
    _bstr_t GetTextToDisplay ( );
    void PutTextToDisplay (
        _bstr_t prop );
    _bstr_t GetTarget ( );
    void PutTarget (
        _bstr_t prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_AddressOld (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoHyperlinkType * prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Shape (
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall get_SubAddressOld (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_ExtraInfoRequired (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Follow (
        VARIANT * NewWindow = &vtMissing,
        VARIANT * AddHistory = &vtMissing,
        VARIANT * ExtraInfo = &vtMissing,
        VARIANT * Method = &vtMissing,
        VARIANT * HeaderInfo = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
    virtual HRESULT __stdcall raw_CreateNewDocument (
        BSTR FileName,
        VARIANT_BOOL EditNow,
        VARIANT_BOOL Overwrite ) = 0;
    virtual HRESULT __stdcall get_Address (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Address (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_SubAddress (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_SubAddress (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_EmailSubject (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_EmailSubject (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_ScreenTip (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ScreenTip (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_TextToDisplay (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_TextToDisplay (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Target (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Target (
        BSTR prop ) = 0;
};

struct __declspec(uuid("0002099f-0000-0000-c000-000000000046"))
Shapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr Item (
        VARIANT * Index );
    ShapePtr AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height,
        VARIANT * Anchor = &vtMissing );
    ShapePtr AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        VARIANT * SafeArrayOfPoints,
        VARIANT * Anchor = &vtMissing );
    ShapePtr AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height,
        VARIANT * Anchor = &vtMissing );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY,
        VARIANT * Anchor = &vtMissing );
    ShapePtr AddPicture (
        _bstr_t FileName,
        VARIANT * LinkToFile = &vtMissing,
        VARIANT * SaveWithDocument = &vtMissing,
        VARIANT * Left = &vtMissing,
        VARIANT * Top = &vtMissing,
        VARIANT * Width = &vtMissing,
        VARIANT * Height = &vtMissing,
        VARIANT * Anchor = &vtMissing );
    ShapePtr AddPolyline (
        VARIANT * SafeArrayOfPoints,
        VARIANT * Anchor = &vtMissing );
    ShapePtr AddShape (
        long Type,
        float Left,
        float Top,
        float Width,
        float Height,
        VARIANT * Anchor = &vtMissing );
    ShapePtr AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top,
        VARIANT * Anchor = &vtMissing );
    ShapePtr AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height,
        VARIANT * Anchor = &vtMissing );
    FreeformBuilderPtr BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr Range (
        VARIANT * Index );
    HRESULT SelectAll ( );
    ShapePtr AddOLEObject (
        VARIANT * ClassType = &vtMissing,
        VARIANT * FileName = &vtMissing,
        VARIANT * LinkToFile = &vtMissing,
        VARIANT * DisplayAsIcon = &vtMissing,
        VARIANT * IconFileName = &vtMissing,
        VARIANT * IconIndex = &vtMissing,
        VARIANT * IconLabel = &vtMissing,
        VARIANT * Left = &vtMissing,
        VARIANT * Top = &vtMissing,
        VARIANT * Width = &vtMissing,
        VARIANT * Height = &vtMissing,
        VARIANT * Anchor = &vtMissing );
    ShapePtr AddOLEControl (
        VARIANT * ClassType = &vtMissing,
        VARIANT * Left = &vtMissing,
        VARIANT * Top = &vtMissing,
        VARIANT * Width = &vtMissing,
        VARIANT * Height = &vtMissing,
        VARIANT * Anchor = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height,
        VARIANT * Anchor,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddCurve (
        VARIANT * SafeArrayOfPoints,
        VARIANT * Anchor,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height,
        VARIANT * Anchor,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY,
        VARIANT * Anchor,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddPicture (
        BSTR FileName,
        VARIANT * LinkToFile,
        VARIANT * SaveWithDocument,
        VARIANT * Left,
        VARIANT * Top,
        VARIANT * Width,
        VARIANT * Height,
        VARIANT * Anchor,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddPolyline (
        VARIANT * SafeArrayOfPoints,
        VARIANT * Anchor,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddShape (
        long Type,
        float Left,
        float Top,
        float Width,
        float Height,
        VARIANT * Anchor,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        BSTR Text,
        BSTR FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top,
        VARIANT * Anchor,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height,
        VARIANT * Anchor,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        struct FreeformBuilder * * prop ) = 0;
    virtual HRESULT __stdcall raw_Range (
        VARIANT * Index,
        struct ShapeRange * * prop ) = 0;
    virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
    virtual HRESULT __stdcall raw_AddOLEObject (
        VARIANT * ClassType,
        VARIANT * FileName,
        VARIANT * LinkToFile,
        VARIANT * DisplayAsIcon,
        VARIANT * IconFileName,
        VARIANT * IconIndex,
        VARIANT * IconLabel,
        VARIANT * Left,
        VARIANT * Top,
        VARIANT * Width,
        VARIANT * Height,
        VARIANT * Anchor,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddOLEControl (
        VARIANT * ClassType,
        VARIANT * Left,
        VARIANT * Top,
        VARIANT * Width,
        VARIANT * Height,
        VARIANT * Anchor,
        struct Shape * * prop ) = 0;
};

struct __declspec(uuid("000209b5-0000-0000-c000-000000000046"))
ShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetRelativeHorizontalPosition,put=PutRelativeHorizontalPosition))
    enum WdRelativeHorizontalPosition RelativeHorizontalPosition;
    __declspec(property(get=GetRelativeVerticalPosition,put=PutRelativeVerticalPosition))
    enum WdRelativeVerticalPosition RelativeVerticalPosition;
    __declspec(property(get=GetLockAnchor,put=PutLockAnchor))
    long LockAnchor;
    __declspec(property(get=GetWrapFormat))
    WrapFormatPtr WrapFormat;
    __declspec(property(get=GetAnchor))
    RangePtr Anchor;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    AdjustmentsPtr GetAdjustments ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType prop );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float prop );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float prop );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState prop );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t prop );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float prop );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    TextFramePtr GetTextFrame ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float prop );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState prop );
    float GetWidth ( );
    void PutWidth (
        float prop );
    long GetZOrderPosition ( );
    HyperlinkPtr GetHyperlink ( );
    enum WdRelativeHorizontalPosition GetRelativeHorizontalPosition ( );
    void PutRelativeHorizontalPosition (
        enum WdRelativeHorizontalPosition prop );
    enum WdRelativeVerticalPosition GetRelativeVerticalPosition ( );
    void PutRelativeVerticalPosition (
        enum WdRelativeVerticalPosition prop );
    long GetLockAnchor ( );
    void PutLockAnchor (
        long prop );
    WrapFormatPtr GetWrapFormat ( );
    RangePtr GetAnchor ( );
    ShapePtr Item (
        VARIANT * Index );
    HRESULT Align (
        enum Office::MsoAlignCmd Align,
        long RelativeTo );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Distribute (
        enum Office::MsoDistributeCmd Distribute,
        long RelativeTo );
    ShapeRangePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    ShapePtr Group ( );
    HRESULT PickUp ( );
    ShapePtr Regroup ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom Scale );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom Scale );
    HRESULT Select (
        VARIANT * Replace = &vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    FramePtr ConvertToFrame ( );
    InlineShapePtr ConvertToInlineShape ( );
    HRESULT Activate ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Adjustments (
        struct Adjustments * * prop ) = 0;
    virtual HRESULT __stdcall get_AutoShapeType (
        enum Office::MsoAutoShapeType * prop ) = 0;
    virtual HRESULT __stdcall put_AutoShapeType (
        enum Office::MsoAutoShapeType prop ) = 0;
    virtual HRESULT __stdcall get_Callout (
        struct CalloutFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_ConnectionSiteCount (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Connector (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall get_ConnectorFormat (
        struct ConnectorFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct FillFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_GroupItems (
        struct GroupShapes * * prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        float prop ) = 0;
    virtual HRESULT __stdcall get_HorizontalFlip (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall get_Left (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Left (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Line (
        struct LineFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_LockAspectRatio (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_LockAspectRatio (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Nodes (
        struct ShapeNodes * * prop ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        float prop ) = 0;
    virtual HRESULT __stdcall get_PictureFormat (
        struct PictureFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        struct ShadowFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_TextEffect (
        struct TextEffectFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_TextFrame (
        struct TextFrame * * prop ) = 0;
    virtual HRESULT __stdcall get_ThreeD (
        struct ThreeDFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Top (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Top (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoShapeType * prop ) = 0;
    virtual HRESULT __stdcall get_VerticalFlip (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall get_Vertices (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ZOrderPosition (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Hyperlink (
        struct Hyperlink * * prop ) = 0;
    virtual HRESULT __stdcall get_RelativeHorizontalPosition (
        enum WdRelativeHorizontalPosition * prop ) = 0;
    virtual HRESULT __stdcall put_RelativeHorizontalPosition (
        enum WdRelativeHorizontalPosition prop ) = 0;
    virtual HRESULT __stdcall get_RelativeVerticalPosition (
        enum WdRelativeVerticalPosition * prop ) = 0;
    virtual HRESULT __stdcall put_RelativeVerticalPosition (
        enum WdRelativeVerticalPosition prop ) = 0;
    virtual HRESULT __stdcall get_LockAnchor (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_LockAnchor (
        long prop ) = 0;
    virtual HRESULT __stdcall get_WrapFormat (
        struct WrapFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Anchor (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_Align (
        enum Office::MsoAlignCmd Align,
        long RelativeTo ) = 0;
    virtual HRESULT __stdcall raw_Apply ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Distribute (
        enum Office::MsoDistributeCmd Distribute,
        long RelativeTo ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        struct ShapeRange * * prop ) = 0;
    virtual HRESULT __stdcall raw_Flip (
        enum Office::MsoFlipCmd FlipCmd ) = 0;
    virtual HRESULT __stdcall raw_IncrementLeft (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementRotation (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementTop (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_PickUp ( ) = 0;
    virtual HRESULT __stdcall raw_Regroup (
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
    virtual HRESULT __stdcall raw_ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom Scale ) = 0;
    virtual HRESULT __stdcall raw_ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom Scale ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * Replace = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
    virtual HRESULT __stdcall raw_Ungroup (
        struct ShapeRange * * prop ) = 0;
    virtual HRESULT __stdcall raw_ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
    virtual HRESULT __stdcall raw_ConvertToFrame (
        struct Frame * * prop ) = 0;
    virtual HRESULT __stdcall raw_ConvertToInlineShape (
        struct InlineShape * * prop ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall get_AlternativeText (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_AlternativeText (
        BSTR prop ) = 0;
};

struct __declspec(uuid("000209b6-0000-0000-c000-000000000046"))
GroupShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr Item (
        VARIANT * Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Shape * * prop ) = 0;
};

struct __declspec(uuid("000209a0-0000-0000-c000-000000000046"))
Shape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetAnchor))
    RangePtr Anchor;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetRelativeHorizontalPosition,put=PutRelativeHorizontalPosition))
    enum WdRelativeHorizontalPosition RelativeHorizontalPosition;
    __declspec(property(get=GetRelativeVerticalPosition,put=PutRelativeVerticalPosition))
    enum WdRelativeVerticalPosition RelativeVerticalPosition;
    __declspec(property(get=GetLockAnchor,put=PutLockAnchor))
    long LockAnchor;
    __declspec(property(get=GetWrapFormat))
    WrapFormatPtr WrapFormat;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    AdjustmentsPtr GetAdjustments ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType prop );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float prop );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float prop );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState prop );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t prop );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float prop );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    TextFramePtr GetTextFrame ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float prop );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState prop );
    float GetWidth ( );
    void PutWidth (
        float prop );
    long GetZOrderPosition ( );
    HyperlinkPtr GetHyperlink ( );
    enum WdRelativeHorizontalPosition GetRelativeHorizontalPosition ( );
    void PutRelativeHorizontalPosition (
        enum WdRelativeHorizontalPosition prop );
    enum WdRelativeVerticalPosition GetRelativeVerticalPosition ( );
    void PutRelativeVerticalPosition (
        enum WdRelativeVerticalPosition prop );
    long GetLockAnchor ( );
    void PutLockAnchor (
        long prop );
    WrapFormatPtr GetWrapFormat ( );
    OLEFormatPtr GetOLEFormat ( );
    RangePtr GetAnchor ( );
    LinkFormatPtr GetLinkFormat ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    ShapePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom Scale );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom Scale );
    HRESULT Select (
        VARIANT * Replace = &vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    InlineShapePtr ConvertToInlineShape ( );
    FramePtr ConvertToFrame ( );
    HRESULT Activate ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t prop );
    Office::ScriptPtr GetScript ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Adjustments (
        struct Adjustments * * prop ) = 0;
    virtual HRESULT __stdcall get_AutoShapeType (
        enum Office::MsoAutoShapeType * prop ) = 0;
    virtual HRESULT __stdcall put_AutoShapeType (
        enum Office::MsoAutoShapeType prop ) = 0;
    virtual HRESULT __stdcall get_Callout (
        struct CalloutFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_ConnectionSiteCount (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Connector (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall get_ConnectorFormat (
        struct ConnectorFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct FillFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_GroupItems (
        struct GroupShapes * * prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        float prop ) = 0;
    virtual HRESULT __stdcall get_HorizontalFlip (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall get_Left (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Left (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Line (
        struct LineFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_LockAspectRatio (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_LockAspectRatio (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Nodes (
        struct ShapeNodes * * prop ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        float prop ) = 0;
    virtual HRESULT __stdcall get_PictureFormat (
        struct PictureFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        struct ShadowFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_TextEffect (
        struct TextEffectFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_TextFrame (
        struct TextFrame * * prop ) = 0;
    virtual HRESULT __stdcall get_ThreeD (
        struct ThreeDFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Top (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Top (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoShapeType * prop ) = 0;
    virtual HRESULT __stdcall get_VerticalFlip (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall get_Vertices (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ZOrderPosition (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Hyperlink (
        struct Hyperlink * * prop ) = 0;
    virtual HRESULT __stdcall get_RelativeHorizontalPosition (
        enum WdRelativeHorizontalPosition * prop ) = 0;
    virtual HRESULT __stdcall put_RelativeHorizontalPosition (
        enum WdRelativeHorizontalPosition prop ) = 0;
    virtual HRESULT __stdcall get_RelativeVerticalPosition (
        enum WdRelativeVerticalPosition * prop ) = 0;
    virtual HRESULT __stdcall put_RelativeVerticalPosition (
        enum WdRelativeVerticalPosition prop ) = 0;
    virtual HRESULT __stdcall get_LockAnchor (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_LockAnchor (
        long prop ) = 0;
    virtual HRESULT __stdcall get_WrapFormat (
        struct WrapFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_OLEFormat (
        struct OLEFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Anchor (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_LinkFormat (
        struct LinkFormat * * prop ) = 0;
    virtual HRESULT __stdcall raw_Apply ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall raw_Flip (
        enum Office::MsoFlipCmd FlipCmd ) = 0;
    virtual HRESULT __stdcall raw_IncrementLeft (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementRotation (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementTop (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_PickUp ( ) = 0;
    virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
    virtual HRESULT __stdcall raw_ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom Scale ) = 0;
    virtual HRESULT __stdcall raw_ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom Scale ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * Replace = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
    virtual HRESULT __stdcall raw_Ungroup (
        struct ShapeRange * * prop ) = 0;
    virtual HRESULT __stdcall raw_ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
    virtual HRESULT __stdcall raw_ConvertToInlineShape (
        struct InlineShape * * prop ) = 0;
    virtual HRESULT __stdcall raw_ConvertToFrame (
        struct Frame * * prop ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall get_AlternativeText (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_AlternativeText (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Script (
        struct Office::Script * * prop ) = 0;
};

struct __declspec(uuid("000209b2-0000-0000-c000-000000000046"))
TextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    ShapePtr Parent;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetTextRange))
    RangePtr TextRange;
    __declspec(property(get=GetContainingRange))
    RangePtr ContainingRange;
    __declspec(property(get=GetNext,put=PutNext))
    TextFramePtr Next;
    __declspec(property(get=GetPrevious,put=PutPrevious))
    TextFramePtr Previous;
    __declspec(property(get=GetOverflowing))
    VARIANT_BOOL Overflowing;
    __declspec(property(get=GetHasText))
    long HasText;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    ShapePtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float prop );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float prop );
    float GetMarginRight ( );
    void PutMarginRight (
        float prop );
    float GetMarginTop ( );
    void PutMarginTop (
        float prop );
    enum Office::MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum Office::MsoTextOrientation prop );
    RangePtr GetTextRange ( );
    RangePtr GetContainingRange ( );
    TextFramePtr GetNext ( );
    void PutNext (
        struct TextFrame * prop );
    TextFramePtr GetPrevious ( );
    void PutPrevious (
        struct TextFrame * prop );
    VARIANT_BOOL GetOverflowing ( );
    long GetHasText ( );
    HRESULT BreakForwardLink ( );
    VARIANT_BOOL ValidLinkTarget (
        struct TextFrame * TargetTextFrame );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall get_MarginBottom (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_MarginBottom (
        float prop ) = 0;
    virtual HRESULT __stdcall get_MarginLeft (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_MarginLeft (
        float prop ) = 0;
    virtual HRESULT __stdcall get_MarginRight (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_MarginRight (
        float prop ) = 0;
    virtual HRESULT __stdcall get_MarginTop (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_MarginTop (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        enum Office::MsoTextOrientation * prop ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        enum Office::MsoTextOrientation prop ) = 0;
    virtual HRESULT __stdcall get_TextRange (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_ContainingRange (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_Next (
        struct TextFrame * * prop ) = 0;
    virtual HRESULT __stdcall put_Next (
        struct TextFrame * prop ) = 0;
    virtual HRESULT __stdcall get_Previous (
        struct TextFrame * * prop ) = 0;
    virtual HRESULT __stdcall put_Previous (
        struct TextFrame * prop ) = 0;
    virtual HRESULT __stdcall get_Overflowing (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_HasText (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_BreakForwardLink ( ) = 0;
    virtual HRESULT __stdcall raw_ValidLinkTarget (
        struct TextFrame * TargetTextFrame,
        VARIANT_BOOL * prop ) = 0;
};

struct __declspec(uuid("000209a1-0000-0000-c000-000000000046"))
_LetterContent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSenderName,put=PutSenderName))
    _bstr_t SenderName;
    __declspec(property(get=GetClosing,put=PutClosing))
    _bstr_t Closing;
    __declspec(property(get=GetSenderCompany,put=PutSenderCompany))
    _bstr_t SenderCompany;
    __declspec(property(get=GetSenderJobTitle,put=PutSenderJobTitle))
    _bstr_t SenderJobTitle;
    __declspec(property(get=GetSenderInitials,put=PutSenderInitials))
    _bstr_t SenderInitials;
    __declspec(property(get=GetInfoBlock,put=PutInfoBlock))
    VARIANT_BOOL InfoBlock;
    __declspec(property(get=GetRecipientCode,put=PutRecipientCode))
    _bstr_t RecipientCode;
    __declspec(property(get=GetRecipientGender,put=PutRecipientGender))
    enum WdSalutationGender RecipientGender;
    __declspec(property(get=GetReturnAddressShortForm,put=PutReturnAddressShortForm))
    _bstr_t ReturnAddressShortForm;
    __declspec(property(get=GetDuplicate))
    _LetterContentPtr Duplicate;
    __declspec(property(get=GetSenderCity,put=PutSenderCity))
    _bstr_t SenderCity;
    __declspec(property(get=GetSenderCode,put=PutSenderCode))
    _bstr_t SenderCode;
    __declspec(property(get=GetSenderGender,put=PutSenderGender))
    enum WdSalutationGender SenderGender;
    __declspec(property(get=GetSenderReference,put=PutSenderReference))
    _bstr_t SenderReference;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetDateFormat,put=PutDateFormat))
    _bstr_t DateFormat;
    __declspec(property(get=GetIncludeHeaderFooter,put=PutIncludeHeaderFooter))
    VARIANT_BOOL IncludeHeaderFooter;
    __declspec(property(get=GetPageDesign,put=PutPageDesign))
    _bstr_t PageDesign;
    __declspec(property(get=GetLetterStyle,put=PutLetterStyle))
    enum WdLetterStyle LetterStyle;
    __declspec(property(get=GetLetterhead,put=PutLetterhead))
    VARIANT_BOOL Letterhead;
    __declspec(property(get=GetLetterheadLocation,put=PutLetterheadLocation))
    enum WdLetterheadLocation LetterheadLocation;
    __declspec(property(get=GetLetterheadSize,put=PutLetterheadSize))
    float LetterheadSize;
    __declspec(property(get=GetRecipientName,put=PutRecipientName))
    _bstr_t RecipientName;
    __declspec(property(get=GetRecipientAddress,put=PutRecipientAddress))
    _bstr_t RecipientAddress;
    __declspec(property(get=GetSalutation,put=PutSalutation))
    _bstr_t Salutation;
    __declspec(property(get=GetSalutationType,put=PutSalutationType))
    enum WdSalutationType SalutationType;
    __declspec(property(get=GetRecipientReference,put=PutRecipientReference))
    _bstr_t RecipientReference;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetMailingInstructions,put=PutMailingInstructions))
    _bstr_t MailingInstructions;
    __declspec(property(get=GetAttentionLine,put=PutAttentionLine))
    _bstr_t AttentionLine;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetEnclosureNumber,put=PutEnclosureNumber))
    long EnclosureNumber;
    __declspec(property(get=GetCCList,put=PutCCList))
    _bstr_t CCList;
    __declspec(property(get=GetReturnAddress,put=PutReturnAddress))
    _bstr_t ReturnAddress;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _LetterContentPtr GetDuplicate ( );
    _bstr_t GetDateFormat ( );
    void PutDateFormat (
        _bstr_t prop );
    VARIANT_BOOL GetIncludeHeaderFooter ( );
    void PutIncludeHeaderFooter (
        VARIANT_BOOL prop );
    _bstr_t GetPageDesign ( );
    void PutPageDesign (
        _bstr_t prop );
    enum WdLetterStyle GetLetterStyle ( );
    void PutLetterStyle (
        enum WdLetterStyle prop );
    VARIANT_BOOL GetLetterhead ( );
    void PutLetterhead (
        VARIANT_BOOL prop );
    enum WdLetterheadLocation GetLetterheadLocation ( );
    void PutLetterheadLocation (
        enum WdLetterheadLocation prop );
    float GetLetterheadSize ( );
    void PutLetterheadSize (
        float prop );
    _bstr_t GetRecipientName ( );
    void PutRecipientName (
        _bstr_t prop );
    _bstr_t GetRecipientAddress ( );
    void PutRecipientAddress (
        _bstr_t prop );
    _bstr_t GetSalutation ( );
    void PutSalutation (
        _bstr_t prop );
    enum WdSalutationType GetSalutationType ( );
    void PutSalutationType (
        enum WdSalutationType prop );
    _bstr_t GetRecipientReference ( );
    void PutRecipientReference (
        _bstr_t prop );
    _bstr_t GetMailingInstructions ( );
    void PutMailingInstructions (
        _bstr_t prop );
    _bstr_t GetAttentionLine ( );
    void PutAttentionLine (
        _bstr_t prop );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t prop );
    long GetEnclosureNumber ( );
    void PutEnclosureNumber (
        long prop );
    _bstr_t GetCCList ( );
    void PutCCList (
        _bstr_t prop );
    _bstr_t GetReturnAddress ( );
    void PutReturnAddress (
        _bstr_t prop );
    _bstr_t GetSenderName ( );
    void PutSenderName (
        _bstr_t prop );
    _bstr_t GetClosing ( );
    void PutClosing (
        _bstr_t prop );
    _bstr_t GetSenderCompany ( );
    void PutSenderCompany (
        _bstr_t prop );
    _bstr_t GetSenderJobTitle ( );
    void PutSenderJobTitle (
        _bstr_t prop );
    _bstr_t GetSenderInitials ( );
    void PutSenderInitials (
        _bstr_t prop );
    VARIANT_BOOL GetInfoBlock ( );
    void PutInfoBlock (
        VARIANT_BOOL prop );
    _bstr_t GetRecipientCode ( );
    void PutRecipientCode (
        _bstr_t prop );
    enum WdSalutationGender GetRecipientGender ( );
    void PutRecipientGender (
        enum WdSalutationGender prop );
    _bstr_t GetReturnAddressShortForm ( );
    void PutReturnAddressShortForm (
        _bstr_t prop );
    _bstr_t GetSenderCity ( );
    void PutSenderCity (
        _bstr_t prop );
    _bstr_t GetSenderCode ( );
    void PutSenderCode (
        _bstr_t prop );
    enum WdSalutationGender GetSenderGender ( );
    void PutSenderGender (
        enum WdSalutationGender prop );
    _bstr_t GetSenderReference ( );
    void PutSenderReference (
        _bstr_t prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Duplicate (
        struct _LetterContent * * prop ) = 0;
    virtual HRESULT __stdcall get_DateFormat (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_DateFormat (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_IncludeHeaderFooter (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IncludeHeaderFooter (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PageDesign (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_PageDesign (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_LetterStyle (
        enum WdLetterStyle * prop ) = 0;
    virtual HRESULT __stdcall put_LetterStyle (
        enum WdLetterStyle prop ) = 0;
    virtual HRESULT __stdcall get_Letterhead (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Letterhead (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_LetterheadLocation (
        enum WdLetterheadLocation * prop ) = 0;
    virtual HRESULT __stdcall put_LetterheadLocation (
        enum WdLetterheadLocation prop ) = 0;
    virtual HRESULT __stdcall get_LetterheadSize (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_LetterheadSize (
        float prop ) = 0;
    virtual HRESULT __stdcall get_RecipientName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_RecipientName (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_RecipientAddress (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_RecipientAddress (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Salutation (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Salutation (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_SalutationType (
        enum WdSalutationType * prop ) = 0;
    virtual HRESULT __stdcall put_SalutationType (
        enum WdSalutationType prop ) = 0;
    virtual HRESULT __stdcall get_RecipientReference (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_RecipientReference (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_MailingInstructions (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_MailingInstructions (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_AttentionLine (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_AttentionLine (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Subject (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Subject (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_EnclosureNumber (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_EnclosureNumber (
        long prop ) = 0;
    virtual HRESULT __stdcall get_CCList (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_CCList (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_ReturnAddress (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ReturnAddress (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_SenderName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_SenderName (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Closing (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Closing (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_SenderCompany (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_SenderCompany (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_SenderJobTitle (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_SenderJobTitle (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_SenderInitials (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_SenderInitials (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_InfoBlock (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_InfoBlock (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_RecipientCode (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_RecipientCode (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_RecipientGender (
        enum WdSalutationGender * prop ) = 0;
    virtual HRESULT __stdcall put_RecipientGender (
        enum WdSalutationGender prop ) = 0;
    virtual HRESULT __stdcall get_ReturnAddressShortForm (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ReturnAddressShortForm (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_SenderCity (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_SenderCity (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_SenderCode (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_SenderCode (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_SenderGender (
        enum WdSalutationGender * prop ) = 0;
    virtual HRESULT __stdcall put_SenderGender (
        enum WdSalutationGender prop ) = 0;
    virtual HRESULT __stdcall get_SenderReference (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_SenderReference (
        BSTR prop ) = 0;
};

struct __declspec(uuid("000209a5-0000-0000-c000-000000000046"))
View : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum WdViewType Type;
    __declspec(property(get=GetFullScreen,put=PutFullScreen))
    VARIANT_BOOL FullScreen;
    __declspec(property(get=GetDraft,put=PutDraft))
    VARIANT_BOOL Draft;
    __declspec(property(get=GetShowAll,put=PutShowAll))
    VARIANT_BOOL ShowAll;
    __declspec(property(get=GetShowFieldCodes,put=PutShowFieldCodes))
    VARIANT_BOOL ShowFieldCodes;
    __declspec(property(get=GetMailMergeDataView,put=PutMailMergeDataView))
    VARIANT_BOOL MailMergeDataView;
    __declspec(property(get=GetMagnifier,put=PutMagnifier))
    VARIANT_BOOL Magnifier;
    __declspec(property(get=GetShowFirstLineOnly,put=PutShowFirstLineOnly))
    VARIANT_BOOL ShowFirstLineOnly;
    __declspec(property(get=GetShowFormat,put=PutShowFormat))
    VARIANT_BOOL ShowFormat;
    __declspec(property(get=GetZoom))
    ZoomPtr Zoom;
    __declspec(property(get=GetShowObjectAnchors,put=PutShowObjectAnchors))
    VARIANT_BOOL ShowObjectAnchors;
    __declspec(property(get=GetShowTextBoundaries,put=PutShowTextBoundaries))
    VARIANT_BOOL ShowTextBoundaries;
    __declspec(property(get=GetShowHighlight,put=PutShowHighlight))
    VARIANT_BOOL ShowHighlight;
    __declspec(property(get=GetShowDrawings,put=PutShowDrawings))
    VARIANT_BOOL ShowDrawings;
    __declspec(property(get=GetShowTabs,put=PutShowTabs))
    VARIANT_BOOL ShowTabs;
    __declspec(property(get=GetShowSpaces,put=PutShowSpaces))
    VARIANT_BOOL ShowSpaces;
    __declspec(property(get=GetShowParagraphs,put=PutShowParagraphs))
    VARIANT_BOOL ShowParagraphs;
    __declspec(property(get=GetShowHyphens,put=PutShowHyphens))
    VARIANT_BOOL ShowHyphens;
    __declspec(property(get=GetShowHiddenText,put=PutShowHiddenText))
    VARIANT_BOOL ShowHiddenText;
    __declspec(property(get=GetWrapToWindow,put=PutWrapToWindow))
    VARIANT_BOOL WrapToWindow;
    __declspec(property(get=GetShowPicturePlaceHolders,put=PutShowPicturePlaceHolders))
    VARIANT_BOOL ShowPicturePlaceHolders;
    __declspec(property(get=GetShowBookmarks,put=PutShowBookmarks))
    VARIANT_BOOL ShowBookmarks;
    __declspec(property(get=GetFieldShading,put=PutFieldShading))
    enum WdFieldShading FieldShading;
    __declspec(property(get=GetShowAnimation,put=PutShowAnimation))
    VARIANT_BOOL ShowAnimation;
    __declspec(property(get=GetTableGridlines,put=PutTableGridlines))
    VARIANT_BOOL TableGridlines;
    __declspec(property(get=GetEnlargeFontsLessThan,put=PutEnlargeFontsLessThan))
    long EnlargeFontsLessThan;
    __declspec(property(get=GetShowMainTextLayer,put=PutShowMainTextLayer))
    VARIANT_BOOL ShowMainTextLayer;
    __declspec(property(get=GetSeekView,put=PutSeekView))
    enum WdSeekView SeekView;
    __declspec(property(get=GetSplitSpecial,put=PutSplitSpecial))
    enum WdSpecialPane SplitSpecial;
    __declspec(property(get=GetBrowseToWindow,put=PutBrowseToWindow))
    long BrowseToWindow;
    __declspec(property(get=GetShowOptionalBreaks,put=PutShowOptionalBreaks))
    VARIANT_BOOL ShowOptionalBreaks;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdViewType GetType ( );
    void PutType (
        enum WdViewType prop );
    VARIANT_BOOL GetFullScreen ( );
    void PutFullScreen (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetDraft ( );
    void PutDraft (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowAll ( );
    void PutShowAll (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowFieldCodes ( );
    void PutShowFieldCodes (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMailMergeDataView ( );
    void PutMailMergeDataView (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMagnifier ( );
    void PutMagnifier (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowFirstLineOnly ( );
    void PutShowFirstLineOnly (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowFormat ( );
    void PutShowFormat (
        VARIANT_BOOL prop );
    ZoomPtr GetZoom ( );
    VARIANT_BOOL GetShowObjectAnchors ( );
    void PutShowObjectAnchors (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowTextBoundaries ( );
    void PutShowTextBoundaries (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowHighlight ( );
    void PutShowHighlight (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowDrawings ( );
    void PutShowDrawings (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowTabs ( );
    void PutShowTabs (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowSpaces ( );
    void PutShowSpaces (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowParagraphs ( );
    void PutShowParagraphs (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowHyphens ( );
    void PutShowHyphens (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowHiddenText ( );
    void PutShowHiddenText (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetWrapToWindow ( );
    void PutWrapToWindow (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowPicturePlaceHolders ( );
    void PutShowPicturePlaceHolders (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowBookmarks ( );
    void PutShowBookmarks (
        VARIANT_BOOL prop );
    enum WdFieldShading GetFieldShading ( );
    void PutFieldShading (
        enum WdFieldShading prop );
    VARIANT_BOOL GetShowAnimation ( );
    void PutShowAnimation (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetTableGridlines ( );
    void PutTableGridlines (
        VARIANT_BOOL prop );
    long GetEnlargeFontsLessThan ( );
    void PutEnlargeFontsLessThan (
        long prop );
    VARIANT_BOOL GetShowMainTextLayer ( );
    void PutShowMainTextLayer (
        VARIANT_BOOL prop );
    enum WdSeekView GetSeekView ( );
    void PutSeekView (
        enum WdSeekView prop );
    enum WdSpecialPane GetSplitSpecial ( );
    void PutSplitSpecial (
        enum WdSpecialPane prop );
    long GetBrowseToWindow ( );
    void PutBrowseToWindow (
        long prop );
    VARIANT_BOOL GetShowOptionalBreaks ( );
    void PutShowOptionalBreaks (
        VARIANT_BOOL prop );
    HRESULT CollapseOutline (
        VARIANT * Range = &vtMissing );
    HRESULT ExpandOutline (
        VARIANT * Range = &vtMissing );
    HRESULT ShowAllHeadings ( );
    HRESULT ShowHeading (
        long Level );
    HRESULT PreviousHeaderFooter ( );
    HRESULT NextHeaderFooter ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdViewType * prop ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum WdViewType prop ) = 0;
    virtual HRESULT __stdcall get_FullScreen (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_FullScreen (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Draft (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Draft (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowAll (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowAll (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowFieldCodes (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowFieldCodes (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MailMergeDataView (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MailMergeDataView (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Magnifier (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Magnifier (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowFirstLineOnly (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowFirstLineOnly (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowFormat (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowFormat (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Zoom (
        struct Zoom * * prop ) = 0;
    virtual HRESULT __stdcall get_ShowObjectAnchors (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowObjectAnchors (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowTextBoundaries (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowTextBoundaries (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowHighlight (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowHighlight (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowDrawings (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowDrawings (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowTabs (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowTabs (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowSpaces (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowSpaces (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowParagraphs (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowParagraphs (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowHyphens (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowHyphens (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowHiddenText (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowHiddenText (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_WrapToWindow (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_WrapToWindow (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowPicturePlaceHolders (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowPicturePlaceHolders (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowBookmarks (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowBookmarks (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_FieldShading (
        enum WdFieldShading * prop ) = 0;
    virtual HRESULT __stdcall put_FieldShading (
        enum WdFieldShading prop ) = 0;
    virtual HRESULT __stdcall get_ShowAnimation (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowAnimation (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_TableGridlines (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_TableGridlines (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_EnlargeFontsLessThan (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_EnlargeFontsLessThan (
        long prop ) = 0;
    virtual HRESULT __stdcall get_ShowMainTextLayer (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowMainTextLayer (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SeekView (
        enum WdSeekView * prop ) = 0;
    virtual HRESULT __stdcall put_SeekView (
        enum WdSeekView prop ) = 0;
    virtual HRESULT __stdcall get_SplitSpecial (
        enum WdSpecialPane * prop ) = 0;
    virtual HRESULT __stdcall put_SplitSpecial (
        enum WdSpecialPane prop ) = 0;
    virtual HRESULT __stdcall get_BrowseToWindow (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_BrowseToWindow (
        long prop ) = 0;
    virtual HRESULT __stdcall get_ShowOptionalBreaks (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowOptionalBreaks (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_CollapseOutline (
        VARIANT * Range = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ExpandOutline (
        VARIANT * Range = &vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ShowAllHeadings ( ) = 0;
    virtual HRESULT __stdcall raw_ShowHeading (
        long Level ) = 0;
    virtual HRESULT __stdcall raw_PreviousHeaderFooter ( ) = 0;
    virtual HRESULT __stdcall raw_NextHeaderFooter ( ) = 0;
};

struct __declspec(uuid("000209a6-0000-0000-c000-000000000046"))
Zoom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPercentage,put=PutPercentage))
    long Percentage;
    __declspec(property(get=GetPageFit,put=PutPageFit))
    enum WdPageFit PageFit;
    __declspec(property(get=GetPageRows,put=PutPageRows))
    long PageRows;
    __declspec(property(get=GetPageColumns,put=PutPageColumns))
    long PageColumns;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetPercentage ( );
    void PutPercentage (
        long prop );
    enum WdPageFit GetPageFit ( );
    void PutPageFit (
        enum WdPageFit prop );
    long GetPageRows ( );
    void PutPageRows (
        long prop );
    long GetPageColumns ( );
    void PutPageColumns (
        long prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Percentage (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Percentage (
        long prop ) = 0;
    virtual HRESULT __stdcall get_PageFit (
        enum WdPageFit * prop ) = 0;
    virtual HRESULT __stdcall put_PageFit (
        enum WdPageFit prop ) = 0;
    virtual HRESULT __stdcall get_PageRows (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_PageRows (
        long prop ) = 0;
    virtual HRESULT __stdcall get_PageColumns (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_PageColumns (
        long prop ) = 0;
};

struct __declspec(uuid("000209a7-0000-0000-c000-000000000046"))
Zooms : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ZoomPtr Item (
        enum WdViewType Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        enum WdViewType Index,
        struct Zoom * * prop ) = 0;
};

struct __declspec(uuid("000209a8-0000-0000-c000-000000000046"))
InlineShape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorders,put=PutBorders))
    BordersPtr Borders;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetField))
    FieldPtr Field;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetType))
    enum WdInlineShapeType Type;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetScaleHeight,put=PutScaleHeight))
    float ScaleHeight;
    __declspec(property(get=GetScaleWidth,put=PutScaleWidth))
    float ScaleWidth;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetPictureFormat,put=PutPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetHorizontalLineFormat))
    HorizontalLineFormatPtr HorizontalLineFormat;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetTextEffect,put=PutTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetOWSAnchor))
    long OWSAnchor;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    BordersPtr GetBorders ( );
    void PutBorders (
        struct Borders * prop );
    RangePtr GetRange ( );
    LinkFormatPtr GetLinkFormat ( );
    FieldPtr GetField ( );
    OLEFormatPtr GetOLEFormat ( );
    enum WdInlineShapeType GetType ( );
    HyperlinkPtr GetHyperlink ( );
    float GetHeight ( );
    void PutHeight (
        float prop );
    float GetWidth ( );
    void PutWidth (
        float prop );
    float GetScaleHeight ( );
    void PutScaleHeight (
        float prop );
    float GetScaleWidth ( );
    void PutScaleWidth (
        float prop );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState prop );
    LineFormatPtr GetLine ( );
    FillFormatPtr GetFill ( );
    PictureFormatPtr GetPictureFormat ( );
    void PutPictureFormat (
        struct PictureFormat * prop );
    HRESULT Activate ( );
    HRESULT Reset ( );
    HRESULT Delete ( );
    HRESULT Select ( );
    ShapePtr ConvertToShape ( );
    HorizontalLineFormatPtr GetHorizontalLineFormat ( );
    Office::ScriptPtr GetScript ( );
    long GetOWSAnchor ( );
    TextEffectFormatPtr GetTextEffect ( );
    void PutTextEffect (
        struct TextEffectFormat * prop );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * prop ) = 0;
    virtual HRESULT __stdcall put_Borders (
        struct Borders * prop ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * prop ) = 0;
    virtual HRESULT __stdcall get_LinkFormat (
        struct LinkFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Field (
        struct Field * * prop ) = 0;
    virtual HRESULT __stdcall get_OLEFormat (
        struct OLEFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdInlineShapeType * prop ) = 0;
    virtual HRESULT __stdcall get_Hyperlink (
        struct Hyperlink * * prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ScaleHeight (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_ScaleHeight (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ScaleWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_ScaleWidth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_LockAspectRatio (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_LockAspectRatio (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_Line (
        struct LineFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct FillFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_PictureFormat (
        struct PictureFormat * * prop ) = 0;
    virtual HRESULT __stdcall put_PictureFormat (
        struct PictureFormat * prop ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_ConvertToShape (
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall get_HorizontalLineFormat (
        struct HorizontalLineFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Script (
        struct Office::Script * * prop ) = 0;
    virtual HRESULT __stdcall get_OWSAnchor (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_TextEffect (
        struct TextEffectFormat * * prop ) = 0;
    virtual HRESULT __stdcall put_TextEffect (
        struct TextEffectFormat * prop ) = 0;
    virtual HRESULT __stdcall get_AlternativeText (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_AlternativeText (
        BSTR prop ) = 0;
};

struct __declspec(uuid("000209a9-0000-0000-c000-000000000046"))
InlineShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    InlineShapePtr Item (
        long Index );
    InlineShapePtr AddPicture (
        _bstr_t FileName,
        VARIANT * LinkToFile = &vtMissing,
        VARIANT * SaveWithDocument = &vtMissing,
        VARIANT * Range = &vtMissing );
    InlineShapePtr AddOLEObject (
        VARIANT * ClassType = &vtMissing,
        VARIANT * FileName = &vtMissing,
        VARIANT * LinkToFile = &vtMissing,
        VARIANT * DisplayAsIcon = &vtMissing,
        VARIANT * IconFileName = &vtMissing,
        VARIANT * IconIndex = &vtMissing,
        VARIANT * IconLabel = &vtMissing,
        VARIANT * Range = &vtMissing );
    InlineShapePtr AddOLEControl (
        VARIANT * ClassType = &vtMissing,
        VARIANT * Range = &vtMissing );
    InlineShapePtr New (
        struct Range * Range );
    InlineShapePtr AddHorizontalLine (
        _bstr_t FileName,
        VARIANT * Range = &vtMissing );
    InlineShapePtr AddHorizontalLineStandard (
        VARIANT * Range = &vtMissing );
    InlineShapePtr AddPictureBullet (
        _bstr_t FileName,
        VARIANT * Range = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct InlineShape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddPicture (
        BSTR FileName,
        VARIANT * LinkToFile,
        VARIANT * SaveWithDocument,
        VARIANT * Range,
        struct InlineShape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddOLEObject (
        VARIANT * ClassType,
        VARIANT * FileName,
        VARIANT * LinkToFile,
        VARIANT * DisplayAsIcon,
        VARIANT * IconFileName,
        VARIANT * IconIndex,
        VARIANT * IconLabel,
        VARIANT * Range,
        struct InlineShape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddOLEControl (
        VARIANT * ClassType,
        VARIANT * Range,
        struct InlineShape * * prop ) = 0;
    virtual HRESULT __stdcall raw_New (
        struct Range * Range,
        struct InlineShape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddHorizontalLine (
        BSTR FileName,
        VARIANT * Range,
        struct InlineShape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddHorizontalLineStandard (
        VARIANT * Range,
        struct InlineShape * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddPictureBullet (
        BSTR FileName,
        VARIANT * Range,
        struct InlineShape * * prop ) = 0;
};

struct __declspec(uuid("000209aa-0000-0000-c000-000000000046"))
SpellingSuggestions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetSpellingErrorType))
    enum WdSpellingErrorType SpellingErrorType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    enum WdSpellingErrorType GetSpellingErrorType ( );
    SpellingSuggestionPtr Item (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_SpellingErrorType (
        enum WdSpellingErrorType * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct SpellingSuggestion * * prop ) = 0;
};

struct __declspec(uuid("000209ab-0000-0000-c000-000000000046"))
SpellingSuggestion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
};

struct __declspec(uuid("000209ac-0000-0000-c000-000000000046"))
Dictionaries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMaximum))
    long Maximum;
    __declspec(property(get=GetActiveCustomDictionary,put=PutActiveCustomDictionary))
    DictionaryPtr ActiveCustomDictionary;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    long GetMaximum ( );
    DictionaryPtr GetActiveCustomDictionary ( );
    void PutActiveCustomDictionary (
        struct Dictionary * prop );
    DictionaryPtr Item (
        VARIANT * Index );
    DictionaryPtr Add (
        _bstr_t FileName );
    HRESULT ClearAll ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Maximum (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveCustomDictionary (
        struct Dictionary * * prop ) = 0;
    virtual HRESULT __stdcall put_ActiveCustomDictionary (
        struct Dictionary * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Dictionary * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR FileName,
        struct Dictionary * * prop ) = 0;
    virtual HRESULT __stdcall raw_ClearAll ( ) = 0;
};

struct __declspec(uuid("000209e0-0000-0000-c000-000000000046"))
HangulHanjaConversionDictionaries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMaximum))
    long Maximum;
    __declspec(property(get=GetActiveCustomDictionary,put=PutActiveCustomDictionary))
    DictionaryPtr ActiveCustomDictionary;
    __declspec(property(get=GetBuiltinDictionary))
    DictionaryPtr BuiltinDictionary;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    long GetMaximum ( );
    DictionaryPtr GetActiveCustomDictionary ( );
    void PutActiveCustomDictionary (
        struct Dictionary * prop );
    DictionaryPtr GetBuiltinDictionary ( );
    DictionaryPtr Item (
        VARIANT * Index );
    DictionaryPtr Add (
        _bstr_t FileName );
    HRESULT ClearAll ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Maximum (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_ActiveCustomDictionary (
        struct Dictionary * * prop ) = 0;
    virtual HRESULT __stdcall put_ActiveCustomDictionary (
        struct Dictionary * prop ) = 0;
    virtual HRESULT __stdcall get_BuiltinDictionary (
        struct Dictionary * * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct Dictionary * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR FileName,
        struct Dictionary * * prop ) = 0;
    virtual HRESULT __stdcall raw_ClearAll ( ) = 0;
};

struct __declspec(uuid("000209ad-0000-0000-c000-000000000046"))
Dictionary : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetLanguageID,put=PutLanguageID))
    enum WdLanguageID LanguageID;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetType))
    enum WdDictionaryType Type;
    __declspec(property(get=GetLanguageSpecific,put=PutLanguageSpecific))
    VARIANT_BOOL LanguageSpecific;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    enum WdLanguageID GetLanguageID ( );
    void PutLanguageID (
        enum WdLanguageID prop );
    VARIANT_BOOL GetReadOnly ( );
    enum WdDictionaryType GetType ( );
    VARIANT_BOOL GetLanguageSpecific ( );
    void PutLanguageSpecific (
        VARIANT_BOOL prop );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageID (
        enum WdLanguageID * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageID (
        enum WdLanguageID prop ) = 0;
    virtual HRESULT __stdcall get_ReadOnly (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdDictionaryType * prop ) = 0;
    virtual HRESULT __stdcall get_LanguageSpecific (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_LanguageSpecific (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("000209ae-0000-0000-c000-000000000046"))
ReadabilityStatistics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    ReadabilityStatisticPtr Item (
        VARIANT * Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct ReadabilityStatistic * * prop ) = 0;
};

struct __declspec(uuid("000209af-0000-0000-c000-000000000046"))
ReadabilityStatistic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValue))
    float Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    float GetValue ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Value (
        float * prop ) = 0;
};

struct __declspec(uuid("000209b3-0000-0000-c000-000000000046"))
Versions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAutoVersion,put=PutAutoVersion))
    enum WdAutoVersions AutoVersion;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    enum WdAutoVersions GetAutoVersion ( );
    void PutAutoVersion (
        enum WdAutoVersions prop );
    VersionPtr Item (
        long Index );
    HRESULT Save (
        VARIANT * Comment = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_AutoVersion (
        enum WdAutoVersions * prop ) = 0;
    virtual HRESULT __stdcall put_AutoVersion (
        enum WdAutoVersions prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Version * * prop ) = 0;
    virtual HRESULT __stdcall raw_Save (
        VARIANT * Comment = &vtMissing ) = 0;
};

struct __declspec(uuid("000209b4-0000-0000-c000-000000000046"))
Version : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSavedBy))
    _bstr_t SavedBy;
    __declspec(property(get=GetComment))
    _bstr_t Comment;
    __declspec(property(get=GetDate))
    DATE Date;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSavedBy ( );
    _bstr_t GetComment ( );
    DATE GetDate ( );
    long GetIndex ( );
    HRESULT OpenOld ( );
    HRESULT Delete ( );
    _DocumentPtr Open ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_SavedBy (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Comment (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_Date (
        DATE * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_OpenOld ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Open (
        struct _Document * * prop ) = 0;
};

struct __declspec(uuid("000209b7-0000-0000-c000-000000000046"))
Options : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoFormatAsYouTypeReplaceOrdinals,put=PutAutoFormatAsYouTypeReplaceOrdinals))
    VARIANT_BOOL AutoFormatAsYouTypeReplaceOrdinals;
    __declspec(property(get=GetAllowAccentedUppercase,put=PutAllowAccentedUppercase))
    VARIANT_BOOL AllowAccentedUppercase;
    __declspec(property(get=GetAutoFormatAsYouTypeReplaceFractions,put=PutAutoFormatAsYouTypeReplaceFractions))
    VARIANT_BOOL AutoFormatAsYouTypeReplaceFractions;
    __declspec(property(get=GetAutoFormatAsYouTypeReplacePlainTextEmphasis,put=PutAutoFormatAsYouTypeReplacePlainTextEmphasis))
    VARIANT_BOOL AutoFormatAsYouTypeReplacePlainTextEmphasis;
    __declspec(property(get=GetAutoFormatAsYouTypeFormatListItemBeginning,put=PutAutoFormatAsYouTypeFormatListItemBeginning))
    VARIANT_BOOL AutoFormatAsYouTypeFormatListItemBeginning;
    __declspec(property(get=GetAutoFormatAsYouTypeDefineStyles,put=PutAutoFormatAsYouTypeDefineStyles))
    VARIANT_BOOL AutoFormatAsYouTypeDefineStyles;
    __declspec(property(get=GetAutoFormatPlainTextWordMail,put=PutAutoFormatPlainTextWordMail))
    VARIANT_BOOL AutoFormatPlainTextWordMail;
    __declspec(property(get=GetAutoFormatAsYouTypeReplaceHyperlinks,put=PutAutoFormatAsYouTypeReplaceHyperlinks))
    VARIANT_BOOL AutoFormatAsYouTypeReplaceHyperlinks;
    __declspec(property(get=GetAutoFormatReplaceHyperlinks,put=PutAutoFormatReplaceHyperlinks))
    VARIANT_BOOL AutoFormatReplaceHyperlinks;
    __declspec(property(get=GetDefaultHighlightColorIndex,put=PutDefaultHighlightColorIndex))
    enum WdColorIndex DefaultHighlightColorIndex;
    __declspec(property(get=GetDefaultBorderLineStyle,put=PutDefaultBorderLineStyle))
    enum WdLineStyle DefaultBorderLineStyle;
    __declspec(property(get=GetCheckSpellingAsYouType,put=PutCheckSpellingAsYouType))
    VARIANT_BOOL CheckSpellingAsYouType;
    __declspec(property(get=GetCheckGrammarAsYouType,put=PutCheckGrammarAsYouType))
    VARIANT_BOOL CheckGrammarAsYouType;
    __declspec(property(get=GetIgnoreInternetAndFileAddresses,put=PutIgnoreInternetAndFileAddresses))
    VARIANT_BOOL IgnoreInternetAndFileAddresses;
    __declspec(property(get=GetShowReadabilityStatistics,put=PutShowReadabilityStatistics))
    VARIANT_BOOL ShowReadabilityStatistics;
    __declspec(property(get=GetIgnoreUppercase,put=PutIgnoreUppercase))
    VARIANT_BOOL IgnoreUppercase;
    __declspec(property(get=GetIgnoreMixedDigits,put=PutIgnoreMixedDigits))
    VARIANT_BOOL IgnoreMixedDigits;
    __declspec(property(get=GetWPHelp,put=PutWPHelp))
    VARIANT_BOOL WPHelp;
    __declspec(property(get=GetWPDocNavKeys,put=PutWPDocNavKeys))
    VARIANT_BOOL WPDocNavKeys;
    __declspec(property(get=GetPagination,put=PutPagination))
    VARIANT_BOOL Pagination;
    __declspec(property(get=GetBlueScreen,put=PutBlueScreen))
    VARIANT_BOOL BlueScreen;
    __declspec(property(get=GetEnableSound,put=PutEnableSound))
    VARIANT_BOOL EnableSound;
    __declspec(property(get=GetConfirmConversions,put=PutConfirmConversions))
    VARIANT_BOOL ConfirmConversions;
    __declspec(property(get=GetUpdateLinksAtOpen,put=PutUpdateLinksAtOpen))
    VARIANT_BOOL UpdateLinksAtOpen;
    __declspec(property(get=GetSendMailAttach,put=PutSendMailAttach))
    VARIANT_BOOL SendMailAttach;
    __declspec(property(get=GetSuggestFromMainDictionaryOnly,put=PutSuggestFromMainDictionaryOnly))
    VARIANT_BOOL SuggestFromMainDictionaryOnly;
    __declspec(property(get=GetMeasurementUnit,put=PutMeasurementUnit))
    enum WdMeasurementUnits MeasurementUnit;
    __declspec(property(get=GetButtonFieldClicks,put=PutButtonFieldClicks))
    long ButtonFieldClicks;
    __declspec(property(get=GetShortMenuNames,put=PutShortMenuNames))
    VARIANT_BOOL ShortMenuNames;
    __declspec(property(get=GetRTFInClipboard,put=PutRTFInClipboard))
    VARIANT_BOOL RTFInClipboard;
    __declspec(property(get=GetUpdateFieldsAtPrint,put=PutUpdateFieldsAtPrint))
    VARIANT_BOOL UpdateFieldsAtPrint;
    __declspec(property(get=GetPrintProperties,put=PutPrintProperties))
    VARIANT_BOOL PrintProperties;
    __declspec(property(get=GetPrintFieldCodes,put=PutPrintFieldCodes))
    VARIANT_BOOL PrintFieldCodes;
    __declspec(property(get=GetPrintComments,put=PutPrintComments))
    VARIANT_BOOL PrintComments;
    __declspec(property(get=GetPrintHiddenText,put=PutPrintHiddenText))
    VARIANT_BOOL PrintHiddenText;
    __declspec(property(get=GetEnvelopeFeederInstalled))
    VARIANT_BOOL EnvelopeFeederInstalled;
    __declspec(property(get=GetUpdateLinksAtPrint,put=PutUpdateLinksAtPrint))
    VARIANT_BOOL UpdateLinksAtPrint;
    __declspec(property(get=GetPrintBackground,put=PutPrintBackground))
    VARIANT_BOOL PrintBackground;
    __declspec(property(get=GetPrintDrawingObjects,put=PutPrintDrawingObjects))
    VARIANT_BOOL PrintDrawingObjects;
    __declspec(property(get=GetDefaultTray,put=PutDefaultTray))
    _bstr_t DefaultTray;
    __declspec(property(get=GetDefaultTrayID,put=PutDefaultTrayID))
    long DefaultTrayID;
    __declspec(property(get=GetCreateBackup,put=PutCreateBackup))
    VARIANT_BOOL CreateBackup;
    __declspec(property(get=GetAllowFastSave,put=PutAllowFastSave))
    VARIANT_BOOL AllowFastSave;
    __declspec(property(get=GetSavePropertiesPrompt,put=PutSavePropertiesPrompt))
    VARIANT_BOOL SavePropertiesPrompt;
    __declspec(property(get=GetSaveNormalPrompt,put=PutSaveNormalPrompt))
    VARIANT_BOOL SaveNormalPrompt;
    __declspec(property(get=GetSaveInterval,put=PutSaveInterval))
    long SaveInterval;
    __declspec(property(get=GetBackgroundSave,put=PutBackgroundSave))
    VARIANT_BOOL BackgroundSave;
    __declspec(property(get=GetSuggestSpellingCorrections,put=PutSuggestSpellingCorrections))
    VARIANT_BOOL SuggestSpellingCorrections;
    __declspec(property(get=GetDefaultBorderLineWidth,put=PutDefaultBorderLineWidth))
    enum WdLineWidth DefaultBorderLineWidth;
    __declspec(property(get=GetCheckGrammarWithSpelling,put=PutCheckGrammarWithSpelling))
    VARIANT_BOOL CheckGrammarWithSpelling;
    __declspec(property(get=GetDefaultOpenFormat,put=PutDefaultOpenFormat))
    enum WdOpenFormat DefaultOpenFormat;
    __declspec(property(get=GetPrintDraft,put=PutPrintDraft))
    VARIANT_BOOL PrintDraft;
    __declspec(property(get=GetPrintReverse,put=PutPrintReverse))
    VARIANT_BOOL PrintReverse;
    __declspec(property(get=GetMapPaperSize,put=PutMapPaperSize))
    VARIANT_BOOL MapPaperSize;
    __declspec(property(get=GetAutoFormatAsYouTypeApplyTables,put=PutAutoFormatAsYouTypeApplyTables))
    VARIANT_BOOL AutoFormatAsYouTypeApplyTables;
    __declspec(property(get=GetAutoFormatApplyFirstIndents,put=PutAutoFormatApplyFirstIndents))
    VARIANT_BOOL AutoFormatApplyFirstIndents;
    __declspec(property(get=GetAutoFormatMatchParentheses,put=PutAutoFormatMatchParentheses))
    VARIANT_BOOL AutoFormatMatchParentheses;
    __declspec(property(get=GetInsertedTextMark,put=PutInsertedTextMark))
    enum WdInsertedTextMark InsertedTextMark;
    __declspec(property(get=GetDeletedTextMark,put=PutDeletedTextMark))
    enum WdDeletedTextMark DeletedTextMark;
    __declspec(property(get=GetRevisedLinesMark,put=PutRevisedLinesMark))
    enum WdRevisedLinesMark RevisedLinesMark;
    __declspec(property(get=GetInsertedTextColor,put=PutInsertedTextColor))
    enum WdColorIndex InsertedTextColor;
    __declspec(property(get=GetDeletedTextColor,put=PutDeletedTextColor))
    enum WdColorIndex DeletedTextColor;
    __declspec(property(get=GetRevisedLinesColor,put=PutRevisedLinesColor))
    enum WdColorIndex RevisedLinesColor;
    __declspec(property(get=GetAutoFormatReplaceFarEastDashes,put=PutAutoFormatReplaceFarEastDashes))
    VARIANT_BOOL AutoFormatReplaceFarEastDashes;
    __declspec(property(get=GetAutoFormatDeleteAutoSpaces,put=PutAutoFormatDeleteAutoSpaces))
    VARIANT_BOOL AutoFormatDeleteAutoSpaces;
    __declspec(property(get=GetDefaultFilePath,put=PutDefaultFilePath))
    _bstr_t DefaultFilePath[];
    __declspec(property(get=GetOvertype,put=PutOvertype))
    VARIANT_BOOL Overtype;
    __declspec(property(get=GetReplaceSelection,put=PutReplaceSelection))
    VARIANT_BOOL ReplaceSelection;
    __declspec(property(get=GetAllowDragAndDrop,put=PutAllowDragAndDrop))
    VARIANT_BOOL AllowDragAndDrop;
    __declspec(property(get=GetAutoWordSelection,put=PutAutoWordSelection))
    VARIANT_BOOL AutoWordSelection;
    __declspec(property(get=GetINSKeyForPaste,put=PutINSKeyForPaste))
    VARIANT_BOOL INSKeyForPaste;
    __declspec(property(get=GetSmartCutPaste,put=PutSmartCutPaste))
    VARIANT_BOOL SmartCutPaste;
    __declspec(property(get=GetTabIndentKey,put=PutTabIndentKey))
    VARIANT_BOOL TabIndentKey;
    __declspec(property(get=GetPictureEditor,put=PutPictureEditor))
    _bstr_t PictureEditor;
    __declspec(property(get=GetAnimateScreenMovements,put=PutAnimateScreenMovements))
    VARIANT_BOOL AnimateScreenMovements;
    __declspec(property(get=GetVirusProtection,put=PutVirusProtection))
    VARIANT_BOOL VirusProtection;
    __declspec(property(get=GetRevisedPropertiesMark,put=PutRevisedPropertiesMark))
    enum WdRevisedPropertiesMark RevisedPropertiesMark;
    __declspec(property(get=GetRevisedPropertiesColor,put=PutRevisedPropertiesColor))
    enum WdColorIndex RevisedPropertiesColor;
    __declspec(property(get=GetAutoFormatAsYouTypeApplyFirstIndents,put=PutAutoFormatAsYouTypeApplyFirstIndents))
    VARIANT_BOOL AutoFormatAsYouTypeApplyFirstIndents;
    __declspec(property(get=GetSnapToGrid,put=PutSnapToGrid))
    VARIANT_BOOL SnapToGrid;
    __declspec(property(get=GetSnapToShapes,put=PutSnapToShapes))
    VARIANT_BOOL SnapToShapes;
    __declspec(property(get=GetGridDistanceHorizontal,put=PutGridDistanceHorizontal))
    float GridDistanceHorizontal;
    __declspec(property(get=GetGridDistanceVertical,put=PutGridDistanceVertical))
    float GridDistanceVertical;
    __declspec(property(get=GetGridOriginHorizontal,put=PutGridOriginHorizontal))
    float GridOriginHorizontal;
    __declspec(property(get=GetGridOriginVertical,put=PutGridOriginVertical))
    float GridOriginVertical;
    __declspec(property(get=GetAutoFormatAsYouTypeApplyDates,put=PutAutoFormatAsYouTypeApplyDates))
    VARIANT_BOOL AutoFormatAsYouTypeApplyDates;
    __declspec(property(get=GetInlineConversion,put=PutInlineConversion))
    VARIANT_BOOL InlineConversion;
    __declspec(property(get=GetIMEAutomaticControl,put=PutIMEAutomaticControl))
    VARIANT_BOOL IMEAutomaticControl;
    __declspec(property(get=GetAutoFormatAsYouTypeApplyClosings,put=PutAutoFormatAsYouTypeApplyClosings))
    VARIANT_BOOL AutoFormatAsYouTypeApplyClosings;
    __declspec(property(get=GetAutoFormatAsYouTypeMatchParentheses,put=PutAutoFormatAsYouTypeMatchParentheses))
    VARIANT_BOOL AutoFormatAsYouTypeMatchParentheses;
    __declspec(property(get=GetAutoFormatAsYouTypeReplaceFarEastDashes,put=PutAutoFormatAsYouTypeReplaceFarEastDashes))
    VARIANT_BOOL AutoFormatAsYouTypeReplaceFarEastDashes;
    __declspec(property(get=GetAutoFormatAsYouTypeDeleteAutoSpaces,put=PutAutoFormatAsYouTypeDeleteAutoSpaces))
    VARIANT_BOOL AutoFormatAsYouTypeDeleteAutoSpaces;
    __declspec(property(get=GetAutoFormatAsYouTypeInsertClosings,put=PutAutoFormatAsYouTypeInsertClosings))
    VARIANT_BOOL AutoFormatAsYouTypeInsertClosings;
    __declspec(property(get=GetAutoFormatAsYouTypeAutoLetterWizard,put=PutAutoFormatAsYouTypeAutoLetterWizard))
    VARIANT_BOOL AutoFormatAsYouTypeAutoLetterWizard;
    __declspec(property(get=GetAutoFormatAsYouTypeInsertOvers,put=PutAutoFormatAsYouTypeInsertOvers))
    VARIANT_BOOL AutoFormatAsYouTypeInsertOvers;
    __declspec(property(get=GetDisplayGridLines,put=PutDisplayGridLines))
    VARIANT_BOOL DisplayGridLines;
    __declspec(property(get=GetMatchFuzzyCase,put=PutMatchFuzzyCase))
    VARIANT_BOOL MatchFuzzyCase;
    __declspec(property(get=GetMatchFuzzyByte,put=PutMatchFuzzyByte))
    VARIANT_BOOL MatchFuzzyByte;
    __declspec(property(get=GetMatchFuzzyHiragana,put=PutMatchFuzzyHiragana))
    VARIANT_BOOL MatchFuzzyHiragana;
    __declspec(property(get=GetMatchFuzzySmallKana,put=PutMatchFuzzySmallKana))
    VARIANT_BOOL MatchFuzzySmallKana;
    __declspec(property(get=GetMatchFuzzyDash,put=PutMatchFuzzyDash))
    VARIANT_BOOL MatchFuzzyDash;
    __declspec(property(get=GetMatchFuzzyIterationMark,put=PutMatchFuzzyIterationMark))
    VARIANT_BOOL MatchFuzzyIterationMark;
    __declspec(property(get=GetMatchFuzzyKanji,put=PutMatchFuzzyKanji))
    VARIANT_BOOL MatchFuzzyKanji;
    __declspec(property(get=GetMatchFuzzyOldKana,put=PutMatchFuzzyOldKana))
    VARIANT_BOOL MatchFuzzyOldKana;
    __declspec(property(get=GetMatchFuzzyProlongedSoundMark,put=PutMatchFuzzyProlongedSoundMark))
    VARIANT_BOOL MatchFuzzyProlongedSoundMark;
    __declspec(property(get=GetMatchFuzzyDZ,put=PutMatchFuzzyDZ))
    VARIANT_BOOL MatchFuzzyDZ;
    __declspec(property(get=GetMatchFuzzyBV,put=PutMatchFuzzyBV))
    VARIANT_BOOL MatchFuzzyBV;
    __declspec(property(get=GetMatchFuzzyTC,put=PutMatchFuzzyTC))
    VARIANT_BOOL MatchFuzzyTC;
    __declspec(property(get=GetMatchFuzzyHF,put=PutMatchFuzzyHF))
    VARIANT_BOOL MatchFuzzyHF;
    __declspec(property(get=GetMatchFuzzyZJ,put=PutMatchFuzzyZJ))
    VARIANT_BOOL MatchFuzzyZJ;
    __declspec(property(get=GetMatchFuzzyAY,put=PutMatchFuzzyAY))
    VARIANT_BOOL MatchFuzzyAY;
    __declspec(property(get=GetMatchFuzzyKiKu,put=PutMatchFuzzyKiKu))
    VARIANT_BOOL MatchFuzzyKiKu;
    __declspec(property(get=GetMatchFuzzyPunctuation,put=PutMatchFuzzyPunctuation))
    VARIANT_BOOL MatchFuzzyPunctuation;
    __declspec(property(get=GetMatchFuzzySpace,put=PutMatchFuzzySpace))
    VARIANT_BOOL MatchFuzzySpace;
    __declspec(property(get=GetApplyFarEastFontsToAscii,put=PutApplyFarEastFontsToAscii))
    VARIANT_BOOL ApplyFarEastFontsToAscii;
    __declspec(property(get=GetConvertHighAnsiToFarEast,put=PutConvertHighAnsiToFarEast))
    VARIANT_BOOL ConvertHighAnsiToFarEast;
    __declspec(property(get=GetPrintOddPagesInAscendingOrder,put=PutPrintOddPagesInAscendingOrder))
    VARIANT_BOOL PrintOddPagesInAscendingOrder;
    __declspec(property(get=GetPrintEvenPagesInAscendingOrder,put=PutPrintEvenPagesInAscendingOrder))
    VARIANT_BOOL PrintEvenPagesInAscendingOrder;
    __declspec(property(get=GetDefaultBorderColorIndex,put=PutDefaultBorderColorIndex))
    enum WdColorIndex DefaultBorderColorIndex;
    __declspec(property(get=GetEnableMisusedWordsDictionary,put=PutEnableMisusedWordsDictionary))
    VARIANT_BOOL EnableMisusedWordsDictionary;
    __declspec(property(get=GetAllowCombinedAuxiliaryForms,put=PutAllowCombinedAuxiliaryForms))
    VARIANT_BOOL AllowCombinedAuxiliaryForms;
    __declspec(property(get=GetHangulHanjaFastConversion,put=PutHangulHanjaFastConversion))
    VARIANT_BOOL HangulHanjaFastConversion;
    __declspec(property(get=GetCheckHangulEndings,put=PutCheckHangulEndings))
    VARIANT_BOOL CheckHangulEndings;
    __declspec(property(get=GetEnableHangulHanjaRecentOrdering,put=PutEnableHangulHanjaRecentOrdering))
    VARIANT_BOOL EnableHangulHanjaRecentOrdering;
    __declspec(property(get=GetMultipleWordConversionsMode,put=PutMultipleWordConversionsMode))
    enum WdMultipleWordConversionsMode MultipleWordConversionsMode;
    __declspec(property(get=GetDefaultBorderColor,put=PutDefaultBorderColor))
    enum WdColor DefaultBorderColor;
    __declspec(property(get=GetAllowPixelUnits,put=PutAllowPixelUnits))
    VARIANT_BOOL AllowPixelUnits;
    __declspec(property(get=GetUseCharacterUnit,put=PutUseCharacterUnit))
    VARIANT_BOOL UseCharacterUnit;
    __declspec(property(get=GetAllowCompoundNounProcessing,put=PutAllowCompoundNounProcessing))
    VARIANT_BOOL AllowCompoundNounProcessing;
    __declspec(property(get=GetAutoKeyboardSwitching,put=PutAutoKeyboardSwitching))
    VARIANT_BOOL AutoKeyboardSwitching;
    __declspec(property(get=GetDocumentViewDirection,put=PutDocumentViewDirection))
    enum WdDocumentViewDirection DocumentViewDirection;
    __declspec(property(get=GetArabicNumeral,put=PutArabicNumeral))
    enum WdArabicNumeral ArabicNumeral;
    __declspec(property(get=GetMonthNames,put=PutMonthNames))
    enum WdMonthNames MonthNames;
    __declspec(property(get=GetCursorMovement,put=PutCursorMovement))
    enum WdCursorMovement CursorMovement;
    __declspec(property(get=GetVisualSelection,put=PutVisualSelection))
    enum WdVisualSelection VisualSelection;
    __declspec(property(get=GetShowDiacritics,put=PutShowDiacritics))
    VARIANT_BOOL ShowDiacritics;
    __declspec(property(get=GetShowControlCharacters,put=PutShowControlCharacters))
    VARIANT_BOOL ShowControlCharacters;
    __declspec(property(get=GetAddControlCharacters,put=PutAddControlCharacters))
    VARIANT_BOOL AddControlCharacters;
    __declspec(property(get=GetAddBiDirectionalMarksWhenSavingTextFile,put=PutAddBiDirectionalMarksWhenSavingTextFile))
    VARIANT_BOOL AddBiDirectionalMarksWhenSavingTextFile;
    __declspec(property(get=GetStrictInitialAlefHamza,put=PutStrictInitialAlefHamza))
    VARIANT_BOOL StrictInitialAlefHamza;
    __declspec(property(get=GetStrictFinalYaa,put=PutStrictFinalYaa))
    VARIANT_BOOL StrictFinalYaa;
    __declspec(property(get=GetHebrewMode,put=PutHebrewMode))
    enum WdHebSpellStart HebrewMode;
    __declspec(property(get=GetArabicMode,put=PutArabicMode))
    enum WdAraSpeller ArabicMode;
    __declspec(property(get=GetAllowClickAndTypeMouse,put=PutAllowClickAndTypeMouse))
    VARIANT_BOOL AllowClickAndTypeMouse;
    __declspec(property(get=GetUseGermanSpellingReform,put=PutUseGermanSpellingReform))
    VARIANT_BOOL UseGermanSpellingReform;
    __declspec(property(get=GetInterpretHighAnsi,put=PutInterpretHighAnsi))
    enum WdHighAnsiText InterpretHighAnsi;
    __declspec(property(get=GetAddHebDoubleQuote,put=PutAddHebDoubleQuote))
    VARIANT_BOOL AddHebDoubleQuote;
    __declspec(property(get=GetUseDiffDiacColor,put=PutUseDiffDiacColor))
    VARIANT_BOOL UseDiffDiacColor;
    __declspec(property(get=GetDiacriticColorVal,put=PutDiacriticColorVal))
    enum WdColor DiacriticColorVal;
    __declspec(property(get=GetOptimizeForWord97byDefault,put=PutOptimizeForWord97byDefault))
    VARIANT_BOOL OptimizeForWord97byDefault;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoFormatApplyHeadings,put=PutAutoFormatApplyHeadings))
    VARIANT_BOOL AutoFormatApplyHeadings;
    __declspec(property(get=GetAutoFormatApplyLists,put=PutAutoFormatApplyLists))
    VARIANT_BOOL AutoFormatApplyLists;
    __declspec(property(get=GetAutoFormatApplyBulletedLists,put=PutAutoFormatApplyBulletedLists))
    VARIANT_BOOL AutoFormatApplyBulletedLists;
    __declspec(property(get=GetAutoFormatApplyOtherParas,put=PutAutoFormatApplyOtherParas))
    VARIANT_BOOL AutoFormatApplyOtherParas;
    __declspec(property(get=GetAutoFormatReplaceQuotes,put=PutAutoFormatReplaceQuotes))
    VARIANT_BOOL AutoFormatReplaceQuotes;
    __declspec(property(get=GetAutoFormatReplaceSymbols,put=PutAutoFormatReplaceSymbols))
    VARIANT_BOOL AutoFormatReplaceSymbols;
    __declspec(property(get=GetAutoFormatReplaceOrdinals,put=PutAutoFormatReplaceOrdinals))
    VARIANT_BOOL AutoFormatReplaceOrdinals;
    __declspec(property(get=GetAutoFormatReplaceFractions,put=PutAutoFormatReplaceFractions))
    VARIANT_BOOL AutoFormatReplaceFractions;
    __declspec(property(get=GetAutoFormatReplacePlainTextEmphasis,put=PutAutoFormatReplacePlainTextEmphasis))
    VARIANT_BOOL AutoFormatReplacePlainTextEmphasis;
    __declspec(property(get=GetAutoFormatPreserveStyles,put=PutAutoFormatPreserveStyles))
    VARIANT_BOOL AutoFormatPreserveStyles;
    __declspec(property(get=GetAutoFormatAsYouTypeApplyHeadings,put=PutAutoFormatAsYouTypeApplyHeadings))
    VARIANT_BOOL AutoFormatAsYouTypeApplyHeadings;
    __declspec(property(get=GetAutoFormatAsYouTypeApplyBorders,put=PutAutoFormatAsYouTypeApplyBorders))
    VARIANT_BOOL AutoFormatAsYouTypeApplyBorders;
    __declspec(property(get=GetAutoFormatAsYouTypeApplyBulletedLists,put=PutAutoFormatAsYouTypeApplyBulletedLists))
    VARIANT_BOOL AutoFormatAsYouTypeApplyBulletedLists;
    __declspec(property(get=GetAutoFormatAsYouTypeApplyNumberedLists,put=PutAutoFormatAsYouTypeApplyNumberedLists))
    VARIANT_BOOL AutoFormatAsYouTypeApplyNumberedLists;
    __declspec(property(get=GetAutoFormatAsYouTypeReplaceQuotes,put=PutAutoFormatAsYouTypeReplaceQuotes))
    VARIANT_BOOL AutoFormatAsYouTypeReplaceQuotes;
    __declspec(property(get=GetAutoFormatAsYouTypeReplaceSymbols,put=PutAutoFormatAsYouTypeReplaceSymbols))
    VARIANT_BOOL AutoFormatAsYouTypeReplaceSymbols;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAllowAccentedUppercase ( );
    void PutAllowAccentedUppercase (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetWPHelp ( );
    void PutWPHelp (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetWPDocNavKeys ( );
    void PutWPDocNavKeys (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPagination ( );
    void PutPagination (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetBlueScreen ( );
    void PutBlueScreen (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetEnableSound ( );
    void PutEnableSound (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetConfirmConversions ( );
    void PutConfirmConversions (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetUpdateLinksAtOpen ( );
    void PutUpdateLinksAtOpen (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSendMailAttach ( );
    void PutSendMailAttach (
        VARIANT_BOOL prop );
    enum WdMeasurementUnits GetMeasurementUnit ( );
    void PutMeasurementUnit (
        enum WdMeasurementUnits prop );
    long GetButtonFieldClicks ( );
    void PutButtonFieldClicks (
        long prop );
    VARIANT_BOOL GetShortMenuNames ( );
    void PutShortMenuNames (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetRTFInClipboard ( );
    void PutRTFInClipboard (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetUpdateFieldsAtPrint ( );
    void PutUpdateFieldsAtPrint (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPrintProperties ( );
    void PutPrintProperties (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPrintFieldCodes ( );
    void PutPrintFieldCodes (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPrintComments ( );
    void PutPrintComments (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPrintHiddenText ( );
    void PutPrintHiddenText (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetEnvelopeFeederInstalled ( );
    VARIANT_BOOL GetUpdateLinksAtPrint ( );
    void PutUpdateLinksAtPrint (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPrintBackground ( );
    void PutPrintBackground (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPrintDrawingObjects ( );
    void PutPrintDrawingObjects (
        VARIANT_BOOL prop );
    _bstr_t GetDefaultTray ( );
    void PutDefaultTray (
        _bstr_t prop );
    long GetDefaultTrayID ( );
    void PutDefaultTrayID (
        long prop );
    VARIANT_BOOL GetCreateBackup ( );
    void PutCreateBackup (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAllowFastSave ( );
    void PutAllowFastSave (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSavePropertiesPrompt ( );
    void PutSavePropertiesPrompt (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSaveNormalPrompt ( );
    void PutSaveNormalPrompt (
        VARIANT_BOOL prop );
    long GetSaveInterval ( );
    void PutSaveInterval (
        long prop );
    VARIANT_BOOL GetBackgroundSave ( );
    void PutBackgroundSave (
        VARIANT_BOOL prop );
    enum WdInsertedTextMark GetInsertedTextMark ( );
    void PutInsertedTextMark (
        enum WdInsertedTextMark prop );
    enum WdDeletedTextMark GetDeletedTextMark ( );
    void PutDeletedTextMark (
        enum WdDeletedTextMark prop );
    enum WdRevisedLinesMark GetRevisedLinesMark ( );
    void PutRevisedLinesMark (
        enum WdRevisedLinesMark prop );
    enum WdColorIndex GetInsertedTextColor ( );
    void PutInsertedTextColor (
        enum WdColorIndex prop );
    enum WdColorIndex GetDeletedTextColor ( );
    void PutDeletedTextColor (
        enum WdColorIndex prop );
    enum WdColorIndex GetRevisedLinesColor ( );
    void PutRevisedLinesColor (
        enum WdColorIndex prop );
    _bstr_t GetDefaultFilePath (
        enum WdDefaultFilePath Path );
    void PutDefaultFilePath (
        enum WdDefaultFilePath Path,
        _bstr_t prop );
    VARIANT_BOOL GetOvertype ( );
    void PutOvertype (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetReplaceSelection ( );
    void PutReplaceSelection (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAllowDragAndDrop ( );
    void PutAllowDragAndDrop (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoWordSelection ( );
    void PutAutoWordSelection (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetINSKeyForPaste ( );
    void PutINSKeyForPaste (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSmartCutPaste ( );
    void PutSmartCutPaste (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetTabIndentKey ( );
    void PutTabIndentKey (
        VARIANT_BOOL prop );
    _bstr_t GetPictureEditor ( );
    void PutPictureEditor (
        _bstr_t prop );
    VARIANT_BOOL GetAnimateScreenMovements ( );
    void PutAnimateScreenMovements (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetVirusProtection ( );
    void PutVirusProtection (
        VARIANT_BOOL prop );
    enum WdRevisedPropertiesMark GetRevisedPropertiesMark ( );
    void PutRevisedPropertiesMark (
        enum WdRevisedPropertiesMark prop );
    enum WdColorIndex GetRevisedPropertiesColor ( );
    void PutRevisedPropertiesColor (
        enum WdColorIndex prop );
    VARIANT_BOOL GetSnapToGrid ( );
    void PutSnapToGrid (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSnapToShapes ( );
    void PutSnapToShapes (
        VARIANT_BOOL prop );
    float GetGridDistanceHorizontal ( );
    void PutGridDistanceHorizontal (
        float prop );
    float GetGridDistanceVertical ( );
    void PutGridDistanceVertical (
        float prop );
    float GetGridOriginHorizontal ( );
    void PutGridOriginHorizontal (
        float prop );
    float GetGridOriginVertical ( );
    void PutGridOriginVertical (
        float prop );
    VARIANT_BOOL GetInlineConversion ( );
    void PutInlineConversion (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetIMEAutomaticControl ( );
    void PutIMEAutomaticControl (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatApplyHeadings ( );
    void PutAutoFormatApplyHeadings (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatApplyLists ( );
    void PutAutoFormatApplyLists (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatApplyBulletedLists ( );
    void PutAutoFormatApplyBulletedLists (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatApplyOtherParas ( );
    void PutAutoFormatApplyOtherParas (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatReplaceQuotes ( );
    void PutAutoFormatReplaceQuotes (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatReplaceSymbols ( );
    void PutAutoFormatReplaceSymbols (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatReplaceOrdinals ( );
    void PutAutoFormatReplaceOrdinals (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatReplaceFractions ( );
    void PutAutoFormatReplaceFractions (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatReplacePlainTextEmphasis ( );
    void PutAutoFormatReplacePlainTextEmphasis (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatPreserveStyles ( );
    void PutAutoFormatPreserveStyles (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeApplyHeadings ( );
    void PutAutoFormatAsYouTypeApplyHeadings (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeApplyBorders ( );
    void PutAutoFormatAsYouTypeApplyBorders (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeApplyBulletedLists ( );
    void PutAutoFormatAsYouTypeApplyBulletedLists (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeApplyNumberedLists ( );
    void PutAutoFormatAsYouTypeApplyNumberedLists (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeReplaceQuotes ( );
    void PutAutoFormatAsYouTypeReplaceQuotes (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeReplaceSymbols ( );
    void PutAutoFormatAsYouTypeReplaceSymbols (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeReplaceOrdinals ( );
    void PutAutoFormatAsYouTypeReplaceOrdinals (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeReplaceFractions ( );
    void PutAutoFormatAsYouTypeReplaceFractions (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeReplacePlainTextEmphasis ( );
    void PutAutoFormatAsYouTypeReplacePlainTextEmphasis (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeFormatListItemBeginning ( );
    void PutAutoFormatAsYouTypeFormatListItemBeginning (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeDefineStyles ( );
    void PutAutoFormatAsYouTypeDefineStyles (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatPlainTextWordMail ( );
    void PutAutoFormatPlainTextWordMail (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeReplaceHyperlinks ( );
    void PutAutoFormatAsYouTypeReplaceHyperlinks (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatReplaceHyperlinks ( );
    void PutAutoFormatReplaceHyperlinks (
        VARIANT_BOOL prop );
    enum WdColorIndex GetDefaultHighlightColorIndex ( );
    void PutDefaultHighlightColorIndex (
        enum WdColorIndex prop );
    enum WdLineStyle GetDefaultBorderLineStyle ( );
    void PutDefaultBorderLineStyle (
        enum WdLineStyle prop );
    VARIANT_BOOL GetCheckSpellingAsYouType ( );
    void PutCheckSpellingAsYouType (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetCheckGrammarAsYouType ( );
    void PutCheckGrammarAsYouType (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetIgnoreInternetAndFileAddresses ( );
    void PutIgnoreInternetAndFileAddresses (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowReadabilityStatistics ( );
    void PutShowReadabilityStatistics (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetIgnoreUppercase ( );
    void PutIgnoreUppercase (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetIgnoreMixedDigits ( );
    void PutIgnoreMixedDigits (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSuggestFromMainDictionaryOnly ( );
    void PutSuggestFromMainDictionaryOnly (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetSuggestSpellingCorrections ( );
    void PutSuggestSpellingCorrections (
        VARIANT_BOOL prop );
    enum WdLineWidth GetDefaultBorderLineWidth ( );
    void PutDefaultBorderLineWidth (
        enum WdLineWidth prop );
    VARIANT_BOOL GetCheckGrammarWithSpelling ( );
    void PutCheckGrammarWithSpelling (
        VARIANT_BOOL prop );
    enum WdOpenFormat GetDefaultOpenFormat ( );
    void PutDefaultOpenFormat (
        enum WdOpenFormat prop );
    VARIANT_BOOL GetPrintDraft ( );
    void PutPrintDraft (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPrintReverse ( );
    void PutPrintReverse (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMapPaperSize ( );
    void PutMapPaperSize (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeApplyTables ( );
    void PutAutoFormatAsYouTypeApplyTables (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatApplyFirstIndents ( );
    void PutAutoFormatApplyFirstIndents (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatMatchParentheses ( );
    void PutAutoFormatMatchParentheses (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatReplaceFarEastDashes ( );
    void PutAutoFormatReplaceFarEastDashes (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatDeleteAutoSpaces ( );
    void PutAutoFormatDeleteAutoSpaces (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeApplyFirstIndents ( );
    void PutAutoFormatAsYouTypeApplyFirstIndents (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeApplyDates ( );
    void PutAutoFormatAsYouTypeApplyDates (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeApplyClosings ( );
    void PutAutoFormatAsYouTypeApplyClosings (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeMatchParentheses ( );
    void PutAutoFormatAsYouTypeMatchParentheses (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeReplaceFarEastDashes ( );
    void PutAutoFormatAsYouTypeReplaceFarEastDashes (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeDeleteAutoSpaces ( );
    void PutAutoFormatAsYouTypeDeleteAutoSpaces (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeInsertClosings ( );
    void PutAutoFormatAsYouTypeInsertClosings (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeAutoLetterWizard ( );
    void PutAutoFormatAsYouTypeAutoLetterWizard (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoFormatAsYouTypeInsertOvers ( );
    void PutAutoFormatAsYouTypeInsertOvers (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetDisplayGridLines ( );
    void PutDisplayGridLines (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyCase ( );
    void PutMatchFuzzyCase (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyByte ( );
    void PutMatchFuzzyByte (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyHiragana ( );
    void PutMatchFuzzyHiragana (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzySmallKana ( );
    void PutMatchFuzzySmallKana (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyDash ( );
    void PutMatchFuzzyDash (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyIterationMark ( );
    void PutMatchFuzzyIterationMark (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyKanji ( );
    void PutMatchFuzzyKanji (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyOldKana ( );
    void PutMatchFuzzyOldKana (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyProlongedSoundMark ( );
    void PutMatchFuzzyProlongedSoundMark (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyDZ ( );
    void PutMatchFuzzyDZ (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyBV ( );
    void PutMatchFuzzyBV (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyTC ( );
    void PutMatchFuzzyTC (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyHF ( );
    void PutMatchFuzzyHF (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyZJ ( );
    void PutMatchFuzzyZJ (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyAY ( );
    void PutMatchFuzzyAY (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyKiKu ( );
    void PutMatchFuzzyKiKu (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzyPunctuation ( );
    void PutMatchFuzzyPunctuation (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetMatchFuzzySpace ( );
    void PutMatchFuzzySpace (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetApplyFarEastFontsToAscii ( );
    void PutApplyFarEastFontsToAscii (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetConvertHighAnsiToFarEast ( );
    void PutConvertHighAnsiToFarEast (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPrintOddPagesInAscendingOrder ( );
    void PutPrintOddPagesInAscendingOrder (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetPrintEvenPagesInAscendingOrder ( );
    void PutPrintEvenPagesInAscendingOrder (
        VARIANT_BOOL prop );
    enum WdColorIndex GetDefaultBorderColorIndex ( );
    void PutDefaultBorderColorIndex (
        enum WdColorIndex prop );
    VARIANT_BOOL GetEnableMisusedWordsDictionary ( );
    void PutEnableMisusedWordsDictionary (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAllowCombinedAuxiliaryForms ( );
    void PutAllowCombinedAuxiliaryForms (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetHangulHanjaFastConversion ( );
    void PutHangulHanjaFastConversion (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetCheckHangulEndings ( );
    void PutCheckHangulEndings (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetEnableHangulHanjaRecentOrdering ( );
    void PutEnableHangulHanjaRecentOrdering (
        VARIANT_BOOL prop );
    enum WdMultipleWordConversionsMode GetMultipleWordConversionsMode ( );
    void PutMultipleWordConversionsMode (
        enum WdMultipleWordConversionsMode prop );
    HRESULT SetWPHelpOptions (
        VARIANT * CommandKeyHelp = &vtMissing,
        VARIANT * DocNavigationKeys = &vtMissing,
        VARIANT * MouseSimulation = &vtMissing,
        VARIANT * DemoGuidance = &vtMissing,
        VARIANT * DemoSpeed = &vtMissing,
        VARIANT * HelpType = &vtMissing );
    enum WdColor GetDefaultBorderColor ( );
    void PutDefaultBorderColor (
        enum WdColor prop );
    VARIANT_BOOL GetAllowPixelUnits ( );
    void PutAllowPixelUnits (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetUseCharacterUnit ( );
    void PutUseCharacterUnit (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAllowCompoundNounProcessing ( );
    void PutAllowCompoundNounProcessing (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAutoKeyboardSwitching ( );
    void PutAutoKeyboardSwitching (
        VARIANT_BOOL prop );
    enum WdDocumentViewDirection GetDocumentViewDirection ( );
    void PutDocumentViewDirection (
        enum WdDocumentViewDirection prop );
    enum WdArabicNumeral GetArabicNumeral ( );
    void PutArabicNumeral (
        enum WdArabicNumeral prop );
    enum WdMonthNames GetMonthNames ( );
    void PutMonthNames (
        enum WdMonthNames prop );
    enum WdCursorMovement GetCursorMovement ( );
    void PutCursorMovement (
        enum WdCursorMovement prop );
    enum WdVisualSelection GetVisualSelection ( );
    void PutVisualSelection (
        enum WdVisualSelection prop );
    VARIANT_BOOL GetShowDiacritics ( );
    void PutShowDiacritics (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetShowControlCharacters ( );
    void PutShowControlCharacters (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAddControlCharacters ( );
    void PutAddControlCharacters (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAddBiDirectionalMarksWhenSavingTextFile ( );
    void PutAddBiDirectionalMarksWhenSavingTextFile (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetStrictInitialAlefHamza ( );
    void PutStrictInitialAlefHamza (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetStrictFinalYaa ( );
    void PutStrictFinalYaa (
        VARIANT_BOOL prop );
    enum WdHebSpellStart GetHebrewMode ( );
    void PutHebrewMode (
        enum WdHebSpellStart prop );
    enum WdAraSpeller GetArabicMode ( );
    void PutArabicMode (
        enum WdAraSpeller prop );
    VARIANT_BOOL GetAllowClickAndTypeMouse ( );
    void PutAllowClickAndTypeMouse (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetUseGermanSpellingReform ( );
    void PutUseGermanSpellingReform (
        VARIANT_BOOL prop );
    enum WdHighAnsiText GetInterpretHighAnsi ( );
    void PutInterpretHighAnsi (
        enum WdHighAnsiText prop );
    VARIANT_BOOL GetAddHebDoubleQuote ( );
    void PutAddHebDoubleQuote (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetUseDiffDiacColor ( );
    void PutUseDiffDiacColor (
        VARIANT_BOOL prop );
    enum WdColor GetDiacriticColorVal ( );
    void PutDiacriticColorVal (
        enum WdColor prop );
    VARIANT_BOOL GetOptimizeForWord97byDefault ( );
    void PutOptimizeForWord97byDefault (
        VARIANT_BOOL prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_AllowAccentedUppercase (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AllowAccentedUppercase (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_WPHelp (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_WPHelp (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_WPDocNavKeys (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_WPDocNavKeys (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Pagination (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Pagination (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_BlueScreen (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_BlueScreen (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_EnableSound (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_EnableSound (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ConfirmConversions (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ConfirmConversions (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_UpdateLinksAtOpen (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UpdateLinksAtOpen (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SendMailAttach (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SendMailAttach (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MeasurementUnit (
        enum WdMeasurementUnits * prop ) = 0;
    virtual HRESULT __stdcall put_MeasurementUnit (
        enum WdMeasurementUnits prop ) = 0;
    virtual HRESULT __stdcall get_ButtonFieldClicks (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_ButtonFieldClicks (
        long prop ) = 0;
    virtual HRESULT __stdcall get_ShortMenuNames (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShortMenuNames (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_RTFInClipboard (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_RTFInClipboard (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_UpdateFieldsAtPrint (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UpdateFieldsAtPrint (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PrintProperties (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintProperties (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PrintFieldCodes (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintFieldCodes (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PrintComments (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintComments (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PrintHiddenText (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintHiddenText (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_EnvelopeFeederInstalled (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_UpdateLinksAtPrint (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UpdateLinksAtPrint (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PrintBackground (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintBackground (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PrintDrawingObjects (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintDrawingObjects (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DefaultTray (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultTray (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_DefaultTrayID (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultTrayID (
        long prop ) = 0;
    virtual HRESULT __stdcall get_CreateBackup (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CreateBackup (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AllowFastSave (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AllowFastSave (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SavePropertiesPrompt (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SavePropertiesPrompt (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SaveNormalPrompt (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SaveNormalPrompt (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SaveInterval (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_SaveInterval (
        long prop ) = 0;
    virtual HRESULT __stdcall get_BackgroundSave (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_BackgroundSave (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_InsertedTextMark (
        enum WdInsertedTextMark * prop ) = 0;
    virtual HRESULT __stdcall put_InsertedTextMark (
        enum WdInsertedTextMark prop ) = 0;
    virtual HRESULT __stdcall get_DeletedTextMark (
        enum WdDeletedTextMark * prop ) = 0;
    virtual HRESULT __stdcall put_DeletedTextMark (
        enum WdDeletedTextMark prop ) = 0;
    virtual HRESULT __stdcall get_RevisedLinesMark (
        enum WdRevisedLinesMark * prop ) = 0;
    virtual HRESULT __stdcall put_RevisedLinesMark (
        enum WdRevisedLinesMark prop ) = 0;
    virtual HRESULT __stdcall get_InsertedTextColor (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_InsertedTextColor (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_DeletedTextColor (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_DeletedTextColor (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_RevisedLinesColor (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_RevisedLinesColor (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_DefaultFilePath (
        enum WdDefaultFilePath Path,
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultFilePath (
        enum WdDefaultFilePath Path,
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Overtype (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_Overtype (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ReplaceSelection (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ReplaceSelection (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AllowDragAndDrop (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AllowDragAndDrop (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoWordSelection (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoWordSelection (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_INSKeyForPaste (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_INSKeyForPaste (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SmartCutPaste (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SmartCutPaste (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_TabIndentKey (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_TabIndentKey (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PictureEditor (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_PictureEditor (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_AnimateScreenMovements (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AnimateScreenMovements (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_VirusProtection (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_VirusProtection (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_RevisedPropertiesMark (
        enum WdRevisedPropertiesMark * prop ) = 0;
    virtual HRESULT __stdcall put_RevisedPropertiesMark (
        enum WdRevisedPropertiesMark prop ) = 0;
    virtual HRESULT __stdcall get_RevisedPropertiesColor (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_RevisedPropertiesColor (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_SnapToGrid (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SnapToGrid (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SnapToShapes (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SnapToShapes (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_GridDistanceHorizontal (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_GridDistanceHorizontal (
        float prop ) = 0;
    virtual HRESULT __stdcall get_GridDistanceVertical (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_GridDistanceVertical (
        float prop ) = 0;
    virtual HRESULT __stdcall get_GridOriginHorizontal (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_GridOriginHorizontal (
        float prop ) = 0;
    virtual HRESULT __stdcall get_GridOriginVertical (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_GridOriginVertical (
        float prop ) = 0;
    virtual HRESULT __stdcall get_InlineConversion (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_InlineConversion (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_IMEAutomaticControl (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IMEAutomaticControl (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatApplyHeadings (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatApplyHeadings (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatApplyLists (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatApplyLists (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatApplyBulletedLists (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatApplyBulletedLists (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatApplyOtherParas (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatApplyOtherParas (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatReplaceQuotes (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatReplaceQuotes (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatReplaceSymbols (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatReplaceSymbols (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatReplaceOrdinals (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatReplaceOrdinals (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatReplaceFractions (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatReplaceFractions (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatReplacePlainTextEmphasis (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatReplacePlainTextEmphasis (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatPreserveStyles (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatPreserveStyles (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeApplyHeadings (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeApplyHeadings (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeApplyBorders (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeApplyBorders (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeApplyBulletedLists (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeApplyBulletedLists (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeApplyNumberedLists (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeApplyNumberedLists (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeReplaceQuotes (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeReplaceQuotes (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeReplaceSymbols (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeReplaceSymbols (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeReplaceOrdinals (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeReplaceOrdinals (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeReplaceFractions (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeReplaceFractions (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeReplacePlainTextEmphasis (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeReplacePlainTextEmphasis (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeFormatListItemBeginning (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeFormatListItemBeginning (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeDefineStyles (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeDefineStyles (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatPlainTextWordMail (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatPlainTextWordMail (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeReplaceHyperlinks (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeReplaceHyperlinks (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatReplaceHyperlinks (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatReplaceHyperlinks (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DefaultHighlightColorIndex (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultHighlightColorIndex (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_DefaultBorderLineStyle (
        enum WdLineStyle * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultBorderLineStyle (
        enum WdLineStyle prop ) = 0;
    virtual HRESULT __stdcall get_CheckSpellingAsYouType (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CheckSpellingAsYouType (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_CheckGrammarAsYouType (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CheckGrammarAsYouType (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_IgnoreInternetAndFileAddresses (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IgnoreInternetAndFileAddresses (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowReadabilityStatistics (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowReadabilityStatistics (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_IgnoreUppercase (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IgnoreUppercase (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_IgnoreMixedDigits (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_IgnoreMixedDigits (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SuggestFromMainDictionaryOnly (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SuggestFromMainDictionaryOnly (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_SuggestSpellingCorrections (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_SuggestSpellingCorrections (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DefaultBorderLineWidth (
        enum WdLineWidth * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultBorderLineWidth (
        enum WdLineWidth prop ) = 0;
    virtual HRESULT __stdcall get_CheckGrammarWithSpelling (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CheckGrammarWithSpelling (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DefaultOpenFormat (
        enum WdOpenFormat * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultOpenFormat (
        enum WdOpenFormat prop ) = 0;
    virtual HRESULT __stdcall get_PrintDraft (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintDraft (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PrintReverse (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintReverse (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MapPaperSize (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MapPaperSize (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeApplyTables (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeApplyTables (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatApplyFirstIndents (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatApplyFirstIndents (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatMatchParentheses (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatMatchParentheses (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatReplaceFarEastDashes (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatReplaceFarEastDashes (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatDeleteAutoSpaces (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatDeleteAutoSpaces (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeApplyFirstIndents (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeApplyFirstIndents (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeApplyDates (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeApplyDates (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeApplyClosings (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeApplyClosings (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeMatchParentheses (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeMatchParentheses (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeReplaceFarEastDashes (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeReplaceFarEastDashes (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeDeleteAutoSpaces (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeDeleteAutoSpaces (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeInsertClosings (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeInsertClosings (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeAutoLetterWizard (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeAutoLetterWizard (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeInsertOvers (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeInsertOvers (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DisplayGridLines (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_DisplayGridLines (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyCase (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyCase (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyByte (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyByte (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyHiragana (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyHiragana (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzySmallKana (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzySmallKana (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyDash (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyDash (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyIterationMark (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyIterationMark (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyKanji (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyKanji (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyOldKana (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyOldKana (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyProlongedSoundMark (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyProlongedSoundMark (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyDZ (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyDZ (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyBV (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyBV (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyTC (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyTC (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyHF (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyHF (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyZJ (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyZJ (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyAY (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyAY (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyKiKu (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyKiKu (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzyPunctuation (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzyPunctuation (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MatchFuzzySpace (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MatchFuzzySpace (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ApplyFarEastFontsToAscii (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ApplyFarEastFontsToAscii (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ConvertHighAnsiToFarEast (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ConvertHighAnsiToFarEast (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PrintOddPagesInAscendingOrder (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintOddPagesInAscendingOrder (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_PrintEvenPagesInAscendingOrder (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_PrintEvenPagesInAscendingOrder (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DefaultBorderColorIndex (
        enum WdColorIndex * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultBorderColorIndex (
        enum WdColorIndex prop ) = 0;
    virtual HRESULT __stdcall get_EnableMisusedWordsDictionary (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_EnableMisusedWordsDictionary (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AllowCombinedAuxiliaryForms (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AllowCombinedAuxiliaryForms (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HangulHanjaFastConversion (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_HangulHanjaFastConversion (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_CheckHangulEndings (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CheckHangulEndings (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_EnableHangulHanjaRecentOrdering (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_EnableHangulHanjaRecentOrdering (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MultipleWordConversionsMode (
        enum WdMultipleWordConversionsMode * prop ) = 0;
    virtual HRESULT __stdcall put_MultipleWordConversionsMode (
        enum WdMultipleWordConversionsMode prop ) = 0;
    virtual HRESULT __stdcall raw_SetWPHelpOptions (
        VARIANT * CommandKeyHelp = &vtMissing,
        VARIANT * DocNavigationKeys = &vtMissing,
        VARIANT * MouseSimulation = &vtMissing,
        VARIANT * DemoGuidance = &vtMissing,
        VARIANT * DemoSpeed = &vtMissing,
        VARIANT * HelpType = &vtMissing ) = 0;
    virtual HRESULT __stdcall get_DefaultBorderColor (
        enum WdColor * prop ) = 0;
    virtual HRESULT __stdcall put_DefaultBorderColor (
        enum WdColor prop ) = 0;
    virtual HRESULT __stdcall get_AllowPixelUnits (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AllowPixelUnits (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_UseCharacterUnit (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UseCharacterUnit (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AllowCompoundNounProcessing (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AllowCompoundNounProcessing (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AutoKeyboardSwitching (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AutoKeyboardSwitching (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DocumentViewDirection (
        enum WdDocumentViewDirection * prop ) = 0;
    virtual HRESULT __stdcall put_DocumentViewDirection (
        enum WdDocumentViewDirection prop ) = 0;
    virtual HRESULT __stdcall get_ArabicNumeral (
        enum WdArabicNumeral * prop ) = 0;
    virtual HRESULT __stdcall put_ArabicNumeral (
        enum WdArabicNumeral prop ) = 0;
    virtual HRESULT __stdcall get_MonthNames (
        enum WdMonthNames * prop ) = 0;
    virtual HRESULT __stdcall put_MonthNames (
        enum WdMonthNames prop ) = 0;
    virtual HRESULT __stdcall get_CursorMovement (
        enum WdCursorMovement * prop ) = 0;
    virtual HRESULT __stdcall put_CursorMovement (
        enum WdCursorMovement prop ) = 0;
    virtual HRESULT __stdcall get_VisualSelection (
        enum WdVisualSelection * prop ) = 0;
    virtual HRESULT __stdcall put_VisualSelection (
        enum WdVisualSelection prop ) = 0;
    virtual HRESULT __stdcall get_ShowDiacritics (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowDiacritics (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ShowControlCharacters (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_ShowControlCharacters (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AddControlCharacters (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AddControlCharacters (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AddBiDirectionalMarksWhenSavingTextFile (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AddBiDirectionalMarksWhenSavingTextFile (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_StrictInitialAlefHamza (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_StrictInitialAlefHamza (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_StrictFinalYaa (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_StrictFinalYaa (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_HebrewMode (
        enum WdHebSpellStart * prop ) = 0;
    virtual HRESULT __stdcall put_HebrewMode (
        enum WdHebSpellStart prop ) = 0;
    virtual HRESULT __stdcall get_ArabicMode (
        enum WdAraSpeller * prop ) = 0;
    virtual HRESULT __stdcall put_ArabicMode (
        enum WdAraSpeller prop ) = 0;
    virtual HRESULT __stdcall get_AllowClickAndTypeMouse (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AllowClickAndTypeMouse (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_UseGermanSpellingReform (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UseGermanSpellingReform (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_InterpretHighAnsi (
        enum WdHighAnsiText * prop ) = 0;
    virtual HRESULT __stdcall put_InterpretHighAnsi (
        enum WdHighAnsiText prop ) = 0;
    virtual HRESULT __stdcall get_AddHebDoubleQuote (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AddHebDoubleQuote (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_UseDiffDiacColor (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UseDiffDiacColor (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_DiacriticColorVal (
        enum WdColor * prop ) = 0;
    virtual HRESULT __stdcall put_DiacriticColorVal (
        enum WdColor prop ) = 0;
    virtual HRESULT __stdcall get_OptimizeForWord97byDefault (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_OptimizeForWord97byDefault (
        VARIANT_BOOL prop ) = 0;
};

struct __declspec(uuid("000209ba-0000-0000-c000-000000000046"))
MailMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT CheckName ( );
    HRESULT Delete ( );
    HRESULT DisplayMoveDialog ( );
    HRESULT DisplayProperties ( );
    HRESULT DisplaySelectNamesDialog ( );
    HRESULT Forward ( );
    HRESULT GoToNext ( );
    HRESULT GoToPrevious ( );
    HRESULT Reply ( );
    HRESULT ReplyAll ( );
    HRESULT ToggleHeader ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_CheckName ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_DisplayMoveDialog ( ) = 0;
    virtual HRESULT __stdcall raw_DisplayProperties ( ) = 0;
    virtual HRESULT __stdcall raw_DisplaySelectNamesDialog ( ) = 0;
    virtual HRESULT __stdcall raw_Forward ( ) = 0;
    virtual HRESULT __stdcall raw_GoToNext ( ) = 0;
    virtual HRESULT __stdcall raw_GoToPrevious ( ) = 0;
    virtual HRESULT __stdcall raw_Reply ( ) = 0;
    virtual HRESULT __stdcall raw_ReplyAll ( ) = 0;
    virtual HRESULT __stdcall raw_ToggleHeader ( ) = 0;
};

struct __declspec(uuid("000209bb-0000-0000-c000-000000000046"))
ProofreadingErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum WdProofreadingErrorType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    enum WdProofreadingErrorType GetType ( );
    RangePtr Item (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdProofreadingErrorType * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Range * * prop ) = 0;
};

struct __declspec(uuid("000209bd-0000-0000-c000-000000000046"))
Mailer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSender))
    _bstr_t Sender;
    __declspec(property(get=GetSendDateTime))
    DATE SendDateTime;
    __declspec(property(get=GetReceived))
    VARIANT_BOOL Received;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBCCRecipients ( );
    void PutBCCRecipients (
        VARIANT * prop );
    _variant_t GetCCRecipients ( );
    void PutCCRecipients (
        VARIANT * prop );
    _variant_t GetRecipients ( );
    void PutRecipients (
        VARIANT * prop );
    _variant_t GetEnclosures ( );
    void PutEnclosures (
        VARIANT * prop );
    _bstr_t GetSender ( );
    DATE GetSendDateTime ( );
    VARIANT_BOOL GetReceived ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_BCCRecipients (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_BCCRecipients (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_CCRecipients (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_CCRecipients (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Recipients (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_Recipients (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Enclosures (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall put_Enclosures (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_Sender (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_SendDateTime (
        DATE * prop ) = 0;
    virtual HRESULT __stdcall get_Received (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall get_Subject (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Subject (
        BSTR prop ) = 0;
};

struct __declspec(uuid("000209c3-0000-0000-c000-000000000046"))
WrapFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum WdWrapType Type;
    __declspec(property(get=GetSide,put=PutSide))
    enum WdWrapSideType Side;
    __declspec(property(get=GetDistanceTop,put=PutDistanceTop))
    float DistanceTop;
    __declspec(property(get=GetDistanceBottom,put=PutDistanceBottom))
    float DistanceBottom;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDistanceLeft,put=PutDistanceLeft))
    float DistanceLeft;
    __declspec(property(get=GetDistanceRight,put=PutDistanceRight))
    float DistanceRight;
    __declspec(property(get=GetAllowOverlap,put=PutAllowOverlap))
    long AllowOverlap;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum WdWrapType GetType ( );
    void PutType (
        enum WdWrapType prop );
    enum WdWrapSideType GetSide ( );
    void PutSide (
        enum WdWrapSideType prop );
    float GetDistanceTop ( );
    void PutDistanceTop (
        float prop );
    float GetDistanceBottom ( );
    void PutDistanceBottom (
        float prop );
    float GetDistanceLeft ( );
    void PutDistanceLeft (
        float prop );
    float GetDistanceRight ( );
    void PutDistanceRight (
        float prop );
    long GetAllowOverlap ( );
    void PutAllowOverlap (
        long prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdWrapType * prop ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum WdWrapType prop ) = 0;
    virtual HRESULT __stdcall get_Side (
        enum WdWrapSideType * prop ) = 0;
    virtual HRESULT __stdcall put_Side (
        enum WdWrapSideType prop ) = 0;
    virtual HRESULT __stdcall get_DistanceTop (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceTop (
        float prop ) = 0;
    virtual HRESULT __stdcall get_DistanceBottom (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceBottom (
        float prop ) = 0;
    virtual HRESULT __stdcall get_DistanceLeft (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceLeft (
        float prop ) = 0;
    virtual HRESULT __stdcall get_DistanceRight (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_DistanceRight (
        float prop ) = 0;
    virtual HRESULT __stdcall get_AllowOverlap (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_AllowOverlap (
        long prop ) = 0;
};

struct __declspec(uuid("000209d1-0000-0000-c000-000000000046"))
HangulAndAlphabetExceptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    HangulAndAlphabetExceptionPtr Item (
        VARIANT * Index );
    HangulAndAlphabetExceptionPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct HangulAndAlphabetException * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct HangulAndAlphabetException * * prop ) = 0;
};

struct __declspec(uuid("000209d2-0000-0000-c000-000000000046"))
HangulAndAlphabetException : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("000209c4-0000-0000-c000-000000000046"))
Adjustments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    float Item[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    float GetItem (
        long Index );
    void PutItem (
        long Index,
        float prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Item (
        long Index,
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Item (
        long Index,
        float prop ) = 0;
};

struct __declspec(uuid("000209c5-0000-0000-c000-000000000046"))
CalloutFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoLength))
    enum Office::MsoTriState AutoLength;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetDrop))
    float Drop;
    __declspec(property(get=GetDropType))
    enum Office::MsoCalloutDropType DropType;
    __declspec(property(get=GetGap,put=PutGap))
    float Gap;
    __declspec(property(get=GetLength))
    float Length;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoTriState GetAccent ( );
    void PutAccent (
        enum Office::MsoTriState prop );
    enum Office::MsoCalloutAngleType GetAngle ( );
    void PutAngle (
        enum Office::MsoCalloutAngleType prop );
    enum Office::MsoTriState GetAutoAttach ( );
    void PutAutoAttach (
        enum Office::MsoTriState prop );
    enum Office::MsoTriState GetAutoLength ( );
    enum Office::MsoTriState GetBorder ( );
    void PutBorder (
        enum Office::MsoTriState prop );
    float GetDrop ( );
    enum Office::MsoCalloutDropType GetDropType ( );
    float GetGap ( );
    void PutGap (
        float prop );
    float GetLength ( );
    enum Office::MsoCalloutType GetType ( );
    void PutType (
        enum Office::MsoCalloutType prop );
    HRESULT AutomaticLength ( );
    HRESULT CustomDrop (
        float Drop );
    HRESULT CustomLength (
        float Length );
    HRESULT PresetDrop (
        enum Office::MsoCalloutDropType DropType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Accent (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_Accent (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_Angle (
        enum Office::MsoCalloutAngleType * prop ) = 0;
    virtual HRESULT __stdcall put_Angle (
        enum Office::MsoCalloutAngleType prop ) = 0;
    virtual HRESULT __stdcall get_AutoAttach (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_AutoAttach (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_AutoLength (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall get_Border (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_Border (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_Drop (
        float * prop ) = 0;
    virtual HRESULT __stdcall get_DropType (
        enum Office::MsoCalloutDropType * prop ) = 0;
    virtual HRESULT __stdcall get_Gap (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Gap (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Length (
        float * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoCalloutType * prop ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum Office::MsoCalloutType prop ) = 0;
    virtual HRESULT __stdcall raw_AutomaticLength ( ) = 0;
    virtual HRESULT __stdcall raw_CustomDrop (
        float Drop ) = 0;
    virtual HRESULT __stdcall raw_CustomLength (
        float Length ) = 0;
    virtual HRESULT __stdcall raw_PresetDrop (
        enum Office::MsoCalloutDropType DropType ) = 0;
};

struct __declspec(uuid("000209c6-0000-0000-c000-000000000046"))
ColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRGB,put=PutRGB))
    long RGB;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    long SchemeColor;
    __declspec(property(get=GetType))
    enum Office::MsoColorType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetRGB ( );
    void PutRGB (
        long prop );
    long GetSchemeColor ( );
    void PutSchemeColor (
        long prop );
    enum Office::MsoColorType GetType ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_RGB (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_RGB (
        long prop ) = 0;
    virtual HRESULT __stdcall get_SchemeColor (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_SchemeColor (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoColorType * prop ) = 0;
};

struct __declspec(uuid("000209c7-0000-0000-c000-000000000046"))
ConnectorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum Office::MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    long BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum Office::MsoTriState EndConnected;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    long EndConnectionSite;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    enum Office::MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    long GetBeginConnectionSite ( );
    enum Office::MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    long GetEndConnectionSite ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoConnectorType GetType ( );
    void PutType (
        enum Office::MsoConnectorType prop );
    HRESULT BeginConnect (
        struct Shape * * ConnectedShape,
        long ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * * ConnectedShape,
        long ConnectionSite );
    HRESULT EndDisconnect ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_BeginConnected (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall get_BeginConnectedShape (
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall get_BeginConnectionSite (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_EndConnected (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall get_EndConnectedShape (
        struct Shape * * prop ) = 0;
    virtual HRESULT __stdcall get_EndConnectionSite (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoConnectorType * prop ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum Office::MsoConnectorType prop ) = 0;
    virtual HRESULT __stdcall raw_BeginConnect (
        struct Shape * * ConnectedShape,
        long ConnectionSite ) = 0;
    virtual HRESULT __stdcall raw_BeginDisconnect ( ) = 0;
    virtual HRESULT __stdcall raw_EndConnect (
        struct Shape * * ConnectedShape,
        long ConnectionSite ) = 0;
    virtual HRESULT __stdcall raw_EndDisconnect ( ) = 0;
};

struct __declspec(uuid("000209c8-0000-0000-c000-000000000046"))
FillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    long GradientVariant;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;
    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBackColor ( );
    ColorFormatPtr GetForeColor ( );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    long GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    float GetTransparency ( );
    void PutTransparency (
        float prop );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState prop );
    HRESULT Background ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        float Degree );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant );
    HRESULT UserPicture (
        _bstr_t PictureFile );
    HRESULT UserTextured (
        _bstr_t TextureFile );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        struct ColorFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_ForeColor (
        struct ColorFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_GradientColorType (
        enum Office::MsoGradientColorType * prop ) = 0;
    virtual HRESULT __stdcall get_GradientDegree (
        float * prop ) = 0;
    virtual HRESULT __stdcall get_GradientStyle (
        enum Office::MsoGradientStyle * prop ) = 0;
    virtual HRESULT __stdcall get_GradientVariant (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Pattern (
        enum Office::MsoPatternType * prop ) = 0;
    virtual HRESULT __stdcall get_PresetGradientType (
        enum Office::MsoPresetGradientType * prop ) = 0;
    virtual HRESULT __stdcall get_PresetTexture (
        enum Office::MsoPresetTexture * prop ) = 0;
    virtual HRESULT __stdcall get_TextureName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall get_TextureType (
        enum Office::MsoTextureType * prop ) = 0;
    virtual HRESULT __stdcall get_Transparency (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Transparency (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoFillType * prop ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall raw_Background ( ) = 0;
    virtual HRESULT __stdcall raw_OneColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        float Degree ) = 0;
    virtual HRESULT __stdcall raw_Patterned (
        enum Office::MsoPatternType Pattern ) = 0;
    virtual HRESULT __stdcall raw_PresetGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        enum Office::MsoPresetGradientType PresetGradientType ) = 0;
    virtual HRESULT __stdcall raw_PresetTextured (
        enum Office::MsoPresetTexture PresetTexture ) = 0;
    virtual HRESULT __stdcall raw_Solid ( ) = 0;
    virtual HRESULT __stdcall raw_TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant ) = 0;
    virtual HRESULT __stdcall raw_UserPicture (
        BSTR PictureFile ) = 0;
    virtual HRESULT __stdcall raw_UserTextured (
        BSTR TextureFile ) = 0;
};

struct __declspec(uuid("000209c9-0000-0000-c000-000000000046"))
FreeformBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    ShapePtr ConvertToShape (
        VARIANT * Anchor = &vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall raw_AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 ) = 0;
    virtual HRESULT __stdcall raw_ConvertToShape (
        VARIANT * Anchor,
        struct Shape * * prop ) = 0;
};

struct __declspec(uuid("000209ca-0000-0000-c000-000000000046"))
LineFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetWeight,put=PutWeight))
    float Weight;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBackColor ( );
    enum Office::MsoArrowheadLength GetBeginArrowheadLength ( );
    void PutBeginArrowheadLength (
        enum Office::MsoArrowheadLength prop );
    enum Office::MsoArrowheadStyle GetBeginArrowheadStyle ( );
    void PutBeginArrowheadStyle (
        enum Office::MsoArrowheadStyle prop );
    enum Office::MsoArrowheadWidth GetBeginArrowheadWidth ( );
    void PutBeginArrowheadWidth (
        enum Office::MsoArrowheadWidth prop );
    enum Office::MsoLineDashStyle GetDashStyle ( );
    void PutDashStyle (
        enum Office::MsoLineDashStyle prop );
    enum Office::MsoArrowheadLength GetEndArrowheadLength ( );
    void PutEndArrowheadLength (
        enum Office::MsoArrowheadLength prop );
    enum Office::MsoArrowheadStyle GetEndArrowheadStyle ( );
    void PutEndArrowheadStyle (
        enum Office::MsoArrowheadStyle prop );
    enum Office::MsoArrowheadWidth GetEndArrowheadWidth ( );
    void PutEndArrowheadWidth (
        enum Office::MsoArrowheadWidth prop );
    ColorFormatPtr GetForeColor ( );
    enum Office::MsoPatternType GetPattern ( );
    void PutPattern (
        enum Office::MsoPatternType prop );
    enum Office::MsoLineStyle GetStyle ( );
    void PutStyle (
        enum Office::MsoLineStyle prop );
    float GetTransparency ( );
    void PutTransparency (
        float prop );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState prop );
    float GetWeight ( );
    void PutWeight (
        float prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        struct ColorFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_BeginArrowheadLength (
        enum Office::MsoArrowheadLength * prop ) = 0;
    virtual HRESULT __stdcall put_BeginArrowheadLength (
        enum Office::MsoArrowheadLength prop ) = 0;
    virtual HRESULT __stdcall get_BeginArrowheadStyle (
        enum Office::MsoArrowheadStyle * prop ) = 0;
    virtual HRESULT __stdcall put_BeginArrowheadStyle (
        enum Office::MsoArrowheadStyle prop ) = 0;
    virtual HRESULT __stdcall get_BeginArrowheadWidth (
        enum Office::MsoArrowheadWidth * prop ) = 0;
    virtual HRESULT __stdcall put_BeginArrowheadWidth (
        enum Office::MsoArrowheadWidth prop ) = 0;
    virtual HRESULT __stdcall get_DashStyle (
        enum Office::MsoLineDashStyle * prop ) = 0;
    virtual HRESULT __stdcall put_DashStyle (
        enum Office::MsoLineDashStyle prop ) = 0;
    virtual HRESULT __stdcall get_EndArrowheadLength (
        enum Office::MsoArrowheadLength * prop ) = 0;
    virtual HRESULT __stdcall put_EndArrowheadLength (
        enum Office::MsoArrowheadLength prop ) = 0;
    virtual HRESULT __stdcall get_EndArrowheadStyle (
        enum Office::MsoArrowheadStyle * prop ) = 0;
    virtual HRESULT __stdcall put_EndArrowheadStyle (
        enum Office::MsoArrowheadStyle prop ) = 0;
    virtual HRESULT __stdcall get_EndArrowheadWidth (
        enum Office::MsoArrowheadWidth * prop ) = 0;
    virtual HRESULT __stdcall put_EndArrowheadWidth (
        enum Office::MsoArrowheadWidth prop ) = 0;
    virtual HRESULT __stdcall get_ForeColor (
        struct ColorFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Pattern (
        enum Office::MsoPatternType * prop ) = 0;
    virtual HRESULT __stdcall put_Pattern (
        enum Office::MsoPatternType prop ) = 0;
    virtual HRESULT __stdcall get_Style (
        enum Office::MsoLineStyle * prop ) = 0;
    virtual HRESULT __stdcall put_Style (
        enum Office::MsoLineStyle prop ) = 0;
    virtual HRESULT __stdcall get_Transparency (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Transparency (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_Weight (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Weight (
        float prop ) = 0;
};

struct __declspec(uuid("000209cb-0000-0000-c000-000000000046"))
PictureFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetTransparencyColor,put=PutTransparencyColor))
    long TransparencyColor;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetBrightness ( );
    void PutBrightness (
        float prop );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType prop );
    float GetContrast ( );
    void PutContrast (
        float prop );
    float GetCropBottom ( );
    void PutCropBottom (
        float prop );
    float GetCropLeft ( );
    void PutCropLeft (
        float prop );
    float GetCropRight ( );
    void PutCropRight (
        float prop );
    float GetCropTop ( );
    void PutCropTop (
        float prop );
    long GetTransparencyColor ( );
    void PutTransparencyColor (
        long prop );
    enum Office::MsoTriState GetTransparentBackground ( );
    void PutTransparentBackground (
        enum Office::MsoTriState prop );
    HRESULT IncrementBrightness (
        float Increment );
    HRESULT IncrementContrast (
        float Increment );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Brightness (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Brightness (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ColorType (
        enum Office::MsoPictureColorType * prop ) = 0;
    virtual HRESULT __stdcall put_ColorType (
        enum Office::MsoPictureColorType prop ) = 0;
    virtual HRESULT __stdcall get_Contrast (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Contrast (
        float prop ) = 0;
    virtual HRESULT __stdcall get_CropBottom (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CropBottom (
        float prop ) = 0;
    virtual HRESULT __stdcall get_CropLeft (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CropLeft (
        float prop ) = 0;
    virtual HRESULT __stdcall get_CropRight (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CropRight (
        float prop ) = 0;
    virtual HRESULT __stdcall get_CropTop (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_CropTop (
        float prop ) = 0;
    virtual HRESULT __stdcall get_TransparencyColor (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_TransparencyColor (
        long prop ) = 0;
    virtual HRESULT __stdcall get_TransparentBackground (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_TransparentBackground (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall raw_IncrementBrightness (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementContrast (
        float Increment ) = 0;
};

struct __declspec(uuid("000209cc-0000-0000-c000-000000000046"))
ShadowFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    float OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    float OffsetY;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetForeColor ( );
    enum Office::MsoTriState GetObscured ( );
    void PutObscured (
        enum Office::MsoTriState prop );
    float GetOffsetX ( );
    void PutOffsetX (
        float prop );
    float GetOffsetY ( );
    void PutOffsetY (
        float prop );
    float GetTransparency ( );
    void PutTransparency (
        float prop );
    enum Office::MsoShadowType GetType ( );
    void PutType (
        enum Office::MsoShadowType prop );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState prop );
    HRESULT IncrementOffsetX (
        float Increment );
    HRESULT IncrementOffsetY (
        float Increment );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_ForeColor (
        struct ColorFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_Obscured (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_Obscured (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_OffsetX (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_OffsetX (
        float prop ) = 0;
    virtual HRESULT __stdcall get_OffsetY (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_OffsetY (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Transparency (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Transparency (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoShadowType * prop ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum Office::MsoShadowType prop ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall raw_IncrementOffsetX (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementOffsetY (
        float Increment ) = 0;
};

struct __declspec(uuid("000209cd-0000-0000-c000-000000000046"))
ShapeNode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEditingType))
    enum Office::MsoEditingType EditingType;
    __declspec(property(get=GetPoints))
    _variant_t Points;
    __declspec(property(get=GetSegmentType))
    enum Office::MsoSegmentType SegmentType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoEditingType GetEditingType ( );
    _variant_t GetPoints ( );
    enum Office::MsoSegmentType GetSegmentType ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_EditingType (
        enum Office::MsoEditingType * prop ) = 0;
    virtual HRESULT __stdcall get_Points (
        VARIANT * prop ) = 0;
    virtual HRESULT __stdcall get_SegmentType (
        enum Office::MsoSegmentType * prop ) = 0;
};

struct __declspec(uuid("000209ce-0000-0000-c000-000000000046"))
ShapeNodes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete (
        long Index );
    ShapeNodePtr Item (
        VARIANT * Index );
    HRESULT SetEditingType (
        long Index,
        enum Office::MsoEditingType EditingType );
    HRESULT SetPosition (
        long Index,
        float X1,
        float Y1 );
    HRESULT SetSegmentType (
        long Index,
        enum Office::MsoSegmentType SegmentType );
    HRESULT Insert (
        long Index,
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long Index ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct ShapeNode * * prop ) = 0;
    virtual HRESULT __stdcall raw_SetEditingType (
        long Index,
        enum Office::MsoEditingType EditingType ) = 0;
    virtual HRESULT __stdcall raw_SetPosition (
        long Index,
        float X1,
        float Y1 ) = 0;
    virtual HRESULT __stdcall raw_SetSegmentType (
        long Index,
        enum Office::MsoSegmentType SegmentType ) = 0;
    virtual HRESULT __stdcall raw_Insert (
        long Index,
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 ) = 0;
};

struct __declspec(uuid("000209cf-0000-0000-c000-000000000046"))
TextEffectFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    float FontSize;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTracking,put=PutTracking))
    float Tracking;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoTextEffectAlignment GetAlignment ( );
    void PutAlignment (
        enum Office::MsoTextEffectAlignment prop );
    enum Office::MsoTriState GetFontBold ( );
    void PutFontBold (
        enum Office::MsoTriState prop );
    enum Office::MsoTriState GetFontItalic ( );
    void PutFontItalic (
        enum Office::MsoTriState prop );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t prop );
    float GetFontSize ( );
    void PutFontSize (
        float prop );
    enum Office::MsoTriState GetKernedPairs ( );
    void PutKernedPairs (
        enum Office::MsoTriState prop );
    enum Office::MsoTriState GetNormalizedHeight ( );
    void PutNormalizedHeight (
        enum Office::MsoTriState prop );
    enum Office::MsoPresetTextEffectShape GetPresetShape ( );
    void PutPresetShape (
        enum Office::MsoPresetTextEffectShape prop );
    enum Office::MsoPresetTextEffect GetPresetTextEffect ( );
    void PutPresetTextEffect (
        enum Office::MsoPresetTextEffect prop );
    enum Office::MsoTriState GetRotatedChars ( );
    void PutRotatedChars (
        enum Office::MsoTriState prop );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t prop );
    float GetTracking ( );
    void PutTracking (
        float prop );
    HRESULT ToggleVerticalText ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum Office::MsoTextEffectAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum Office::MsoTextEffectAlignment prop ) = 0;
    virtual HRESULT __stdcall get_FontBold (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_FontBold (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_FontItalic (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_FontItalic (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_FontName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_FontName (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_FontSize (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_FontSize (
        float prop ) = 0;
    virtual HRESULT __stdcall get_KernedPairs (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_KernedPairs (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_NormalizedHeight (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_NormalizedHeight (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_PresetShape (
        enum Office::MsoPresetTextEffectShape * prop ) = 0;
    virtual HRESULT __stdcall put_PresetShape (
        enum Office::MsoPresetTextEffectShape prop ) = 0;
    virtual HRESULT __stdcall get_PresetTextEffect (
        enum Office::MsoPresetTextEffect * prop ) = 0;
    virtual HRESULT __stdcall put_PresetTextEffect (
        enum Office::MsoPresetTextEffect prop ) = 0;
    virtual HRESULT __stdcall get_RotatedChars (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_RotatedChars (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_Tracking (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Tracking (
        float prop ) = 0;
    virtual HRESULT __stdcall raw_ToggleVerticalText ( ) = 0;
};

struct __declspec(uuid("000209d0-0000-0000-c000-000000000046"))
ThreeDFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDepth,put=PutDepth))
    float Depth;
    __declspec(property(get=GetExtrusionColor))
    ColorFormatPtr ExtrusionColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetPresetExtrusionDirection))
    enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection;
    __declspec(property(get=GetPresetThreeDFormat))
    enum Office::MsoPresetThreeDFormat PresetThreeDFormat;
    __declspec(property(get=GetRotationX,put=PutRotationX))
    float RotationX;
    __declspec(property(get=GetRotationY,put=PutRotationY))
    float RotationY;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetDepth ( );
    void PutDepth (
        float prop );
    ColorFormatPtr GetExtrusionColor ( );
    enum Office::MsoExtrusionColorType GetExtrusionColorType ( );
    void PutExtrusionColorType (
        enum Office::MsoExtrusionColorType prop );
    enum Office::MsoTriState GetPerspective ( );
    void PutPerspective (
        enum Office::MsoTriState prop );
    enum Office::MsoPresetExtrusionDirection GetPresetExtrusionDirection ( );
    enum Office::MsoPresetLightingDirection GetPresetLightingDirection ( );
    void PutPresetLightingDirection (
        enum Office::MsoPresetLightingDirection prop );
    enum Office::MsoPresetLightingSoftness GetPresetLightingSoftness ( );
    void PutPresetLightingSoftness (
        enum Office::MsoPresetLightingSoftness prop );
    enum Office::MsoPresetMaterial GetPresetMaterial ( );
    void PutPresetMaterial (
        enum Office::MsoPresetMaterial prop );
    enum Office::MsoPresetThreeDFormat GetPresetThreeDFormat ( );
    float GetRotationX ( );
    void PutRotationX (
        float prop );
    float GetRotationY ( );
    void PutRotationY (
        float prop );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState prop );
    HRESULT IncrementRotationX (
        float Increment );
    HRESULT IncrementRotationY (
        float Increment );
    HRESULT ResetRotation ( );
    HRESULT SetExtrusionDirection (
        enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection );
    HRESULT SetThreeDFormat (
        enum Office::MsoPresetThreeDFormat PresetThreeDFormat );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Depth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_Depth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_ExtrusionColor (
        struct ColorFormat * * prop ) = 0;
    virtual HRESULT __stdcall get_ExtrusionColorType (
        enum Office::MsoExtrusionColorType * prop ) = 0;
    virtual HRESULT __stdcall put_ExtrusionColorType (
        enum Office::MsoExtrusionColorType prop ) = 0;
    virtual HRESULT __stdcall get_Perspective (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_Perspective (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall get_PresetExtrusionDirection (
        enum Office::MsoPresetExtrusionDirection * prop ) = 0;
    virtual HRESULT __stdcall get_PresetLightingDirection (
        enum Office::MsoPresetLightingDirection * prop ) = 0;
    virtual HRESULT __stdcall put_PresetLightingDirection (
        enum Office::MsoPresetLightingDirection prop ) = 0;
    virtual HRESULT __stdcall get_PresetLightingSoftness (
        enum Office::MsoPresetLightingSoftness * prop ) = 0;
    virtual HRESULT __stdcall put_PresetLightingSoftness (
        enum Office::MsoPresetLightingSoftness prop ) = 0;
    virtual HRESULT __stdcall get_PresetMaterial (
        enum Office::MsoPresetMaterial * prop ) = 0;
    virtual HRESULT __stdcall put_PresetMaterial (
        enum Office::MsoPresetMaterial prop ) = 0;
    virtual HRESULT __stdcall get_PresetThreeDFormat (
        enum Office::MsoPresetThreeDFormat * prop ) = 0;
    virtual HRESULT __stdcall get_RotationX (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_RotationX (
        float prop ) = 0;
    virtual HRESULT __stdcall get_RotationY (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_RotationY (
        float prop ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * prop ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState prop ) = 0;
    virtual HRESULT __stdcall raw_IncrementRotationX (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementRotationY (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_ResetRotation ( ) = 0;
    virtual HRESULT __stdcall raw_SetExtrusionDirection (
        enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) = 0;
    virtual HRESULT __stdcall raw_SetThreeDFormat (
        enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) = 0;
};

struct __declspec(uuid("000209f7-0000-0000-c000-000000000046"))
ApplicationEvents : IDispatch
{};

struct __declspec(uuid("000209f0-0000-0000-c000-000000000046"))
Global;
    // [ default ] interface _Global

struct __declspec(uuid("000209ff-0000-0000-c000-000000000046"))
Application;
    // [ default ] interface _Application
    // [ source ] dispinterface ApplicationEvents
    // [ default, source ] dispinterface ApplicationEvents2

struct __declspec(uuid("000209f6-0000-0000-c000-000000000046"))
DocumentEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT New ( );
    HRESULT Open ( );
    HRESULT Close ( );
};

struct __declspec(uuid("00020906-0000-0000-c000-000000000046"))
Document;
    // [ default ] interface _Document
    // [ default, source ] dispinterface DocumentEvents

struct __declspec(uuid("000209f5-0000-0000-c000-000000000046"))
Font;
    // [ default ] interface _Font

struct __declspec(uuid("000209f4-0000-0000-c000-000000000046"))
ParagraphFormat;
    // [ default ] interface _ParagraphFormat

struct __declspec(uuid("000209f3-0000-0000-c000-000000000046"))
OCXEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GotFocus ( );
    HRESULT LostFocus ( );
};

struct __declspec(uuid("000209f2-0000-0000-c000-000000000046"))
OLEControl;
    // [ default ] interface _OLEControl
    // [ default, source ] dispinterface OCXEvents

struct __declspec(uuid("000209f1-0000-0000-c000-000000000046"))
LetterContent;
    // [ default ] interface _LetterContent

struct __declspec(uuid("000209f7-0001-0000-c000-000000000046"))
IApplicationEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Startup ( );
    HRESULT Quit ( );
    HRESULT DocumentChange ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Startup ( ) = 0;
    virtual HRESULT __stdcall raw_Quit ( ) = 0;
    virtual HRESULT __stdcall raw_DocumentChange ( ) = 0;
};

struct __declspec(uuid("000209fe-0001-0000-c000-000000000046"))
IApplicationEvents2 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Startup ( );
    HRESULT Quit ( );
    HRESULT DocumentChange ( );
    HRESULT DocumentOpen (
        struct _Document * Doc );
    HRESULT DocumentBeforeClose (
        struct _Document * Doc,
        VARIANT_BOOL * Cancel );
    HRESULT DocumentBeforePrint (
        struct _Document * Doc,
        VARIANT_BOOL * Cancel );
    HRESULT DocumentBeforeSave (
        struct _Document * Doc,
        VARIANT_BOOL * SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT NewDocument (
        struct _Document * Doc );
    HRESULT WindowActivate (
        struct _Document * Doc,
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct _Document * Doc,
        struct Window * Wn );
    HRESULT WindowSelectionChange (
        struct Selection * Sel );
    HRESULT WindowBeforeRightClick (
        struct Selection * Sel,
        VARIANT_BOOL * Cancel );
    HRESULT WindowBeforeDoubleClick (
        struct Selection * Sel,
        VARIANT_BOOL * Cancel );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Startup ( ) = 0;
    virtual HRESULT __stdcall raw_Quit ( ) = 0;
    virtual HRESULT __stdcall raw_DocumentChange ( ) = 0;
    virtual HRESULT __stdcall raw_DocumentOpen (
        struct _Document * Doc ) = 0;
    virtual HRESULT __stdcall raw_DocumentBeforeClose (
        struct _Document * Doc,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_DocumentBeforePrint (
        struct _Document * Doc,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_DocumentBeforeSave (
        struct _Document * Doc,
        VARIANT_BOOL * SaveAsUI,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_NewDocument (
        struct _Document * Doc ) = 0;
    virtual HRESULT __stdcall raw_WindowActivate (
        struct _Document * Doc,
        struct Window * Wn ) = 0;
    virtual HRESULT __stdcall raw_WindowDeactivate (
        struct _Document * Doc,
        struct Window * Wn ) = 0;
    virtual HRESULT __stdcall raw_WindowSelectionChange (
        struct Selection * Sel ) = 0;
    virtual HRESULT __stdcall raw_WindowBeforeRightClick (
        struct Selection * Sel,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_WindowBeforeDoubleClick (
        struct Selection * Sel,
        VARIANT_BOOL * Cancel ) = 0;
};

struct __declspec(uuid("000209fe-0000-0000-c000-000000000046"))
ApplicationEvents2 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Quit ( );
    HRESULT DocumentChange ( );
    HRESULT DocumentOpen (
        struct _Document * Doc );
    HRESULT DocumentBeforeClose (
        struct _Document * Doc,
        VARIANT_BOOL * Cancel );
    HRESULT DocumentBeforePrint (
        struct _Document * Doc,
        VARIANT_BOOL * Cancel );
    HRESULT DocumentBeforeSave (
        struct _Document * Doc,
        VARIANT_BOOL * SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT NewDocument (
        struct _Document * Doc );
    HRESULT WindowActivate (
        struct _Document * Doc,
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct _Document * Doc,
        struct Window * Wn );
    HRESULT WindowSelectionChange (
        struct Selection * Sel );
    HRESULT WindowBeforeRightClick (
        struct Selection * Sel,
        VARIANT_BOOL * Cancel );
    HRESULT WindowBeforeDoubleClick (
        struct Selection * Sel,
        VARIANT_BOOL * Cancel );
};

enum WdBrowserLevel
{
    wdBrowserLevelV4 = 0,
    wdBrowserLevelMicrosoftInternetExplorer5 = 1
};

enum WdEnclosureType
{
    wdEnclosureCircle = 0,
    wdEnclosureSquare = 1,
    wdEnclosureTriangle = 2,
    wdEnclosureDiamond = 3
};

enum WdEncloseStyle
{
    wdEncloseStyleNone = 0,
    wdEncloseStyleSmall = 1,
    wdEncloseStyleLarge = 2
};

enum WdHighAnsiText
{
    wdHighAnsiIsFarEast = 0,
    wdHighAnsiIsHighAnsi = 1,
    wdAutoDetectHighAnsiFarEast = 2
};

enum WdLayoutMode
{
    wdLayoutModeDefault = 0,
    wdLayoutModeGrid = 1,
    wdLayoutModeLineGrid = 2,
    wdLayoutModeGenko = 3
};

enum WdDocumentMedium
{
    wdEmailMessage = 0,
    wdDocument = 1,
    wdWebPage = 2
};

enum WdMailerPriority
{
    wdPriorityNormal = 1,
    wdPriorityLow = 2,
    wdPriorityHigh = 3
};

enum WdDocumentViewDirection
{
    wdDocumentViewRtl = 0,
    wdDocumentViewLtr = 1
};

enum WdArabicNumeral
{
    wdNumeralArabic = 0,
    wdNumeralHindi = 1,
    wdNumeralContext = 2,
    wdNumeralSystem = 3
};

enum WdMonthNames
{
    wdMonthNamesArabic = 0,
    wdMonthNamesEnglish = 1,
    wdMonthNamesFrench = 2
};

enum WdCursorMovement
{
    wdCursorMovementLogical = 0,
    wdCursorMovementVisual = 1
};

enum WdVisualSelection
{
    wdVisualSelectionBlock = 0,
    wdVisualSelectionContinuous = 1
};

enum WdTableDirection
{
    wdTableDirectionRtl = 0,
    wdTableDirectionLtr = 1
};

enum WdFlowDirection
{
    wdFlowLtr = 0,
    wdFlowRtl = 1
};

enum WdDiacriticColor
{
    wdDiacriticColorBidi = 0,
    wdDiacriticColorLatin = 1
};

enum WdGutterStyle
{
    wdGutterPosLeft = 0,
    wdGutterPosTop = 1,
    wdGutterPosRight = 2
};

enum WdGutterStyleOld
{
    wdGutterStyleLatin = -10,
    wdGutterStyleBidi = 2
};

enum WdSectionDirection
{
    wdSectionDirectionRtl = 0,
    wdSectionDirectionLtr = 1
};

enum WdDateLanguage
{
    wdDateLanguageBidi = 10,
    wdDateLanguageLatin = 1033
};

enum WdCalendarTypeBi
{
    wdCalendarTypeBidi = 99,
    wdCalendarTypeGregorian = 100
};

enum WdCalendarType
{
    wdCalendarWestern = 0,
    wdCalendarArabic = 1,
    wdCalendarHebrew = 2,
    wdCalendarChina = 3,
    wdCalendarJapan = 4,
    wdCalendarThai = 5,
    wdCalendarKorean = 6
};

enum WdReadingOrder
{
    wdReadingOrderRtl = 0,
    wdReadingOrderLtr = 1
};

enum WdHebSpellStart
{
    wdFullScript = 0,
    wdPartialScript = 1,
    wdMixedScript = 2,
    wdMixedAuthorizedScript = 3
};

enum WdAraSpeller
{
    wdNone = 0,
    wdInitialAlef = 1,
    wdFinalYaa = 2,
    wdBoth = 3
};

enum WdColor
{
    wdColorAutomatic = -16777216,
    wdColorBlack = 0,
    wdColorBlue = 16711680,
    wdColorTurquoise = 16776960,
    wdColorBrightGreen = 65280,
    wdColorPink = 16711935,
    wdColorRed = 255,
    wdColorYellow = 65535,
    wdColorWhite = 16777215,
    wdColorDarkBlue = 8388608,
    wdColorTeal = 8421376,
    wdColorGreen = 32768,
    wdColorViolet = 8388736,
    wdColorDarkRed = 128,
    wdColorDarkYellow = 32896,
    wdColorBrown = 13209,
    wdColorOliveGreen = 13107,
    wdColorDarkGreen = 13056,
    wdColorDarkTeal = 6697728,
    wdColorIndigo = 10040115,
    wdColorOrange = 26367,
    wdColorBlueGray = 10053222,
    wdColorLightOrange = 39423,
    wdColorLime = 52377,
    wdColorSeaGreen = 6723891,
    wdColorAqua = 13421619,
    wdColorLightBlue = 16737843,
    wdColorGold = 52479,
    wdColorSkyBlue = 16763904,
    wdColorPlum = 6697881,
    wdColorRose = 13408767,
    wdColorTan = 10079487,
    wdColorLightYellow = 10092543,
    wdColorLightGreen = 13434828,
    wdColorLightTurquoise = 16777164,
    wdColorPaleBlue = 16764057,
    wdColorLavender = 16751052,
    wdColorGray05 = 15987699,
    wdColorGray10 = 15132390,
    wdColorGray125 = 14737632,
    wdColorGray15 = 14277081,
    wdColorGray20 = 13421772,
    wdColorGray25 = 12632256,
    wdColorGray30 = 11776947,
    wdColorGray35 = 10921638,
    wdColorGray375 = 10526880,
    wdColorGray40 = 10066329,
    wdColorGray45 = 9211020,
    wdColorGray50 = 8421504,
    wdColorGray55 = 7566195,
    wdColorGray60 = 6710886,
    wdColorGray625 = 6316128,
    wdColorGray65 = 5855577,
    wdColorGray70 = 5000268,
    wdColorGray75 = 4210752,
    wdColorGray80 = 3355443,
    wdColorGray85 = 2500134,
    wdColorGray875 = 2105376,
    wdColorGray90 = 1644825,
    wdColorGray95 = 789516
};

enum WdShapePosition
{
    wdShapeTop = -999999,
    wdShapeLeft = -999998,
    wdShapeBottom = -999997,
    wdShapeRight = -999996,
    wdShapeCenter = -999995,
    wdShapeInside = -999994,
    wdShapeOutside = -999993
};

enum WdTablePosition
{
    wdTableTop = -999999,
    wdTableLeft = -999998,
    wdTableBottom = -999997,
    wdTableRight = -999996,
    wdTableCenter = -999995,
    wdTableInside = -999994,
    wdTableOutside = -999993
};

enum WdDefaultListBehavior
{
    wdWord8ListBehavior = 0,
    wdWord9ListBehavior = 1
};

enum WdDefaultTableBehavior
{
    wdWord8TableBehavior = 0,
    wdWord9TableBehavior = 1
};

enum WdAutoFitBehavior
{
    wdAutoFitFixed = 0,
    wdAutoFitContent = 1,
    wdAutoFitWindow = 2
};

enum WdPreferredWidthType
{
    wdPreferredWidthAuto = 1,
    wdPreferredWidthPercent = 2,
    wdPreferredWidthPoints = 3
};

enum WdFarEastLineBreakLanguageID
{
    wdLineBreakJapanese = 1041,
    wdLineBreakKorean = 1042,
    wdLineBreakSimplifiedChinese = 2052,
    wdLineBreakTraditionalChinese = 1028
};

enum WdViewTypeOld
{
    wdPageView = 3,
    wdOnlineView = 6
};

enum WdFramesetType
{
    wdFramesetTypeFrameset = 0,
    wdFramesetTypeFrame = 1
};

enum WdFramesetSizeType
{
    wdFramesetSizeTypePercent = 0,
    wdFramesetSizeTypeFixed = 1,
    wdFramesetSizeTypeRelative = 2
};

enum WdFramesetNewFrameLocation
{
    wdFramesetNewFrameAbove = 0,
    wdFramesetNewFrameBelow = 1,
    wdFramesetNewFrameRight = 2,
    wdFramesetNewFrameLeft = 3
};

enum WdScrollbarType
{
    wdScrollbarTypeAuto = 0,
    wdScrollbarTypeYes = 1,
    wdScrollbarTypeNo = 2
};

enum WdTwoLinesInOneType
{
    wdTwoLinesInOneNone = 0,
    wdTwoLinesInOneNoBrackets = 1,
    wdTwoLinesInOneParentheses = 2,
    wdTwoLinesInOneSquareBrackets = 3,
    wdTwoLinesInOneAngleBrackets = 4,
    wdTwoLinesInOneCurlyBrackets = 5
};

enum WdHorizontalInVerticalType
{
    wdHorizontalInVerticalNone = 0,
    wdHorizontalInVerticalFitInLine = 1,
    wdHorizontalInVerticalResizeLine = 2
};

enum WdHorizontalLineAlignment
{
    wdHorizontalLineAlignLeft = 0,
    wdHorizontalLineAlignCenter = 1,
    wdHorizontalLineAlignRight = 2
};

enum WdHorizontalLineWidthType
{
    wdHorizontalLinePercentWidth = -1,
    wdHorizontalLineFixedWidth = -2
};

enum WdPhoneticGuideAlignmentType
{
    wdPhoneticGuideAlignmentCenter = 0,
    wdPhoneticGuideAlignmentZeroOneZero = 1,
    wdPhoneticGuideAlignmentOneTwoOne = 2,
    wdPhoneticGuideAlignmentLeft = 3,
    wdPhoneticGuideAlignmentRight = 4
};

enum WdNewDocumentType
{
    wdNewBlankDocument = 0,
    wdNewWebPage = 1,
    wdNewEmailMessage = 2,
    wdNewFrameset = 3
};

enum WdKana
{
    wdKanaKatakana = 8,
    wdKanaHiragana = 9
};

enum WdCharacterWidth
{
    wdWidthHalfWidth = 6,
    wdWidthFullWidth = 7
};

enum WdNumberStyleWordBasicBiDi
{
    wdListNumberStyleBidi1 = 49,
    wdListNumberStyleBidi2 = 50,
    wdCaptionNumberStyleBidiLetter1 = 49,
    wdCaptionNumberStyleBidiLetter2 = 50,
    wdNoteNumberStyleBidiLetter1 = 49,
    wdNoteNumberStyleBidiLetter2 = 50,
    wdPageNumberStyleBidiLetter1 = 49,
    wdPageNumberStyleBidiLetter2 = 50
};

enum WdTCSCConverterDirection
{
    wdTCSCConverterDirectionSCTC = 0,
    wdTCSCConverterDirectionTCSC = 1,
    wdTCSCConverterDirectionAuto = 2
};

struct __declspec(uuid("000209d7-0000-0000-c000-000000000046"))
EmailAuthor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    StylePtr Style;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    StylePtr GetStyle ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Style (
        struct Style * * prop ) = 0;
};

struct __declspec(uuid("000209db-0000-0000-c000-000000000046"))
EmailOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetUseThemeStyle,put=PutUseThemeStyle))
    VARIANT_BOOL UseThemeStyle;
    __declspec(property(get=GetMarkCommentsWith,put=PutMarkCommentsWith))
    _bstr_t MarkCommentsWith;
    __declspec(property(get=GetMarkComments,put=PutMarkComments))
    VARIANT_BOOL MarkComments;
    __declspec(property(get=GetEmailSignature))
    EmailSignaturePtr EmailSignature;
    __declspec(property(get=GetComposeStyle))
    StylePtr ComposeStyle;
    __declspec(property(get=GetReplyStyle))
    StylePtr ReplyStyle;
    __declspec(property(get=GetThemeName,put=PutThemeName))
    _bstr_t ThemeName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetUseThemeStyle ( );
    void PutUseThemeStyle (
        VARIANT_BOOL prop );
    _bstr_t GetMarkCommentsWith ( );
    void PutMarkCommentsWith (
        _bstr_t prop );
    VARIANT_BOOL GetMarkComments ( );
    void PutMarkComments (
        VARIANT_BOOL prop );
    EmailSignaturePtr GetEmailSignature ( );
    StylePtr GetComposeStyle ( );
    StylePtr GetReplyStyle ( );
    _bstr_t GetThemeName ( );
    void PutThemeName (
        _bstr_t prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_UseThemeStyle (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UseThemeStyle (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_MarkCommentsWith (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_MarkCommentsWith (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_MarkComments (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_MarkComments (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_EmailSignature (
        struct EmailSignature * * prop ) = 0;
    virtual HRESULT __stdcall get_ComposeStyle (
        struct Style * * prop ) = 0;
    virtual HRESULT __stdcall get_ReplyStyle (
        struct Style * * prop ) = 0;
    virtual HRESULT __stdcall get_ThemeName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ThemeName (
        BSTR prop ) = 0;
};

struct __declspec(uuid("000209dc-0000-0000-c000-000000000046"))
EmailSignature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNewMessageSignature,put=PutNewMessageSignature))
    _bstr_t NewMessageSignature;
    __declspec(property(get=GetReplyMessageSignature,put=PutReplyMessageSignature))
    _bstr_t ReplyMessageSignature;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetNewMessageSignature ( );
    void PutNewMessageSignature (
        _bstr_t prop );
    _bstr_t GetReplyMessageSignature ( );
    void PutReplyMessageSignature (
        _bstr_t prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_NewMessageSignature (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_NewMessageSignature (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_ReplyMessageSignature (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_ReplyMessageSignature (
        BSTR prop ) = 0;
};

struct __declspec(uuid("000209dd-0000-0000-c000-000000000046"))
Email : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCurrentEmailAuthor))
    EmailAuthorPtr CurrentEmailAuthor;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    EmailAuthorPtr GetCurrentEmailAuthor ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_CurrentEmailAuthor (
        struct EmailAuthor * * prop ) = 0;
};

struct __declspec(uuid("000209de-0000-0000-c000-000000000046"))
HorizontalLineFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPercentWidth,put=PutPercentWidth))
    float PercentWidth;
    __declspec(property(get=GetNoShade,put=PutNoShade))
    VARIANT_BOOL NoShade;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum WdHorizontalLineAlignment Alignment;
    __declspec(property(get=GetWidthType,put=PutWidthType))
    enum WdHorizontalLineWidthType WidthType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetPercentWidth ( );
    void PutPercentWidth (
        float prop );
    VARIANT_BOOL GetNoShade ( );
    void PutNoShade (
        VARIANT_BOOL prop );
    enum WdHorizontalLineAlignment GetAlignment ( );
    void PutAlignment (
        enum WdHorizontalLineAlignment prop );
    enum WdHorizontalLineWidthType GetWidthType ( );
    void PutWidthType (
        enum WdHorizontalLineWidthType prop );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_PercentWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_PercentWidth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_NoShade (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_NoShade (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum WdHorizontalLineAlignment * prop ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum WdHorizontalLineAlignment prop ) = 0;
    virtual HRESULT __stdcall get_WidthType (
        enum WdHorizontalLineWidthType * prop ) = 0;
    virtual HRESULT __stdcall put_WidthType (
        enum WdHorizontalLineWidthType prop ) = 0;
};

struct __declspec(uuid("000209e2-0000-0000-c000-000000000046"))
Frameset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum WdFramesetType Type;
    __declspec(property(get=GetWidthType,put=PutWidthType))
    enum WdFramesetSizeType WidthType;
    __declspec(property(get=GetHeightType,put=PutHeightType))
    enum WdFramesetSizeType HeightType;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetChildFramesetCount))
    long ChildFramesetCount;
    __declspec(property(get=GetChildFramesetItem))
    FramesetPtr ChildFramesetItem[];
    __declspec(property(get=GetFrameName,put=PutFrameName))
    _bstr_t FrameName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetParentFrameset))
    FramesetPtr ParentFrameset;
    __declspec(property(get=GetFrameDisplayBorders,put=PutFrameDisplayBorders))
    VARIANT_BOOL FrameDisplayBorders;
    __declspec(property(get=GetFrameDefaultURL,put=PutFrameDefaultURL))
    _bstr_t FrameDefaultURL;
    __declspec(property(get=GetFrameLinkToFile,put=PutFrameLinkToFile))
    VARIANT_BOOL FrameLinkToFile;
    __declspec(property(get=GetFramesetBorderWidth,put=PutFramesetBorderWidth))
    float FramesetBorderWidth;
    __declspec(property(get=GetFramesetBorderColor,put=PutFramesetBorderColor))
    enum WdColor FramesetBorderColor;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetFrameScrollbarType,put=PutFrameScrollbarType))
    enum WdScrollbarType FrameScrollbarType;
    __declspec(property(get=GetFrameResizable,put=PutFrameResizable))
    VARIANT_BOOL FrameResizable;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    FramesetPtr GetParentFrameset ( );
    enum WdFramesetType GetType ( );
    enum WdFramesetSizeType GetWidthType ( );
    void PutWidthType (
        enum WdFramesetSizeType prop );
    enum WdFramesetSizeType GetHeightType ( );
    void PutHeightType (
        enum WdFramesetSizeType prop );
    long GetWidth ( );
    void PutWidth (
        long prop );
    long GetHeight ( );
    void PutHeight (
        long prop );
    long GetChildFramesetCount ( );
    FramesetPtr GetChildFramesetItem (
        long Index );
    float GetFramesetBorderWidth ( );
    void PutFramesetBorderWidth (
        float prop );
    enum WdColor GetFramesetBorderColor ( );
    void PutFramesetBorderColor (
        enum WdColor prop );
    enum WdScrollbarType GetFrameScrollbarType ( );
    void PutFrameScrollbarType (
        enum WdScrollbarType prop );
    VARIANT_BOOL GetFrameResizable ( );
    void PutFrameResizable (
        VARIANT_BOOL prop );
    _bstr_t GetFrameName ( );
    void PutFrameName (
        _bstr_t prop );
    VARIANT_BOOL GetFrameDisplayBorders ( );
    void PutFrameDisplayBorders (
        VARIANT_BOOL prop );
    _bstr_t GetFrameDefaultURL ( );
    void PutFrameDefaultURL (
        _bstr_t prop );
    VARIANT_BOOL GetFrameLinkToFile ( );
    void PutFrameLinkToFile (
        VARIANT_BOOL prop );
    FramesetPtr AddNewFrame (
        enum WdFramesetNewFrameLocation Where );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_ParentFrameset (
        struct Frameset * * prop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum WdFramesetType * prop ) = 0;
    virtual HRESULT __stdcall get_WidthType (
        enum WdFramesetSizeType * prop ) = 0;
    virtual HRESULT __stdcall put_WidthType (
        enum WdFramesetSizeType prop ) = 0;
    virtual HRESULT __stdcall get_HeightType (
        enum WdFramesetSizeType * prop ) = 0;
    virtual HRESULT __stdcall put_HeightType (
        enum WdFramesetSizeType prop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Width (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_Height (
        long prop ) = 0;
    virtual HRESULT __stdcall get_ChildFramesetCount (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_ChildFramesetItem (
        long Index,
        struct Frameset * * prop ) = 0;
    virtual HRESULT __stdcall get_FramesetBorderWidth (
        float * prop ) = 0;
    virtual HRESULT __stdcall put_FramesetBorderWidth (
        float prop ) = 0;
    virtual HRESULT __stdcall get_FramesetBorderColor (
        enum WdColor * prop ) = 0;
    virtual HRESULT __stdcall put_FramesetBorderColor (
        enum WdColor prop ) = 0;
    virtual HRESULT __stdcall get_FrameScrollbarType (
        enum WdScrollbarType * prop ) = 0;
    virtual HRESULT __stdcall put_FrameScrollbarType (
        enum WdScrollbarType prop ) = 0;
    virtual HRESULT __stdcall get_FrameResizable (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_FrameResizable (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_FrameName (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_FrameName (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_FrameDisplayBorders (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_FrameDisplayBorders (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_FrameDefaultURL (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall put_FrameDefaultURL (
        BSTR prop ) = 0;
    virtual HRESULT __stdcall get_FrameLinkToFile (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_FrameLinkToFile (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall raw_AddNewFrame (
        enum WdFramesetNewFrameLocation Where,
        struct Frameset * * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("000209e3-0000-0000-c000-000000000046"))
DefaultWebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOptimizeForBrowser,put=PutOptimizeForBrowser))
    VARIANT_BOOL OptimizeForBrowser;
    __declspec(property(get=GetBrowserLevel,put=PutBrowserLevel))
    enum WdBrowserLevel BrowserLevel;
    __declspec(property(get=GetRelyOnCSS,put=PutRelyOnCSS))
    VARIANT_BOOL RelyOnCSS;
    __declspec(property(get=GetOrganizeInFolder,put=PutOrganizeInFolder))
    VARIANT_BOOL OrganizeInFolder;
    __declspec(property(get=GetUpdateLinksOnSave,put=PutUpdateLinksOnSave))
    VARIANT_BOOL UpdateLinksOnSave;
    __declspec(property(get=GetUseLongFileNames,put=PutUseLongFileNames))
    VARIANT_BOOL UseLongFileNames;
    __declspec(property(get=GetCheckIfOfficeIsHTMLEditor,put=PutCheckIfOfficeIsHTMLEditor))
    VARIANT_BOOL CheckIfOfficeIsHTMLEditor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCheckIfWordIsDefaultHTMLEditor,put=PutCheckIfWordIsDefaultHTMLEditor))
    VARIANT_BOOL CheckIfWordIsDefaultHTMLEditor;
    __declspec(property(get=GetRelyOnVML,put=PutRelyOnVML))
    VARIANT_BOOL RelyOnVML;
    __declspec(property(get=GetAllowPNG,put=PutAllowPNG))
    VARIANT_BOOL AllowPNG;
    __declspec(property(get=GetPixelsPerInch,put=PutPixelsPerInch))
    long PixelsPerInch;
    __declspec(property(get=GetAlwaysSaveInDefaultEncoding,put=PutAlwaysSaveInDefaultEncoding))
    VARIANT_BOOL AlwaysSaveInDefaultEncoding;
    __declspec(property(get=GetFonts))
    Office::WebPageFontsPtr Fonts;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetOptimizeForBrowser ( );
    void PutOptimizeForBrowser (
        VARIANT_BOOL prop );
    enum WdBrowserLevel GetBrowserLevel ( );
    void PutBrowserLevel (
        enum WdBrowserLevel prop );
    VARIANT_BOOL GetRelyOnCSS ( );
    void PutRelyOnCSS (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetUpdateLinksOnSave ( );
    void PutUpdateLinksOnSave (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetUseLongFileNames ( );
    void PutUseLongFileNames (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetCheckIfOfficeIsHTMLEditor ( );
    void PutCheckIfOfficeIsHTMLEditor (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetCheckIfWordIsDefaultHTMLEditor ( );
    void PutCheckIfWordIsDefaultHTMLEditor (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetRelyOnVML ( );
    void PutRelyOnVML (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAllowPNG ( );
    void PutAllowPNG (
        VARIANT_BOOL prop );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize prop );
    long GetPixelsPerInch ( );
    void PutPixelsPerInch (
        long prop );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding prop );
    VARIANT_BOOL GetAlwaysSaveInDefaultEncoding ( );
    void PutAlwaysSaveInDefaultEncoding (
        VARIANT_BOOL prop );
    Office::WebPageFontsPtr GetFonts ( );
    _bstr_t GetFolderSuffix ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_OptimizeForBrowser (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_OptimizeForBrowser (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_BrowserLevel (
        enum WdBrowserLevel * prop ) = 0;
    virtual HRESULT __stdcall put_BrowserLevel (
        enum WdBrowserLevel prop ) = 0;
    virtual HRESULT __stdcall get_RelyOnCSS (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_RelyOnCSS (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_OrganizeInFolder (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_OrganizeInFolder (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_UpdateLinksOnSave (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UpdateLinksOnSave (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_UseLongFileNames (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UseLongFileNames (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_CheckIfOfficeIsHTMLEditor (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CheckIfOfficeIsHTMLEditor (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_CheckIfWordIsDefaultHTMLEditor (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_CheckIfWordIsDefaultHTMLEditor (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_RelyOnVML (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_RelyOnVML (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AllowPNG (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AllowPNG (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ScreenSize (
        enum Office::MsoScreenSize * prop ) = 0;
    virtual HRESULT __stdcall put_ScreenSize (
        enum Office::MsoScreenSize prop ) = 0;
    virtual HRESULT __stdcall get_PixelsPerInch (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_PixelsPerInch (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Encoding (
        enum Office::MsoEncoding * prop ) = 0;
    virtual HRESULT __stdcall put_Encoding (
        enum Office::MsoEncoding prop ) = 0;
    virtual HRESULT __stdcall get_AlwaysSaveInDefaultEncoding (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AlwaysSaveInDefaultEncoding (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_Fonts (
        struct Office::WebPageFonts * * prop ) = 0;
    virtual HRESULT __stdcall get_FolderSuffix (
        BSTR * prop ) = 0;
};

struct __declspec(uuid("000209e4-0000-0000-c000-000000000046"))
WebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOptimizeForBrowser,put=PutOptimizeForBrowser))
    VARIANT_BOOL OptimizeForBrowser;
    __declspec(property(get=GetBrowserLevel,put=PutBrowserLevel))
    enum WdBrowserLevel BrowserLevel;
    __declspec(property(get=GetRelyOnCSS,put=PutRelyOnCSS))
    VARIANT_BOOL RelyOnCSS;
    __declspec(property(get=GetOrganizeInFolder,put=PutOrganizeInFolder))
    VARIANT_BOOL OrganizeInFolder;
    __declspec(property(get=GetUseLongFileNames,put=PutUseLongFileNames))
    VARIANT_BOOL UseLongFileNames;
    __declspec(property(get=GetRelyOnVML,put=PutRelyOnVML))
    VARIANT_BOOL RelyOnVML;
    __declspec(property(get=GetAllowPNG,put=PutAllowPNG))
    VARIANT_BOOL AllowPNG;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPixelsPerInch,put=PutPixelsPerInch))
    long PixelsPerInch;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetOptimizeForBrowser ( );
    void PutOptimizeForBrowser (
        VARIANT_BOOL prop );
    enum WdBrowserLevel GetBrowserLevel ( );
    void PutBrowserLevel (
        enum WdBrowserLevel prop );
    VARIANT_BOOL GetRelyOnCSS ( );
    void PutRelyOnCSS (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetUseLongFileNames ( );
    void PutUseLongFileNames (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetRelyOnVML ( );
    void PutRelyOnVML (
        VARIANT_BOOL prop );
    VARIANT_BOOL GetAllowPNG ( );
    void PutAllowPNG (
        VARIANT_BOOL prop );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize prop );
    long GetPixelsPerInch ( );
    void PutPixelsPerInch (
        long prop );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding prop );
    _bstr_t GetFolderSuffix ( );
    HRESULT UseDefaultFolderSuffix ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_OptimizeForBrowser (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_OptimizeForBrowser (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_BrowserLevel (
        enum WdBrowserLevel * prop ) = 0;
    virtual HRESULT __stdcall put_BrowserLevel (
        enum WdBrowserLevel prop ) = 0;
    virtual HRESULT __stdcall get_RelyOnCSS (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_RelyOnCSS (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_OrganizeInFolder (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_OrganizeInFolder (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_UseLongFileNames (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_UseLongFileNames (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_RelyOnVML (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_RelyOnVML (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_AllowPNG (
        VARIANT_BOOL * prop ) = 0;
    virtual HRESULT __stdcall put_AllowPNG (
        VARIANT_BOOL prop ) = 0;
    virtual HRESULT __stdcall get_ScreenSize (
        enum Office::MsoScreenSize * prop ) = 0;
    virtual HRESULT __stdcall put_ScreenSize (
        enum Office::MsoScreenSize prop ) = 0;
    virtual HRESULT __stdcall get_PixelsPerInch (
        long * prop ) = 0;
    virtual HRESULT __stdcall put_PixelsPerInch (
        long prop ) = 0;
    virtual HRESULT __stdcall get_Encoding (
        enum Office::MsoEncoding * prop ) = 0;
    virtual HRESULT __stdcall put_Encoding (
        enum Office::MsoEncoding prop ) = 0;
    virtual HRESULT __stdcall get_FolderSuffix (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_UseDefaultFolderSuffix ( ) = 0;
};

struct __declspec(uuid("000209df-0000-0000-c000-000000000046"))
OtherCorrectionsExceptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    OtherCorrectionsExceptionPtr Item (
        VARIANT * Index );
    OtherCorrectionsExceptionPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * prop ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * prop ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct OtherCorrectionsException * * prop ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct OtherCorrectionsException * * prop ) = 0;
};

struct __declspec(uuid("000209e1-0000-0000-c000-000000000046"))
OtherCorrectionsException : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * prop ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * prop ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * prop ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * prop ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("MSWORD9.tli")
__declspec(implementation_key(1)) _ApplicationPtr _Application::GetApplication ( );
__declspec(implementation_key(2)) long _Application::GetCreator ( );
__declspec(implementation_key(3)) IDispatchPtr _Application::GetParent ( );
__declspec(implementation_key(4)) _bstr_t _Application::GetName ( );
__declspec(implementation_key(5)) DocumentsPtr _Application::GetDocuments ( );
__declspec(implementation_key(6)) WindowsPtr _Application::GetWindows ( );
__declspec(implementation_key(7)) _DocumentPtr _Application::GetActiveDocument ( );
__declspec(implementation_key(8)) WindowPtr _Application::GetActiveWindow ( );
__declspec(implementation_key(9)) SelectionPtr _Application::GetSelection ( );
__declspec(implementation_key(10)) IDispatchPtr _Application::GetWordBasic ( );
__declspec(implementation_key(11)) RecentFilesPtr _Application::GetRecentFiles ( );
__declspec(implementation_key(12)) TemplatePtr _Application::GetNormalTemplate ( );
__declspec(implementation_key(13)) SystemPtr _Application::GetSystem ( );
__declspec(implementation_key(14)) AutoCorrectPtr _Application::GetAutoCorrect ( );
__declspec(implementation_key(15)) FontNamesPtr _Application::GetFontNames ( );
__declspec(implementation_key(16)) FontNamesPtr _Application::GetLandscapeFontNames ( );
__declspec(implementation_key(17)) FontNamesPtr _Application::GetPortraitFontNames ( );
__declspec(implementation_key(18)) LanguagesPtr _Application::GetLanguages ( );
__declspec(implementation_key(19)) Office::AssistantPtr _Application::GetAssistant ( );
__declspec(implementation_key(20)) BrowserPtr _Application::GetBrowser ( );
__declspec(implementation_key(21)) FileConvertersPtr _Application::GetFileConverters ( );
__declspec(implementation_key(22)) MailingLabelPtr _Application::GetMailingLabel ( );
__declspec(implementation_key(23)) DialogsPtr _Application::GetDialogs ( );
__declspec(implementation_key(24)) CaptionLabelsPtr _Application::GetCaptionLabels ( );
__declspec(implementation_key(25)) AutoCaptionsPtr _Application::GetAutoCaptions ( );
__declspec(implementation_key(26)) AddInsPtr _Application::GetAddIns ( );
__declspec(implementation_key(27)) VARIANT_BOOL _Application::GetVisible ( );
__declspec(implementation_key(28)) void _Application::PutVisible ( VARIANT_BOOL prop );
__declspec(implementation_key(29)) _bstr_t _Application::GetVersion ( );
__declspec(implementation_key(30)) VARIANT_BOOL _Application::GetScreenUpdating ( );
__declspec(implementation_key(31)) void _Application::PutScreenUpdating ( VARIANT_BOOL prop );
__declspec(implementation_key(32)) VARIANT_BOOL _Application::GetPrintPreview ( );
__declspec(implementation_key(33)) void _Application::PutPrintPreview ( VARIANT_BOOL prop );
__declspec(implementation_key(34)) TasksPtr _Application::GetTasks ( );
__declspec(implementation_key(35)) VARIANT_BOOL _Application::GetDisplayStatusBar ( );
__declspec(implementation_key(36)) void _Application::PutDisplayStatusBar ( VARIANT_BOOL prop );
__declspec(implementation_key(37)) VARIANT_BOOL _Application::GetSpecialMode ( );
__declspec(implementation_key(38)) long _Application::GetUsableWidth ( );
__declspec(implementation_key(39)) long _Application::GetUsableHeight ( );
__declspec(implementation_key(40)) VARIANT_BOOL _Application::GetMathCoprocessorAvailable ( );
__declspec(implementation_key(41)) VARIANT_BOOL _Application::GetMouseAvailable ( );
__declspec(implementation_key(42)) _variant_t _Application::GetInternational ( enum WdInternationalIndex Index );
__declspec(implementation_key(43)) _bstr_t _Application::GetBuild ( );
__declspec(implementation_key(44)) VARIANT_BOOL _Application::GetCapsLock ( );
__declspec(implementation_key(45)) VARIANT_BOOL _Application::GetNumLock ( );
__declspec(implementation_key(46)) _bstr_t _Application::GetUserName ( );
__declspec(implementation_key(47)) void _Application::PutUserName ( _bstr_t prop );
__declspec(implementation_key(48)) _bstr_t _Application::GetUserInitials ( );
__declspec(implementation_key(49)) void _Application::PutUserInitials ( _bstr_t prop );
__declspec(implementation_key(50)) _bstr_t _Application::GetUserAddress ( );
__declspec(implementation_key(51)) void _Application::PutUserAddress ( _bstr_t prop );
__declspec(implementation_key(52)) IDispatchPtr _Application::GetMacroContainer ( );
__declspec(implementation_key(53)) VARIANT_BOOL _Application::GetDisplayRecentFiles ( );
__declspec(implementation_key(54)) void _Application::PutDisplayRecentFiles ( VARIANT_BOOL prop );
__declspec(implementation_key(55)) Office::_CommandBarsPtr _Application::GetCommandBars ( );
__declspec(implementation_key(56)) SynonymInfoPtr _Application::GetSynonymInfo ( _bstr_t Word, VARIANT * LanguageID );
__declspec(implementation_key(57)) VBIDE::VBEPtr _Application::GetVBE ( );
__declspec(implementation_key(58)) _bstr_t _Application::GetDefaultSaveFormat ( );
__declspec(implementation_key(59)) void _Application::PutDefaultSaveFormat ( _bstr_t prop );
__declspec(implementation_key(60)) ListGalleriesPtr _Application::GetListGalleries ( );
__declspec(implementation_key(61)) _bstr_t _Application::GetActivePrinter ( );
__declspec(implementation_key(62)) void _Application::PutActivePrinter ( _bstr_t prop );
__declspec(implementation_key(63)) TemplatesPtr _Application::GetTemplates ( );
__declspec(implementation_key(64)) IDispatchPtr _Application::GetCustomizationContext ( );
__declspec(implementation_key(65)) void _Application::PutCustomizationContext ( IDispatch * prop );
__declspec(implementation_key(66)) KeyBindingsPtr _Application::GetKeyBindings ( );
__declspec(implementation_key(67)) KeysBoundToPtr _Application::GetKeysBoundTo ( enum WdKeyCategory KeyCategory, _bstr_t Command, VARIANT * CommandParameter );
__declspec(implementation_key(68)) KeyBindingPtr _Application::GetFindKey ( long KeyCode, VARIANT * KeyCode2 );
__declspec(implementation_key(69)) _bstr_t _Application::GetCaption ( );
__declspec(implementation_key(70)) void _Application::PutCaption ( _bstr_t prop );
__declspec(implementation_key(71)) _bstr_t _Application::GetPath ( );
__declspec(implementation_key(72)) VARIANT_BOOL _Application::GetDisplayScrollBars ( );
__declspec(implementation_key(73)) void _Application::PutDisplayScrollBars ( VARIANT_BOOL prop );
__declspec(implementation_key(74)) _bstr_t _Application::GetStartupPath ( );
__declspec(implementation_key(75)) void _Application::PutStartupPath ( _bstr_t prop );
__declspec(implementation_key(76)) long _Application::GetBackgroundSavingStatus ( );
__declspec(implementation_key(77)) long _Application::GetBackgroundPrintingStatus ( );
__declspec(implementation_key(78)) long _Application::GetLeft ( );
__declspec(implementation_key(79)) void _Application::PutLeft ( long prop );
__declspec(implementation_key(80)) long _Application::GetTop ( );
__declspec(implementation_key(81)) void _Application::PutTop ( long prop );
__declspec(implementation_key(82)) long _Application::GetWidth ( );
__declspec(implementation_key(83)) void _Application::PutWidth ( long prop );
__declspec(implementation_key(84)) long _Application::GetHeight ( );
__declspec(implementation_key(85)) void _Application::PutHeight ( long prop );
__declspec(implementation_key(86)) enum WdWindowState _Application::GetWindowState ( );
__declspec(implementation_key(87)) void _Application::PutWindowState ( enum WdWindowState prop );
__declspec(implementation_key(88)) VARIANT_BOOL _Application::GetDisplayAutoCompleteTips ( );
__declspec(implementation_key(89)) void _Application::PutDisplayAutoCompleteTips ( VARIANT_BOOL prop );
__declspec(implementation_key(90)) OptionsPtr _Application::GetOptions ( );
__declspec(implementation_key(91)) enum WdAlertLevel _Application::GetDisplayAlerts ( );
__declspec(implementation_key(92)) void _Application::PutDisplayAlerts ( enum WdAlertLevel prop );
__declspec(implementation_key(93)) DictionariesPtr _Application::GetCustomDictionaries ( );
__declspec(implementation_key(94)) _bstr_t _Application::GetPathSeparator ( );
__declspec(implementation_key(95)) void _Application::PutStatusBar ( _bstr_t _arg1 );
__declspec(implementation_key(96)) VARIANT_BOOL _Application::GetMAPIAvailable ( );
__declspec(implementation_key(97)) VARIANT_BOOL _Application::GetDisplayScreenTips ( );
__declspec(implementation_key(98)) void _Application::PutDisplayScreenTips ( VARIANT_BOOL prop );
__declspec(implementation_key(99)) enum WdEnableCancelKey _Application::GetEnableCancelKey ( );
__declspec(implementation_key(100)) void _Application::PutEnableCancelKey ( enum WdEnableCancelKey prop );
__declspec(implementation_key(101)) VARIANT_BOOL _Application::GetUserControl ( );
__declspec(implementation_key(102)) Office::FileSearchPtr _Application::GetFileSearch ( );
__declspec(implementation_key(103)) enum WdMailSystem _Application::GetMailSystem ( );
__declspec(implementation_key(104)) _bstr_t _Application::GetDefaultTableSeparator ( );
__declspec(implementation_key(105)) void _Application::PutDefaultTableSeparator ( _bstr_t prop );
__declspec(implementation_key(106)) VARIANT_BOOL _Application::GetShowVisualBasicEditor ( );
__declspec(implementation_key(107)) void _Application::PutShowVisualBasicEditor ( VARIANT_BOOL prop );
__declspec(implementation_key(108)) _bstr_t _Application::GetBrowseExtraFileTypes ( );
__declspec(implementation_key(109)) void _Application::PutBrowseExtraFileTypes ( _bstr_t prop );
__declspec(implementation_key(110)) VARIANT_BOOL _Application::GetIsObjectValid ( IDispatch * Object );
__declspec(implementation_key(111)) HangulHanjaConversionDictionariesPtr _Application::GetHangulHanjaDictionaries ( );
__declspec(implementation_key(112)) MailMessagePtr _Application::GetMailMessage ( );
__declspec(implementation_key(113)) VARIANT_BOOL _Application::GetFocusInMailHeader ( );
__declspec(implementation_key(114)) HRESULT _Application::Quit ( VARIANT * SaveChanges, VARIANT * OriginalFormat, VARIANT * RouteDocument );
__declspec(implementation_key(115)) HRESULT _Application::ScreenRefresh ( );
__declspec(implementation_key(116)) HRESULT _Application::PrintOutOld ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * FileName, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint );
__declspec(implementation_key(117)) HRESULT _Application::LookupNameProperties ( _bstr_t Name );
__declspec(implementation_key(118)) HRESULT _Application::SubstituteFont ( _bstr_t UnavailableFont, _bstr_t SubstituteFont );
__declspec(implementation_key(119)) VARIANT_BOOL _Application::Repeat ( VARIANT * Times );
__declspec(implementation_key(120)) HRESULT _Application::DDEExecute ( long Channel, _bstr_t Command );
__declspec(implementation_key(121)) long _Application::DDEInitiate ( _bstr_t App, _bstr_t Topic );
__declspec(implementation_key(122)) HRESULT _Application::DDEPoke ( long Channel, _bstr_t Item, _bstr_t Data );
__declspec(implementation_key(123)) _bstr_t _Application::DDERequest ( long Channel, _bstr_t Item );
__declspec(implementation_key(124)) HRESULT _Application::DDETerminate ( long Channel );
__declspec(implementation_key(125)) HRESULT _Application::DDETerminateAll ( );
__declspec(implementation_key(126)) long _Application::BuildKeyCode ( enum WdKey Arg1, VARIANT * Arg2, VARIANT * Arg3, VARIANT * Arg4 );
__declspec(implementation_key(127)) _bstr_t _Application::KeyString ( long KeyCode, VARIANT * KeyCode2 );
__declspec(implementation_key(128)) HRESULT _Application::OrganizerCopy ( _bstr_t Source, _bstr_t Destination, _bstr_t Name, enum WdOrganizerObject Object );
__declspec(implementation_key(129)) HRESULT _Application::OrganizerDelete ( _bstr_t Source, _bstr_t Name, enum WdOrganizerObject Object );
__declspec(implementation_key(130)) HRESULT _Application::OrganizerRename ( _bstr_t Source, _bstr_t Name, _bstr_t NewName, enum WdOrganizerObject Object );
__declspec(implementation_key(131)) HRESULT _Application::AddAddress ( SAFEARRAY * * TagID, SAFEARRAY * * Value );
__declspec(implementation_key(132)) _bstr_t _Application::GetAddress ( VARIANT * Name, VARIANT * AddressProperties, VARIANT * UseAutoText, VARIANT * DisplaySelectDialog, VARIANT * SelectDialog, VARIANT * CheckNamesDialog, VARIANT * RecentAddressesChoice, VARIANT * UpdateRecentAddresses );
__declspec(implementation_key(133)) VARIANT_BOOL _Application::CheckGrammar ( _bstr_t String );
__declspec(implementation_key(134)) VARIANT_BOOL _Application::CheckSpelling ( _bstr_t Word, VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * MainDictionary, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 );
__declspec(implementation_key(135)) HRESULT _Application::ResetIgnoreAll ( );
__declspec(implementation_key(136)) SpellingSuggestionsPtr _Application::GetSpellingSuggestions ( _bstr_t Word, VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * MainDictionary, VARIANT * SuggestionMode, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 );
__declspec(implementation_key(137)) HRESULT _Application::GoBack ( );
__declspec(implementation_key(138)) HRESULT _Application::Help ( VARIANT * HelpType );
__declspec(implementation_key(139)) HRESULT _Application::AutomaticChange ( );
__declspec(implementation_key(140)) HRESULT _Application::ShowMe ( );
__declspec(implementation_key(141)) HRESULT _Application::HelpTool ( );
__declspec(implementation_key(142)) WindowPtr _Application::NewWindow ( );
__declspec(implementation_key(143)) HRESULT _Application::ListCommands ( VARIANT_BOOL ListAllCommands );
__declspec(implementation_key(144)) HRESULT _Application::ShowClipboard ( );
__declspec(implementation_key(145)) HRESULT _Application::OnTime ( VARIANT * When, _bstr_t Name, VARIANT * Tolerance );
__declspec(implementation_key(146)) HRESULT _Application::NextLetter ( );
__declspec(implementation_key(147)) short _Application::MountVolume ( _bstr_t Zone, _bstr_t Server, _bstr_t Volume, VARIANT * User, VARIANT * UserPassword, VARIANT * VolumePassword );
__declspec(implementation_key(148)) _bstr_t _Application::CleanString ( _bstr_t String );
__declspec(implementation_key(149)) HRESULT _Application::SendFax ( );
__declspec(implementation_key(150)) HRESULT _Application::ChangeFileOpenDirectory ( _bstr_t Path );
__declspec(implementation_key(151)) HRESULT _Application::RunOld ( _bstr_t MacroName );
__declspec(implementation_key(152)) HRESULT _Application::GoForward ( );
__declspec(implementation_key(153)) HRESULT _Application::Move ( long Left, long Top );
__declspec(implementation_key(154)) HRESULT _Application::Resize ( long Width, long Height );
__declspec(implementation_key(155)) float _Application::InchesToPoints ( float Inches );
__declspec(implementation_key(156)) float _Application::CentimetersToPoints ( float Centimeters );
__declspec(implementation_key(157)) float _Application::MillimetersToPoints ( float Millimeters );
__declspec(implementation_key(158)) float _Application::PicasToPoints ( float Picas );
__declspec(implementation_key(159)) float _Application::LinesToPoints ( float Lines );
__declspec(implementation_key(160)) float _Application::PointsToInches ( float Points );
__declspec(implementation_key(161)) float _Application::PointsToCentimeters ( float Points );
__declspec(implementation_key(162)) float _Application::PointsToMillimeters ( float Points );
__declspec(implementation_key(163)) float _Application::PointsToPicas ( float Points );
__declspec(implementation_key(164)) float _Application::PointsToLines ( float Points );
__declspec(implementation_key(165)) HRESULT _Application::Activate ( );
__declspec(implementation_key(166)) float _Application::PointsToPixels ( float Points, VARIANT * fVertical );
__declspec(implementation_key(167)) float _Application::PixelsToPoints ( float Pixels, VARIANT * fVertical );
__declspec(implementation_key(168)) HRESULT _Application::KeyboardLatin ( );
__declspec(implementation_key(169)) HRESULT _Application::KeyboardBidi ( );
__declspec(implementation_key(170)) HRESULT _Application::ToggleKeyboard ( );
__declspec(implementation_key(171)) long _Application::Keyboard ( long LangId );
__declspec(implementation_key(172)) _bstr_t _Application::ProductCode ( );
__declspec(implementation_key(173)) DefaultWebOptionsPtr _Application::DefaultWebOptions ( );
__declspec(implementation_key(174)) HRESULT _Application::DiscussionSupport ( VARIANT * Range, VARIANT * cid, VARIANT * piCSE );
__declspec(implementation_key(175)) HRESULT _Application::SetDefaultTheme ( _bstr_t Name, enum WdDocumentMedium DocumentType );
__declspec(implementation_key(176)) _bstr_t _Application::GetDefaultTheme ( enum WdDocumentMedium DocumentType );
__declspec(implementation_key(177)) EmailOptionsPtr _Application::GetEmailOptions ( );
__declspec(implementation_key(178)) enum Office::MsoLanguageID _Application::GetLanguage ( );
__declspec(implementation_key(179)) Office::COMAddInsPtr _Application::GetCOMAddIns ( );
__declspec(implementation_key(180)) VARIANT_BOOL _Application::GetCheckLanguage ( );
__declspec(implementation_key(181)) void _Application::PutCheckLanguage ( VARIANT_BOOL prop );
__declspec(implementation_key(182)) Office::LanguageSettingsPtr _Application::GetLanguageSettings ( );
__declspec(implementation_key(183)) VARIANT_BOOL _Application::GetDummy1 ( );
__declspec(implementation_key(184)) Office::AnswerWizardPtr _Application::GetAnswerWizard ( );
__declspec(implementation_key(185)) enum Office::MsoFeatureInstall _Application::GetFeatureInstall ( );
__declspec(implementation_key(186)) void _Application::PutFeatureInstall ( enum Office::MsoFeatureInstall prop );
__declspec(implementation_key(187)) HRESULT _Application::PrintOut ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * FileName, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint, VARIANT * PrintZoomColumn, VARIANT * PrintZoomRow, VARIANT * PrintZoomPaperWidth, VARIANT * PrintZoomPaperHeight );
__declspec(implementation_key(188)) _variant_t _Application::Run ( _bstr_t MacroName, VARIANT * varg1, VARIANT * varg2, VARIANT * varg3, VARIANT * varg4, VARIANT * varg5, VARIANT * varg6, VARIANT * varg7, VARIANT * varg8, VARIANT * varg9, VARIANT * varg10, VARIANT * varg11, VARIANT * varg12, VARIANT * varg13, VARIANT * varg14, VARIANT * varg15, VARIANT * varg16, VARIANT * varg17, VARIANT * varg18, VARIANT * varg19, VARIANT * varg20, VARIANT * varg21, VARIANT * varg22, VARIANT * varg23, VARIANT * varg24, VARIANT * varg25, VARIANT * varg26, VARIANT * varg27, VARIANT * varg28, VARIANT * varg29, VARIANT * varg30 );
__declspec(implementation_key(189)) _ApplicationPtr _Global::GetApplication ( );
__declspec(implementation_key(190)) long _Global::GetCreator ( );
__declspec(implementation_key(191)) IDispatchPtr _Global::GetParent ( );
__declspec(implementation_key(192)) _bstr_t _Global::GetName ( );
__declspec(implementation_key(193)) DocumentsPtr _Global::GetDocuments ( );
__declspec(implementation_key(194)) WindowsPtr _Global::GetWindows ( );
__declspec(implementation_key(195)) _DocumentPtr _Global::GetActiveDocument ( );
__declspec(implementation_key(196)) WindowPtr _Global::GetActiveWindow ( );
__declspec(implementation_key(197)) SelectionPtr _Global::GetSelection ( );
__declspec(implementation_key(198)) IDispatchPtr _Global::GetWordBasic ( );
__declspec(implementation_key(199)) VARIANT_BOOL _Global::GetPrintPreview ( );
__declspec(implementation_key(200)) void _Global::PutPrintPreview ( VARIANT_BOOL prop );
__declspec(implementation_key(201)) RecentFilesPtr _Global::GetRecentFiles ( );
__declspec(implementation_key(202)) TemplatePtr _Global::GetNormalTemplate ( );
__declspec(implementation_key(203)) SystemPtr _Global::GetSystem ( );
__declspec(implementation_key(204)) AutoCorrectPtr _Global::GetAutoCorrect ( );
__declspec(implementation_key(205)) FontNamesPtr _Global::GetFontNames ( );
__declspec(implementation_key(206)) FontNamesPtr _Global::GetLandscapeFontNames ( );
__declspec(implementation_key(207)) FontNamesPtr _Global::GetPortraitFontNames ( );
__declspec(implementation_key(208)) LanguagesPtr _Global::GetLanguages ( );
__declspec(implementation_key(209)) Office::AssistantPtr _Global::GetAssistant ( );
__declspec(implementation_key(210)) FileConvertersPtr _Global::GetFileConverters ( );
__declspec(implementation_key(211)) DialogsPtr _Global::GetDialogs ( );
__declspec(implementation_key(212)) CaptionLabelsPtr _Global::GetCaptionLabels ( );
__declspec(implementation_key(213)) AutoCaptionsPtr _Global::GetAutoCaptions ( );
__declspec(implementation_key(214)) AddInsPtr _Global::GetAddIns ( );
__declspec(implementation_key(215)) TasksPtr _Global::GetTasks ( );
__declspec(implementation_key(216)) IDispatchPtr _Global::GetMacroContainer ( );
__declspec(implementation_key(217)) Office::_CommandBarsPtr _Global::GetCommandBars ( );
__declspec(implementation_key(218)) SynonymInfoPtr _Global::GetSynonymInfo ( _bstr_t Word, VARIANT * LanguageID );
__declspec(implementation_key(219)) VBIDE::VBEPtr _Global::GetVBE ( );
__declspec(implementation_key(220)) ListGalleriesPtr _Global::GetListGalleries ( );
__declspec(implementation_key(221)) _bstr_t _Global::GetActivePrinter ( );
__declspec(implementation_key(222)) void _Global::PutActivePrinter ( _bstr_t prop );
__declspec(implementation_key(223)) TemplatesPtr _Global::GetTemplates ( );
__declspec(implementation_key(224)) IDispatchPtr _Global::GetCustomizationContext ( );
__declspec(implementation_key(225)) void _Global::PutCustomizationContext ( IDispatch * prop );
__declspec(implementation_key(226)) KeyBindingsPtr _Global::GetKeyBindings ( );
__declspec(implementation_key(227)) KeysBoundToPtr _Global::GetKeysBoundTo ( enum WdKeyCategory KeyCategory, _bstr_t Command, VARIANT * CommandParameter );
__declspec(implementation_key(228)) KeyBindingPtr _Global::GetFindKey ( long KeyCode, VARIANT * KeyCode2 );
__declspec(implementation_key(229)) OptionsPtr _Global::GetOptions ( );
__declspec(implementation_key(230)) DictionariesPtr _Global::GetCustomDictionaries ( );
__declspec(implementation_key(231)) void _Global::PutStatusBar ( _bstr_t _arg1 );
__declspec(implementation_key(232)) VARIANT_BOOL _Global::GetShowVisualBasicEditor ( );
__declspec(implementation_key(233)) void _Global::PutShowVisualBasicEditor ( VARIANT_BOOL prop );
__declspec(implementation_key(234)) VARIANT_BOOL _Global::GetIsObjectValid ( IDispatch * Object );
__declspec(implementation_key(235)) HangulHanjaConversionDictionariesPtr _Global::GetHangulHanjaDictionaries ( );
__declspec(implementation_key(236)) VARIANT_BOOL _Global::Repeat ( VARIANT * Times );
__declspec(implementation_key(237)) HRESULT _Global::DDEExecute ( long Channel, _bstr_t Command );
__declspec(implementation_key(238)) long _Global::DDEInitiate ( _bstr_t App, _bstr_t Topic );
__declspec(implementation_key(239)) HRESULT _Global::DDEPoke ( long Channel, _bstr_t Item, _bstr_t Data );
__declspec(implementation_key(240)) _bstr_t _Global::DDERequest ( long Channel, _bstr_t Item );
__declspec(implementation_key(241)) HRESULT _Global::DDETerminate ( long Channel );
__declspec(implementation_key(242)) HRESULT _Global::DDETerminateAll ( );
__declspec(implementation_key(243)) long _Global::BuildKeyCode ( enum WdKey Arg1, VARIANT * Arg2, VARIANT * Arg3, VARIANT * Arg4 );
__declspec(implementation_key(244)) _bstr_t _Global::KeyString ( long KeyCode, VARIANT * KeyCode2 );
__declspec(implementation_key(245)) VARIANT_BOOL _Global::CheckSpelling ( _bstr_t Word, VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * MainDictionary, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 );
__declspec(implementation_key(246)) SpellingSuggestionsPtr _Global::GetSpellingSuggestions ( _bstr_t Word, VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * MainDictionary, VARIANT * SuggestionMode, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 );
__declspec(implementation_key(247)) HRESULT _Global::Help ( VARIANT * HelpType );
__declspec(implementation_key(248)) WindowPtr _Global::NewWindow ( );
__declspec(implementation_key(249)) _bstr_t _Global::CleanString ( _bstr_t String );
__declspec(implementation_key(250)) HRESULT _Global::ChangeFileOpenDirectory ( _bstr_t Path );
__declspec(implementation_key(251)) float _Global::InchesToPoints ( float Inches );
__declspec(implementation_key(252)) float _Global::CentimetersToPoints ( float Centimeters );
__declspec(implementation_key(253)) float _Global::MillimetersToPoints ( float Millimeters );
__declspec(implementation_key(254)) float _Global::PicasToPoints ( float Picas );
__declspec(implementation_key(255)) float _Global::LinesToPoints ( float Lines );
__declspec(implementation_key(256)) float _Global::PointsToInches ( float Points );
__declspec(implementation_key(257)) float _Global::PointsToCentimeters ( float Points );
__declspec(implementation_key(258)) float _Global::PointsToMillimeters ( float Points );
__declspec(implementation_key(259)) float _Global::PointsToPicas ( float Points );
__declspec(implementation_key(260)) float _Global::PointsToLines ( float Points );
__declspec(implementation_key(261)) float _Global::PointsToPixels ( float Points, VARIANT * fVertical );
__declspec(implementation_key(262)) float _Global::PixelsToPoints ( float Pixels, VARIANT * fVertical );
__declspec(implementation_key(263)) Office::LanguageSettingsPtr _Global::GetLanguageSettings ( );
__declspec(implementation_key(264)) Office::AnswerWizardPtr _Global::GetAnswerWizard ( );
__declspec(implementation_key(265)) IUnknownPtr FontNames::Get_NewEnum ( );
__declspec(implementation_key(266)) long FontNames::GetCount ( );
__declspec(implementation_key(267)) _ApplicationPtr FontNames::GetApplication ( );
__declspec(implementation_key(268)) long FontNames::GetCreator ( );
__declspec(implementation_key(269)) IDispatchPtr FontNames::GetParent ( );
__declspec(implementation_key(270)) _bstr_t FontNames::Item ( long Index );
__declspec(implementation_key(271)) IUnknownPtr Languages::Get_NewEnum ( );
__declspec(implementation_key(272)) long Languages::GetCount ( );
__declspec(implementation_key(273)) _ApplicationPtr Languages::GetApplication ( );
__declspec(implementation_key(274)) long Languages::GetCreator ( );
__declspec(implementation_key(275)) IDispatchPtr Languages::GetParent ( );
__declspec(implementation_key(276)) LanguagePtr Languages::Item ( VARIANT * Index );
__declspec(implementation_key(277)) _ApplicationPtr Language::GetApplication ( );
__declspec(implementation_key(278)) long Language::GetCreator ( );
__declspec(implementation_key(279)) IDispatchPtr Language::GetParent ( );
__declspec(implementation_key(280)) enum WdLanguageID Language::GetID ( );
__declspec(implementation_key(281)) _bstr_t Language::GetNameLocal ( );
__declspec(implementation_key(282)) _bstr_t Language::GetName ( );
__declspec(implementation_key(283)) DictionaryPtr Language::GetActiveGrammarDictionary ( );
__declspec(implementation_key(284)) DictionaryPtr Language::GetActiveHyphenationDictionary ( );
__declspec(implementation_key(285)) DictionaryPtr Language::GetActiveSpellingDictionary ( );
__declspec(implementation_key(286)) DictionaryPtr Language::GetActiveThesaurusDictionary ( );
__declspec(implementation_key(287)) _bstr_t Language::GetDefaultWritingStyle ( );
__declspec(implementation_key(288)) void Language::PutDefaultWritingStyle ( _bstr_t prop );
__declspec(implementation_key(289)) _variant_t Language::GetWritingStyleList ( );
__declspec(implementation_key(290)) enum WdDictionaryType Language::GetSpellingDictionaryType ( );
__declspec(implementation_key(291)) void Language::PutSpellingDictionaryType ( enum WdDictionaryType prop );
__declspec(implementation_key(292)) IUnknownPtr Documents::Get_NewEnum ( );
__declspec(implementation_key(293)) long Documents::GetCount ( );
__declspec(implementation_key(294)) _ApplicationPtr Documents::GetApplication ( );
__declspec(implementation_key(295)) long Documents::GetCreator ( );
__declspec(implementation_key(296)) IDispatchPtr Documents::GetParent ( );
__declspec(implementation_key(297)) _DocumentPtr Documents::Item ( VARIANT * Index );
__declspec(implementation_key(298)) HRESULT Documents::Close ( VARIANT * SaveChanges, VARIANT * OriginalFormat, VARIANT * RouteDocument );
__declspec(implementation_key(299)) _DocumentPtr Documents::AddOld ( VARIANT * Template, VARIANT * NewTemplate );
__declspec(implementation_key(300)) _DocumentPtr Documents::OpenOld ( VARIANT * FileName, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * AddToRecentFiles, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate, VARIANT * Format );
__declspec(implementation_key(301)) HRESULT Documents::Save ( VARIANT * NoPrompt, VARIANT * OriginalFormat );
__declspec(implementation_key(302)) _DocumentPtr Documents::Add ( VARIANT * Template, VARIANT * NewTemplate, VARIANT * DocumentType, VARIANT * Visible );
__declspec(implementation_key(303)) _DocumentPtr Documents::Open ( VARIANT * FileName, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * AddToRecentFiles, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate, VARIANT * Format, VARIANT * Encoding, VARIANT * Visible );
__declspec(implementation_key(304)) _bstr_t _Document::GetName ( );
__declspec(implementation_key(305)) _ApplicationPtr _Document::GetApplication ( );
__declspec(implementation_key(306)) long _Document::GetCreator ( );
__declspec(implementation_key(307)) IDispatchPtr _Document::GetParent ( );
__declspec(implementation_key(308)) IDispatchPtr _Document::GetBuiltInDocumentProperties ( );
__declspec(implementation_key(309)) IDispatchPtr _Document::GetCustomDocumentProperties ( );
__declspec(implementation_key(310)) _bstr_t _Document::GetPath ( );
__declspec(implementation_key(311)) BookmarksPtr _Document::GetBookmarks ( );
__declspec(implementation_key(312)) TablesPtr _Document::GetTables ( );
__declspec(implementation_key(313)) FootnotesPtr _Document::GetFootnotes ( );
__declspec(implementation_key(314)) EndnotesPtr _Document::GetEndnotes ( );
__declspec(implementation_key(315)) CommentsPtr _Document::GetComments ( );
__declspec(implementation_key(316)) enum WdDocumentType _Document::GetType ( );
__declspec(implementation_key(317)) VARIANT_BOOL _Document::GetAutoHyphenation ( );
__declspec(implementation_key(318)) void _Document::PutAutoHyphenation ( VARIANT_BOOL prop );
__declspec(implementation_key(319)) VARIANT_BOOL _Document::GetHyphenateCaps ( );
__declspec(implementation_key(320)) void _Document::PutHyphenateCaps ( VARIANT_BOOL prop );
__declspec(implementation_key(321)) long _Document::GetHyphenationZone ( );
__declspec(implementation_key(322)) void _Document::PutHyphenationZone ( long prop );
__declspec(implementation_key(323)) long _Document::GetConsecutiveHyphensLimit ( );
__declspec(implementation_key(324)) void _Document::PutConsecutiveHyphensLimit ( long prop );
__declspec(implementation_key(325)) SectionsPtr _Document::GetSections ( );
__declspec(implementation_key(326)) ParagraphsPtr _Document::GetParagraphs ( );
__declspec(implementation_key(327)) WordsPtr _Document::GetWords ( );
__declspec(implementation_key(328)) SentencesPtr _Document::GetSentences ( );
__declspec(implementation_key(329)) CharactersPtr _Document::GetCharacters ( );
__declspec(implementation_key(330)) FieldsPtr _Document::GetFields ( );
__declspec(implementation_key(331)) FormFieldsPtr _Document::GetFormFields ( );
__declspec(implementation_key(332)) StylesPtr _Document::GetStyles ( );
__declspec(implementation_key(333)) FramesPtr _Document::GetFrames ( );
__declspec(implementation_key(334)) TablesOfFiguresPtr _Document::GetTablesOfFigures ( );
__declspec(implementation_key(335)) VariablesPtr _Document::GetVariables ( );
__declspec(implementation_key(336)) MailMergePtr _Document::GetMailMerge ( );
__declspec(implementation_key(337)) EnvelopePtr _Document::GetEnvelope ( );
__declspec(implementation_key(338)) _bstr_t _Document::GetFullName ( );
__declspec(implementation_key(339)) RevisionsPtr _Document::GetRevisions ( );
__declspec(implementation_key(340)) TablesOfContentsPtr _Document::GetTablesOfContents ( );
__declspec(implementation_key(341)) TablesOfAuthoritiesPtr _Document::GetTablesOfAuthorities ( );
__declspec(implementation_key(342)) PageSetupPtr _Document::GetPageSetup ( );
__declspec(implementation_key(343)) void _Document::PutPageSetup ( struct PageSetup * prop );
__declspec(implementation_key(344)) WindowsPtr _Document::GetWindows ( );
__declspec(implementation_key(345)) VARIANT_BOOL _Document::GetHasRoutingSlip ( );
__declspec(implementation_key(346)) void _Document::PutHasRoutingSlip ( VARIANT_BOOL prop );
__declspec(implementation_key(347)) RoutingSlipPtr _Document::GetRoutingSlip ( );
__declspec(implementation_key(348)) VARIANT_BOOL _Document::GetRouted ( );
__declspec(implementation_key(349)) TablesOfAuthoritiesCategoriesPtr _Document::GetTablesOfAuthoritiesCategories ( );
__declspec(implementation_key(350)) IndexesPtr _Document::GetIndexes ( );
__declspec(implementation_key(351)) VARIANT_BOOL _Document::GetSaved ( );
__declspec(implementation_key(352)) void _Document::PutSaved ( VARIANT_BOOL prop );
__declspec(implementation_key(353)) RangePtr _Document::GetContent ( );
__declspec(implementation_key(354)) WindowPtr _Document::GetActiveWindow ( );
__declspec(implementation_key(355)) enum WdDocumentKind _Document::GetKind ( );
__declspec(implementation_key(356)) void _Document::PutKind ( enum WdDocumentKind prop );
__declspec(implementation_key(357)) VARIANT_BOOL _Document::GetReadOnly ( );
__declspec(implementation_key(358)) SubdocumentsPtr _Document::GetSubdocuments ( );
__declspec(implementation_key(359)) VARIANT_BOOL _Document::GetIsMasterDocument ( );
__declspec(implementation_key(360)) float _Document::GetDefaultTabStop ( );
__declspec(implementation_key(361)) void _Document::PutDefaultTabStop ( float prop );
__declspec(implementation_key(362)) VARIANT_BOOL _Document::GetEmbedTrueTypeFonts ( );
__declspec(implementation_key(363)) void _Document::PutEmbedTrueTypeFonts ( VARIANT_BOOL prop );
__declspec(implementation_key(364)) VARIANT_BOOL _Document::GetSaveFormsData ( );
__declspec(implementation_key(365)) void _Document::PutSaveFormsData ( VARIANT_BOOL prop );
__declspec(implementation_key(366)) VARIANT_BOOL _Document::GetReadOnlyRecommended ( );
__declspec(implementation_key(367)) void _Document::PutReadOnlyRecommended ( VARIANT_BOOL prop );
__declspec(implementation_key(368)) VARIANT_BOOL _Document::GetSaveSubsetFonts ( );
__declspec(implementation_key(369)) void _Document::PutSaveSubsetFonts ( VARIANT_BOOL prop );
__declspec(implementation_key(370)) VARIANT_BOOL _Document::GetCompatibility ( enum WdCompatibility Type );
__declspec(implementation_key(371)) void _Document::PutCompatibility ( enum WdCompatibility Type, VARIANT_BOOL prop );
__declspec(implementation_key(372)) StoryRangesPtr _Document::GetStoryRanges ( );
__declspec(implementation_key(373)) Office::_CommandBarsPtr _Document::GetCommandBars ( );
__declspec(implementation_key(374)) VARIANT_BOOL _Document::GetIsSubdocument ( );
__declspec(implementation_key(375)) long _Document::GetSaveFormat ( );
__declspec(implementation_key(376)) enum WdProtectionType _Document::GetProtectionType ( );
__declspec(implementation_key(377)) HyperlinksPtr _Document::GetHyperlinks ( );
__declspec(implementation_key(378)) ShapesPtr _Document::GetShapes ( );
__declspec(implementation_key(379)) ListTemplatesPtr _Document::GetListTemplates ( );
__declspec(implementation_key(380)) ListsPtr _Document::GetLists ( );
__declspec(implementation_key(381)) VARIANT_BOOL _Document::GetUpdateStylesOnOpen ( );
__declspec(implementation_key(382)) void _Document::PutUpdateStylesOnOpen ( VARIANT_BOOL prop );
__declspec(implementation_key(383)) _variant_t _Document::GetAttachedTemplate ( );
__declspec(implementation_key(384)) void _Document::PutAttachedTemplate ( VARIANT * prop );
__declspec(implementation_key(385)) InlineShapesPtr _Document::GetInlineShapes ( );
__declspec(implementation_key(386)) ShapePtr _Document::GetBackground ( );
__declspec(implementation_key(387)) void _Document::PutBackground ( struct Shape * prop );
__declspec(implementation_key(388)) VARIANT_BOOL _Document::GetGrammarChecked ( );
__declspec(implementation_key(389)) void _Document::PutGrammarChecked ( VARIANT_BOOL prop );
__declspec(implementation_key(390)) VARIANT_BOOL _Document::GetSpellingChecked ( );
__declspec(implementation_key(391)) void _Document::PutSpellingChecked ( VARIANT_BOOL prop );
__declspec(implementation_key(392)) VARIANT_BOOL _Document::GetShowGrammaticalErrors ( );
__declspec(implementation_key(393)) void _Document::PutShowGrammaticalErrors ( VARIANT_BOOL prop );
__declspec(implementation_key(394)) VARIANT_BOOL _Document::GetShowSpellingErrors ( );
__declspec(implementation_key(395)) void _Document::PutShowSpellingErrors ( VARIANT_BOOL prop );
__declspec(implementation_key(396)) VersionsPtr _Document::GetVersions ( );
__declspec(implementation_key(397)) VARIANT_BOOL _Document::GetShowSummary ( );
__declspec(implementation_key(398)) void _Document::PutShowSummary ( VARIANT_BOOL prop );
__declspec(implementation_key(399)) enum WdSummaryMode _Document::GetSummaryViewMode ( );
__declspec(implementation_key(400)) void _Document::PutSummaryViewMode ( enum WdSummaryMode prop );
__declspec(implementation_key(401)) long _Document::GetSummaryLength ( );
__declspec(implementation_key(402)) void _Document::PutSummaryLength ( long prop );
__declspec(implementation_key(403)) VARIANT_BOOL _Document::GetPrintFractionalWidths ( );
__declspec(implementation_key(404)) void _Document::PutPrintFractionalWidths ( VARIANT_BOOL prop );
__declspec(implementation_key(405)) VARIANT_BOOL _Document::GetPrintPostScriptOverText ( );
__declspec(implementation_key(406)) void _Document::PutPrintPostScriptOverText ( VARIANT_BOOL prop );
__declspec(implementation_key(407)) IDispatchPtr _Document::GetContainer ( );
__declspec(implementation_key(408)) VARIANT_BOOL _Document::GetPrintFormsData ( );
__declspec(implementation_key(409)) void _Document::PutPrintFormsData ( VARIANT_BOOL prop );
__declspec(implementation_key(410)) ListParagraphsPtr _Document::GetListParagraphs ( );
__declspec(implementation_key(411)) void _Document::PutPassword ( _bstr_t _arg1 );
__declspec(implementation_key(412)) void _Document::PutWritePassword ( _bstr_t _arg1 );
__declspec(implementation_key(413)) VARIANT_BOOL _Document::GetHasPassword ( );
__declspec(implementation_key(414)) VARIANT_BOOL _Document::GetWriteReserved ( );
__declspec(implementation_key(415)) _bstr_t _Document::GetActiveWritingStyle ( VARIANT * LanguageID );
__declspec(implementation_key(416)) void _Document::PutActiveWritingStyle ( VARIANT * LanguageID, _bstr_t prop );
__declspec(implementation_key(417)) VARIANT_BOOL _Document::GetUserControl ( );
__declspec(implementation_key(418)) void _Document::PutUserControl ( VARIANT_BOOL prop );
__declspec(implementation_key(419)) VARIANT_BOOL _Document::GetHasMailer ( );
__declspec(implementation_key(420)) void _Document::PutHasMailer ( VARIANT_BOOL prop );
__declspec(implementation_key(421)) MailerPtr _Document::GetMailer ( );
__declspec(implementation_key(422)) ReadabilityStatisticsPtr _Document::GetReadabilityStatistics ( );
__declspec(implementation_key(423)) ProofreadingErrorsPtr _Document::GetGrammaticalErrors ( );
__declspec(implementation_key(424)) ProofreadingErrorsPtr _Document::GetSpellingErrors ( );
__declspec(implementation_key(425)) VBIDE::_VBProjectPtr _Document::GetVBProject ( );
__declspec(implementation_key(426)) VARIANT_BOOL _Document::GetFormsDesign ( );
__declspec(implementation_key(427)) _bstr_t _Document::Get_CodeName ( );
__declspec(implementation_key(428)) void _Document::Put_CodeName ( _bstr_t prop );
__declspec(implementation_key(429)) _bstr_t _Document::GetCodeName ( );
__declspec(implementation_key(430)) VARIANT_BOOL _Document::GetSnapToGrid ( );
__declspec(implementation_key(431)) void _Document::PutSnapToGrid ( VARIANT_BOOL prop );
__declspec(implementation_key(432)) VARIANT_BOOL _Document::GetSnapToShapes ( );
__declspec(implementation_key(433)) void _Document::PutSnapToShapes ( VARIANT_BOOL prop );
__declspec(implementation_key(434)) float _Document::GetGridDistanceHorizontal ( );
__declspec(implementation_key(435)) void _Document::PutGridDistanceHorizontal ( float prop );
__declspec(implementation_key(436)) float _Document::GetGridDistanceVertical ( );
__declspec(implementation_key(437)) void _Document::PutGridDistanceVertical ( float prop );
__declspec(implementation_key(438)) float _Document::GetGridOriginHorizontal ( );
__declspec(implementation_key(439)) void _Document::PutGridOriginHorizontal ( float prop );
__declspec(implementation_key(440)) float _Document::GetGridOriginVertical ( );
__declspec(implementation_key(441)) void _Document::PutGridOriginVertical ( float prop );
__declspec(implementation_key(442)) long _Document::GetGridSpaceBetweenHorizontalLines ( );
__declspec(implementation_key(443)) void _Document::PutGridSpaceBetweenHorizontalLines ( long prop );
__declspec(implementation_key(444)) long _Document::GetGridSpaceBetweenVerticalLines ( );
__declspec(implementation_key(445)) void _Document::PutGridSpaceBetweenVerticalLines ( long prop );
__declspec(implementation_key(446)) VARIANT_BOOL _Document::GetGridOriginFromMargin ( );
__declspec(implementation_key(447)) void _Document::PutGridOriginFromMargin ( VARIANT_BOOL prop );
__declspec(implementation_key(448)) VARIANT_BOOL _Document::GetKerningByAlgorithm ( );
__declspec(implementation_key(449)) void _Document::PutKerningByAlgorithm ( VARIANT_BOOL prop );
__declspec(implementation_key(450)) enum WdJustificationMode _Document::GetJustificationMode ( );
__declspec(implementation_key(451)) void _Document::PutJustificationMode ( enum WdJustificationMode prop );
__declspec(implementation_key(452)) enum WdFarEastLineBreakLevel _Document::GetFarEastLineBreakLevel ( );
__declspec(implementation_key(453)) void _Document::PutFarEastLineBreakLevel ( enum WdFarEastLineBreakLevel prop );
__declspec(implementation_key(454)) _bstr_t _Document::GetNoLineBreakBefore ( );
__declspec(implementation_key(455)) void _Document::PutNoLineBreakBefore ( _bstr_t prop );
__declspec(implementation_key(456)) _bstr_t _Document::GetNoLineBreakAfter ( );
__declspec(implementation_key(457)) void _Document::PutNoLineBreakAfter ( _bstr_t prop );
__declspec(implementation_key(458)) VARIANT_BOOL _Document::GetTrackRevisions ( );
__declspec(implementation_key(459)) void _Document::PutTrackRevisions ( VARIANT_BOOL prop );
__declspec(implementation_key(460)) VARIANT_BOOL _Document::GetPrintRevisions ( );
__declspec(implementation_key(461)) void _Document::PutPrintRevisions ( VARIANT_BOOL prop );
__declspec(implementation_key(462)) VARIANT_BOOL _Document::GetShowRevisions ( );
__declspec(implementation_key(463)) void _Document::PutShowRevisions ( VARIANT_BOOL prop );
__declspec(implementation_key(464)) HRESULT _Document::Close ( VARIANT * SaveChanges, VARIANT * OriginalFormat, VARIANT * RouteDocument );
__declspec(implementation_key(465)) HRESULT _Document::SaveAs ( VARIANT * FileName, VARIANT * FileFormat, VARIANT * LockComments, VARIANT * Password, VARIANT * AddToRecentFiles, VARIANT * WritePassword, VARIANT * ReadOnlyRecommended, VARIANT * EmbedTrueTypeFonts, VARIANT * SaveNativePictureFormat, VARIANT * SaveFormsData, VARIANT * SaveAsAOCELetter );
__declspec(implementation_key(466)) HRESULT _Document::Repaginate ( );
__declspec(implementation_key(467)) HRESULT _Document::FitToPages ( );
__declspec(implementation_key(468)) HRESULT _Document::ManualHyphenation ( );
__declspec(implementation_key(469)) HRESULT _Document::Select ( );
__declspec(implementation_key(470)) HRESULT _Document::DataForm ( );
__declspec(implementation_key(471)) HRESULT _Document::Route ( );
__declspec(implementation_key(472)) HRESULT _Document::Save ( );
__declspec(implementation_key(473)) HRESULT _Document::PrintOutOld ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint );
__declspec(implementation_key(474)) HRESULT _Document::SendMail ( );
__declspec(implementation_key(475)) RangePtr _Document::Range ( VARIANT * Start, VARIANT * End );
__declspec(implementation_key(476)) HRESULT _Document::RunAutoMacro ( enum WdAutoMacros Which );
__declspec(implementation_key(477)) HRESULT _Document::Activate ( );
__declspec(implementation_key(478)) HRESULT _Document::PrintPreview ( );
__declspec(implementation_key(479)) RangePtr _Document::GoTo ( VARIANT * What, VARIANT * Which, VARIANT * Count, VARIANT * Name );
__declspec(implementation_key(480)) VARIANT_BOOL _Document::Undo ( VARIANT * Times );
__declspec(implementation_key(481)) VARIANT_BOOL _Document::Redo ( VARIANT * Times );
__declspec(implementation_key(482)) long _Document::ComputeStatistics ( enum WdStatistic Statistic, VARIANT * IncludeFootnotesAndEndnotes );
__declspec(implementation_key(483)) HRESULT _Document::MakeCompatibilityDefault ( );
__declspec(implementation_key(484)) HRESULT _Document::Protect ( enum WdProtectionType Type, VARIANT * NoReset, VARIANT * Password );
__declspec(implementation_key(485)) HRESULT _Document::Unprotect ( VARIANT * Password );
__declspec(implementation_key(486)) HRESULT _Document::EditionOptions ( enum WdEditionType Type, enum WdEditionOption Option, _bstr_t Name, VARIANT * Format );
__declspec(implementation_key(487)) HRESULT _Document::RunLetterWizard ( VARIANT * LetterContent, VARIANT * WizardMode );
__declspec(implementation_key(488)) _LetterContentPtr _Document::GetLetterContent ( );
__declspec(implementation_key(489)) HRESULT _Document::SetLetterContent ( VARIANT * LetterContent );
__declspec(implementation_key(490)) HRESULT _Document::CopyStylesFromTemplate ( _bstr_t Template );
__declspec(implementation_key(491)) HRESULT _Document::UpdateStyles ( );
__declspec(implementation_key(492)) HRESULT _Document::CheckGrammar ( );
__declspec(implementation_key(493)) HRESULT _Document::CheckSpelling ( VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * AlwaysSuggest, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 );
__declspec(implementation_key(494)) HRESULT _Document::FollowHyperlink ( VARIANT * Address, VARIANT * SubAddress, VARIANT * NewWindow, VARIANT * AddHistory, VARIANT * ExtraInfo, VARIANT * Method, VARIANT * HeaderInfo );
__declspec(implementation_key(495)) HRESULT _Document::AddToFavorites ( );
__declspec(implementation_key(496)) HRESULT _Document::Reload ( );
__declspec(implementation_key(497)) RangePtr _Document::AutoSummarize ( VARIANT * Length, VARIANT * Mode, VARIANT * UpdateProperties );
__declspec(implementation_key(498)) HRESULT _Document::RemoveNumbers ( VARIANT * NumberType );
__declspec(implementation_key(499)) HRESULT _Document::ConvertNumbersToText ( VARIANT * NumberType );
__declspec(implementation_key(500)) long _Document::CountNumberedItems ( VARIANT * NumberType, VARIANT * Level );
__declspec(implementation_key(501)) HRESULT _Document::Post ( );
__declspec(implementation_key(502)) HRESULT _Document::ToggleFormsDesign ( );
__declspec(implementation_key(503)) HRESULT _Document::Compare ( _bstr_t Name );
__declspec(implementation_key(504)) HRESULT _Document::UpdateSummaryProperties ( );
__declspec(implementation_key(505)) _variant_t _Document::GetCrossReferenceItems ( VARIANT * ReferenceType );
__declspec(implementation_key(506)) HRESULT _Document::AutoFormat ( );
__declspec(implementation_key(507)) HRESULT _Document::ViewCode ( );
__declspec(implementation_key(508)) HRESULT _Document::ViewPropertyBrowser ( );
__declspec(implementation_key(509)) HRESULT _Document::ForwardMailer ( );
__declspec(implementation_key(510)) HRESULT _Document::Reply ( );
__declspec(implementation_key(511)) HRESULT _Document::ReplyAll ( );
__declspec(implementation_key(512)) HRESULT _Document::SendMailer ( VARIANT * FileFormat, VARIANT * Priority );
__declspec(implementation_key(513)) HRESULT _Document::UndoClear ( );
__declspec(implementation_key(514)) HRESULT _Document::PresentIt ( );
__declspec(implementation_key(515)) HRESULT _Document::SendFax ( _bstr_t Address, VARIANT * Subject );
__declspec(implementation_key(516)) HRESULT _Document::Merge ( _bstr_t FileName );
__declspec(implementation_key(517)) HRESULT _Document::ClosePrintPreview ( );
__declspec(implementation_key(518)) HRESULT _Document::CheckConsistency ( );
__declspec(implementation_key(519)) _LetterContentPtr _Document::CreateLetterContent ( _bstr_t DateFormat, VARIANT_BOOL IncludeHeaderFooter, _bstr_t PageDesign, enum WdLetterStyle LetterStyle, VARIANT_BOOL Letterhead, enum WdLetterheadLocation LetterheadLocation, float LetterheadSize, _bstr_t RecipientName, _bstr_t RecipientAddress, _bstr_t Salutation, enum WdSalutationType SalutationType, _bstr_t RecipientReference, _bstr_t MailingInstructions, _bstr_t AttentionLine, _bstr_t Subject, _bstr_t CCList, _bstr_t ReturnAddress, _bstr_t SenderName, _bstr_t Closing, _bstr_t SenderCompany, _bstr_t SenderJobTitle, _bstr_t SenderInitials, long EnclosureNumber, VARIANT * InfoBlock, VARIANT * RecipientCode, VARIANT * RecipientGender, VARIANT * ReturnAddressShortForm, VARIANT * SenderCity, VARIANT * SenderCode, VARIANT * SenderGender, VARIANT * SenderReference );
__declspec(implementation_key(520)) HRESULT _Document::AcceptAllRevisions ( );
__declspec(implementation_key(521)) HRESULT _Document::RejectAllRevisions ( );
__declspec(implementation_key(522)) HRESULT _Document::DetectLanguage ( );
__declspec(implementation_key(523)) HRESULT _Document::ApplyTheme ( _bstr_t Name );
__declspec(implementation_key(524)) HRESULT _Document::RemoveTheme ( );
__declspec(implementation_key(525)) HRESULT _Document::WebPagePreview ( );
__declspec(implementation_key(526)) HRESULT _Document::ReloadAs ( enum Office::MsoEncoding Encoding );
__declspec(implementation_key(527)) _bstr_t _Document::GetActiveTheme ( );
__declspec(implementation_key(528)) _bstr_t _Document::GetActiveThemeDisplayName ( );
__declspec(implementation_key(529)) EmailPtr _Document::GetEmail ( );
__declspec(implementation_key(530)) Office::ScriptsPtr _Document::GetScripts ( );
__declspec(implementation_key(531)) VARIANT_BOOL _Document::GetLanguageDetected ( );
__declspec(implementation_key(532)) void _Document::PutLanguageDetected ( VARIANT_BOOL prop );
__declspec(implementation_key(533)) enum WdFarEastLineBreakLanguageID _Document::GetFarEastLineBreakLanguage ( );
__declspec(implementation_key(534)) void _Document::PutFarEastLineBreakLanguage ( enum WdFarEastLineBreakLanguageID prop );
__declspec(implementation_key(535)) FramesetPtr _Document::GetFrameset ( );
__declspec(implementation_key(536)) _variant_t _Document::GetClickAndTypeParagraphStyle ( );
__declspec(implementation_key(537)) void _Document::PutClickAndTypeParagraphStyle ( VARIANT * prop );
__declspec(implementation_key(538)) Office::HTMLProjectPtr _Document::GetHTMLProject ( );
__declspec(implementation_key(539)) WebOptionsPtr _Document::GetWebOptions ( );
__declspec(implementation_key(540)) enum Office::MsoEncoding _Document::GetOpenEncoding ( );
__declspec(implementation_key(541)) enum Office::MsoEncoding _Document::GetSaveEncoding ( );
__declspec(implementation_key(542)) void _Document::PutSaveEncoding ( enum Office::MsoEncoding prop );
__declspec(implementation_key(543)) VARIANT_BOOL _Document::GetOptimizeForWord97 ( );
__declspec(implementation_key(544)) void _Document::PutOptimizeForWord97 ( VARIANT_BOOL prop );
__declspec(implementation_key(545)) VARIANT_BOOL _Document::GetVBASigned ( );
__declspec(implementation_key(546)) HRESULT _Document::PrintOut ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint, VARIANT * PrintZoomColumn, VARIANT * PrintZoomRow, VARIANT * PrintZoomPaperWidth, VARIANT * PrintZoomPaperHeight );
__declspec(implementation_key(547)) HRESULT _Document::sblt ( _bstr_t s );
__declspec(implementation_key(548)) _bstr_t Template::GetName ( );
__declspec(implementation_key(549)) _ApplicationPtr Template::GetApplication ( );
__declspec(implementation_key(550)) long Template::GetCreator ( );
__declspec(implementation_key(551)) IDispatchPtr Template::GetParent ( );
__declspec(implementation_key(552)) _bstr_t Template::GetPath ( );
__declspec(implementation_key(553)) AutoTextEntriesPtr Template::GetAutoTextEntries ( );
__declspec(implementation_key(554)) enum WdLanguageID Template::GetLanguageID ( );
__declspec(implementation_key(555)) void Template::PutLanguageID ( enum WdLanguageID prop );
__declspec(implementation_key(556)) VARIANT_BOOL Template::GetSaved ( );
__declspec(implementation_key(557)) void Template::PutSaved ( VARIANT_BOOL prop );
__declspec(implementation_key(558)) enum WdTemplateType Template::GetType ( );
__declspec(implementation_key(559)) _bstr_t Template::GetFullName ( );
__declspec(implementation_key(560)) IDispatchPtr Template::GetBuiltInDocumentProperties ( );
__declspec(implementation_key(561)) IDispatchPtr Template::GetCustomDocumentProperties ( );
__declspec(implementation_key(562)) ListTemplatesPtr Template::GetListTemplates ( );
__declspec(implementation_key(563)) enum WdLanguageID Template::GetLanguageIDFarEast ( );
__declspec(implementation_key(564)) void Template::PutLanguageIDFarEast ( enum WdLanguageID prop );
__declspec(implementation_key(565)) VBIDE::_VBProjectPtr Template::GetVBProject ( );
__declspec(implementation_key(566)) VARIANT_BOOL Template::GetKerningByAlgorithm ( );
__declspec(implementation_key(567)) void Template::PutKerningByAlgorithm ( VARIANT_BOOL prop );
__declspec(implementation_key(568)) enum WdJustificationMode Template::GetJustificationMode ( );
__declspec(implementation_key(569)) void Template::PutJustificationMode ( enum WdJustificationMode prop );
__declspec(implementation_key(570)) enum WdFarEastLineBreakLevel Template::GetFarEastLineBreakLevel ( );
__declspec(implementation_key(571)) void Template::PutFarEastLineBreakLevel ( enum WdFarEastLineBreakLevel prop );
__declspec(implementation_key(572)) _bstr_t Template::GetNoLineBreakBefore ( );
__declspec(implementation_key(573)) void Template::PutNoLineBreakBefore ( _bstr_t prop );
__declspec(implementation_key(574)) _bstr_t Template::GetNoLineBreakAfter ( );
__declspec(implementation_key(575)) void Template::PutNoLineBreakAfter ( _bstr_t prop );
__declspec(implementation_key(576)) _DocumentPtr Template::OpenAsDocument ( );
__declspec(implementation_key(577)) HRESULT Template::Save ( );
__declspec(implementation_key(578)) long Template::GetNoProofing ( );
__declspec(implementation_key(579)) void Template::PutNoProofing ( long prop );
__declspec(implementation_key(580)) enum WdFarEastLineBreakLanguageID Template::GetFarEastLineBreakLanguage ( );
__declspec(implementation_key(581)) void Template::PutFarEastLineBreakLanguage ( enum WdFarEastLineBreakLanguageID prop );
__declspec(implementation_key(582)) _ApplicationPtr Templates::GetApplication ( );
__declspec(implementation_key(583)) long Templates::GetCreator ( );
__declspec(implementation_key(584)) IDispatchPtr Templates::GetParent ( );
__declspec(implementation_key(585)) long Templates::GetCount ( );
__declspec(implementation_key(586)) IUnknownPtr Templates::Get_NewEnum ( );
__declspec(implementation_key(587)) TemplatePtr Templates::Item ( VARIANT * Index );
__declspec(implementation_key(588)) _ApplicationPtr RoutingSlip::GetApplication ( );
__declspec(implementation_key(589)) long RoutingSlip::GetCreator ( );
__declspec(implementation_key(590)) IDispatchPtr RoutingSlip::GetParent ( );
__declspec(implementation_key(591)) _bstr_t RoutingSlip::GetSubject ( );
__declspec(implementation_key(592)) void RoutingSlip::PutSubject ( _bstr_t prop );
__declspec(implementation_key(593)) _bstr_t RoutingSlip::GetMessage ( );
__declspec(implementation_key(594)) void RoutingSlip::PutMessage ( _bstr_t prop );
__declspec(implementation_key(595)) enum WdRoutingSlipDelivery RoutingSlip::GetDelivery ( );
__declspec(implementation_key(596)) void RoutingSlip::PutDelivery ( enum WdRoutingSlipDelivery prop );
__declspec(implementation_key(597)) VARIANT_BOOL RoutingSlip::GetTrackStatus ( );
__declspec(implementation_key(598)) void RoutingSlip::PutTrackStatus ( VARIANT_BOOL prop );
__declspec(implementation_key(599)) enum WdProtectionType RoutingSlip::GetProtect ( );
__declspec(implementation_key(600)) void RoutingSlip::PutProtect ( enum WdProtectionType prop );
__declspec(implementation_key(601)) VARIANT_BOOL RoutingSlip::GetReturnWhenDone ( );
__declspec(implementation_key(602)) void RoutingSlip::PutReturnWhenDone ( VARIANT_BOOL prop );
__declspec(implementation_key(603)) enum WdRoutingSlipStatus RoutingSlip::GetStatus ( );
__declspec(implementation_key(604)) _variant_t RoutingSlip::GetRecipients ( VARIANT * Index );
__declspec(implementation_key(605)) HRESULT RoutingSlip::Reset ( );
__declspec(implementation_key(606)) HRESULT RoutingSlip::AddRecipient ( _bstr_t Recipient );
__declspec(implementation_key(607)) _bstr_t Bookmark::GetName ( );
__declspec(implementation_key(608)) RangePtr Bookmark::GetRange ( );
__declspec(implementation_key(609)) VARIANT_BOOL Bookmark::GetEmpty ( );
__declspec(implementation_key(610)) long Bookmark::GetStart ( );
__declspec(implementation_key(611)) void Bookmark::PutStart ( long prop );
__declspec(implementation_key(612)) long Bookmark::GetEnd ( );
__declspec(implementation_key(613)) void Bookmark::PutEnd ( long prop );
__declspec(implementation_key(614)) VARIANT_BOOL Bookmark::GetColumn ( );
__declspec(implementation_key(615)) enum WdStoryType Bookmark::GetStoryType ( );
__declspec(implementation_key(616)) _ApplicationPtr Bookmark::GetApplication ( );
__declspec(implementation_key(617)) long Bookmark::GetCreator ( );
__declspec(implementation_key(618)) IDispatchPtr Bookmark::GetParent ( );
__declspec(implementation_key(619)) HRESULT Bookmark::Select ( );
__declspec(implementation_key(620)) HRESULT Bookmark::Delete ( );
__declspec(implementation_key(621)) BookmarkPtr Bookmark::Copy ( _bstr_t Name );
__declspec(implementation_key(622)) IUnknownPtr Bookmarks::Get_NewEnum ( );
__declspec(implementation_key(623)) long Bookmarks::GetCount ( );
__declspec(implementation_key(624)) enum WdBookmarkSortBy Bookmarks::GetDefaultSorting ( );
__declspec(implementation_key(625)) void Bookmarks::PutDefaultSorting ( enum WdBookmarkSortBy prop );
__declspec(implementation_key(626)) VARIANT_BOOL Bookmarks::GetShowHidden ( );
__declspec(implementation_key(627)) void Bookmarks::PutShowHidden ( VARIANT_BOOL prop );
__declspec(implementation_key(628)) _ApplicationPtr Bookmarks::GetApplication ( );
__declspec(implementation_key(629)) long Bookmarks::GetCreator ( );
__declspec(implementation_key(630)) IDispatchPtr Bookmarks::GetParent ( );
__declspec(implementation_key(631)) BookmarkPtr Bookmarks::Item ( VARIANT * Index );
__declspec(implementation_key(632)) BookmarkPtr Bookmarks::Add ( _bstr_t Name, VARIANT * Range );
__declspec(implementation_key(633)) VARIANT_BOOL Bookmarks::Exists ( _bstr_t Name );
__declspec(implementation_key(634)) _ApplicationPtr Variable::GetApplication ( );
__declspec(implementation_key(635)) long Variable::GetCreator ( );
__declspec(implementation_key(636)) IDispatchPtr Variable::GetParent ( );
__declspec(implementation_key(637)) _bstr_t Variable::GetName ( );
__declspec(implementation_key(638)) _bstr_t Variable::GetValue ( );
__declspec(implementation_key(639)) void Variable::PutValue ( _bstr_t prop );
__declspec(implementation_key(640)) long Variable::GetIndex ( );
__declspec(implementation_key(641)) HRESULT Variable::Delete ( );
__declspec(implementation_key(642)) IUnknownPtr Variables::Get_NewEnum ( );
__declspec(implementation_key(643)) long Variables::GetCount ( );
__declspec(implementation_key(644)) _ApplicationPtr Variables::GetApplication ( );
__declspec(implementation_key(645)) long Variables::GetCreator ( );
__declspec(implementation_key(646)) IDispatchPtr Variables::GetParent ( );
__declspec(implementation_key(647)) VariablePtr Variables::Item ( VARIANT * Index );
__declspec(implementation_key(648)) VariablePtr Variables::Add ( _bstr_t Name, VARIANT * Value );
__declspec(implementation_key(649)) _ApplicationPtr RecentFile::GetApplication ( );
__declspec(implementation_key(650)) long RecentFile::GetCreator ( );
__declspec(implementation_key(651)) IDispatchPtr RecentFile::GetParent ( );
__declspec(implementation_key(652)) _bstr_t RecentFile::GetName ( );
__declspec(implementation_key(653)) long RecentFile::GetIndex ( );
__declspec(implementation_key(654)) VARIANT_BOOL RecentFile::GetReadOnly ( );
__declspec(implementation_key(655)) void RecentFile::PutReadOnly ( VARIANT_BOOL prop );
__declspec(implementation_key(656)) _bstr_t RecentFile::GetPath ( );
__declspec(implementation_key(657)) _DocumentPtr RecentFile::Open ( );
__declspec(implementation_key(658)) HRESULT RecentFile::Delete ( );
__declspec(implementation_key(659)) _ApplicationPtr RecentFiles::GetApplication ( );
__declspec(implementation_key(660)) long RecentFiles::GetCreator ( );
__declspec(implementation_key(661)) IDispatchPtr RecentFiles::GetParent ( );
__declspec(implementation_key(662)) IUnknownPtr RecentFiles::Get_NewEnum ( );
__declspec(implementation_key(663)) long RecentFiles::GetCount ( );
__declspec(implementation_key(664)) long RecentFiles::GetMaximum ( );
__declspec(implementation_key(665)) void RecentFiles::PutMaximum ( long prop );
__declspec(implementation_key(666)) RecentFilePtr RecentFiles::Item ( long Index );
__declspec(implementation_key(667)) RecentFilePtr RecentFiles::Add ( VARIANT * Document, VARIANT * ReadOnly );
__declspec(implementation_key(668)) _ApplicationPtr Window::GetApplication ( );
__declspec(implementation_key(669)) long Window::GetCreator ( );
__declspec(implementation_key(670)) IDispatchPtr Window::GetParent ( );
__declspec(implementation_key(671)) PanePtr Window::GetActivePane ( );
__declspec(implementation_key(672)) _DocumentPtr Window::GetDocument ( );
__declspec(implementation_key(673)) PanesPtr Window::GetPanes ( );
__declspec(implementation_key(674)) SelectionPtr Window::GetSelection ( );
__declspec(implementation_key(675)) long Window::GetLeft ( );
__declspec(implementation_key(676)) void Window::PutLeft ( long prop );
__declspec(implementation_key(677)) long Window::GetTop ( );
__declspec(implementation_key(678)) void Window::PutTop ( long prop );
__declspec(implementation_key(679)) long Window::GetWidth ( );
__declspec(implementation_key(680)) void Window::PutWidth ( long prop );
__declspec(implementation_key(681)) long Window::GetHeight ( );
__declspec(implementation_key(682)) void Window::PutHeight ( long prop );
__declspec(implementation_key(683)) VARIANT_BOOL Window::GetSplit ( );
__declspec(implementation_key(684)) void Window::PutSplit ( VARIANT_BOOL prop );
__declspec(implementation_key(685)) long Window::GetSplitVertical ( );
__declspec(implementation_key(686)) void Window::PutSplitVertical ( long prop );
__declspec(implementation_key(687)) _bstr_t Window::GetCaption ( );
__declspec(implementation_key(688)) void Window::PutCaption ( _bstr_t prop );
__declspec(implementation_key(689)) enum WdWindowState Window::GetWindowState ( );
__declspec(implementation_key(690)) void Window::PutWindowState ( enum WdWindowState prop );
__declspec(implementation_key(691)) VARIANT_BOOL Window::GetDisplayRulers ( );
__declspec(implementation_key(692)) void Window::PutDisplayRulers ( VARIANT_BOOL prop );
__declspec(implementation_key(693)) VARIANT_BOOL Window::GetDisplayVerticalRuler ( );
__declspec(implementation_key(694)) void Window::PutDisplayVerticalRuler ( VARIANT_BOOL prop );
__declspec(implementation_key(695)) ViewPtr Window::GetView ( );
__declspec(implementation_key(696)) enum WdWindowType Window::GetType ( );
__declspec(implementation_key(697)) WindowPtr Window::GetNext ( );
__declspec(implementation_key(698)) WindowPtr Window::GetPrevious ( );
__declspec(implementation_key(699)) long Window::GetWindowNumber ( );
__declspec(implementation_key(700)) VARIANT_BOOL Window::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(701)) void Window::PutDisplayVerticalScrollBar ( VARIANT_BOOL prop );
__declspec(implementation_key(702)) VARIANT_BOOL Window::GetDisplayHorizontalScrollBar ( );
__declspec(implementation_key(703)) void Window::PutDisplayHorizontalScrollBar ( VARIANT_BOOL prop );
__declspec(implementation_key(704)) float Window::GetStyleAreaWidth ( );
__declspec(implementation_key(705)) void Window::PutStyleAreaWidth ( float prop );
__declspec(implementation_key(706)) VARIANT_BOOL Window::GetDisplayScreenTips ( );
__declspec(implementation_key(707)) void Window::PutDisplayScreenTips ( VARIANT_BOOL prop );
__declspec(implementation_key(708)) long Window::GetHorizontalPercentScrolled ( );
__declspec(implementation_key(709)) void Window::PutHorizontalPercentScrolled ( long prop );
__declspec(implementation_key(710)) long Window::GetVerticalPercentScrolled ( );
__declspec(implementation_key(711)) void Window::PutVerticalPercentScrolled ( long prop );
__declspec(implementation_key(712)) VARIANT_BOOL Window::GetDocumentMap ( );
__declspec(implementation_key(713)) void Window::PutDocumentMap ( VARIANT_BOOL prop );
__declspec(implementation_key(714)) VARIANT_BOOL Window::GetActive ( );
__declspec(implementation_key(715)) long Window::GetDocumentMapPercentWidth ( );
__declspec(implementation_key(716)) void Window::PutDocumentMapPercentWidth ( long prop );
__declspec(implementation_key(717)) long Window::GetIndex ( );
__declspec(implementation_key(718)) enum WdIMEMode Window::GetIMEMode ( );
__declspec(implementation_key(719)) void Window::PutIMEMode ( enum WdIMEMode prop );
__declspec(implementation_key(720)) HRESULT Window::Activate ( );
__declspec(implementation_key(721)) HRESULT Window::Close ( VARIANT * SaveChanges, VARIANT * RouteDocument );
__declspec(implementation_key(722)) HRESULT Window::LargeScroll ( VARIANT * Down, VARIANT * Up, VARIANT * ToRight, VARIANT * ToLeft );
__declspec(implementation_key(723)) HRESULT Window::SmallScroll ( VARIANT * Down, VARIANT * Up, VARIANT * ToRight, VARIANT * ToLeft );
__declspec(implementation_key(724)) WindowPtr Window::NewWindow ( );
__declspec(implementation_key(725)) HRESULT Window::PrintOutOld ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint );
__declspec(implementation_key(726)) HRESULT Window::PageScroll ( VARIANT * Down, VARIANT * Up );
__declspec(implementation_key(727)) HRESULT Window::SetFocus ( );
__declspec(implementation_key(728)) IDispatchPtr Window::RangeFromPoint ( long x, long y );
__declspec(implementation_key(729)) HRESULT Window::ScrollIntoView ( IDispatch * obj, VARIANT * Start );
__declspec(implementation_key(730)) HRESULT Window::GetPoint ( long * ScreenPixelsLeft, long * ScreenPixelsTop, long * ScreenPixelsWidth, long * ScreenPixelsHeight, IDispatch * obj );
__declspec(implementation_key(731)) HRESULT Window::PrintOut ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint, VARIANT * PrintZoomColumn, VARIANT * PrintZoomRow, VARIANT * PrintZoomPaperWidth, VARIANT * PrintZoomPaperHeight );
__declspec(implementation_key(732)) long Window::GetUsableWidth ( );
__declspec(implementation_key(733)) long Window::GetUsableHeight ( );
__declspec(implementation_key(734)) VARIANT_BOOL Window::GetEnvelopeVisible ( );
__declspec(implementation_key(735)) void Window::PutEnvelopeVisible ( VARIANT_BOOL prop );
__declspec(implementation_key(736)) VARIANT_BOOL Window::GetDisplayRightRuler ( );
__declspec(implementation_key(737)) void Window::PutDisplayRightRuler ( VARIANT_BOOL prop );
__declspec(implementation_key(738)) VARIANT_BOOL Window::GetDisplayLeftScrollBar ( );
__declspec(implementation_key(739)) void Window::PutDisplayLeftScrollBar ( VARIANT_BOOL prop );
__declspec(implementation_key(740)) VARIANT_BOOL Window::GetVisible ( );
__declspec(implementation_key(741)) void Window::PutVisible ( VARIANT_BOOL prop );
__declspec(implementation_key(742)) IUnknownPtr Windows::Get_NewEnum ( );
__declspec(implementation_key(743)) long Windows::GetCount ( );
__declspec(implementation_key(744)) _ApplicationPtr Windows::GetApplication ( );
__declspec(implementation_key(745)) long Windows::GetCreator ( );
__declspec(implementation_key(746)) IDispatchPtr Windows::GetParent ( );
__declspec(implementation_key(747)) WindowPtr Windows::Item ( VARIANT * Index );
__declspec(implementation_key(748)) WindowPtr Windows::Add ( VARIANT * Window );
__declspec(implementation_key(749)) HRESULT Windows::Arrange ( VARIANT * ArrangeStyle );
__declspec(implementation_key(750)) _ApplicationPtr Pane::GetApplication ( );
__declspec(implementation_key(751)) long Pane::GetCreator ( );
__declspec(implementation_key(752)) IDispatchPtr Pane::GetParent ( );
__declspec(implementation_key(753)) _DocumentPtr Pane::GetDocument ( );
__declspec(implementation_key(754)) SelectionPtr Pane::GetSelection ( );
__declspec(implementation_key(755)) VARIANT_BOOL Pane::GetDisplayRulers ( );
__declspec(implementation_key(756)) void Pane::PutDisplayRulers ( VARIANT_BOOL prop );
__declspec(implementation_key(757)) VARIANT_BOOL Pane::GetDisplayVerticalRuler ( );
__declspec(implementation_key(758)) void Pane::PutDisplayVerticalRuler ( VARIANT_BOOL prop );
__declspec(implementation_key(759)) ZoomsPtr Pane::GetZooms ( );
__declspec(implementation_key(760)) long Pane::GetIndex ( );
__declspec(implementation_key(761)) ViewPtr Pane::GetView ( );
__declspec(implementation_key(762)) PanePtr Pane::GetNext ( );
__declspec(implementation_key(763)) PanePtr Pane::GetPrevious ( );
__declspec(implementation_key(764)) long Pane::GetHorizontalPercentScrolled ( );
__declspec(implementation_key(765)) void Pane::PutHorizontalPercentScrolled ( long prop );
__declspec(implementation_key(766)) long Pane::GetVerticalPercentScrolled ( );
__declspec(implementation_key(767)) void Pane::PutVerticalPercentScrolled ( long prop );
__declspec(implementation_key(768)) long Pane::GetMinimumFontSize ( );
__declspec(implementation_key(769)) void Pane::PutMinimumFontSize ( long prop );
__declspec(implementation_key(770)) VARIANT_BOOL Pane::GetBrowseToWindow ( );
__declspec(implementation_key(771)) void Pane::PutBrowseToWindow ( VARIANT_BOOL prop );
__declspec(implementation_key(772)) long Pane::GetBrowseWidth ( );
__declspec(implementation_key(773)) HRESULT Pane::Activate ( );
__declspec(implementation_key(774)) HRESULT Pane::Close ( );
__declspec(implementation_key(775)) HRESULT Pane::LargeScroll ( VARIANT * Down, VARIANT * Up, VARIANT * ToRight, VARIANT * ToLeft );
__declspec(implementation_key(776)) HRESULT Pane::SmallScroll ( VARIANT * Down, VARIANT * Up, VARIANT * ToRight, VARIANT * ToLeft );
__declspec(implementation_key(777)) HRESULT Pane::AutoScroll ( long Velocity );
__declspec(implementation_key(778)) HRESULT Pane::PageScroll ( VARIANT * Down, VARIANT * Up );
__declspec(implementation_key(779)) HRESULT Pane::NewFrameset ( );
__declspec(implementation_key(780)) HRESULT Pane::TOCInFrameset ( );
__declspec(implementation_key(781)) FramesetPtr Pane::GetFrameset ( );
__declspec(implementation_key(782)) IUnknownPtr Panes::Get_NewEnum ( );
__declspec(implementation_key(783)) long Panes::GetCount ( );
__declspec(implementation_key(784)) _ApplicationPtr Panes::GetApplication ( );
__declspec(implementation_key(785)) long Panes::GetCreator ( );
__declspec(implementation_key(786)) IDispatchPtr Panes::GetParent ( );
__declspec(implementation_key(787)) PanePtr Panes::Item ( long Index );
__declspec(implementation_key(788)) PanePtr Panes::Add ( VARIANT * SplitVertical );
__declspec(implementation_key(789)) _bstr_t Range::GetText ( );
__declspec(implementation_key(790)) void Range::PutText ( _bstr_t prop );
__declspec(implementation_key(791)) RangePtr Range::GetFormattedText ( );
__declspec(implementation_key(792)) void Range::PutFormattedText ( struct Range * prop );
__declspec(implementation_key(793)) long Range::GetStart ( );
__declspec(implementation_key(794)) void Range::PutStart ( long prop );
__declspec(implementation_key(795)) long Range::GetEnd ( );
__declspec(implementation_key(796)) void Range::PutEnd ( long prop );
__declspec(implementation_key(797)) _FontPtr Range::GetFont ( );
__declspec(implementation_key(798)) void Range::PutFont ( struct _Font * prop );
__declspec(implementation_key(799)) RangePtr Range::GetDuplicate ( );
__declspec(implementation_key(800)) enum WdStoryType Range::GetStoryType ( );
__declspec(implementation_key(801)) TablesPtr Range::GetTables ( );
__declspec(implementation_key(802)) WordsPtr Range::GetWords ( );
__declspec(implementation_key(803)) SentencesPtr Range::GetSentences ( );
__declspec(implementation_key(804)) CharactersPtr Range::GetCharacters ( );
__declspec(implementation_key(805)) FootnotesPtr Range::GetFootnotes ( );
__declspec(implementation_key(806)) EndnotesPtr Range::GetEndnotes ( );
__declspec(implementation_key(807)) CommentsPtr Range::GetComments ( );
__declspec(implementation_key(808)) CellsPtr Range::GetCells ( );
__declspec(implementation_key(809)) SectionsPtr Range::GetSections ( );
__declspec(implementation_key(810)) ParagraphsPtr Range::GetParagraphs ( );
__declspec(implementation_key(811)) BordersPtr Range::GetBorders ( );
__declspec(implementation_key(812)) void Range::PutBorders ( struct Borders * prop );
__declspec(implementation_key(813)) ShadingPtr Range::GetShading ( );
__declspec(implementation_key(814)) TextRetrievalModePtr Range::GetTextRetrievalMode ( );
__declspec(implementation_key(815)) void Range::PutTextRetrievalMode ( struct TextRetrievalMode * prop );
__declspec(implementation_key(816)) FieldsPtr Range::GetFields ( );
__declspec(implementation_key(817)) FormFieldsPtr Range::GetFormFields ( );
__declspec(implementation_key(818)) FramesPtr Range::GetFrames ( );
__declspec(implementation_key(819)) _ParagraphFormatPtr Range::GetParagraphFormat ( );
__declspec(implementation_key(820)) void Range::PutParagraphFormat ( struct _ParagraphFormat * prop );
__declspec(implementation_key(821)) ListFormatPtr Range::GetListFormat ( );
__declspec(implementation_key(822)) BookmarksPtr Range::GetBookmarks ( );
__declspec(implementation_key(823)) _ApplicationPtr Range::GetApplication ( );
__declspec(implementation_key(824)) long Range::GetCreator ( );
__declspec(implementation_key(825)) IDispatchPtr Range::GetParent ( );
__declspec(implementation_key(826)) long Range::GetBold ( );
__declspec(implementation_key(827)) void Range::PutBold ( long prop );
__declspec(implementation_key(828)) long Range::GetItalic ( );
__declspec(implementation_key(829)) void Range::PutItalic ( long prop );
__declspec(implementation_key(830)) enum WdUnderline Range::GetUnderline ( );
__declspec(implementation_key(831)) void Range::PutUnderline ( enum WdUnderline prop );
__declspec(implementation_key(832)) enum WdEmphasisMark Range::GetEmphasisMark ( );
__declspec(implementation_key(833)) void Range::PutEmphasisMark ( enum WdEmphasisMark prop );
__declspec(implementation_key(834)) VARIANT_BOOL Range::GetDisableCharacterSpaceGrid ( );
__declspec(implementation_key(835)) void Range::PutDisableCharacterSpaceGrid ( VARIANT_BOOL prop );
__declspec(implementation_key(836)) RevisionsPtr Range::GetRevisions ( );
__declspec(implementation_key(837)) _variant_t Range::GetStyle ( );
__declspec(implementation_key(838)) void Range::PutStyle ( VARIANT * prop );
__declspec(implementation_key(839)) long Range::GetStoryLength ( );
__declspec(implementation_key(840)) enum WdLanguageID Range::GetLanguageID ( );
__declspec(implementation_key(841)) void Range::PutLanguageID ( enum WdLanguageID prop );
__declspec(implementation_key(842)) SynonymInfoPtr Range::GetSynonymInfo ( );
__declspec(implementation_key(843)) HyperlinksPtr Range::GetHyperlinks ( );
__declspec(implementation_key(844)) ListParagraphsPtr Range::GetListParagraphs ( );
__declspec(implementation_key(845)) SubdocumentsPtr Range::GetSubdocuments ( );
__declspec(implementation_key(846)) VARIANT_BOOL Range::GetGrammarChecked ( );
__declspec(implementation_key(847)) void Range::PutGrammarChecked ( VARIANT_BOOL prop );
__declspec(implementation_key(848)) VARIANT_BOOL Range::GetSpellingChecked ( );
__declspec(implementation_key(849)) void Range::PutSpellingChecked ( VARIANT_BOOL prop );
__declspec(implementation_key(850)) enum WdColorIndex Range::GetHighlightColorIndex ( );
__declspec(implementation_key(851)) void Range::PutHighlightColorIndex ( enum WdColorIndex prop );
__declspec(implementation_key(852)) ColumnsPtr Range::GetColumns ( );
__declspec(implementation_key(853)) RowsPtr Range::GetRows ( );
__declspec(implementation_key(854)) long Range::GetCanEdit ( );
__declspec(implementation_key(855)) long Range::GetCanPaste ( );
__declspec(implementation_key(856)) VARIANT_BOOL Range::GetIsEndOfRowMark ( );
__declspec(implementation_key(857)) long Range::GetBookmarkID ( );
__declspec(implementation_key(858)) long Range::GetPreviousBookmarkID ( );
__declspec(implementation_key(859)) FindPtr Range::GetFind ( );
__declspec(implementation_key(860)) PageSetupPtr Range::GetPageSetup ( );
__declspec(implementation_key(861)) void Range::PutPageSetup ( struct PageSetup * prop );
__declspec(implementation_key(862)) ShapeRangePtr Range::GetShapeRange ( );
__declspec(implementation_key(863)) enum WdCharacterCase Range::GetCase ( );
__declspec(implementation_key(864)) void Range::PutCase ( enum WdCharacterCase prop );
__declspec(implementation_key(865)) _variant_t Range::GetInformation ( enum WdInformation Type );
__declspec(implementation_key(866)) ReadabilityStatisticsPtr Range::GetReadabilityStatistics ( );
__declspec(implementation_key(867)) ProofreadingErrorsPtr Range::GetGrammaticalErrors ( );
__declspec(implementation_key(868)) ProofreadingErrorsPtr Range::GetSpellingErrors ( );
__declspec(implementation_key(869)) enum WdTextOrientation Range::GetOrientation ( );
__declspec(implementation_key(870)) void Range::PutOrientation ( enum WdTextOrientation prop );
__declspec(implementation_key(871)) InlineShapesPtr Range::GetInlineShapes ( );
__declspec(implementation_key(872)) RangePtr Range::GetNextStoryRange ( );
__declspec(implementation_key(873)) enum WdLanguageID Range::GetLanguageIDFarEast ( );
__declspec(implementation_key(874)) void Range::PutLanguageIDFarEast ( enum WdLanguageID prop );
__declspec(implementation_key(875)) enum WdLanguageID Range::GetLanguageIDOther ( );
__declspec(implementation_key(876)) void Range::PutLanguageIDOther ( enum WdLanguageID prop );
__declspec(implementation_key(877)) HRESULT Range::Select ( );
__declspec(implementation_key(878)) HRESULT Range::SetRange ( long Start, long End );
__declspec(implementation_key(879)) HRESULT Range::Collapse ( VARIANT * Direction );
__declspec(implementation_key(880)) HRESULT Range::InsertBefore ( _bstr_t Text );
__declspec(implementation_key(881)) HRESULT Range::InsertAfter ( _bstr_t Text );
__declspec(implementation_key(882)) RangePtr Range::Next ( VARIANT * Unit, VARIANT * Count );
__declspec(implementation_key(883)) RangePtr Range::Previous ( VARIANT * Unit, VARIANT * Count );
__declspec(implementation_key(884)) long Range::StartOf ( VARIANT * Unit, VARIANT * Extend );
__declspec(implementation_key(885)) long Range::EndOf ( VARIANT * Unit, VARIANT * Extend );
__declspec(implementation_key(886)) long Range::Move ( VARIANT * Unit, VARIANT * Count );
__declspec(implementation_key(887)) long Range::MoveStart ( VARIANT * Unit, VARIANT * Count );
__declspec(implementation_key(888)) long Range::MoveEnd ( VARIANT * Unit, VARIANT * Count );
__declspec(implementation_key(889)) long Range::MoveWhile ( VARIANT * Cset, VARIANT * Count );
__declspec(implementation_key(890)) long Range::MoveStartWhile ( VARIANT * Cset, VARIANT * Count );
__declspec(implementation_key(891)) long Range::MoveEndWhile ( VARIANT * Cset, VARIANT * Count );
__declspec(implementation_key(892)) long Range::MoveUntil ( VARIANT * Cset, VARIANT * Count );
__declspec(implementation_key(893)) long Range::MoveStartUntil ( VARIANT * Cset, VARIANT * Count );
__declspec(implementation_key(894)) long Range::MoveEndUntil ( VARIANT * Cset, VARIANT * Count );
__declspec(implementation_key(895)) HRESULT Range::Cut ( );
__declspec(implementation_key(896)) HRESULT Range::Copy ( );
__declspec(implementation_key(897)) HRESULT Range::Paste ( );
__declspec(implementation_key(898)) HRESULT Range::InsertBreak ( VARIANT * Type );
__declspec(implementation_key(899)) HRESULT Range::InsertFile ( _bstr_t FileName, VARIANT * Range, VARIANT * ConfirmConversions, VARIANT * Link, VARIANT * Attachment );
__declspec(implementation_key(900)) VARIANT_BOOL Range::InStory ( struct Range * Range );
__declspec(implementation_key(901)) VARIANT_BOOL Range::InRange ( struct Range * Range );
__declspec(implementation_key(902)) long Range::Delete ( VARIANT * Unit, VARIANT * Count );
__declspec(implementation_key(903)) HRESULT Range::WholeStory ( );
__declspec(implementation_key(904)) long Range::Expand ( VARIANT * Unit );
__declspec(implementation_key(905)) HRESULT Range::InsertParagraph ( );
__declspec(implementation_key(906)) HRESULT Range::InsertParagraphAfter ( );
__declspec(implementation_key(907)) TablePtr Range::ConvertToTableOld ( VARIANT * Separator, VARIANT * NumRows, VARIANT * NumColumns, VARIANT * InitialColumnWidth, VARIANT * Format, VARIANT * ApplyBorders, VARIANT * ApplyShading, VARIANT * ApplyFont, VARIANT * ApplyColor, VARIANT * ApplyHeadingRows, VARIANT * ApplyLastRow, VARIANT * ApplyFirstColumn, VARIANT * ApplyLastColumn, VARIANT * AutoFit );
__declspec(implementation_key(908)) HRESULT Range::InsertDateTimeOld ( VARIANT * DateTimeFormat, VARIANT * InsertAsField, VARIANT * InsertAsFullWidth );
__declspec(implementation_key(909)) HRESULT Range::InsertSymbol ( long CharacterNumber, VARIANT * Font, VARIANT * Unicode, VARIANT * Bias );
__declspec(implementation_key(910)) HRESULT Range::InsertCrossReference ( VARIANT * ReferenceType, enum WdReferenceKind ReferenceKind, VARIANT * ReferenceItem, VARIANT * InsertAsHyperlink, VARIANT * IncludePosition );
__declspec(implementation_key(911)) HRESULT Range::InsertCaption ( VARIANT * Label, VARIANT * Title, VARIANT * TitleAutoText, VARIANT * Position );
__declspec(implementation_key(912)) HRESULT Range::CopyAsPicture ( );
__declspec(implementation_key(913)) HRESULT Range::SortOld ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * SortColumn, VARIANT * Separator, VARIANT * CaseSensitive, VARIANT * LanguageID );
__declspec(implementation_key(914)) HRESULT Range::SortAscending ( );
__declspec(implementation_key(915)) HRESULT Range::SortDescending ( );
__declspec(implementation_key(916)) VARIANT_BOOL Range::IsEqual ( struct Range * Range );
__declspec(implementation_key(917)) float Range::Calculate ( );
__declspec(implementation_key(918)) RangePtr Range::GoTo ( VARIANT * What, VARIANT * Which, VARIANT * Count, VARIANT * Name );
__declspec(implementation_key(919)) RangePtr Range::GoToNext ( enum WdGoToItem What );
__declspec(implementation_key(920)) RangePtr Range::GoToPrevious ( enum WdGoToItem What );
__declspec(implementation_key(921)) HRESULT Range::PasteSpecial ( VARIANT * IconIndex, VARIANT * Link, VARIANT * Placement, VARIANT * DisplayAsIcon, VARIANT * DataType, VARIANT * IconFileName, VARIANT * IconLabel );
__declspec(implementation_key(922)) HRESULT Range::LookupNameProperties ( );
__declspec(implementation_key(923)) long Range::ComputeStatistics ( enum WdStatistic Statistic );
__declspec(implementation_key(924)) HRESULT Range::Relocate ( long Direction );
__declspec(implementation_key(925)) HRESULT Range::CheckSynonyms ( );
__declspec(implementation_key(926)) HRESULT Range::SubscribeTo ( _bstr_t Edition, VARIANT * Format );
__declspec(implementation_key(927)) HRESULT Range::CreatePublisher ( VARIANT * Edition, VARIANT * ContainsPICT, VARIANT * ContainsRTF, VARIANT * ContainsText );
__declspec(implementation_key(928)) HRESULT Range::InsertAutoText ( );
__declspec(implementation_key(929)) HRESULT Range::InsertDatabase ( VARIANT * Format, VARIANT * Style, VARIANT * LinkToSource, VARIANT * Connection, VARIANT * SQLStatement, VARIANT * SQLStatement1, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate, VARIANT * DataSource, VARIANT * From, VARIANT * To, VARIANT * IncludeFields );
__declspec(implementation_key(930)) HRESULT Range::AutoFormat ( );
__declspec(implementation_key(931)) HRESULT Range::CheckGrammar ( );
__declspec(implementation_key(932)) HRESULT Range::CheckSpelling ( VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * AlwaysSuggest, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 );
__declspec(implementation_key(933)) SpellingSuggestionsPtr Range::GetSpellingSuggestions ( VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * MainDictionary, VARIANT * SuggestionMode, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 );
__declspec(implementation_key(934)) HRESULT Range::InsertParagraphBefore ( );
__declspec(implementation_key(935)) HRESULT Range::NextSubdocument ( );
__declspec(implementation_key(936)) HRESULT Range::PreviousSubdocument ( );
__declspec(implementation_key(937)) HRESULT Range::ConvertHangulAndHanja ( VARIANT * ConversionsMode, VARIANT * FastConversion, VARIANT * CheckHangulEnding, VARIANT * EnableRecentOrdering, VARIANT * CustomDictionary );
__declspec(implementation_key(938)) HRESULT Range::PasteAsNestedTable ( );
__declspec(implementation_key(939)) HRESULT Range::ModifyEnclosure ( VARIANT * Style, VARIANT * Symbol, VARIANT * EnclosedText );
__declspec(implementation_key(940)) HRESULT Range::PhoneticGuide ( _bstr_t Text, enum WdPhoneticGuideAlignmentType Alignment, long Raise, long FontSize, _bstr_t FontName );
__declspec(implementation_key(941)) HRESULT Range::InsertDateTime ( VARIANT * DateTimeFormat, VARIANT * InsertAsField, VARIANT * InsertAsFullWidth, VARIANT * DateLanguage, VARIANT * CalendarType );
__declspec(implementation_key(942)) HRESULT Range::Sort ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * SortColumn, VARIANT * Separator, VARIANT * CaseSensitive, VARIANT * BidiSort, VARIANT * IgnoreThe, VARIANT * IgnoreKashida, VARIANT * IgnoreDiacritics, VARIANT * IgnoreHe, VARIANT * LanguageID );
__declspec(implementation_key(943)) HRESULT Range::DetectLanguage ( );
__declspec(implementation_key(944)) TablePtr Range::ConvertToTable ( VARIANT * Separator, VARIANT * NumRows, VARIANT * NumColumns, VARIANT * InitialColumnWidth, VARIANT * Format, VARIANT * ApplyBorders, VARIANT * ApplyShading, VARIANT * ApplyFont, VARIANT * ApplyColor, VARIANT * ApplyHeadingRows, VARIANT * ApplyLastRow, VARIANT * ApplyFirstColumn, VARIANT * ApplyLastColumn, VARIANT * AutoFit, VARIANT * AutoFitBehavior, VARIANT * DefaultTableBehavior );
__declspec(implementation_key(945)) HRESULT Range::TCSCConverter ( enum WdTCSCConverterDirection WdTCSCConverterDirection, VARIANT_BOOL CommonTerms, VARIANT_BOOL UseVariants );
__declspec(implementation_key(946)) VARIANT_BOOL Range::GetLanguageDetected ( );
__declspec(implementation_key(947)) void Range::PutLanguageDetected ( VARIANT_BOOL prop );
__declspec(implementation_key(948)) float Range::GetFitTextWidth ( );
__declspec(implementation_key(949)) void Range::PutFitTextWidth ( float prop );
__declspec(implementation_key(950)) enum WdHorizontalInVerticalType Range::GetHorizontalInVertical ( );
__declspec(implementation_key(951)) void Range::PutHorizontalInVertical ( enum WdHorizontalInVerticalType prop );
__declspec(implementation_key(952)) enum WdTwoLinesInOneType Range::GetTwoLinesInOne ( );
__declspec(implementation_key(953)) void Range::PutTwoLinesInOne ( enum WdTwoLinesInOneType prop );
__declspec(implementation_key(954)) VARIANT_BOOL Range::GetCombineCharacters ( );
__declspec(implementation_key(955)) void Range::PutCombineCharacters ( VARIANT_BOOL prop );
__declspec(implementation_key(956)) long Range::GetNoProofing ( );
__declspec(implementation_key(957)) void Range::PutNoProofing ( long prop );
__declspec(implementation_key(958)) TablesPtr Range::GetTopLevelTables ( );
__declspec(implementation_key(959)) Office::ScriptsPtr Range::GetScripts ( );
__declspec(implementation_key(960)) enum WdCharacterWidth Range::GetCharacterWidth ( );
__declspec(implementation_key(961)) void Range::PutCharacterWidth ( enum WdCharacterWidth prop );
__declspec(implementation_key(962)) enum WdKana Range::GetKana ( );
__declspec(implementation_key(963)) void Range::PutKana ( enum WdKana prop );
__declspec(implementation_key(964)) long Range::GetBoldBi ( );
__declspec(implementation_key(965)) void Range::PutBoldBi ( long prop );
__declspec(implementation_key(966)) long Range::GetItalicBi ( );
__declspec(implementation_key(967)) void Range::PutItalicBi ( long prop );
__declspec(implementation_key(968)) _bstr_t Range::GetID ( );
__declspec(implementation_key(969)) void Range::PutID ( _bstr_t prop );
__declspec(implementation_key(970)) long ListFormat::GetListLevelNumber ( );
__declspec(implementation_key(971)) void ListFormat::PutListLevelNumber ( long prop );
__declspec(implementation_key(972)) ListPtr ListFormat::GetList ( );
__declspec(implementation_key(973)) ListTemplatePtr ListFormat::GetListTemplate ( );
__declspec(implementation_key(974)) long ListFormat::GetListValue ( );
__declspec(implementation_key(975)) VARIANT_BOOL ListFormat::GetSingleList ( );
__declspec(implementation_key(976)) VARIANT_BOOL ListFormat::GetSingleListTemplate ( );
__declspec(implementation_key(977)) enum WdListType ListFormat::GetListType ( );
__declspec(implementation_key(978)) _bstr_t ListFormat::GetListString ( );
__declspec(implementation_key(979)) _ApplicationPtr ListFormat::GetApplication ( );
__declspec(implementation_key(980)) long ListFormat::GetCreator ( );
__declspec(implementation_key(981)) IDispatchPtr ListFormat::GetParent ( );
__declspec(implementation_key(982)) enum WdContinue ListFormat::CanContinuePreviousList ( struct ListTemplate * ListTemplate );
__declspec(implementation_key(983)) HRESULT ListFormat::RemoveNumbers ( VARIANT * NumberType );
__declspec(implementation_key(984)) HRESULT ListFormat::ConvertNumbersToText ( VARIANT * NumberType );
__declspec(implementation_key(985)) long ListFormat::CountNumberedItems ( VARIANT * NumberType, VARIANT * Level );
__declspec(implementation_key(986)) HRESULT ListFormat::ApplyBulletDefaultOld ( );
__declspec(implementation_key(987)) HRESULT ListFormat::ApplyNumberDefaultOld ( );
__declspec(implementation_key(988)) HRESULT ListFormat::ApplyOutlineNumberDefaultOld ( );
__declspec(implementation_key(989)) HRESULT ListFormat::ApplyListTemplateOld ( struct ListTemplate * ListTemplate, VARIANT * ContinuePreviousList, VARIANT * ApplyTo );
__declspec(implementation_key(990)) HRESULT ListFormat::ListOutdent ( );
__declspec(implementation_key(991)) HRESULT ListFormat::ListIndent ( );
__declspec(implementation_key(992)) HRESULT ListFormat::ApplyBulletDefault ( VARIANT * DefaultListBehavior );
__declspec(implementation_key(993)) HRESULT ListFormat::ApplyNumberDefault ( VARIANT * DefaultListBehavior );
__declspec(implementation_key(994)) HRESULT ListFormat::ApplyOutlineNumberDefault ( VARIANT * DefaultListBehavior );
__declspec(implementation_key(995)) HRESULT ListFormat::ApplyListTemplate ( struct ListTemplate * ListTemplate, VARIANT * ContinuePreviousList, VARIANT * ApplyTo, VARIANT * DefaultListBehavior );
__declspec(implementation_key(996)) _ApplicationPtr Find::GetApplication ( );
__declspec(implementation_key(997)) long Find::GetCreator ( );
__declspec(implementation_key(998)) IDispatchPtr Find::GetParent ( );
__declspec(implementation_key(999)) VARIANT_BOOL Find::GetForward ( );
__declspec(implementation_key(1000)) void Find::PutForward ( VARIANT_BOOL prop );
__declspec(implementation_key(1001)) _FontPtr Find::GetFont ( );
__declspec(implementation_key(1002)) void Find::PutFont ( struct _Font * prop );
__declspec(implementation_key(1003)) VARIANT_BOOL Find::GetFound ( );
__declspec(implementation_key(1004)) VARIANT_BOOL Find::GetMatchAllWordForms ( );
__declspec(implementation_key(1005)) void Find::PutMatchAllWordForms ( VARIANT_BOOL prop );
__declspec(implementation_key(1006)) VARIANT_BOOL Find::GetMatchCase ( );
__declspec(implementation_key(1007)) void Find::PutMatchCase ( VARIANT_BOOL prop );
__declspec(implementation_key(1008)) VARIANT_BOOL Find::GetMatchWildcards ( );
__declspec(implementation_key(1009)) void Find::PutMatchWildcards ( VARIANT_BOOL prop );
__declspec(implementation_key(1010)) VARIANT_BOOL Find::GetMatchSoundsLike ( );
__declspec(implementation_key(1011)) void Find::PutMatchSoundsLike ( VARIANT_BOOL prop );
__declspec(implementation_key(1012)) VARIANT_BOOL Find::GetMatchWholeWord ( );
__declspec(implementation_key(1013)) void Find::PutMatchWholeWord ( VARIANT_BOOL prop );
__declspec(implementation_key(1014)) VARIANT_BOOL Find::GetMatchFuzzy ( );
__declspec(implementation_key(1015)) void Find::PutMatchFuzzy ( VARIANT_BOOL prop );
__declspec(implementation_key(1016)) VARIANT_BOOL Find::GetMatchByte ( );
__declspec(implementation_key(1017)) void Find::PutMatchByte ( VARIANT_BOOL prop );
__declspec(implementation_key(1018)) _ParagraphFormatPtr Find::GetParagraphFormat ( );
__declspec(implementation_key(1019)) void Find::PutParagraphFormat ( struct _ParagraphFormat * prop );
__declspec(implementation_key(1020)) _variant_t Find::GetStyle ( );
__declspec(implementation_key(1021)) void Find::PutStyle ( VARIANT * prop );
__declspec(implementation_key(1022)) _bstr_t Find::GetText ( );
__declspec(implementation_key(1023)) void Find::PutText ( _bstr_t prop );
__declspec(implementation_key(1024)) enum WdLanguageID Find::GetLanguageID ( );
__declspec(implementation_key(1025)) void Find::PutLanguageID ( enum WdLanguageID prop );
__declspec(implementation_key(1026)) long Find::GetHighlight ( );
__declspec(implementation_key(1027)) void Find::PutHighlight ( long prop );
__declspec(implementation_key(1028)) ReplacementPtr Find::GetReplacement ( );
__declspec(implementation_key(1029)) FramePtr Find::GetFrame ( );
__declspec(implementation_key(1030)) enum WdFindWrap Find::GetWrap ( );
__declspec(implementation_key(1031)) void Find::PutWrap ( enum WdFindWrap prop );
__declspec(implementation_key(1032)) VARIANT_BOOL Find::GetFormat ( );
__declspec(implementation_key(1033)) void Find::PutFormat ( VARIANT_BOOL prop );
__declspec(implementation_key(1034)) enum WdLanguageID Find::GetLanguageIDFarEast ( );
__declspec(implementation_key(1035)) void Find::PutLanguageIDFarEast ( enum WdLanguageID prop );
__declspec(implementation_key(1036)) enum WdLanguageID Find::GetLanguageIDOther ( );
__declspec(implementation_key(1037)) void Find::PutLanguageIDOther ( enum WdLanguageID prop );
__declspec(implementation_key(1038)) VARIANT_BOOL Find::GetCorrectHangulEndings ( );
__declspec(implementation_key(1039)) void Find::PutCorrectHangulEndings ( VARIANT_BOOL prop );
__declspec(implementation_key(1040)) VARIANT_BOOL Find::ExecuteOld ( VARIANT * FindText, VARIANT * MatchCase, VARIANT * MatchWholeWord, VARIANT * MatchWildcards, VARIANT * MatchSoundsLike, VARIANT * MatchAllWordForms, VARIANT * Forward, VARIANT * Wrap, VARIANT * Format, VARIANT * ReplaceWith, VARIANT * Replace );
__declspec(implementation_key(1041)) HRESULT Find::ClearFormatting ( );
__declspec(implementation_key(1042)) HRESULT Find::SetAllFuzzyOptions ( );
__declspec(implementation_key(1043)) HRESULT Find::ClearAllFuzzyOptions ( );
__declspec(implementation_key(1044)) VARIANT_BOOL Find::Execute ( VARIANT * FindText, VARIANT * MatchCase, VARIANT * MatchWholeWord, VARIANT * MatchWildcards, VARIANT * MatchSoundsLike, VARIANT * MatchAllWordForms, VARIANT * Forward, VARIANT * Wrap, VARIANT * Format, VARIANT * ReplaceWith, VARIANT * Replace, VARIANT * MatchKashida, VARIANT * MatchDiacritics, VARIANT * MatchAlefHamza, VARIANT * MatchControl );
__declspec(implementation_key(1045)) long Find::GetNoProofing ( );
__declspec(implementation_key(1046)) void Find::PutNoProofing ( long prop );
__declspec(implementation_key(1047)) VARIANT_BOOL Find::GetMatchKashida ( );
__declspec(implementation_key(1048)) void Find::PutMatchKashida ( VARIANT_BOOL prop );
__declspec(implementation_key(1049)) VARIANT_BOOL Find::GetMatchDiacritics ( );
__declspec(implementation_key(1050)) void Find::PutMatchDiacritics ( VARIANT_BOOL prop );
__declspec(implementation_key(1051)) VARIANT_BOOL Find::GetMatchAlefHamza ( );
__declspec(implementation_key(1052)) void Find::PutMatchAlefHamza ( VARIANT_BOOL prop );
__declspec(implementation_key(1053)) VARIANT_BOOL Find::GetMatchControl ( );
__declspec(implementation_key(1054)) void Find::PutMatchControl ( VARIANT_BOOL prop );
__declspec(implementation_key(1055)) _ApplicationPtr Replacement::GetApplication ( );
__declspec(implementation_key(1056)) long Replacement::GetCreator ( );
__declspec(implementation_key(1057)) IDispatchPtr Replacement::GetParent ( );
__declspec(implementation_key(1058)) _FontPtr Replacement::GetFont ( );
__declspec(implementation_key(1059)) void Replacement::PutFont ( struct _Font * prop );
__declspec(implementation_key(1060)) _ParagraphFormatPtr Replacement::GetParagraphFormat ( );
__declspec(implementation_key(1061)) void Replacement::PutParagraphFormat ( struct _ParagraphFormat * prop );
__declspec(implementation_key(1062)) _variant_t Replacement::GetStyle ( );
__declspec(implementation_key(1063)) void Replacement::PutStyle ( VARIANT * prop );
__declspec(implementation_key(1064)) _bstr_t Replacement::GetText ( );
__declspec(implementation_key(1065)) void Replacement::PutText ( _bstr_t prop );
__declspec(implementation_key(1066)) enum WdLanguageID Replacement::GetLanguageID ( );
__declspec(implementation_key(1067)) void Replacement::PutLanguageID ( enum WdLanguageID prop );
__declspec(implementation_key(1068)) long Replacement::GetHighlight ( );
__declspec(implementation_key(1069)) void Replacement::PutHighlight ( long prop );
__declspec(implementation_key(1070)) FramePtr Replacement::GetFrame ( );
__declspec(implementation_key(1071)) enum WdLanguageID Replacement::GetLanguageIDFarEast ( );
__declspec(implementation_key(1072)) void Replacement::PutLanguageIDFarEast ( enum WdLanguageID prop );
__declspec(implementation_key(1073)) HRESULT Replacement::ClearFormatting ( );
__declspec(implementation_key(1074)) long Replacement::GetNoProofing ( );
__declspec(implementation_key(1075)) void Replacement::PutNoProofing ( long prop );
__declspec(implementation_key(1076)) IUnknownPtr Characters::Get_NewEnum ( );
__declspec(implementation_key(1077)) long Characters::GetCount ( );
__declspec(implementation_key(1078)) RangePtr Characters::GetFirst ( );
__declspec(implementation_key(1079)) RangePtr Characters::GetLast ( );
__declspec(implementation_key(1080)) _ApplicationPtr Characters::GetApplication ( );
__declspec(implementation_key(1081)) long Characters::GetCreator ( );
__declspec(implementation_key(1082)) IDispatchPtr Characters::GetParent ( );
__declspec(implementation_key(1083)) RangePtr Characters::Item ( long Index );
__declspec(implementation_key(1084)) IUnknownPtr Words::Get_NewEnum ( );
__declspec(implementation_key(1085)) long Words::GetCount ( );
__declspec(implementation_key(1086)) RangePtr Words::GetFirst ( );
__declspec(implementation_key(1087)) RangePtr Words::GetLast ( );
__declspec(implementation_key(1088)) _ApplicationPtr Words::GetApplication ( );
__declspec(implementation_key(1089)) long Words::GetCreator ( );
__declspec(implementation_key(1090)) IDispatchPtr Words::GetParent ( );
__declspec(implementation_key(1091)) RangePtr Words::Item ( long Index );
__declspec(implementation_key(1092)) IUnknownPtr Sentences::Get_NewEnum ( );
__declspec(implementation_key(1093)) long Sentences::GetCount ( );
__declspec(implementation_key(1094)) RangePtr Sentences::GetFirst ( );
__declspec(implementation_key(1095)) RangePtr Sentences::GetLast ( );
__declspec(implementation_key(1096)) _ApplicationPtr Sentences::GetApplication ( );
__declspec(implementation_key(1097)) long Sentences::GetCreator ( );
__declspec(implementation_key(1098)) IDispatchPtr Sentences::GetParent ( );
__declspec(implementation_key(1099)) RangePtr Sentences::Item ( long Index );
__declspec(implementation_key(1100)) IUnknownPtr Sections::Get_NewEnum ( );
__declspec(implementation_key(1101)) long Sections::GetCount ( );
__declspec(implementation_key(1102)) SectionPtr Sections::GetFirst ( );
__declspec(implementation_key(1103)) SectionPtr Sections::GetLast ( );
__declspec(implementation_key(1104)) _ApplicationPtr Sections::GetApplication ( );
__declspec(implementation_key(1105)) long Sections::GetCreator ( );
__declspec(implementation_key(1106)) IDispatchPtr Sections::GetParent ( );
__declspec(implementation_key(1107)) PageSetupPtr Sections::GetPageSetup ( );
__declspec(implementation_key(1108)) void Sections::PutPageSetup ( struct PageSetup * prop );
__declspec(implementation_key(1109)) SectionPtr Sections::Item ( long Index );
__declspec(implementation_key(1110)) SectionPtr Sections::Add ( VARIANT * Range, VARIANT * Start );
__declspec(implementation_key(1111)) RangePtr Section::GetRange ( );
__declspec(implementation_key(1112)) _ApplicationPtr Section::GetApplication ( );
__declspec(implementation_key(1113)) long Section::GetCreator ( );
__declspec(implementation_key(1114)) IDispatchPtr Section::GetParent ( );
__declspec(implementation_key(1115)) PageSetupPtr Section::GetPageSetup ( );
__declspec(implementation_key(1116)) void Section::PutPageSetup ( struct PageSetup * prop );
__declspec(implementation_key(1117)) HeadersFootersPtr Section::GetHeaders ( );
__declspec(implementation_key(1118)) HeadersFootersPtr Section::GetFooters ( );
__declspec(implementation_key(1119)) VARIANT_BOOL Section::GetProtectedForForms ( );
__declspec(implementation_key(1120)) void Section::PutProtectedForForms ( VARIANT_BOOL prop );
__declspec(implementation_key(1121)) long Section::GetIndex ( );
__declspec(implementation_key(1122)) BordersPtr Section::GetBorders ( );
__declspec(implementation_key(1123)) void Section::PutBorders ( struct Borders * prop );
__declspec(implementation_key(1124)) IUnknownPtr Paragraphs::Get_NewEnum ( );
__declspec(implementation_key(1125)) long Paragraphs::GetCount ( );
__declspec(implementation_key(1126)) ParagraphPtr Paragraphs::GetFirst ( );
__declspec(implementation_key(1127)) ParagraphPtr Paragraphs::GetLast ( );
__declspec(implementation_key(1128)) _ApplicationPtr Paragraphs::GetApplication ( );
__declspec(implementation_key(1129)) long Paragraphs::GetCreator ( );
__declspec(implementation_key(1130)) IDispatchPtr Paragraphs::GetParent ( );
__declspec(implementation_key(1131)) _ParagraphFormatPtr Paragraphs::GetFormat ( );
__declspec(implementation_key(1132)) void Paragraphs::PutFormat ( struct _ParagraphFormat * prop );
__declspec(implementation_key(1133)) TabStopsPtr Paragraphs::GetTabStops ( );
__declspec(implementation_key(1134)) void Paragraphs::PutTabStops ( struct TabStops * prop );
__declspec(implementation_key(1135)) BordersPtr Paragraphs::GetBorders ( );
__declspec(implementation_key(1136)) void Paragraphs::PutBorders ( struct Borders * prop );
__declspec(implementation_key(1137)) _variant_t Paragraphs::GetStyle ( );
__declspec(implementation_key(1138)) void Paragraphs::PutStyle ( VARIANT * prop );
__declspec(implementation_key(1139)) enum WdParagraphAlignment Paragraphs::GetAlignment ( );
__declspec(implementation_key(1140)) void Paragraphs::PutAlignment ( enum WdParagraphAlignment prop );
__declspec(implementation_key(1141)) long Paragraphs::GetKeepTogether ( );
__declspec(implementation_key(1142)) void Paragraphs::PutKeepTogether ( long prop );
__declspec(implementation_key(1143)) long Paragraphs::GetKeepWithNext ( );
__declspec(implementation_key(1144)) void Paragraphs::PutKeepWithNext ( long prop );
__declspec(implementation_key(1145)) long Paragraphs::GetPageBreakBefore ( );
__declspec(implementation_key(1146)) void Paragraphs::PutPageBreakBefore ( long prop );
__declspec(implementation_key(1147)) long Paragraphs::GetNoLineNumber ( );
__declspec(implementation_key(1148)) void Paragraphs::PutNoLineNumber ( long prop );
__declspec(implementation_key(1149)) float Paragraphs::GetRightIndent ( );
__declspec(implementation_key(1150)) void Paragraphs::PutRightIndent ( float prop );
__declspec(implementation_key(1151)) float Paragraphs::GetLeftIndent ( );
__declspec(implementation_key(1152)) void Paragraphs::PutLeftIndent ( float prop );
__declspec(implementation_key(1153)) float Paragraphs::GetFirstLineIndent ( );
__declspec(implementation_key(1154)) void Paragraphs::PutFirstLineIndent ( float prop );
__declspec(implementation_key(1155)) float Paragraphs::GetLineSpacing ( );
__declspec(implementation_key(1156)) void Paragraphs::PutLineSpacing ( float prop );
__declspec(implementation_key(1157)) enum WdLineSpacing Paragraphs::GetLineSpacingRule ( );
__declspec(implementation_key(1158)) void Paragraphs::PutLineSpacingRule ( enum WdLineSpacing prop );
__declspec(implementation_key(1159)) float Paragraphs::GetSpaceBefore ( );
__declspec(implementation_key(1160)) void Paragraphs::PutSpaceBefore ( float prop );
__declspec(implementation_key(1161)) float Paragraphs::GetSpaceAfter ( );
__declspec(implementation_key(1162)) void Paragraphs::PutSpaceAfter ( float prop );
__declspec(implementation_key(1163)) long Paragraphs::GetHyphenation ( );
__declspec(implementation_key(1164)) void Paragraphs::PutHyphenation ( long prop );
__declspec(implementation_key(1165)) long Paragraphs::GetWidowControl ( );
__declspec(implementation_key(1166)) void Paragraphs::PutWidowControl ( long prop );
__declspec(implementation_key(1167)) ShadingPtr Paragraphs::GetShading ( );
__declspec(implementation_key(1168)) long Paragraphs::GetFarEastLineBreakControl ( );
__declspec(implementation_key(1169)) void Paragraphs::PutFarEastLineBreakControl ( long prop );
__declspec(implementation_key(1170)) long Paragraphs::GetWordWrap ( );
__declspec(implementation_key(1171)) void Paragraphs::PutWordWrap ( long prop );
__declspec(implementation_key(1172)) long Paragraphs::GetHangingPunctuation ( );
__declspec(implementation_key(1173)) void Paragraphs::PutHangingPunctuation ( long prop );
__declspec(implementation_key(1174)) long Paragraphs::GetHalfWidthPunctuationOnTopOfLine ( );
__declspec(implementation_key(1175)) void Paragraphs::PutHalfWidthPunctuationOnTopOfLine ( long prop );
__declspec(implementation_key(1176)) long Paragraphs::GetAddSpaceBetweenFarEastAndAlpha ( );
__declspec(implementation_key(1177)) void Paragraphs::PutAddSpaceBetweenFarEastAndAlpha ( long prop );
__declspec(implementation_key(1178)) long Paragraphs::GetAddSpaceBetweenFarEastAndDigit ( );
__declspec(implementation_key(1179)) void Paragraphs::PutAddSpaceBetweenFarEastAndDigit ( long prop );
__declspec(implementation_key(1180)) enum WdBaselineAlignment Paragraphs::GetBaseLineAlignment ( );
__declspec(implementation_key(1181)) void Paragraphs::PutBaseLineAlignment ( enum WdBaselineAlignment prop );
__declspec(implementation_key(1182)) long Paragraphs::GetAutoAdjustRightIndent ( );
__declspec(implementation_key(1183)) void Paragraphs::PutAutoAdjustRightIndent ( long prop );
__declspec(implementation_key(1184)) long Paragraphs::GetDisableLineHeightGrid ( );
__declspec(implementation_key(1185)) void Paragraphs::PutDisableLineHeightGrid ( long prop );
__declspec(implementation_key(1186)) enum WdOutlineLevel Paragraphs::GetOutlineLevel ( );
__declspec(implementation_key(1187)) void Paragraphs::PutOutlineLevel ( enum WdOutlineLevel prop );
__declspec(implementation_key(1188)) ParagraphPtr Paragraphs::Item ( long Index );
__declspec(implementation_key(1189)) ParagraphPtr Paragraphs::Add ( VARIANT * Range );
__declspec(implementation_key(1190)) HRESULT Paragraphs::CloseUp ( );
__declspec(implementation_key(1191)) HRESULT Paragraphs::OpenUp ( );
__declspec(implementation_key(1192)) HRESULT Paragraphs::OpenOrCloseUp ( );
__declspec(implementation_key(1193)) HRESULT Paragraphs::TabHangingIndent ( short Count );
__declspec(implementation_key(1194)) HRESULT Paragraphs::TabIndent ( short Count );
__declspec(implementation_key(1195)) HRESULT Paragraphs::Reset ( );
__declspec(implementation_key(1196)) HRESULT Paragraphs::Space1 ( );
__declspec(implementation_key(1197)) HRESULT Paragraphs::Space15 ( );
__declspec(implementation_key(1198)) HRESULT Paragraphs::Space2 ( );
__declspec(implementation_key(1199)) HRESULT Paragraphs::IndentCharWidth ( short Count );
__declspec(implementation_key(1200)) HRESULT Paragraphs::IndentFirstLineCharWidth ( short Count );
__declspec(implementation_key(1201)) HRESULT Paragraphs::OutlinePromote ( );
__declspec(implementation_key(1202)) HRESULT Paragraphs::OutlineDemote ( );
__declspec(implementation_key(1203)) HRESULT Paragraphs::OutlineDemoteToBody ( );
__declspec(implementation_key(1204)) HRESULT Paragraphs::Indent ( );
__declspec(implementation_key(1205)) HRESULT Paragraphs::Outdent ( );
__declspec(implementation_key(1206)) float Paragraphs::GetCharacterUnitRightIndent ( );
__declspec(implementation_key(1207)) void Paragraphs::PutCharacterUnitRightIndent ( float prop );
__declspec(implementation_key(1208)) float Paragraphs::GetCharacterUnitLeftIndent ( );
__declspec(implementation_key(1209)) void Paragraphs::PutCharacterUnitLeftIndent ( float prop );
__declspec(implementation_key(1210)) float Paragraphs::GetCharacterUnitFirstLineIndent ( );
__declspec(implementation_key(1211)) void Paragraphs::PutCharacterUnitFirstLineIndent ( float prop );
__declspec(implementation_key(1212)) float Paragraphs::GetLineUnitBefore ( );
__declspec(implementation_key(1213)) void Paragraphs::PutLineUnitBefore ( float prop );
__declspec(implementation_key(1214)) float Paragraphs::GetLineUnitAfter ( );
__declspec(implementation_key(1215)) void Paragraphs::PutLineUnitAfter ( float prop );
__declspec(implementation_key(1216)) enum WdReadingOrder Paragraphs::GetReadingOrder ( );
__declspec(implementation_key(1217)) void Paragraphs::PutReadingOrder ( enum WdReadingOrder prop );
__declspec(implementation_key(1218)) long Paragraphs::GetSpaceBeforeAuto ( );
__declspec(implementation_key(1219)) void Paragraphs::PutSpaceBeforeAuto ( long prop );
__declspec(implementation_key(1220)) long Paragraphs::GetSpaceAfterAuto ( );
__declspec(implementation_key(1221)) void Paragraphs::PutSpaceAfterAuto ( long prop );
__declspec(implementation_key(1222)) RangePtr Paragraph::GetRange ( );
__declspec(implementation_key(1223)) _ApplicationPtr Paragraph::GetApplication ( );
__declspec(implementation_key(1224)) long Paragraph::GetCreator ( );
__declspec(implementation_key(1225)) IDispatchPtr Paragraph::GetParent ( );
__declspec(implementation_key(1226)) _ParagraphFormatPtr Paragraph::GetFormat ( );
__declspec(implementation_key(1227)) void Paragraph::PutFormat ( struct _ParagraphFormat * prop );
__declspec(implementation_key(1228)) TabStopsPtr Paragraph::GetTabStops ( );
__declspec(implementation_key(1229)) void Paragraph::PutTabStops ( struct TabStops * prop );
__declspec(implementation_key(1230)) BordersPtr Paragraph::GetBorders ( );
__declspec(implementation_key(1231)) void Paragraph::PutBorders ( struct Borders * prop );
__declspec(implementation_key(1232)) DropCapPtr Paragraph::GetDropCap ( );
__declspec(implementation_key(1233)) _variant_t Paragraph::GetStyle ( );
__declspec(implementation_key(1234)) void Paragraph::PutStyle ( VARIANT * prop );
__declspec(implementation_key(1235)) enum WdParagraphAlignment Paragraph::GetAlignment ( );
__declspec(implementation_key(1236)) void Paragraph::PutAlignment ( enum WdParagraphAlignment prop );
__declspec(implementation_key(1237)) long Paragraph::GetKeepTogether ( );
__declspec(implementation_key(1238)) void Paragraph::PutKeepTogether ( long prop );
__declspec(implementation_key(1239)) long Paragraph::GetKeepWithNext ( );
__declspec(implementation_key(1240)) void Paragraph::PutKeepWithNext ( long prop );
__declspec(implementation_key(1241)) long Paragraph::GetPageBreakBefore ( );
__declspec(implementation_key(1242)) void Paragraph::PutPageBreakBefore ( long prop );
__declspec(implementation_key(1243)) long Paragraph::GetNoLineNumber ( );
__declspec(implementation_key(1244)) void Paragraph::PutNoLineNumber ( long prop );
__declspec(implementation_key(1245)) float Paragraph::GetRightIndent ( );
__declspec(implementation_key(1246)) void Paragraph::PutRightIndent ( float prop );
__declspec(implementation_key(1247)) float Paragraph::GetLeftIndent ( );
__declspec(implementation_key(1248)) void Paragraph::PutLeftIndent ( float prop );
__declspec(implementation_key(1249)) float Paragraph::GetFirstLineIndent ( );
__declspec(implementation_key(1250)) void Paragraph::PutFirstLineIndent ( float prop );
__declspec(implementation_key(1251)) float Paragraph::GetLineSpacing ( );
__declspec(implementation_key(1252)) void Paragraph::PutLineSpacing ( float prop );
__declspec(implementation_key(1253)) enum WdLineSpacing Paragraph::GetLineSpacingRule ( );
__declspec(implementation_key(1254)) void Paragraph::PutLineSpacingRule ( enum WdLineSpacing prop );
__declspec(implementation_key(1255)) float Paragraph::GetSpaceBefore ( );
__declspec(implementation_key(1256)) void Paragraph::PutSpaceBefore ( float prop );
__declspec(implementation_key(1257)) float Paragraph::GetSpaceAfter ( );
__declspec(implementation_key(1258)) void Paragraph::PutSpaceAfter ( float prop );
__declspec(implementation_key(1259)) long Paragraph::GetHyphenation ( );
__declspec(implementation_key(1260)) void Paragraph::PutHyphenation ( long prop );
__declspec(implementation_key(1261)) long Paragraph::GetWidowControl ( );
__declspec(implementation_key(1262)) void Paragraph::PutWidowControl ( long prop );
__declspec(implementation_key(1263)) ShadingPtr Paragraph::GetShading ( );
__declspec(implementation_key(1264)) long Paragraph::GetFarEastLineBreakControl ( );
__declspec(implementation_key(1265)) void Paragraph::PutFarEastLineBreakControl ( long prop );
__declspec(implementation_key(1266)) long Paragraph::GetWordWrap ( );
__declspec(implementation_key(1267)) void Paragraph::PutWordWrap ( long prop );
__declspec(implementation_key(1268)) long Paragraph::GetHangingPunctuation ( );
__declspec(implementation_key(1269)) void Paragraph::PutHangingPunctuation ( long prop );
__declspec(implementation_key(1270)) long Paragraph::GetHalfWidthPunctuationOnTopOfLine ( );
__declspec(implementation_key(1271)) void Paragraph::PutHalfWidthPunctuationOnTopOfLine ( long prop );
__declspec(implementation_key(1272)) long Paragraph::GetAddSpaceBetweenFarEastAndAlpha ( );
__declspec(implementation_key(1273)) void Paragraph::PutAddSpaceBetweenFarEastAndAlpha ( long prop );
__declspec(implementation_key(1274)) long Paragraph::GetAddSpaceBetweenFarEastAndDigit ( );
__declspec(implementation_key(1275)) void Paragraph::PutAddSpaceBetweenFarEastAndDigit ( long prop );
__declspec(implementation_key(1276)) enum WdBaselineAlignment Paragraph::GetBaseLineAlignment ( );
__declspec(implementation_key(1277)) void Paragraph::PutBaseLineAlignment ( enum WdBaselineAlignment prop );
__declspec(implementation_key(1278)) long Paragraph::GetAutoAdjustRightIndent ( );
__declspec(implementation_key(1279)) void Paragraph::PutAutoAdjustRightIndent ( long prop );
__declspec(implementation_key(1280)) long Paragraph::GetDisableLineHeightGrid ( );
__declspec(implementation_key(1281)) void Paragraph::PutDisableLineHeightGrid ( long prop );
__declspec(implementation_key(1282)) enum WdOutlineLevel Paragraph::GetOutlineLevel ( );
__declspec(implementation_key(1283)) void Paragraph::PutOutlineLevel ( enum WdOutlineLevel prop );
__declspec(implementation_key(1284)) HRESULT Paragraph::CloseUp ( );
__declspec(implementation_key(1285)) HRESULT Paragraph::OpenUp ( );
__declspec(implementation_key(1286)) HRESULT Paragraph::OpenOrCloseUp ( );
__declspec(implementation_key(1287)) HRESULT Paragraph::TabHangingIndent ( short Count );
__declspec(implementation_key(1288)) HRESULT Paragraph::TabIndent ( short Count );
__declspec(implementation_key(1289)) HRESULT Paragraph::Reset ( );
__declspec(implementation_key(1290)) HRESULT Paragraph::Space1 ( );
__declspec(implementation_key(1291)) HRESULT Paragraph::Space15 ( );
__declspec(implementation_key(1292)) HRESULT Paragraph::Space2 ( );
__declspec(implementation_key(1293)) HRESULT Paragraph::IndentCharWidth ( short Count );
__declspec(implementation_key(1294)) HRESULT Paragraph::IndentFirstLineCharWidth ( short Count );
__declspec(implementation_key(1295)) ParagraphPtr Paragraph::Next ( VARIANT * Count );
__declspec(implementation_key(1296)) ParagraphPtr Paragraph::Previous ( VARIANT * Count );
__declspec(implementation_key(1297)) HRESULT Paragraph::OutlinePromote ( );
__declspec(implementation_key(1298)) HRESULT Paragraph::OutlineDemote ( );
__declspec(implementation_key(1299)) HRESULT Paragraph::OutlineDemoteToBody ( );
__declspec(implementation_key(1300)) HRESULT Paragraph::Indent ( );
__declspec(implementation_key(1301)) HRESULT Paragraph::Outdent ( );
__declspec(implementation_key(1302)) float Paragraph::GetCharacterUnitRightIndent ( );
__declspec(implementation_key(1303)) void Paragraph::PutCharacterUnitRightIndent ( float prop );
__declspec(implementation_key(1304)) float Paragraph::GetCharacterUnitLeftIndent ( );
__declspec(implementation_key(1305)) void Paragraph::PutCharacterUnitLeftIndent ( float prop );
__declspec(implementation_key(1306)) float Paragraph::GetCharacterUnitFirstLineIndent ( );
__declspec(implementation_key(1307)) void Paragraph::PutCharacterUnitFirstLineIndent ( float prop );
__declspec(implementation_key(1308)) float Paragraph::GetLineUnitBefore ( );
__declspec(implementation_key(1309)) void Paragraph::PutLineUnitBefore ( float prop );
__declspec(implementation_key(1310)) float Paragraph::GetLineUnitAfter ( );
__declspec(implementation_key(1311)) void Paragraph::PutLineUnitAfter ( float prop );
__declspec(implementation_key(1312)) enum WdReadingOrder Paragraph::GetReadingOrder ( );
__declspec(implementation_key(1313)) void Paragraph::PutReadingOrder ( enum WdReadingOrder prop );
__declspec(implementation_key(1314)) _bstr_t Paragraph::GetID ( );
__declspec(implementation_key(1315)) void Paragraph::PutID ( _bstr_t prop );
__declspec(implementation_key(1316)) long Paragraph::GetSpaceBeforeAuto ( );
__declspec(implementation_key(1317)) void Paragraph::PutSpaceBeforeAuto ( long prop );
__declspec(implementation_key(1318)) long Paragraph::GetSpaceAfterAuto ( );
__declspec(implementation_key(1319)) void Paragraph::PutSpaceAfterAuto ( long prop );
__declspec(implementation_key(1320)) _ApplicationPtr DropCap::GetApplication ( );
__declspec(implementation_key(1321)) long DropCap::GetCreator ( );
__declspec(implementation_key(1322)) IDispatchPtr DropCap::GetParent ( );
__declspec(implementation_key(1323)) enum WdDropPosition DropCap::GetPosition ( );
__declspec(implementation_key(1324)) void DropCap::PutPosition ( enum WdDropPosition prop );
__declspec(implementation_key(1325)) _bstr_t DropCap::GetFontName ( );
__declspec(implementation_key(1326)) void DropCap::PutFontName ( _bstr_t prop );
__declspec(implementation_key(1327)) long DropCap::GetLinesToDrop ( );
__declspec(implementation_key(1328)) void DropCap::PutLinesToDrop ( long prop );
__declspec(implementation_key(1329)) float DropCap::GetDistanceFromText ( );
__declspec(implementation_key(1330)) void DropCap::PutDistanceFromText ( float prop );
__declspec(implementation_key(1331)) HRESULT DropCap::Clear ( );
__declspec(implementation_key(1332)) HRESULT DropCap::Enable ( );
__declspec(implementation_key(1333)) IUnknownPtr TabStops::Get_NewEnum ( );
__declspec(implementation_key(1334)) long TabStops::GetCount ( );
__declspec(implementation_key(1335)) _ApplicationPtr TabStops::GetApplication ( );
__declspec(implementation_key(1336)) long TabStops::GetCreator ( );
__declspec(implementation_key(1337)) IDispatchPtr TabStops::GetParent ( );
__declspec(implementation_key(1338)) TabStopPtr TabStops::Item ( VARIANT * Index );
__declspec(implementation_key(1339)) TabStopPtr TabStops::Add ( float Position, VARIANT * Alignment, VARIANT * Leader );
__declspec(implementation_key(1340)) HRESULT TabStops::ClearAll ( );
__declspec(implementation_key(1341)) TabStopPtr TabStops::Before ( float Position );
__declspec(implementation_key(1342)) TabStopPtr TabStops::After ( float Position );
__declspec(implementation_key(1343)) _ApplicationPtr TabStop::GetApplication ( );
__declspec(implementation_key(1344)) long TabStop::GetCreator ( );
__declspec(implementation_key(1345)) IDispatchPtr TabStop::GetParent ( );
__declspec(implementation_key(1346)) enum WdTabAlignment TabStop::GetAlignment ( );
__declspec(implementation_key(1347)) void TabStop::PutAlignment ( enum WdTabAlignment prop );
__declspec(implementation_key(1348)) enum WdTabLeader TabStop::GetLeader ( );
__declspec(implementation_key(1349)) void TabStop::PutLeader ( enum WdTabLeader prop );
__declspec(implementation_key(1350)) float TabStop::GetPosition ( );
__declspec(implementation_key(1351)) void TabStop::PutPosition ( float prop );
__declspec(implementation_key(1352)) VARIANT_BOOL TabStop::GetCustomTab ( );
__declspec(implementation_key(1353)) TabStopPtr TabStop::GetNext ( );
__declspec(implementation_key(1354)) TabStopPtr TabStop::GetPrevious ( );
__declspec(implementation_key(1355)) HRESULT TabStop::Clear ( );
__declspec(implementation_key(1356)) _ApplicationPtr _ParagraphFormat::GetApplication ( );
__declspec(implementation_key(1357)) long _ParagraphFormat::GetCreator ( );
__declspec(implementation_key(1358)) IDispatchPtr _ParagraphFormat::GetParent ( );
__declspec(implementation_key(1359)) _ParagraphFormatPtr _ParagraphFormat::GetDuplicate ( );
__declspec(implementation_key(1360)) _variant_t _ParagraphFormat::GetStyle ( );
__declspec(implementation_key(1361)) void _ParagraphFormat::PutStyle ( VARIANT * prop );
__declspec(implementation_key(1362)) enum WdParagraphAlignment _ParagraphFormat::GetAlignment ( );
__declspec(implementation_key(1363)) void _ParagraphFormat::PutAlignment ( enum WdParagraphAlignment prop );
__declspec(implementation_key(1364)) long _ParagraphFormat::GetKeepTogether ( );
__declspec(implementation_key(1365)) void _ParagraphFormat::PutKeepTogether ( long prop );
__declspec(implementation_key(1366)) long _ParagraphFormat::GetKeepWithNext ( );
__declspec(implementation_key(1367)) void _ParagraphFormat::PutKeepWithNext ( long prop );
__declspec(implementation_key(1368)) long _ParagraphFormat::GetPageBreakBefore ( );
__declspec(implementation_key(1369)) void _ParagraphFormat::PutPageBreakBefore ( long prop );
__declspec(implementation_key(1370)) long _ParagraphFormat::GetNoLineNumber ( );
__declspec(implementation_key(1371)) void _ParagraphFormat::PutNoLineNumber ( long prop );
__declspec(implementation_key(1372)) float _ParagraphFormat::GetRightIndent ( );
__declspec(implementation_key(1373)) void _ParagraphFormat::PutRightIndent ( float prop );
__declspec(implementation_key(1374)) float _ParagraphFormat::GetLeftIndent ( );
__declspec(implementation_key(1375)) void _ParagraphFormat::PutLeftIndent ( float prop );
__declspec(implementation_key(1376)) float _ParagraphFormat::GetFirstLineIndent ( );
__declspec(implementation_key(1377)) void _ParagraphFormat::PutFirstLineIndent ( float prop );
__declspec(implementation_key(1378)) float _ParagraphFormat::GetLineSpacing ( );
__declspec(implementation_key(1379)) void _ParagraphFormat::PutLineSpacing ( float prop );
__declspec(implementation_key(1380)) enum WdLineSpacing _ParagraphFormat::GetLineSpacingRule ( );
__declspec(implementation_key(1381)) void _ParagraphFormat::PutLineSpacingRule ( enum WdLineSpacing prop );
__declspec(implementation_key(1382)) float _ParagraphFormat::GetSpaceBefore ( );
__declspec(implementation_key(1383)) void _ParagraphFormat::PutSpaceBefore ( float prop );
__declspec(implementation_key(1384)) float _ParagraphFormat::GetSpaceAfter ( );
__declspec(implementation_key(1385)) void _ParagraphFormat::PutSpaceAfter ( float prop );
__declspec(implementation_key(1386)) long _ParagraphFormat::GetHyphenation ( );
__declspec(implementation_key(1387)) void _ParagraphFormat::PutHyphenation ( long prop );
__declspec(implementation_key(1388)) long _ParagraphFormat::GetWidowControl ( );
__declspec(implementation_key(1389)) void _ParagraphFormat::PutWidowControl ( long prop );
__declspec(implementation_key(1390)) long _ParagraphFormat::GetFarEastLineBreakControl ( );
__declspec(implementation_key(1391)) void _ParagraphFormat::PutFarEastLineBreakControl ( long prop );
__declspec(implementation_key(1392)) long _ParagraphFormat::GetWordWrap ( );
__declspec(implementation_key(1393)) void _ParagraphFormat::PutWordWrap ( long prop );
__declspec(implementation_key(1394)) long _ParagraphFormat::GetHangingPunctuation ( );
__declspec(implementation_key(1395)) void _ParagraphFormat::PutHangingPunctuation ( long prop );
__declspec(implementation_key(1396)) long _ParagraphFormat::GetHalfWidthPunctuationOnTopOfLine ( );
__declspec(implementation_key(1397)) void _ParagraphFormat::PutHalfWidthPunctuationOnTopOfLine ( long prop );
__declspec(implementation_key(1398)) long _ParagraphFormat::GetAddSpaceBetweenFarEastAndAlpha ( );
__declspec(implementation_key(1399)) void _ParagraphFormat::PutAddSpaceBetweenFarEastAndAlpha ( long prop );
__declspec(implementation_key(1400)) long _ParagraphFormat::GetAddSpaceBetweenFarEastAndDigit ( );
__declspec(implementation_key(1401)) void _ParagraphFormat::PutAddSpaceBetweenFarEastAndDigit ( long prop );
__declspec(implementation_key(1402)) enum WdBaselineAlignment _ParagraphFormat::GetBaseLineAlignment ( );
__declspec(implementation_key(1403)) void _ParagraphFormat::PutBaseLineAlignment ( enum WdBaselineAlignment prop );
__declspec(implementation_key(1404)) long _ParagraphFormat::GetAutoAdjustRightIndent ( );
__declspec(implementation_key(1405)) void _ParagraphFormat::PutAutoAdjustRightIndent ( long prop );
__declspec(implementation_key(1406)) long _ParagraphFormat::GetDisableLineHeightGrid ( );
__declspec(implementation_key(1407)) void _ParagraphFormat::PutDisableLineHeightGrid ( long prop );
__declspec(implementation_key(1408)) TabStopsPtr _ParagraphFormat::GetTabStops ( );
__declspec(implementation_key(1409)) void _ParagraphFormat::PutTabStops ( struct TabStops * prop );
__declspec(implementation_key(1410)) BordersPtr _ParagraphFormat::GetBorders ( );
__declspec(implementation_key(1411)) void _ParagraphFormat::PutBorders ( struct Borders * prop );
__declspec(implementation_key(1412)) ShadingPtr _ParagraphFormat::GetShading ( );
__declspec(implementation_key(1413)) enum WdOutlineLevel _ParagraphFormat::GetOutlineLevel ( );
__declspec(implementation_key(1414)) void _ParagraphFormat::PutOutlineLevel ( enum WdOutlineLevel prop );
__declspec(implementation_key(1415)) HRESULT _ParagraphFormat::CloseUp ( );
__declspec(implementation_key(1416)) HRESULT _ParagraphFormat::OpenUp ( );
__declspec(implementation_key(1417)) HRESULT _ParagraphFormat::OpenOrCloseUp ( );
__declspec(implementation_key(1418)) HRESULT _ParagraphFormat::TabHangingIndent ( short Count );
__declspec(implementation_key(1419)) HRESULT _ParagraphFormat::TabIndent ( short Count );
__declspec(implementation_key(1420)) HRESULT _ParagraphFormat::Reset ( );
__declspec(implementation_key(1421)) HRESULT _ParagraphFormat::Space1 ( );
__declspec(implementation_key(1422)) HRESULT _ParagraphFormat::Space15 ( );
__declspec(implementation_key(1423)) HRESULT _ParagraphFormat::Space2 ( );
__declspec(implementation_key(1424)) HRESULT _ParagraphFormat::IndentCharWidth ( short Count );
__declspec(implementation_key(1425)) HRESULT _ParagraphFormat::IndentFirstLineCharWidth ( short Count );
__declspec(implementation_key(1426)) float _ParagraphFormat::GetCharacterUnitRightIndent ( );
__declspec(implementation_key(1427)) void _ParagraphFormat::PutCharacterUnitRightIndent ( float prop );
__declspec(implementation_key(1428)) float _ParagraphFormat::GetCharacterUnitLeftIndent ( );
__declspec(implementation_key(1429)) void _ParagraphFormat::PutCharacterUnitLeftIndent ( float prop );
__declspec(implementation_key(1430)) float _ParagraphFormat::GetCharacterUnitFirstLineIndent ( );
__declspec(implementation_key(1431)) void _ParagraphFormat::PutCharacterUnitFirstLineIndent ( float prop );
__declspec(implementation_key(1432)) float _ParagraphFormat::GetLineUnitBefore ( );
__declspec(implementation_key(1433)) void _ParagraphFormat::PutLineUnitBefore ( float prop );
__declspec(implementation_key(1434)) float _ParagraphFormat::GetLineUnitAfter ( );
__declspec(implementation_key(1435)) void _ParagraphFormat::PutLineUnitAfter ( float prop );
__declspec(implementation_key(1436)) enum WdReadingOrder _ParagraphFormat::GetReadingOrder ( );
__declspec(implementation_key(1437)) void _ParagraphFormat::PutReadingOrder ( enum WdReadingOrder prop );
__declspec(implementation_key(1438)) long _ParagraphFormat::GetSpaceBeforeAuto ( );
__declspec(implementation_key(1439)) void _ParagraphFormat::PutSpaceBeforeAuto ( long prop );
__declspec(implementation_key(1440)) long _ParagraphFormat::GetSpaceAfterAuto ( );
__declspec(implementation_key(1441)) void _ParagraphFormat::PutSpaceAfterAuto ( long prop );
__declspec(implementation_key(1442)) _ApplicationPtr _Font::GetApplication ( );
__declspec(implementation_key(1443)) long _Font::GetCreator ( );
__declspec(implementation_key(1444)) IDispatchPtr _Font::GetParent ( );
__declspec(implementation_key(1445)) _FontPtr _Font::GetDuplicate ( );
__declspec(implementation_key(1446)) long _Font::GetBold ( );
__declspec(implementation_key(1447)) void _Font::PutBold ( long prop );
__declspec(implementation_key(1448)) long _Font::GetItalic ( );
__declspec(implementation_key(1449)) void _Font::PutItalic ( long prop );
__declspec(implementation_key(1450)) long _Font::GetHidden ( );
__declspec(implementation_key(1451)) void _Font::PutHidden ( long prop );
__declspec(implementation_key(1452)) long _Font::GetSmallCaps ( );
__declspec(implementation_key(1453)) void _Font::PutSmallCaps ( long prop );
__declspec(implementation_key(1454)) long _Font::GetAllCaps ( );
__declspec(implementation_key(1455)) void _Font::PutAllCaps ( long prop );
__declspec(implementation_key(1456)) long _Font::GetStrikeThrough ( );
__declspec(implementation_key(1457)) void _Font::PutStrikeThrough ( long prop );
__declspec(implementation_key(1458)) long _Font::GetDoubleStrikeThrough ( );
__declspec(implementation_key(1459)) void _Font::PutDoubleStrikeThrough ( long prop );
__declspec(implementation_key(1460)) enum WdColorIndex _Font::GetColorIndex ( );
__declspec(implementation_key(1461)) void _Font::PutColorIndex ( enum WdColorIndex prop );
__declspec(implementation_key(1462)) long _Font::GetSubscript ( );
__declspec(implementation_key(1463)) void _Font::PutSubscript ( long prop );
__declspec(implementation_key(1464)) long _Font::GetSuperscript ( );
__declspec(implementation_key(1465)) void _Font::PutSuperscript ( long prop );
__declspec(implementation_key(1466)) enum WdUnderline _Font::GetUnderline ( );
__declspec(implementation_key(1467)) void _Font::PutUnderline ( enum WdUnderline prop );
__declspec(implementation_key(1468)) float _Font::GetSize ( );
__declspec(implementation_key(1469)) void _Font::PutSize ( float prop );
__declspec(implementation_key(1470)) _bstr_t _Font::GetName ( );
__declspec(implementation_key(1471)) void _Font::PutName ( _bstr_t prop );
__declspec(implementation_key(1472)) long _Font::GetPosition ( );
__declspec(implementation_key(1473)) void _Font::PutPosition ( long prop );
__declspec(implementation_key(1474)) float _Font::GetSpacing ( );
__declspec(implementation_key(1475)) void _Font::PutSpacing ( float prop );
__declspec(implementation_key(1476)) long _Font::GetScaling ( );
__declspec(implementation_key(1477)) void _Font::PutScaling ( long prop );
__declspec(implementation_key(1478)) long _Font::GetShadow ( );
__declspec(implementation_key(1479)) void _Font::PutShadow ( long prop );
__declspec(implementation_key(1480)) long _Font::GetOutline ( );
__declspec(implementation_key(1481)) void _Font::PutOutline ( long prop );
__declspec(implementation_key(1482)) long _Font::GetEmboss ( );
__declspec(implementation_key(1483)) void _Font::PutEmboss ( long prop );
__declspec(implementation_key(1484)) float _Font::GetKerning ( );
__declspec(implementation_key(1485)) void _Font::PutKerning ( float prop );
__declspec(implementation_key(1486)) long _Font::GetEngrave ( );
__declspec(implementation_key(1487)) void _Font::PutEngrave ( long prop );
__declspec(implementation_key(1488)) enum WdAnimation _Font::GetAnimation ( );
__declspec(implementation_key(1489)) void _Font::PutAnimation ( enum WdAnimation prop );
__declspec(implementation_key(1490)) BordersPtr _Font::GetBorders ( );
__declspec(implementation_key(1491)) void _Font::PutBorders ( struct Borders * prop );
__declspec(implementation_key(1492)) ShadingPtr _Font::GetShading ( );
__declspec(implementation_key(1493)) enum WdEmphasisMark _Font::GetEmphasisMark ( );
__declspec(implementation_key(1494)) void _Font::PutEmphasisMark ( enum WdEmphasisMark prop );
__declspec(implementation_key(1495)) VARIANT_BOOL _Font::GetDisableCharacterSpaceGrid ( );
__declspec(implementation_key(1496)) void _Font::PutDisableCharacterSpaceGrid ( VARIANT_BOOL prop );
__declspec(implementation_key(1497)) _bstr_t _Font::GetNameFarEast ( );
__declspec(implementation_key(1498)) void _Font::PutNameFarEast ( _bstr_t prop );
__declspec(implementation_key(1499)) _bstr_t _Font::GetNameAscii ( );
__declspec(implementation_key(1500)) void _Font::PutNameAscii ( _bstr_t prop );
__declspec(implementation_key(1501)) _bstr_t _Font::GetNameOther ( );
__declspec(implementation_key(1502)) void _Font::PutNameOther ( _bstr_t prop );
__declspec(implementation_key(1503)) HRESULT _Font::Grow ( );
__declspec(implementation_key(1504)) HRESULT _Font::Shrink ( );
__declspec(implementation_key(1505)) HRESULT _Font::Reset ( );
__declspec(implementation_key(1506)) HRESULT _Font::SetAsTemplateDefault ( );
__declspec(implementation_key(1507)) enum WdColor _Font::GetColor ( );
__declspec(implementation_key(1508)) void _Font::PutColor ( enum WdColor prop );
__declspec(implementation_key(1509)) long _Font::GetBoldBi ( );
__declspec(implementation_key(1510)) void _Font::PutBoldBi ( long prop );
__declspec(implementation_key(1511)) long _Font::GetItalicBi ( );
__declspec(implementation_key(1512)) void _Font::PutItalicBi ( long prop );
__declspec(implementation_key(1513)) float _Font::GetSizeBi ( );
__declspec(implementation_key(1514)) void _Font::PutSizeBi ( float prop );
__declspec(implementation_key(1515)) _bstr_t _Font::GetNameBi ( );
__declspec(implementation_key(1516)) void _Font::PutNameBi ( _bstr_t prop );
__declspec(implementation_key(1517)) enum WdColorIndex _Font::GetColorIndexBi ( );
__declspec(implementation_key(1518)) void _Font::PutColorIndexBi ( enum WdColorIndex prop );
__declspec(implementation_key(1519)) enum WdColor _Font::GetDiacriticColor ( );
__declspec(implementation_key(1520)) void _Font::PutDiacriticColor ( enum WdColor prop );
__declspec(implementation_key(1521)) enum WdColor _Font::GetUnderlineColor ( );
__declspec(implementation_key(1522)) void _Font::PutUnderlineColor ( enum WdColor prop );
__declspec(implementation_key(1523)) RangePtr Table::GetRange ( );
__declspec(implementation_key(1524)) _ApplicationPtr Table::GetApplication ( );
__declspec(implementation_key(1525)) long Table::GetCreator ( );
__declspec(implementation_key(1526)) IDispatchPtr Table::GetParent ( );
__declspec(implementation_key(1527)) ColumnsPtr Table::GetColumns ( );
__declspec(implementation_key(1528)) RowsPtr Table::GetRows ( );
__declspec(implementation_key(1529)) BordersPtr Table::GetBorders ( );
__declspec(implementation_key(1530)) void Table::PutBorders ( struct Borders * prop );
__declspec(implementation_key(1531)) ShadingPtr Table::GetShading ( );
__declspec(implementation_key(1532)) VARIANT_BOOL Table::GetUniform ( );
__declspec(implementation_key(1533)) long Table::GetAutoFormatType ( );
__declspec(implementation_key(1534)) HRESULT Table::Select ( );
__declspec(implementation_key(1535)) HRESULT Table::Delete ( );
__declspec(implementation_key(1536)) HRESULT Table::SortOld ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * CaseSensitive, VARIANT * LanguageID );
__declspec(implementation_key(1537)) HRESULT Table::SortAscending ( );
__declspec(implementation_key(1538)) HRESULT Table::SortDescending ( );
__declspec(implementation_key(1539)) HRESULT Table::AutoFormat ( VARIANT * Format, VARIANT * ApplyBorders, VARIANT * ApplyShading, VARIANT * ApplyFont, VARIANT * ApplyColor, VARIANT * ApplyHeadingRows, VARIANT * ApplyLastRow, VARIANT * ApplyFirstColumn, VARIANT * ApplyLastColumn, VARIANT * AutoFit );
__declspec(implementation_key(1540)) HRESULT Table::UpdateAutoFormat ( );
__declspec(implementation_key(1541)) RangePtr Table::ConvertToTextOld ( VARIANT * Separator );
__declspec(implementation_key(1542)) CellPtr Table::Cell ( long Row, long Column );
__declspec(implementation_key(1543)) TablePtr Table::Split ( VARIANT * BeforeRow );
__declspec(implementation_key(1544)) RangePtr Table::ConvertToText ( VARIANT * Separator, VARIANT * NestedTables );
__declspec(implementation_key(1545)) HRESULT Table::AutoFitBehavior ( enum WdAutoFitBehavior Behavior );
__declspec(implementation_key(1546)) HRESULT Table::Sort ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * CaseSensitive, VARIANT * BidiSort, VARIANT * IgnoreThe, VARIANT * IgnoreKashida, VARIANT * IgnoreDiacritics, VARIANT * IgnoreHe, VARIANT * LanguageID );
__declspec(implementation_key(1547)) TablesPtr Table::GetTables ( );
__declspec(implementation_key(1548)) long Table::GetNestingLevel ( );
__declspec(implementation_key(1549)) VARIANT_BOOL Table::GetAllowPageBreaks ( );
__declspec(implementation_key(1550)) void Table::PutAllowPageBreaks ( VARIANT_BOOL prop );
__declspec(implementation_key(1551)) VARIANT_BOOL Table::GetAllowAutoFit ( );
__declspec(implementation_key(1552)) void Table::PutAllowAutoFit ( VARIANT_BOOL prop );
__declspec(implementation_key(1553)) float Table::GetPreferredWidth ( );
__declspec(implementation_key(1554)) void Table::PutPreferredWidth ( float prop );
__declspec(implementation_key(1555)) enum WdPreferredWidthType Table::GetPreferredWidthType ( );
__declspec(implementation_key(1556)) void Table::PutPreferredWidthType ( enum WdPreferredWidthType prop );
__declspec(implementation_key(1557)) float Table::GetTopPadding ( );
__declspec(implementation_key(1558)) void Table::PutTopPadding ( float prop );
__declspec(implementation_key(1559)) float Table::GetBottomPadding ( );
__declspec(implementation_key(1560)) void Table::PutBottomPadding ( float prop );
__declspec(implementation_key(1561)) float Table::GetLeftPadding ( );
__declspec(implementation_key(1562)) void Table::PutLeftPadding ( float prop );
__declspec(implementation_key(1563)) float Table::GetRightPadding ( );
__declspec(implementation_key(1564)) void Table::PutRightPadding ( float prop );
__declspec(implementation_key(1565)) float Table::GetSpacing ( );
__declspec(implementation_key(1566)) void Table::PutSpacing ( float prop );
__declspec(implementation_key(1567)) enum WdTableDirection Table::GetTableDirection ( );
__declspec(implementation_key(1568)) void Table::PutTableDirection ( enum WdTableDirection prop );
__declspec(implementation_key(1569)) _bstr_t Table::GetID ( );
__declspec(implementation_key(1570)) void Table::PutID ( _bstr_t prop );
__declspec(implementation_key(1571)) RangePtr Row::GetRange ( );
__declspec(implementation_key(1572)) _ApplicationPtr Row::GetApplication ( );
__declspec(implementation_key(1573)) long Row::GetCreator ( );
__declspec(implementation_key(1574)) IDispatchPtr Row::GetParent ( );
__declspec(implementation_key(1575)) long Row::GetAllowBreakAcrossPages ( );
__declspec(implementation_key(1576)) void Row::PutAllowBreakAcrossPages ( long prop );
__declspec(implementation_key(1577)) enum WdRowAlignment Row::GetAlignment ( );
__declspec(implementation_key(1578)) void Row::PutAlignment ( enum WdRowAlignment prop );
__declspec(implementation_key(1579)) long Row::GetHeadingFormat ( );
__declspec(implementation_key(1580)) void Row::PutHeadingFormat ( long prop );
__declspec(implementation_key(1581)) float Row::GetSpaceBetweenColumns ( );
__declspec(implementation_key(1582)) void Row::PutSpaceBetweenColumns ( float prop );
__declspec(implementation_key(1583)) float Row::GetHeight ( );
__declspec(implementation_key(1584)) void Row::PutHeight ( float prop );
__declspec(implementation_key(1585)) enum WdRowHeightRule Row::GetHeightRule ( );
__declspec(implementation_key(1586)) void Row::PutHeightRule ( enum WdRowHeightRule prop );
__declspec(implementation_key(1587)) float Row::GetLeftIndent ( );
__declspec(implementation_key(1588)) void Row::PutLeftIndent ( float prop );
__declspec(implementation_key(1589)) VARIANT_BOOL Row::GetIsLast ( );
__declspec(implementation_key(1590)) VARIANT_BOOL Row::GetIsFirst ( );
__declspec(implementation_key(1591)) long Row::GetIndex ( );
__declspec(implementation_key(1592)) CellsPtr Row::GetCells ( );
__declspec(implementation_key(1593)) BordersPtr Row::GetBorders ( );
__declspec(implementation_key(1594)) void Row::PutBorders ( struct Borders * prop );
__declspec(implementation_key(1595)) ShadingPtr Row::GetShading ( );
__declspec(implementation_key(1596)) RowPtr Row::GetNext ( );
__declspec(implementation_key(1597)) RowPtr Row::GetPrevious ( );
__declspec(implementation_key(1598)) HRESULT Row::Select ( );
__declspec(implementation_key(1599)) HRESULT Row::Delete ( );
__declspec(implementation_key(1600)) HRESULT Row::SetLeftIndent ( float LeftIndent, enum WdRulerStyle RulerStyle );
__declspec(implementation_key(1601)) HRESULT Row::SetHeight ( float RowHeight, enum WdRowHeightRule HeightRule );
__declspec(implementation_key(1602)) RangePtr Row::ConvertToTextOld ( VARIANT * Separator );
__declspec(implementation_key(1603)) RangePtr Row::ConvertToText ( VARIANT * Separator, VARIANT * NestedTables );
__declspec(implementation_key(1604)) long Row::GetNestingLevel ( );
__declspec(implementation_key(1605)) _bstr_t Row::GetID ( );
__declspec(implementation_key(1606)) void Row::PutID ( _bstr_t prop );
__declspec(implementation_key(1607)) _ApplicationPtr Column::GetApplication ( );
__declspec(implementation_key(1608)) long Column::GetCreator ( );
__declspec(implementation_key(1609)) IDispatchPtr Column::GetParent ( );
__declspec(implementation_key(1610)) float Column::GetWidth ( );
__declspec(implementation_key(1611)) void Column::PutWidth ( float prop );
__declspec(implementation_key(1612)) VARIANT_BOOL Column::GetIsFirst ( );
__declspec(implementation_key(1613)) VARIANT_BOOL Column::GetIsLast ( );
__declspec(implementation_key(1614)) long Column::GetIndex ( );
__declspec(implementation_key(1615)) CellsPtr Column::GetCells ( );
__declspec(implementation_key(1616)) BordersPtr Column::GetBorders ( );
__declspec(implementation_key(1617)) void Column::PutBorders ( struct Borders * prop );
__declspec(implementation_key(1618)) ShadingPtr Column::GetShading ( );
__declspec(implementation_key(1619)) ColumnPtr Column::GetNext ( );
__declspec(implementation_key(1620)) ColumnPtr Column::GetPrevious ( );
__declspec(implementation_key(1621)) HRESULT Column::Select ( );
__declspec(implementation_key(1622)) HRESULT Column::Delete ( );
__declspec(implementation_key(1623)) HRESULT Column::SetWidth ( float ColumnWidth, enum WdRulerStyle RulerStyle );
__declspec(implementation_key(1624)) HRESULT Column::AutoFit ( );
__declspec(implementation_key(1625)) HRESULT Column::SortOld ( VARIANT * ExcludeHeader, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * CaseSensitive, VARIANT * LanguageID );
__declspec(implementation_key(1626)) HRESULT Column::Sort ( VARIANT * ExcludeHeader, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * CaseSensitive, VARIANT * BidiSort, VARIANT * IgnoreThe, VARIANT * IgnoreKashida, VARIANT * IgnoreDiacritics, VARIANT * IgnoreHe, VARIANT * LanguageID );
__declspec(implementation_key(1627)) long Column::GetNestingLevel ( );
__declspec(implementation_key(1628)) float Column::GetPreferredWidth ( );
__declspec(implementation_key(1629)) void Column::PutPreferredWidth ( float prop );
__declspec(implementation_key(1630)) enum WdPreferredWidthType Column::GetPreferredWidthType ( );
__declspec(implementation_key(1631)) void Column::PutPreferredWidthType ( enum WdPreferredWidthType prop );
__declspec(implementation_key(1632)) RangePtr Cell::GetRange ( );
__declspec(implementation_key(1633)) _ApplicationPtr Cell::GetApplication ( );
__declspec(implementation_key(1634)) long Cell::GetCreator ( );
__declspec(implementation_key(1635)) IDispatchPtr Cell::GetParent ( );
__declspec(implementation_key(1636)) long Cell::GetRowIndex ( );
__declspec(implementation_key(1637)) long Cell::GetColumnIndex ( );
__declspec(implementation_key(1638)) float Cell::GetWidth ( );
__declspec(implementation_key(1639)) void Cell::PutWidth ( float prop );
__declspec(implementation_key(1640)) float Cell::GetHeight ( );
__declspec(implementation_key(1641)) void Cell::PutHeight ( float prop );
__declspec(implementation_key(1642)) enum WdRowHeightRule Cell::GetHeightRule ( );
__declspec(implementation_key(1643)) void Cell::PutHeightRule ( enum WdRowHeightRule prop );
__declspec(implementation_key(1644)) enum WdCellVerticalAlignment Cell::GetVerticalAlignment ( );
__declspec(implementation_key(1645)) void Cell::PutVerticalAlignment ( enum WdCellVerticalAlignment prop );
__declspec(implementation_key(1646)) ColumnPtr Cell::GetColumn ( );
__declspec(implementation_key(1647)) RowPtr Cell::GetRow ( );
__declspec(implementation_key(1648)) CellPtr Cell::GetNext ( );
__declspec(implementation_key(1649)) CellPtr Cell::GetPrevious ( );
__declspec(implementation_key(1650)) ShadingPtr Cell::GetShading ( );
__declspec(implementation_key(1651)) BordersPtr Cell::GetBorders ( );
__declspec(implementation_key(1652)) void Cell::PutBorders ( struct Borders * prop );
__declspec(implementation_key(1653)) HRESULT Cell::Select ( );
__declspec(implementation_key(1654)) HRESULT Cell::Delete ( VARIANT * ShiftCells );
__declspec(implementation_key(1655)) HRESULT Cell::Formula ( VARIANT * Formula, VARIANT * NumFormat );
__declspec(implementation_key(1656)) HRESULT Cell::SetWidth ( float ColumnWidth, enum WdRulerStyle RulerStyle );
__declspec(implementation_key(1657)) HRESULT Cell::SetHeight ( VARIANT * RowHeight, enum WdRowHeightRule HeightRule );
__declspec(implementation_key(1658)) HRESULT Cell::Merge ( struct Cell * MergeTo );
__declspec(implementation_key(1659)) HRESULT Cell::Split ( VARIANT * NumRows, VARIANT * NumColumns );
__declspec(implementation_key(1660)) HRESULT Cell::AutoSum ( );
__declspec(implementation_key(1661)) TablesPtr Cell::GetTables ( );
__declspec(implementation_key(1662)) long Cell::GetNestingLevel ( );
__declspec(implementation_key(1663)) VARIANT_BOOL Cell::GetWordWrap ( );
__declspec(implementation_key(1664)) void Cell::PutWordWrap ( VARIANT_BOOL prop );
__declspec(implementation_key(1665)) float Cell::GetPreferredWidth ( );
__declspec(implementation_key(1666)) void Cell::PutPreferredWidth ( float prop );
__declspec(implementation_key(1667)) VARIANT_BOOL Cell::GetFitText ( );
__declspec(implementation_key(1668)) void Cell::PutFitText ( VARIANT_BOOL prop );
__declspec(implementation_key(1669)) float Cell::GetTopPadding ( );
__declspec(implementation_key(1670)) void Cell::PutTopPadding ( float prop );
__declspec(implementation_key(1671)) float Cell::GetBottomPadding ( );
__declspec(implementation_key(1672)) void Cell::PutBottomPadding ( float prop );
__declspec(implementation_key(1673)) float Cell::GetLeftPadding ( );
__declspec(implementation_key(1674)) void Cell::PutLeftPadding ( float prop );
__declspec(implementation_key(1675)) float Cell::GetRightPadding ( );
__declspec(implementation_key(1676)) void Cell::PutRightPadding ( float prop );
__declspec(implementation_key(1677)) _bstr_t Cell::GetID ( );
__declspec(implementation_key(1678)) void Cell::PutID ( _bstr_t prop );
__declspec(implementation_key(1679)) enum WdPreferredWidthType Cell::GetPreferredWidthType ( );
__declspec(implementation_key(1680)) void Cell::PutPreferredWidthType ( enum WdPreferredWidthType prop );
__declspec(implementation_key(1681)) IUnknownPtr Tables::Get_NewEnum ( );
__declspec(implementation_key(1682)) long Tables::GetCount ( );
__declspec(implementation_key(1683)) _ApplicationPtr Tables::GetApplication ( );
__declspec(implementation_key(1684)) long Tables::GetCreator ( );
__declspec(implementation_key(1685)) IDispatchPtr Tables::GetParent ( );
__declspec(implementation_key(1686)) TablePtr Tables::Item ( long Index );
__declspec(implementation_key(1687)) TablePtr Tables::AddOld ( struct Range * Range, long NumRows, long NumColumns );
__declspec(implementation_key(1688)) TablePtr Tables::Add ( struct Range * Range, long NumRows, long NumColumns, VARIANT * DefaultTableBehavior, VARIANT * AutoFitBehavior );
__declspec(implementation_key(1689)) long Tables::GetNestingLevel ( );
__declspec(implementation_key(1690)) IUnknownPtr Rows::Get_NewEnum ( );
__declspec(implementation_key(1691)) long Rows::GetCount ( );
__declspec(implementation_key(1692)) long Rows::GetAllowBreakAcrossPages ( );
__declspec(implementation_key(1693)) void Rows::PutAllowBreakAcrossPages ( long prop );
__declspec(implementation_key(1694)) enum WdRowAlignment Rows::GetAlignment ( );
__declspec(implementation_key(1695)) void Rows::PutAlignment ( enum WdRowAlignment prop );
__declspec(implementation_key(1696)) long Rows::GetHeadingFormat ( );
__declspec(implementation_key(1697)) void Rows::PutHeadingFormat ( long prop );
__declspec(implementation_key(1698)) float Rows::GetSpaceBetweenColumns ( );
__declspec(implementation_key(1699)) void Rows::PutSpaceBetweenColumns ( float prop );
__declspec(implementation_key(1700)) float Rows::GetHeight ( );
__declspec(implementation_key(1701)) void Rows::PutHeight ( float prop );
__declspec(implementation_key(1702)) enum WdRowHeightRule Rows::GetHeightRule ( );
__declspec(implementation_key(1703)) void Rows::PutHeightRule ( enum WdRowHeightRule prop );
__declspec(implementation_key(1704)) float Rows::GetLeftIndent ( );
__declspec(implementation_key(1705)) void Rows::PutLeftIndent ( float prop );
__declspec(implementation_key(1706)) RowPtr Rows::GetFirst ( );
__declspec(implementation_key(1707)) RowPtr Rows::GetLast ( );
__declspec(implementation_key(1708)) _ApplicationPtr Rows::GetApplication ( );
__declspec(implementation_key(1709)) long Rows::GetCreator ( );
__declspec(implementation_key(1710)) IDispatchPtr Rows::GetParent ( );
__declspec(implementation_key(1711)) BordersPtr Rows::GetBorders ( );
__declspec(implementation_key(1712)) void Rows::PutBorders ( struct Borders * prop );
__declspec(implementation_key(1713)) ShadingPtr Rows::GetShading ( );
__declspec(implementation_key(1714)) RowPtr Rows::Item ( long Index );
__declspec(implementation_key(1715)) RowPtr Rows::Add ( VARIANT * BeforeRow );
__declspec(implementation_key(1716)) HRESULT Rows::Select ( );
__declspec(implementation_key(1717)) HRESULT Rows::Delete ( );
__declspec(implementation_key(1718)) HRESULT Rows::SetLeftIndent ( float LeftIndent, enum WdRulerStyle RulerStyle );
__declspec(implementation_key(1719)) HRESULT Rows::SetHeight ( float RowHeight, enum WdRowHeightRule HeightRule );
__declspec(implementation_key(1720)) RangePtr Rows::ConvertToTextOld ( VARIANT * Separator );
__declspec(implementation_key(1721)) HRESULT Rows::DistributeHeight ( );
__declspec(implementation_key(1722)) RangePtr Rows::ConvertToText ( VARIANT * Separator, VARIANT * NestedTables );
__declspec(implementation_key(1723)) long Rows::GetWrapAroundText ( );
__declspec(implementation_key(1724)) void Rows::PutWrapAroundText ( long prop );
__declspec(implementation_key(1725)) float Rows::GetDistanceTop ( );
__declspec(implementation_key(1726)) void Rows::PutDistanceTop ( float prop );
__declspec(implementation_key(1727)) float Rows::GetDistanceBottom ( );
__declspec(implementation_key(1728)) void Rows::PutDistanceBottom ( float prop );
__declspec(implementation_key(1729)) float Rows::GetDistanceLeft ( );
__declspec(implementation_key(1730)) void Rows::PutDistanceLeft ( float prop );
__declspec(implementation_key(1731)) float Rows::GetDistanceRight ( );
__declspec(implementation_key(1732)) void Rows::PutDistanceRight ( float prop );
__declspec(implementation_key(1733)) float Rows::GetHorizontalPosition ( );
__declspec(implementation_key(1734)) void Rows::PutHorizontalPosition ( float prop );
__declspec(implementation_key(1735)) float Rows::GetVerticalPosition ( );
__declspec(implementation_key(1736)) void Rows::PutVerticalPosition ( float prop );
__declspec(implementation_key(1737)) enum WdRelativeHorizontalPosition Rows::GetRelativeHorizontalPosition ( );
__declspec(implementation_key(1738)) void Rows::PutRelativeHorizontalPosition ( enum WdRelativeHorizontalPosition prop );
__declspec(implementation_key(1739)) enum WdRelativeVerticalPosition Rows::GetRelativeVerticalPosition ( );
__declspec(implementation_key(1740)) void Rows::PutRelativeVerticalPosition ( enum WdRelativeVerticalPosition prop );
__declspec(implementation_key(1741)) long Rows::GetAllowOverlap ( );
__declspec(implementation_key(1742)) void Rows::PutAllowOverlap ( long prop );
__declspec(implementation_key(1743)) long Rows::GetNestingLevel ( );
__declspec(implementation_key(1744)) enum WdTableDirection Rows::GetTableDirection ( );
__declspec(implementation_key(1745)) void Rows::PutTableDirection ( enum WdTableDirection prop );
__declspec(implementation_key(1746)) IUnknownPtr Columns::Get_NewEnum ( );
__declspec(implementation_key(1747)) long Columns::GetCount ( );
__declspec(implementation_key(1748)) _ApplicationPtr Columns::GetApplication ( );
__declspec(implementation_key(1749)) long Columns::GetCreator ( );
__declspec(implementation_key(1750)) IDispatchPtr Columns::GetParent ( );
__declspec(implementation_key(1751)) ColumnPtr Columns::GetFirst ( );
__declspec(implementation_key(1752)) ColumnPtr Columns::GetLast ( );
__declspec(implementation_key(1753)) float Columns::GetWidth ( );
__declspec(implementation_key(1754)) void Columns::PutWidth ( float prop );
__declspec(implementation_key(1755)) BordersPtr Columns::GetBorders ( );
__declspec(implementation_key(1756)) void Columns::PutBorders ( struct Borders * prop );
__declspec(implementation_key(1757)) ShadingPtr Columns::GetShading ( );
__declspec(implementation_key(1758)) ColumnPtr Columns::Item ( long Index );
__declspec(implementation_key(1759)) ColumnPtr Columns::Add ( VARIANT * BeforeColumn );
__declspec(implementation_key(1760)) HRESULT Columns::Select ( );
__declspec(implementation_key(1761)) HRESULT Columns::Delete ( );
__declspec(implementation_key(1762)) HRESULT Columns::SetWidth ( float ColumnWidth, enum WdRulerStyle RulerStyle );
__declspec(implementation_key(1763)) HRESULT Columns::AutoFit ( );
__declspec(implementation_key(1764)) HRESULT Columns::DistributeWidth ( );
__declspec(implementation_key(1765)) long Columns::GetNestingLevel ( );
__declspec(implementation_key(1766)) float Columns::GetPreferredWidth ( );
__declspec(implementation_key(1767)) void Columns::PutPreferredWidth ( float prop );
__declspec(implementation_key(1768)) enum WdPreferredWidthType Columns::GetPreferredWidthType ( );
__declspec(implementation_key(1769)) void Columns::PutPreferredWidthType ( enum WdPreferredWidthType prop );
__declspec(implementation_key(1770)) IUnknownPtr Cells::Get_NewEnum ( );
__declspec(implementation_key(1771)) long Cells::GetCount ( );
__declspec(implementation_key(1772)) _ApplicationPtr Cells::GetApplication ( );
__declspec(implementation_key(1773)) long Cells::GetCreator ( );
__declspec(implementation_key(1774)) IDispatchPtr Cells::GetParent ( );
__declspec(implementation_key(1775)) float Cells::GetWidth ( );
__declspec(implementation_key(1776)) void Cells::PutWidth ( float prop );
__declspec(implementation_key(1777)) float Cells::GetHeight ( );
__declspec(implementation_key(1778)) void Cells::PutHeight ( float prop );
__declspec(implementation_key(1779)) enum WdRowHeightRule Cells::GetHeightRule ( );
__declspec(implementation_key(1780)) void Cells::PutHeightRule ( enum WdRowHeightRule prop );
__declspec(implementation_key(1781)) enum WdCellVerticalAlignment Cells::GetVerticalAlignment ( );
__declspec(implementation_key(1782)) void Cells::PutVerticalAlignment ( enum WdCellVerticalAlignment prop );
__declspec(implementation_key(1783)) BordersPtr Cells::GetBorders ( );
__declspec(implementation_key(1784)) void Cells::PutBorders ( struct Borders * prop );
__declspec(implementation_key(1785)) ShadingPtr Cells::GetShading ( );
__declspec(implementation_key(1786)) CellPtr Cells::Item ( long Index );
__declspec(implementation_key(1787)) CellPtr Cells::Add ( VARIANT * BeforeCell );
__declspec(implementation_key(1788)) HRESULT Cells::Delete ( VARIANT * ShiftCells );
__declspec(implementation_key(1789)) HRESULT Cells::SetWidth ( float ColumnWidth, enum WdRulerStyle RulerStyle );
__declspec(implementation_key(1790)) HRESULT Cells::SetHeight ( VARIANT * RowHeight, enum WdRowHeightRule HeightRule );
__declspec(implementation_key(1791)) HRESULT Cells::Merge ( );
__declspec(implementation_key(1792)) HRESULT Cells::Split ( VARIANT * NumRows, VARIANT * NumColumns, VARIANT * MergeBeforeSplit );
__declspec(implementation_key(1793)) HRESULT Cells::DistributeHeight ( );
__declspec(implementation_key(1794)) HRESULT Cells::DistributeWidth ( );
__declspec(implementation_key(1795)) HRESULT Cells::AutoFit ( );
__declspec(implementation_key(1796)) long Cells::GetNestingLevel ( );
__declspec(implementation_key(1797)) float Cells::GetPreferredWidth ( );
__declspec(implementation_key(1798)) void Cells::PutPreferredWidth ( float prop );
__declspec(implementation_key(1799)) enum WdPreferredWidthType Cells::GetPreferredWidthType ( );
__declspec(implementation_key(1800)) void Cells::PutPreferredWidthType ( enum WdPreferredWidthType prop );
__declspec(implementation_key(1801)) _ApplicationPtr AutoCorrect::GetApplication ( );
__declspec(implementation_key(1802)) long AutoCorrect::GetCreator ( );
__declspec(implementation_key(1803)) IDispatchPtr AutoCorrect::GetParent ( );
__declspec(implementation_key(1804)) VARIANT_BOOL AutoCorrect::GetCorrectDays ( );
__declspec(implementation_key(1805)) void AutoCorrect::PutCorrectDays ( VARIANT_BOOL prop );
__declspec(implementation_key(1806)) VARIANT_BOOL AutoCorrect::GetCorrectInitialCaps ( );
__declspec(implementation_key(1807)) void AutoCorrect::PutCorrectInitialCaps ( VARIANT_BOOL prop );
__declspec(implementation_key(1808)) VARIANT_BOOL AutoCorrect::GetCorrectSentenceCaps ( );
__declspec(implementation_key(1809)) void AutoCorrect::PutCorrectSentenceCaps ( VARIANT_BOOL prop );
__declspec(implementation_key(1810)) VARIANT_BOOL AutoCorrect::GetReplaceText ( );
__declspec(implementation_key(1811)) void AutoCorrect::PutReplaceText ( VARIANT_BOOL prop );
__declspec(implementation_key(1812)) AutoCorrectEntriesPtr AutoCorrect::GetEntries ( );
__declspec(implementation_key(1813)) FirstLetterExceptionsPtr AutoCorrect::GetFirstLetterExceptions ( );
__declspec(implementation_key(1814)) VARIANT_BOOL AutoCorrect::GetFirstLetterAutoAdd ( );
__declspec(implementation_key(1815)) void AutoCorrect::PutFirstLetterAutoAdd ( VARIANT_BOOL prop );
__declspec(implementation_key(1816)) TwoInitialCapsExceptionsPtr AutoCorrect::GetTwoInitialCapsExceptions ( );
__declspec(implementation_key(1817)) VARIANT_BOOL AutoCorrect::GetTwoInitialCapsAutoAdd ( );
__declspec(implementation_key(1818)) void AutoCorrect::PutTwoInitialCapsAutoAdd ( VARIANT_BOOL prop );
__declspec(implementation_key(1819)) VARIANT_BOOL AutoCorrect::GetCorrectCapsLock ( );
__declspec(implementation_key(1820)) void AutoCorrect::PutCorrectCapsLock ( VARIANT_BOOL prop );
__declspec(implementation_key(1821)) VARIANT_BOOL AutoCorrect::GetCorrectHangulAndAlphabet ( );
__declspec(implementation_key(1822)) void AutoCorrect::PutCorrectHangulAndAlphabet ( VARIANT_BOOL prop );
__declspec(implementation_key(1823)) HangulAndAlphabetExceptionsPtr AutoCorrect::GetHangulAndAlphabetExceptions ( );
__declspec(implementation_key(1824)) VARIANT_BOOL AutoCorrect::GetHangulAndAlphabetAutoAdd ( );
__declspec(implementation_key(1825)) void AutoCorrect::PutHangulAndAlphabetAutoAdd ( VARIANT_BOOL prop );
__declspec(implementation_key(1826)) VARIANT_BOOL AutoCorrect::GetReplaceTextFromSpellingChecker ( );
__declspec(implementation_key(1827)) void AutoCorrect::PutReplaceTextFromSpellingChecker ( VARIANT_BOOL prop );
__declspec(implementation_key(1828)) VARIANT_BOOL AutoCorrect::GetOtherCorrectionsAutoAdd ( );
__declspec(implementation_key(1829)) void AutoCorrect::PutOtherCorrectionsAutoAdd ( VARIANT_BOOL prop );
__declspec(implementation_key(1830)) OtherCorrectionsExceptionsPtr AutoCorrect::GetOtherCorrectionsExceptions ( );
__declspec(implementation_key(1831)) VARIANT_BOOL AutoCorrect::GetCorrectKeyboardSetting ( );
__declspec(implementation_key(1832)) void AutoCorrect::PutCorrectKeyboardSetting ( VARIANT_BOOL prop );
__declspec(implementation_key(1833)) _ApplicationPtr AutoCorrectEntries::GetApplication ( );
__declspec(implementation_key(1834)) long AutoCorrectEntries::GetCreator ( );
__declspec(implementation_key(1835)) IDispatchPtr AutoCorrectEntries::GetParent ( );
__declspec(implementation_key(1836)) IUnknownPtr AutoCorrectEntries::Get_NewEnum ( );
__declspec(implementation_key(1837)) long AutoCorrectEntries::GetCount ( );
__declspec(implementation_key(1838)) AutoCorrectEntryPtr AutoCorrectEntries::Item ( VARIANT * Index );
__declspec(implementation_key(1839)) AutoCorrectEntryPtr AutoCorrectEntries::Add ( _bstr_t Name, _bstr_t Value );
__declspec(implementation_key(1840)) AutoCorrectEntryPtr AutoCorrectEntries::AddRichText ( _bstr_t Name, struct Range * Range );
__declspec(implementation_key(1841)) _ApplicationPtr AutoCorrectEntry::GetApplication ( );
__declspec(implementation_key(1842)) long AutoCorrectEntry::GetCreator ( );
__declspec(implementation_key(1843)) IDispatchPtr AutoCorrectEntry::GetParent ( );
__declspec(implementation_key(1844)) long AutoCorrectEntry::GetIndex ( );
__declspec(implementation_key(1845)) _bstr_t AutoCorrectEntry::GetName ( );
__declspec(implementation_key(1846)) void AutoCorrectEntry::PutName ( _bstr_t prop );
__declspec(implementation_key(1847)) _bstr_t AutoCorrectEntry::GetValue ( );
__declspec(implementation_key(1848)) void AutoCorrectEntry::PutValue ( _bstr_t prop );
__declspec(implementation_key(1849)) VARIANT_BOOL AutoCorrectEntry::GetRichText ( );
__declspec(implementation_key(1850)) HRESULT AutoCorrectEntry::Delete ( );
__declspec(implementation_key(1851)) HRESULT AutoCorrectEntry::Apply ( struct Range * Range );
__declspec(implementation_key(1852)) _ApplicationPtr FirstLetterExceptions::GetApplication ( );
__declspec(implementation_key(1853)) long FirstLetterExceptions::GetCreator ( );
__declspec(implementation_key(1854)) IDispatchPtr FirstLetterExceptions::GetParent ( );
__declspec(implementation_key(1855)) IUnknownPtr FirstLetterExceptions::Get_NewEnum ( );
__declspec(implementation_key(1856)) long FirstLetterExceptions::GetCount ( );
__declspec(implementation_key(1857)) FirstLetterExceptionPtr FirstLetterExceptions::Item ( VARIANT * Index );
__declspec(implementation_key(1858)) FirstLetterExceptionPtr FirstLetterExceptions::Add ( _bstr_t Name );
__declspec(implementation_key(1859)) _ApplicationPtr FirstLetterException::GetApplication ( );
__declspec(implementation_key(1860)) long FirstLetterException::GetCreator ( );
__declspec(implementation_key(1861)) IDispatchPtr FirstLetterException::GetParent ( );
__declspec(implementation_key(1862)) long FirstLetterException::GetIndex ( );
__declspec(implementation_key(1863)) _bstr_t FirstLetterException::GetName ( );
__declspec(implementation_key(1864)) HRESULT FirstLetterException::Delete ( );
__declspec(implementation_key(1865)) _ApplicationPtr TwoInitialCapsExceptions::GetApplication ( );
__declspec(implementation_key(1866)) long TwoInitialCapsExceptions::GetCreator ( );
__declspec(implementation_key(1867)) IDispatchPtr TwoInitialCapsExceptions::GetParent ( );
__declspec(implementation_key(1868)) IUnknownPtr TwoInitialCapsExceptions::Get_NewEnum ( );
__declspec(implementation_key(1869)) long TwoInitialCapsExceptions::GetCount ( );
__declspec(implementation_key(1870)) TwoInitialCapsExceptionPtr TwoInitialCapsExceptions::Item ( VARIANT * Index );
__declspec(implementation_key(1871)) TwoInitialCapsExceptionPtr TwoInitialCapsExceptions::Add ( _bstr_t Name );
__declspec(implementation_key(1872)) _ApplicationPtr TwoInitialCapsException::GetApplication ( );
__declspec(implementation_key(1873)) long TwoInitialCapsException::GetCreator ( );
__declspec(implementation_key(1874)) IDispatchPtr TwoInitialCapsException::GetParent ( );
__declspec(implementation_key(1875)) long TwoInitialCapsException::GetIndex ( );
__declspec(implementation_key(1876)) _bstr_t TwoInitialCapsException::GetName ( );
__declspec(implementation_key(1877)) HRESULT TwoInitialCapsException::Delete ( );
__declspec(implementation_key(1878)) IUnknownPtr Footnotes::Get_NewEnum ( );
__declspec(implementation_key(1879)) long Footnotes::GetCount ( );
__declspec(implementation_key(1880)) _ApplicationPtr Footnotes::GetApplication ( );
__declspec(implementation_key(1881)) long Footnotes::GetCreator ( );
__declspec(implementation_key(1882)) IDispatchPtr Footnotes::GetParent ( );
__declspec(implementation_key(1883)) enum WdFootnoteLocation Footnotes::GetLocation ( );
__declspec(implementation_key(1884)) void Footnotes::PutLocation ( enum WdFootnoteLocation prop );
__declspec(implementation_key(1885)) enum WdNoteNumberStyle Footnotes::GetNumberStyle ( );
__declspec(implementation_key(1886)) void Footnotes::PutNumberStyle ( enum WdNoteNumberStyle prop );
__declspec(implementation_key(1887)) long Footnotes::GetStartingNumber ( );
__declspec(implementation_key(1888)) void Footnotes::PutStartingNumber ( long prop );
__declspec(implementation_key(1889)) enum WdNumberingRule Footnotes::GetNumberingRule ( );
__declspec(implementation_key(1890)) void Footnotes::PutNumberingRule ( enum WdNumberingRule prop );
__declspec(implementation_key(1891)) RangePtr Footnotes::GetSeparator ( );
__declspec(implementation_key(1892)) RangePtr Footnotes::GetContinuationSeparator ( );
__declspec(implementation_key(1893)) RangePtr Footnotes::GetContinuationNotice ( );
__declspec(implementation_key(1894)) FootnotePtr Footnotes::Item ( long Index );
__declspec(implementation_key(1895)) FootnotePtr Footnotes::Add ( struct Range * Range, VARIANT * Reference, VARIANT * Text );
__declspec(implementation_key(1896)) HRESULT Footnotes::Convert ( );
__declspec(implementation_key(1897)) HRESULT Footnotes::SwapWithEndnotes ( );
__declspec(implementation_key(1898)) HRESULT Footnotes::ResetSeparator ( );
__declspec(implementation_key(1899)) HRESULT Footnotes::ResetContinuationSeparator ( );
__declspec(implementation_key(1900)) HRESULT Footnotes::ResetContinuationNotice ( );
__declspec(implementation_key(1901)) IUnknownPtr Endnotes::Get_NewEnum ( );
__declspec(implementation_key(1902)) long Endnotes::GetCount ( );
__declspec(implementation_key(1903)) _ApplicationPtr Endnotes::GetApplication ( );
__declspec(implementation_key(1904)) long Endnotes::GetCreator ( );
__declspec(implementation_key(1905)) IDispatchPtr Endnotes::GetParent ( );
__declspec(implementation_key(1906)) enum WdEndnoteLocation Endnotes::GetLocation ( );
__declspec(implementation_key(1907)) void Endnotes::PutLocation ( enum WdEndnoteLocation prop );
__declspec(implementation_key(1908)) enum WdNoteNumberStyle Endnotes::GetNumberStyle ( );
__declspec(implementation_key(1909)) void Endnotes::PutNumberStyle ( enum WdNoteNumberStyle prop );
__declspec(implementation_key(1910)) long Endnotes::GetStartingNumber ( );
__declspec(implementation_key(1911)) void Endnotes::PutStartingNumber ( long prop );
__declspec(implementation_key(1912)) enum WdNumberingRule Endnotes::GetNumberingRule ( );
__declspec(implementation_key(1913)) void Endnotes::PutNumberingRule ( enum WdNumberingRule prop );
__declspec(implementation_key(1914)) RangePtr Endnotes::GetSeparator ( );
__declspec(implementation_key(1915)) RangePtr Endnotes::GetContinuationSeparator ( );
__declspec(implementation_key(1916)) RangePtr Endnotes::GetContinuationNotice ( );
__declspec(implementation_key(1917)) EndnotePtr Endnotes::Item ( long Index );
__declspec(implementation_key(1918)) EndnotePtr Endnotes::Add ( struct Range * Range, VARIANT * Reference, VARIANT * Text );
__declspec(implementation_key(1919)) HRESULT Endnotes::Convert ( );
__declspec(implementation_key(1920)) HRESULT Endnotes::SwapWithFootnotes ( );
__declspec(implementation_key(1921)) HRESULT Endnotes::ResetSeparator ( );
__declspec(implementation_key(1922)) HRESULT Endnotes::ResetContinuationSeparator ( );
__declspec(implementation_key(1923)) HRESULT Endnotes::ResetContinuationNotice ( );
__declspec(implementation_key(1924)) IUnknownPtr Comments::Get_NewEnum ( );
__declspec(implementation_key(1925)) long Comments::GetCount ( );
__declspec(implementation_key(1926)) _ApplicationPtr Comments::GetApplication ( );
__declspec(implementation_key(1927)) long Comments::GetCreator ( );
__declspec(implementation_key(1928)) IDispatchPtr Comments::GetParent ( );
__declspec(implementation_key(1929)) _bstr_t Comments::GetShowBy ( );
__declspec(implementation_key(1930)) void Comments::PutShowBy ( _bstr_t prop );
__declspec(implementation_key(1931)) CommentPtr Comments::Item ( long Index );
__declspec(implementation_key(1932)) CommentPtr Comments::Add ( struct Range * Range, VARIANT * Text );
__declspec(implementation_key(1933)) _ApplicationPtr Footnote::GetApplication ( );
__declspec(implementation_key(1934)) long Footnote::GetCreator ( );
__declspec(implementation_key(1935)) IDispatchPtr Footnote::GetParent ( );
__declspec(implementation_key(1936)) RangePtr Footnote::GetRange ( );
__declspec(implementation_key(1937)) RangePtr Footnote::GetReference ( );
__declspec(implementation_key(1938)) long Footnote::GetIndex ( );
__declspec(implementation_key(1939)) HRESULT Footnote::Delete ( );
__declspec(implementation_key(1940)) _ApplicationPtr Endnote::GetApplication ( );
__declspec(implementation_key(1941)) long Endnote::GetCreator ( );
__declspec(implementation_key(1942)) IDispatchPtr Endnote::GetParent ( );
__declspec(implementation_key(1943)) RangePtr Endnote::GetRange ( );
__declspec(implementation_key(1944)) RangePtr Endnote::GetReference ( );
__declspec(implementation_key(1945)) long Endnote::GetIndex ( );
__declspec(implementation_key(1946)) HRESULT Endnote::Delete ( );
__declspec(implementation_key(1947)) _ApplicationPtr Comment::GetApplication ( );
__declspec(implementation_key(1948)) long Comment::GetCreator ( );
__declspec(implementation_key(1949)) IDispatchPtr Comment::GetParent ( );
__declspec(implementation_key(1950)) RangePtr Comment::GetRange ( );
__declspec(implementation_key(1951)) RangePtr Comment::GetReference ( );
__declspec(implementation_key(1952)) RangePtr Comment::GetScope ( );
__declspec(implementation_key(1953)) long Comment::GetIndex ( );
__declspec(implementation_key(1954)) _bstr_t Comment::GetAuthor ( );
__declspec(implementation_key(1955)) void Comment::PutAuthor ( _bstr_t prop );
__declspec(implementation_key(1956)) _bstr_t Comment::GetInitial ( );
__declspec(implementation_key(1957)) void Comment::PutInitial ( _bstr_t prop );
__declspec(implementation_key(1958)) VARIANT_BOOL Comment::GetShowTip ( );
__declspec(implementation_key(1959)) void Comment::PutShowTip ( VARIANT_BOOL prop );
__declspec(implementation_key(1960)) HRESULT Comment::Delete ( );
__declspec(implementation_key(1961)) _ApplicationPtr Borders::GetApplication ( );
__declspec(implementation_key(1962)) long Borders::GetCreator ( );
__declspec(implementation_key(1963)) IDispatchPtr Borders::GetParent ( );
__declspec(implementation_key(1964)) IUnknownPtr Borders::Get_NewEnum ( );
__declspec(implementation_key(1965)) long Borders::GetCount ( );
__declspec(implementation_key(1966)) long Borders::GetEnable ( );
__declspec(implementation_key(1967)) void Borders::PutEnable ( long prop );
__declspec(implementation_key(1968)) long Borders::GetDistanceFromTop ( );
__declspec(implementation_key(1969)) void Borders::PutDistanceFromTop ( long prop );
__declspec(implementation_key(1970)) VARIANT_BOOL Borders::GetShadow ( );
__declspec(implementation_key(1971)) void Borders::PutShadow ( VARIANT_BOOL prop );
__declspec(implementation_key(1972)) enum WdLineStyle Borders::GetInsideLineStyle ( );
__declspec(implementation_key(1973)) void Borders::PutInsideLineStyle ( enum WdLineStyle prop );
__declspec(implementation_key(1974)) enum WdLineStyle Borders::GetOutsideLineStyle ( );
__declspec(implementation_key(1975)) void Borders::PutOutsideLineStyle ( enum WdLineStyle prop );
__declspec(implementation_key(1976)) enum WdLineWidth Borders::GetInsideLineWidth ( );
__declspec(implementation_key(1977)) void Borders::PutInsideLineWidth ( enum WdLineWidth prop );
__declspec(implementation_key(1978)) enum WdLineWidth Borders::GetOutsideLineWidth ( );
__declspec(implementation_key(1979)) void Borders::PutOutsideLineWidth ( enum WdLineWidth prop );
__declspec(implementation_key(1980)) enum WdColorIndex Borders::GetInsideColorIndex ( );
__declspec(implementation_key(1981)) void Borders::PutInsideColorIndex ( enum WdColorIndex prop );
__declspec(implementation_key(1982)) enum WdColorIndex Borders::GetOutsideColorIndex ( );
__declspec(implementation_key(1983)) void Borders::PutOutsideColorIndex ( enum WdColorIndex prop );
__declspec(implementation_key(1984)) long Borders::GetDistanceFromLeft ( );
__declspec(implementation_key(1985)) void Borders::PutDistanceFromLeft ( long prop );
__declspec(implementation_key(1986)) long Borders::GetDistanceFromBottom ( );
__declspec(implementation_key(1987)) void Borders::PutDistanceFromBottom ( long prop );
__declspec(implementation_key(1988)) long Borders::GetDistanceFromRight ( );
__declspec(implementation_key(1989)) void Borders::PutDistanceFromRight ( long prop );
__declspec(implementation_key(1990)) VARIANT_BOOL Borders::GetAlwaysInFront ( );
__declspec(implementation_key(1991)) void Borders::PutAlwaysInFront ( VARIANT_BOOL prop );
__declspec(implementation_key(1992)) VARIANT_BOOL Borders::GetSurroundHeader ( );
__declspec(implementation_key(1993)) void Borders::PutSurroundHeader ( VARIANT_BOOL prop );
__declspec(implementation_key(1994)) VARIANT_BOOL Borders::GetSurroundFooter ( );
__declspec(implementation_key(1995)) void Borders::PutSurroundFooter ( VARIANT_BOOL prop );
__declspec(implementation_key(1996)) VARIANT_BOOL Borders::GetJoinBorders ( );
__declspec(implementation_key(1997)) void Borders::PutJoinBorders ( VARIANT_BOOL prop );
__declspec(implementation_key(1998)) VARIANT_BOOL Borders::GetHasHorizontal ( );
__declspec(implementation_key(1999)) VARIANT_BOOL Borders::GetHasVertical ( );
__declspec(implementation_key(2000)) enum WdBorderDistanceFrom Borders::GetDistanceFrom ( );
__declspec(implementation_key(2001)) void Borders::PutDistanceFrom ( enum WdBorderDistanceFrom prop );
__declspec(implementation_key(2002)) VARIANT_BOOL Borders::GetEnableFirstPageInSection ( );
__declspec(implementation_key(2003)) void Borders::PutEnableFirstPageInSection ( VARIANT_BOOL prop );
__declspec(implementation_key(2004)) VARIANT_BOOL Borders::GetEnableOtherPagesInSection ( );
__declspec(implementation_key(2005)) void Borders::PutEnableOtherPagesInSection ( VARIANT_BOOL prop );
__declspec(implementation_key(2006)) BorderPtr Borders::Item ( enum WdBorderType Index );
__declspec(implementation_key(2007)) HRESULT Borders::ApplyPageBordersToAllSections ( );
__declspec(implementation_key(2008)) enum WdColor Borders::GetInsideColor ( );
__declspec(implementation_key(2009)) void Borders::PutInsideColor ( enum WdColor prop );
__declspec(implementation_key(2010)) enum WdColor Borders::GetOutsideColor ( );
__declspec(implementation_key(2011)) void Borders::PutOutsideColor ( enum WdColor prop );
__declspec(implementation_key(2012)) _ApplicationPtr Border::GetApplication ( );
__declspec(implementation_key(2013)) long Border::GetCreator ( );
__declspec(implementation_key(2014)) IDispatchPtr Border::GetParent ( );
__declspec(implementation_key(2015)) VARIANT_BOOL Border::GetVisible ( );
__declspec(implementation_key(2016)) void Border::PutVisible ( VARIANT_BOOL prop );
__declspec(implementation_key(2017)) enum WdColorIndex Border::GetColorIndex ( );
__declspec(implementation_key(2018)) void Border::PutColorIndex ( enum WdColorIndex prop );
__declspec(implementation_key(2019)) VARIANT_BOOL Border::GetInside ( );
__declspec(implementation_key(2020)) enum WdLineStyle Border::GetLineStyle ( );
__declspec(implementation_key(2021)) void Border::PutLineStyle ( enum WdLineStyle prop );
__declspec(implementation_key(2022)) enum WdLineWidth Border::GetLineWidth ( );
__declspec(implementation_key(2023)) void Border::PutLineWidth ( enum WdLineWidth prop );
__declspec(implementation_key(2024)) enum WdPageBorderArt Border::GetArtStyle ( );
__declspec(implementation_key(2025)) void Border::PutArtStyle ( enum WdPageBorderArt prop );
__declspec(implementation_key(2026)) long Border::GetArtWidth ( );
__declspec(implementation_key(2027)) void Border::PutArtWidth ( long prop );
__declspec(implementation_key(2028)) enum WdColor Border::GetColor ( );
__declspec(implementation_key(2029)) void Border::PutColor ( enum WdColor prop );
__declspec(implementation_key(2030)) _ApplicationPtr Shading::GetApplication ( );
__declspec(implementation_key(2031)) long Shading::GetCreator ( );
__declspec(implementation_key(2032)) IDispatchPtr Shading::GetParent ( );
__declspec(implementation_key(2033)) enum WdColorIndex Shading::GetForegroundPatternColorIndex ( );
__declspec(implementation_key(2034)) void Shading::PutForegroundPatternColorIndex ( enum WdColorIndex prop );
__declspec(implementation_key(2035)) enum WdColorIndex Shading::GetBackgroundPatternColorIndex ( );
__declspec(implementation_key(2036)) void Shading::PutBackgroundPatternColorIndex ( enum WdColorIndex prop );
__declspec(implementation_key(2037)) enum WdTextureIndex Shading::GetTexture ( );
__declspec(implementation_key(2038)) void Shading::PutTexture ( enum WdTextureIndex prop );
__declspec(implementation_key(2039)) enum WdColor Shading::GetForegroundPatternColor ( );
__declspec(implementation_key(2040)) void Shading::PutForegroundPatternColor ( enum WdColor prop );
__declspec(implementation_key(2041)) enum WdColor Shading::GetBackgroundPatternColor ( );
__declspec(implementation_key(2042)) void Shading::PutBackgroundPatternColor ( enum WdColor prop );
__declspec(implementation_key(2043)) _ApplicationPtr TextRetrievalMode::GetApplication ( );
__declspec(implementation_key(2044)) long TextRetrievalMode::GetCreator ( );
__declspec(implementation_key(2045)) IDispatchPtr TextRetrievalMode::GetParent ( );
__declspec(implementation_key(2046)) enum WdViewType TextRetrievalMode::GetViewType ( );
__declspec(implementation_key(2047)) void TextRetrievalMode::PutViewType ( enum WdViewType prop );
__declspec(implementation_key(2048)) TextRetrievalModePtr TextRetrievalMode::GetDuplicate ( );
__declspec(implementation_key(2049)) VARIANT_BOOL TextRetrievalMode::GetIncludeHiddenText ( );
__declspec(implementation_key(2050)) void TextRetrievalMode::PutIncludeHiddenText ( VARIANT_BOOL prop );
__declspec(implementation_key(2051)) VARIANT_BOOL TextRetrievalMode::GetIncludeFieldCodes ( );
__declspec(implementation_key(2052)) void TextRetrievalMode::PutIncludeFieldCodes ( VARIANT_BOOL prop );
__declspec(implementation_key(2053)) _ApplicationPtr AutoTextEntries::GetApplication ( );
__declspec(implementation_key(2054)) long AutoTextEntries::GetCreator ( );
__declspec(implementation_key(2055)) IDispatchPtr AutoTextEntries::GetParent ( );
__declspec(implementation_key(2056)) IUnknownPtr AutoTextEntries::Get_NewEnum ( );
__declspec(implementation_key(2057)) long AutoTextEntries::GetCount ( );
__declspec(implementation_key(2058)) AutoTextEntryPtr AutoTextEntries::Item ( VARIANT * Index );
__declspec(implementation_key(2059)) AutoTextEntryPtr AutoTextEntries::Add ( _bstr_t Name, struct Range * Range );
__declspec(implementation_key(2060)) AutoTextEntryPtr AutoTextEntries::AppendToSpike ( struct Range * Range );
__declspec(implementation_key(2061)) _ApplicationPtr AutoTextEntry::GetApplication ( );
__declspec(implementation_key(2062)) long AutoTextEntry::GetCreator ( );
__declspec(implementation_key(2063)) IDispatchPtr AutoTextEntry::GetParent ( );
__declspec(implementation_key(2064)) long AutoTextEntry::GetIndex ( );
__declspec(implementation_key(2065)) _bstr_t AutoTextEntry::GetName ( );
__declspec(implementation_key(2066)) void AutoTextEntry::PutName ( _bstr_t prop );
__declspec(implementation_key(2067)) _bstr_t AutoTextEntry::GetStyleName ( );
__declspec(implementation_key(2068)) _bstr_t AutoTextEntry::GetValue ( );
__declspec(implementation_key(2069)) void AutoTextEntry::PutValue ( _bstr_t prop );
__declspec(implementation_key(2070)) HRESULT AutoTextEntry::Delete ( );
__declspec(implementation_key(2071)) RangePtr AutoTextEntry::Insert ( struct Range * Where, VARIANT * RichText );
__declspec(implementation_key(2072)) _ApplicationPtr System::GetApplication ( );
__declspec(implementation_key(2073)) long System::GetCreator ( );
__declspec(implementation_key(2074)) IDispatchPtr System::GetParent ( );
__declspec(implementation_key(2075)) _bstr_t System::GetOperatingSystem ( );
__declspec(implementation_key(2076)) _bstr_t System::GetProcessorType ( );
__declspec(implementation_key(2077)) _bstr_t System::GetVersion ( );
__declspec(implementation_key(2078)) long System::GetFreeDiskSpace ( );
__declspec(implementation_key(2079)) enum WdCountry System::GetCountry ( );
__declspec(implementation_key(2080)) _bstr_t System::GetLanguageDesignation ( );
__declspec(implementation_key(2081)) long System::GetHorizontalResolution ( );
__declspec(implementation_key(2082)) long System::GetVerticalResolution ( );
__declspec(implementation_key(2083)) _bstr_t System::GetProfileString ( _bstr_t Section, _bstr_t Key );
__declspec(implementation_key(2084)) void System::PutProfileString ( _bstr_t Section, _bstr_t Key, _bstr_t prop );
__declspec(implementation_key(2085)) _bstr_t System::GetPrivateProfileString ( _bstr_t FileName, _bstr_t Section, _bstr_t Key );
__declspec(implementation_key(2086)) void System::PutPrivateProfileString ( _bstr_t FileName, _bstr_t Section, _bstr_t Key, _bstr_t prop );
__declspec(implementation_key(2087)) VARIANT_BOOL System::GetMathCoprocessorInstalled ( );
__declspec(implementation_key(2088)) _bstr_t System::GetComputerType ( );
__declspec(implementation_key(2089)) _bstr_t System::GetMacintoshName ( );
__declspec(implementation_key(2090)) VARIANT_BOOL System::GetQuickDrawInstalled ( );
__declspec(implementation_key(2091)) enum WdCursorType System::GetCursor ( );
__declspec(implementation_key(2092)) void System::PutCursor ( enum WdCursorType prop );
__declspec(implementation_key(2093)) HRESULT System::MSInfo ( );
__declspec(implementation_key(2094)) HRESULT System::Connect ( _bstr_t Path, VARIANT * Drive, VARIANT * Password );
__declspec(implementation_key(2095)) _ApplicationPtr OLEFormat::GetApplication ( );
__declspec(implementation_key(2096)) long OLEFormat::GetCreator ( );
__declspec(implementation_key(2097)) IDispatchPtr OLEFormat::GetParent ( );
__declspec(implementation_key(2098)) _bstr_t OLEFormat::GetClassType ( );
__declspec(implementation_key(2099)) void OLEFormat::PutClassType ( _bstr_t prop );
__declspec(implementation_key(2100)) VARIANT_BOOL OLEFormat::GetDisplayAsIcon ( );
__declspec(implementation_key(2101)) void OLEFormat::PutDisplayAsIcon ( VARIANT_BOOL prop );
__declspec(implementation_key(2102)) _bstr_t OLEFormat::GetIconName ( );
__declspec(implementation_key(2103)) void OLEFormat::PutIconName ( _bstr_t prop );
__declspec(implementation_key(2104)) _bstr_t OLEFormat::GetIconPath ( );
__declspec(implementation_key(2105)) long OLEFormat::GetIconIndex ( );
__declspec(implementation_key(2106)) void OLEFormat::PutIconIndex ( long prop );
__declspec(implementation_key(2107)) _bstr_t OLEFormat::GetIconLabel ( );
__declspec(implementation_key(2108)) void OLEFormat::PutIconLabel ( _bstr_t prop );
__declspec(implementation_key(2109)) _bstr_t OLEFormat::GetLabel ( );
__declspec(implementation_key(2110)) IDispatchPtr OLEFormat::GetObject ( );
__declspec(implementation_key(2111)) _bstr_t OLEFormat::GetProgID ( );
__declspec(implementation_key(2112)) HRESULT OLEFormat::Activate ( );
__declspec(implementation_key(2113)) HRESULT OLEFormat::Edit ( );
__declspec(implementation_key(2114)) HRESULT OLEFormat::Open ( );
__declspec(implementation_key(2115)) HRESULT OLEFormat::DoVerb ( VARIANT * VerbIndex );
__declspec(implementation_key(2116)) HRESULT OLEFormat::ConvertTo ( VARIANT * ClassType, VARIANT * DisplayAsIcon, VARIANT * IconFileName, VARIANT * IconIndex, VARIANT * IconLabel );
__declspec(implementation_key(2117)) HRESULT OLEFormat::ActivateAs ( _bstr_t ClassType );
__declspec(implementation_key(2118)) _ApplicationPtr LinkFormat::GetApplication ( );
__declspec(implementation_key(2119)) long LinkFormat::GetCreator ( );
__declspec(implementation_key(2120)) IDispatchPtr LinkFormat::GetParent ( );
__declspec(implementation_key(2121)) VARIANT_BOOL LinkFormat::GetAutoUpdate ( );
__declspec(implementation_key(2122)) void LinkFormat::PutAutoUpdate ( VARIANT_BOOL prop );
__declspec(implementation_key(2123)) _bstr_t LinkFormat::GetSourceName ( );
__declspec(implementation_key(2124)) _bstr_t LinkFormat::GetSourcePath ( );
__declspec(implementation_key(2125)) VARIANT_BOOL LinkFormat::GetLocked ( );
__declspec(implementation_key(2126)) void LinkFormat::PutLocked ( VARIANT_BOOL prop );
__declspec(implementation_key(2127)) enum WdLinkType LinkFormat::GetType ( );
__declspec(implementation_key(2128)) _bstr_t LinkFormat::GetSourceFullName ( );
__declspec(implementation_key(2129)) void LinkFormat::PutSourceFullName ( _bstr_t prop );
__declspec(implementation_key(2130)) VARIANT_BOOL LinkFormat::GetSavePictureWithDocument ( );
__declspec(implementation_key(2131)) void LinkFormat::PutSavePictureWithDocument ( VARIANT_BOOL prop );
__declspec(implementation_key(2132)) HRESULT LinkFormat::BreakLink ( );
__declspec(implementation_key(2133)) HRESULT LinkFormat::Update ( );
__declspec(implementation_key(2134)) float _OLEControl::GetLeft ( );
__declspec(implementation_key(2135)) void _OLEControl::PutLeft ( float prop );
__declspec(implementation_key(2136)) float _OLEControl::GetTop ( );
__declspec(implementation_key(2137)) void _OLEControl::PutTop ( float prop );
__declspec(implementation_key(2138)) float _OLEControl::GetHeight ( );
__declspec(implementation_key(2139)) void _OLEControl::PutHeight ( float prop );
__declspec(implementation_key(2140)) float _OLEControl::GetWidth ( );
__declspec(implementation_key(2141)) void _OLEControl::PutWidth ( float prop );
__declspec(implementation_key(2142)) _bstr_t _OLEControl::GetName ( );
__declspec(implementation_key(2143)) void _OLEControl::PutName ( _bstr_t prop );
__declspec(implementation_key(2144)) IDispatchPtr _OLEControl::GetAutomation ( );
__declspec(implementation_key(2145)) HRESULT _OLEControl::Select ( );
__declspec(implementation_key(2146)) HRESULT _OLEControl::Copy ( );
__declspec(implementation_key(2147)) HRESULT _OLEControl::Cut ( );
__declspec(implementation_key(2148)) HRESULT _OLEControl::Delete ( );
__declspec(implementation_key(2149)) HRESULT _OLEControl::Activate ( );
__declspec(implementation_key(2150)) _bstr_t _OLEControl::GetAltHTML ( );
__declspec(implementation_key(2151)) void _OLEControl::PutAltHTML ( _bstr_t prop );
__declspec(implementation_key(2152)) _ApplicationPtr Fields::GetApplication ( );
__declspec(implementation_key(2153)) long Fields::GetCreator ( );
__declspec(implementation_key(2154)) IDispatchPtr Fields::GetParent ( );
__declspec(implementation_key(2155)) long Fields::GetCount ( );
__declspec(implementation_key(2156)) long Fields::GetLocked ( );
__declspec(implementation_key(2157)) void Fields::PutLocked ( long prop );
__declspec(implementation_key(2158)) IUnknownPtr Fields::Get_NewEnum ( );
__declspec(implementation_key(2159)) FieldPtr Fields::Item ( long Index );
__declspec(implementation_key(2160)) HRESULT Fields::ToggleShowCodes ( );
__declspec(implementation_key(2161)) long Fields::Update ( );
__declspec(implementation_key(2162)) HRESULT Fields::Unlink ( );
__declspec(implementation_key(2163)) HRESULT Fields::UpdateSource ( );
__declspec(implementation_key(2164)) FieldPtr Fields::Add ( struct Range * Range, VARIANT * Type, VARIANT * Text, VARIANT * PreserveFormatting );
__declspec(implementation_key(2165)) _ApplicationPtr Field::GetApplication ( );
__declspec(implementation_key(2166)) long Field::GetCreator ( );
__declspec(implementation_key(2167)) IDispatchPtr Field::GetParent ( );
__declspec(implementation_key(2168)) RangePtr Field::GetCode ( );
__declspec(implementation_key(2169)) void Field::PutCode ( struct Range * prop );
__declspec(implementation_key(2170)) enum WdFieldType Field::GetType ( );
__declspec(implementation_key(2171)) VARIANT_BOOL Field::GetLocked ( );
__declspec(implementation_key(2172)) void Field::PutLocked ( VARIANT_BOOL prop );
__declspec(implementation_key(2173)) enum WdFieldKind Field::GetKind ( );
__declspec(implementation_key(2174)) RangePtr Field::GetResult ( );
__declspec(implementation_key(2175)) void Field::PutResult ( struct Range * prop );
__declspec(implementation_key(2176)) _bstr_t Field::GetData ( );
__declspec(implementation_key(2177)) void Field::PutData ( _bstr_t prop );
__declspec(implementation_key(2178)) FieldPtr Field::GetNext ( );
__declspec(implementation_key(2179)) FieldPtr Field::GetPrevious ( );
__declspec(implementation_key(2180)) long Field::GetIndex ( );
__declspec(implementation_key(2181)) VARIANT_BOOL Field::GetShowCodes ( );
__declspec(implementation_key(2182)) void Field::PutShowCodes ( VARIANT_BOOL prop );
__declspec(implementation_key(2183)) LinkFormatPtr Field::GetLinkFormat ( );
__declspec(implementation_key(2184)) OLEFormatPtr Field::GetOLEFormat ( );
__declspec(implementation_key(2185)) InlineShapePtr Field::GetInlineShape ( );
__declspec(implementation_key(2186)) HRESULT Field::Select ( );
__declspec(implementation_key(2187)) VARIANT_BOOL Field::Update ( );
__declspec(implementation_key(2188)) HRESULT Field::Unlink ( );
__declspec(implementation_key(2189)) HRESULT Field::UpdateSource ( );
__declspec(implementation_key(2190)) HRESULT Field::DoClick ( );
__declspec(implementation_key(2191)) HRESULT Field::Copy ( );
__declspec(implementation_key(2192)) HRESULT Field::Cut ( );
__declspec(implementation_key(2193)) HRESULT Field::Delete ( );
__declspec(implementation_key(2194)) _ApplicationPtr Browser::GetApplication ( );
__declspec(implementation_key(2195)) long Browser::GetCreator ( );
__declspec(implementation_key(2196)) IDispatchPtr Browser::GetParent ( );
__declspec(implementation_key(2197)) enum WdBrowseTarget Browser::GetTarget ( );
__declspec(implementation_key(2198)) void Browser::PutTarget ( enum WdBrowseTarget prop );
__declspec(implementation_key(2199)) HRESULT Browser::Next ( );
__declspec(implementation_key(2200)) HRESULT Browser::Previous ( );
__declspec(implementation_key(2201)) _ApplicationPtr Styles::GetApplication ( );
__declspec(implementation_key(2202)) long Styles::GetCreator ( );
__declspec(implementation_key(2203)) IDispatchPtr Styles::GetParent ( );
__declspec(implementation_key(2204)) IUnknownPtr Styles::Get_NewEnum ( );
__declspec(implementation_key(2205)) long Styles::GetCount ( );
__declspec(implementation_key(2206)) StylePtr Styles::Item ( VARIANT * Index );
__declspec(implementation_key(2207)) StylePtr Styles::Add ( _bstr_t Name, VARIANT * Type );
__declspec(implementation_key(2208)) _ApplicationPtr Style::GetApplication ( );
__declspec(implementation_key(2209)) long Style::GetCreator ( );
__declspec(implementation_key(2210)) IDispatchPtr Style::GetParent ( );
__declspec(implementation_key(2211)) _bstr_t Style::GetNameLocal ( );
__declspec(implementation_key(2212)) void Style::PutNameLocal ( _bstr_t prop );
__declspec(implementation_key(2213)) _variant_t Style::GetBaseStyle ( );
__declspec(implementation_key(2214)) void Style::PutBaseStyle ( VARIANT * prop );
__declspec(implementation_key(2215)) _bstr_t Style::GetDescription ( );
__declspec(implementation_key(2216)) enum WdStyleType Style::GetType ( );
__declspec(implementation_key(2217)) VARIANT_BOOL Style::GetBuiltIn ( );
__declspec(implementation_key(2218)) _variant_t Style::GetNextParagraphStyle ( );
__declspec(implementation_key(2219)) void Style::PutNextParagraphStyle ( VARIANT * prop );
__declspec(implementation_key(2220)) VARIANT_BOOL Style::GetInUse ( );
__declspec(implementation_key(2221)) ShadingPtr Style::GetShading ( );
__declspec(implementation_key(2222)) BordersPtr Style::GetBorders ( );
__declspec(implementation_key(2223)) void Style::PutBorders ( struct Borders * prop );
__declspec(implementation_key(2224)) _ParagraphFormatPtr Style::GetParagraphFormat ( );
__declspec(implementation_key(2225)) void Style::PutParagraphFormat ( struct _ParagraphFormat * prop );
__declspec(implementation_key(2226)) _FontPtr Style::GetFont ( );
__declspec(implementation_key(2227)) void Style::PutFont ( struct _Font * prop );
__declspec(implementation_key(2228)) FramePtr Style::GetFrame ( );
__declspec(implementation_key(2229)) enum WdLanguageID Style::GetLanguageID ( );
__declspec(implementation_key(2230)) void Style::PutLanguageID ( enum WdLanguageID prop );
__declspec(implementation_key(2231)) VARIANT_BOOL Style::GetAutomaticallyUpdate ( );
__declspec(implementation_key(2232)) void Style::PutAutomaticallyUpdate ( VARIANT_BOOL prop );
__declspec(implementation_key(2233)) ListTemplatePtr Style::GetListTemplate ( );
__declspec(implementation_key(2234)) long Style::GetListLevelNumber ( );
__declspec(implementation_key(2235)) enum WdLanguageID Style::GetLanguageIDFarEast ( );
__declspec(implementation_key(2236)) void Style::PutLanguageIDFarEast ( enum WdLanguageID prop );
__declspec(implementation_key(2237)) VARIANT_BOOL Style::GetHidden ( );
__declspec(implementation_key(2238)) void Style::PutHidden ( VARIANT_BOOL prop );
__declspec(implementation_key(2239)) HRESULT Style::Delete ( );
__declspec(implementation_key(2240)) HRESULT Style::LinkToListTemplate ( struct ListTemplate * ListTemplate, VARIANT * ListLevelNumber );
__declspec(implementation_key(2241)) long Style::GetNoProofing ( );
__declspec(implementation_key(2242)) void Style::PutNoProofing ( long prop );
__declspec(implementation_key(2243)) _ApplicationPtr Frames::GetApplication ( );
__declspec(implementation_key(2244)) long Frames::GetCreator ( );
__declspec(implementation_key(2245)) IDispatchPtr Frames::GetParent ( );
__declspec(implementation_key(2246)) IUnknownPtr Frames::Get_NewEnum ( );
__declspec(implementation_key(2247)) long Frames::GetCount ( );
__declspec(implementation_key(2248)) FramePtr Frames::Item ( long Index );
__declspec(implementation_key(2249)) FramePtr Frames::Add ( struct Range * Range );
__declspec(implementation_key(2250)) HRESULT Frames::Delete ( );
__declspec(implementation_key(2251)) _ApplicationPtr Frame::GetApplication ( );
__declspec(implementation_key(2252)) long Frame::GetCreator ( );
__declspec(implementation_key(2253)) IDispatchPtr Frame::GetParent ( );
__declspec(implementation_key(2254)) enum WdFrameSizeRule Frame::GetHeightRule ( );
__declspec(implementation_key(2255)) void Frame::PutHeightRule ( enum WdFrameSizeRule prop );
__declspec(implementation_key(2256)) enum WdFrameSizeRule Frame::GetWidthRule ( );
__declspec(implementation_key(2257)) void Frame::PutWidthRule ( enum WdFrameSizeRule prop );
__declspec(implementation_key(2258)) float Frame::GetHorizontalDistanceFromText ( );
__declspec(implementation_key(2259)) void Frame::PutHorizontalDistanceFromText ( float prop );
__declspec(implementation_key(2260)) float Frame::GetHeight ( );
__declspec(implementation_key(2261)) void Frame::PutHeight ( float prop );
__declspec(implementation_key(2262)) float Frame::GetHorizontalPosition ( );
__declspec(implementation_key(2263)) void Frame::PutHorizontalPosition ( float prop );
__declspec(implementation_key(2264)) VARIANT_BOOL Frame::GetLockAnchor ( );
__declspec(implementation_key(2265)) void Frame::PutLockAnchor ( VARIANT_BOOL prop );
__declspec(implementation_key(2266)) enum WdRelativeHorizontalPosition Frame::GetRelativeHorizontalPosition ( );
__declspec(implementation_key(2267)) void Frame::PutRelativeHorizontalPosition ( enum WdRelativeHorizontalPosition prop );
__declspec(implementation_key(2268)) enum WdRelativeVerticalPosition Frame::GetRelativeVerticalPosition ( );
__declspec(implementation_key(2269)) void Frame::PutRelativeVerticalPosition ( enum WdRelativeVerticalPosition prop );
__declspec(implementation_key(2270)) float Frame::GetVerticalDistanceFromText ( );
__declspec(implementation_key(2271)) void Frame::PutVerticalDistanceFromText ( float prop );
__declspec(implementation_key(2272)) float Frame::GetVerticalPosition ( );
__declspec(implementation_key(2273)) void Frame::PutVerticalPosition ( float prop );
__declspec(implementation_key(2274)) float Frame::GetWidth ( );
__declspec(implementation_key(2275)) void Frame::PutWidth ( float prop );
__declspec(implementation_key(2276)) VARIANT_BOOL Frame::GetTextWrap ( );
__declspec(implementation_key(2277)) void Frame::PutTextWrap ( VARIANT_BOOL prop );
__declspec(implementation_key(2278)) ShadingPtr Frame::GetShading ( );
__declspec(implementation_key(2279)) BordersPtr Frame::GetBorders ( );
__declspec(implementation_key(2280)) void Frame::PutBorders ( struct Borders * prop );
__declspec(implementation_key(2281)) RangePtr Frame::GetRange ( );
__declspec(implementation_key(2282)) HRESULT Frame::Delete ( );
__declspec(implementation_key(2283)) HRESULT Frame::Select ( );
__declspec(implementation_key(2284)) HRESULT Frame::Copy ( );
__declspec(implementation_key(2285)) HRESULT Frame::Cut ( );
__declspec(implementation_key(2286)) _ApplicationPtr FormFields::GetApplication ( );
__declspec(implementation_key(2287)) long FormFields::GetCreator ( );
__declspec(implementation_key(2288)) IDispatchPtr FormFields::GetParent ( );
__declspec(implementation_key(2289)) long FormFields::GetCount ( );
__declspec(implementation_key(2290)) VARIANT_BOOL FormFields::GetShaded ( );
__declspec(implementation_key(2291)) void FormFields::PutShaded ( VARIANT_BOOL prop );
__declspec(implementation_key(2292)) IUnknownPtr FormFields::Get_NewEnum ( );
__declspec(implementation_key(2293)) FormFieldPtr FormFields::Item ( VARIANT * Index );
__declspec(implementation_key(2294)) FormFieldPtr FormFields::Add ( struct Range * Range, enum WdFieldType Type );
__declspec(implementation_key(2295)) _ApplicationPtr FormField::GetApplication ( );
__declspec(implementation_key(2296)) long FormField::GetCreator ( );
__declspec(implementation_key(2297)) IDispatchPtr FormField::GetParent ( );
__declspec(implementation_key(2298)) enum WdFieldType FormField::GetType ( );
__declspec(implementation_key(2299)) _bstr_t FormField::GetName ( );
__declspec(implementation_key(2300)) void FormField::PutName ( _bstr_t prop );
__declspec(implementation_key(2301)) _bstr_t FormField::GetEntryMacro ( );
__declspec(implementation_key(2302)) void FormField::PutEntryMacro ( _bstr_t prop );
__declspec(implementation_key(2303)) _bstr_t FormField::GetExitMacro ( );
__declspec(implementation_key(2304)) void FormField::PutExitMacro ( _bstr_t prop );
__declspec(implementation_key(2305)) VARIANT_BOOL FormField::GetOwnHelp ( );
__declspec(implementation_key(2306)) void FormField::PutOwnHelp ( VARIANT_BOOL prop );
__declspec(implementation_key(2307)) VARIANT_BOOL FormField::GetOwnStatus ( );
__declspec(implementation_key(2308)) void FormField::PutOwnStatus ( VARIANT_BOOL prop );
__declspec(implementation_key(2309)) _bstr_t FormField::GetHelpText ( );
__declspec(implementation_key(2310)) void FormField::PutHelpText ( _bstr_t prop );
__declspec(implementation_key(2311)) _bstr_t FormField::GetStatusText ( );
__declspec(implementation_key(2312)) void FormField::PutStatusText ( _bstr_t prop );
__declspec(implementation_key(2313)) VARIANT_BOOL FormField::GetEnabled ( );
__declspec(implementation_key(2314)) void FormField::PutEnabled ( VARIANT_BOOL prop );
__declspec(implementation_key(2315)) _bstr_t FormField::GetResult ( );
__declspec(implementation_key(2316)) void FormField::PutResult ( _bstr_t prop );
__declspec(implementation_key(2317)) TextInputPtr FormField::GetTextInput ( );
__declspec(implementation_key(2318)) CheckBoxPtr FormField::GetCheckBox ( );
__declspec(implementation_key(2319)) DropDownPtr FormField::GetDropDown ( );
__declspec(implementation_key(2320)) FormFieldPtr FormField::GetNext ( );
__declspec(implementation_key(2321)) FormFieldPtr FormField::GetPrevious ( );
__declspec(implementation_key(2322)) VARIANT_BOOL FormField::GetCalculateOnExit ( );
__declspec(implementation_key(2323)) void FormField::PutCalculateOnExit ( VARIANT_BOOL prop );
__declspec(implementation_key(2324)) RangePtr FormField::GetRange ( );
__declspec(implementation_key(2325)) HRESULT FormField::Select ( );
__declspec(implementation_key(2326)) HRESULT FormField::Copy ( );
__declspec(implementation_key(2327)) HRESULT FormField::Cut ( );
__declspec(implementation_key(2328)) HRESULT FormField::Delete ( );
__declspec(implementation_key(2329)) _ApplicationPtr TextInput::GetApplication ( );
__declspec(implementation_key(2330)) long TextInput::GetCreator ( );
__declspec(implementation_key(2331)) IDispatchPtr TextInput::GetParent ( );
__declspec(implementation_key(2332)) VARIANT_BOOL TextInput::GetValid ( );
__declspec(implementation_key(2333)) _bstr_t TextInput::GetDefault ( );
__declspec(implementation_key(2334)) void TextInput::PutDefault ( _bstr_t prop );
__declspec(implementation_key(2335)) enum WdTextFormFieldType TextInput::GetType ( );
__declspec(implementation_key(2336)) _bstr_t TextInput::GetFormat ( );
__declspec(implementation_key(2337)) long TextInput::GetWidth ( );
__declspec(implementation_key(2338)) void TextInput::PutWidth ( long prop );
__declspec(implementation_key(2339)) HRESULT TextInput::Clear ( );
__declspec(implementation_key(2340)) HRESULT TextInput::EditType ( enum WdTextFormFieldType Type, VARIANT * Default, VARIANT * Format, VARIANT * Enabled );
__declspec(implementation_key(2341)) _ApplicationPtr CheckBox::GetApplication ( );
__declspec(implementation_key(2342)) long CheckBox::GetCreator ( );
__declspec(implementation_key(2343)) IDispatchPtr CheckBox::GetParent ( );
__declspec(implementation_key(2344)) VARIANT_BOOL CheckBox::GetValid ( );
__declspec(implementation_key(2345)) VARIANT_BOOL CheckBox::GetAutoSize ( );
__declspec(implementation_key(2346)) void CheckBox::PutAutoSize ( VARIANT_BOOL prop );
__declspec(implementation_key(2347)) float CheckBox::GetSize ( );
__declspec(implementation_key(2348)) void CheckBox::PutSize ( float prop );
__declspec(implementation_key(2349)) VARIANT_BOOL CheckBox::GetDefault ( );
__declspec(implementation_key(2350)) void CheckBox::PutDefault ( VARIANT_BOOL prop );
__declspec(implementation_key(2351)) VARIANT_BOOL CheckBox::GetValue ( );
__declspec(implementation_key(2352)) void CheckBox::PutValue ( VARIANT_BOOL prop );
__declspec(implementation_key(2353)) _ApplicationPtr DropDown::GetApplication ( );
__declspec(implementation_key(2354)) long DropDown::GetCreator ( );
__declspec(implementation_key(2355)) IDispatchPtr DropDown::GetParent ( );
__declspec(implementation_key(2356)) VARIANT_BOOL DropDown::GetValid ( );
__declspec(implementation_key(2357)) long DropDown::GetDefault ( );
__declspec(implementation_key(2358)) void DropDown::PutDefault ( long prop );
__declspec(implementation_key(2359)) long DropDown::GetValue ( );
__declspec(implementation_key(2360)) void DropDown::PutValue ( long prop );
__declspec(implementation_key(2361)) ListEntriesPtr DropDown::GetListEntries ( );
__declspec(implementation_key(2362)) _ApplicationPtr ListEntries::GetApplication ( );
__declspec(implementation_key(2363)) long ListEntries::GetCreator ( );
__declspec(implementation_key(2364)) IDispatchPtr ListEntries::GetParent ( );
__declspec(implementation_key(2365)) IUnknownPtr ListEntries::Get_NewEnum ( );
__declspec(implementation_key(2366)) long ListEntries::GetCount ( );
__declspec(implementation_key(2367)) ListEntryPtr ListEntries::Item ( VARIANT * Index );
__declspec(implementation_key(2368)) ListEntryPtr ListEntries::Add ( _bstr_t Name, VARIANT * Index );
__declspec(implementation_key(2369)) HRESULT ListEntries::Clear ( );
__declspec(implementation_key(2370)) _ApplicationPtr ListEntry::GetApplication ( );
__declspec(implementation_key(2371)) long ListEntry::GetCreator ( );
__declspec(implementation_key(2372)) IDispatchPtr ListEntry::GetParent ( );
__declspec(implementation_key(2373)) long ListEntry::GetIndex ( );
__declspec(implementation_key(2374)) _bstr_t ListEntry::GetName ( );
__declspec(implementation_key(2375)) void ListEntry::PutName ( _bstr_t prop );
__declspec(implementation_key(2376)) HRESULT ListEntry::Delete ( );
__declspec(implementation_key(2377)) _ApplicationPtr TablesOfFigures::GetApplication ( );
__declspec(implementation_key(2378)) long TablesOfFigures::GetCreator ( );
__declspec(implementation_key(2379)) IDispatchPtr TablesOfFigures::GetParent ( );
__declspec(implementation_key(2380)) IUnknownPtr TablesOfFigures::Get_NewEnum ( );
__declspec(implementation_key(2381)) long TablesOfFigures::GetCount ( );
__declspec(implementation_key(2382)) enum WdTofFormat TablesOfFigures::GetFormat ( );
__declspec(implementation_key(2383)) void TablesOfFigures::PutFormat ( enum WdTofFormat prop );
__declspec(implementation_key(2384)) TableOfFiguresPtr TablesOfFigures::Item ( long Index );
__declspec(implementation_key(2385)) TableOfFiguresPtr TablesOfFigures::AddOld ( struct Range * Range, VARIANT * Caption, VARIANT * IncludeLabel, VARIANT * UseHeadingStyles, VARIANT * UpperHeadingLevel, VARIANT * LowerHeadingLevel, VARIANT * UseFields, VARIANT * TableID, VARIANT * RightAlignPageNumbers, VARIANT * IncludePageNumbers, VARIANT * AddedStyles );
__declspec(implementation_key(2386)) FieldPtr TablesOfFigures::MarkEntry ( struct Range * Range, VARIANT * Entry, VARIANT * EntryAutoText, VARIANT * TableID, VARIANT * Level );
__declspec(implementation_key(2387)) TableOfFiguresPtr TablesOfFigures::Add ( struct Range * Range, VARIANT * Caption, VARIANT * IncludeLabel, VARIANT * UseHeadingStyles, VARIANT * UpperHeadingLevel, VARIANT * LowerHeadingLevel, VARIANT * UseFields, VARIANT * TableID, VARIANT * RightAlignPageNumbers, VARIANT * IncludePageNumbers, VARIANT * AddedStyles, VARIANT * UseHyperlinks, VARIANT * HidePageNumbersInWeb );
__declspec(implementation_key(2388)) _ApplicationPtr TableOfFigures::GetApplication ( );
__declspec(implementation_key(2389)) long TableOfFigures::GetCreator ( );
__declspec(implementation_key(2390)) IDispatchPtr TableOfFigures::GetParent ( );
__declspec(implementation_key(2391)) _bstr_t TableOfFigures::GetCaption ( );
__declspec(implementation_key(2392)) void TableOfFigures::PutCaption ( _bstr_t prop );
__declspec(implementation_key(2393)) VARIANT_BOOL TableOfFigures::GetIncludeLabel ( );
__declspec(implementation_key(2394)) void TableOfFigures::PutIncludeLabel ( VARIANT_BOOL prop );
__declspec(implementation_key(2395)) VARIANT_BOOL TableOfFigures::GetRightAlignPageNumbers ( );
__declspec(implementation_key(2396)) void TableOfFigures::PutRightAlignPageNumbers ( VARIANT_BOOL prop );
__declspec(implementation_key(2397)) VARIANT_BOOL TableOfFigures::GetUseHeadingStyles ( );
__declspec(implementation_key(2398)) void TableOfFigures::PutUseHeadingStyles ( VARIANT_BOOL prop );
__declspec(implementation_key(2399)) long TableOfFigures::GetLowerHeadingLevel ( );
__declspec(implementation_key(2400)) void TableOfFigures::PutLowerHeadingLevel ( long prop );
__declspec(implementation_key(2401)) long TableOfFigures::GetUpperHeadingLevel ( );
__declspec(implementation_key(2402)) void TableOfFigures::PutUpperHeadingLevel ( long prop );
__declspec(implementation_key(2403)) VARIANT_BOOL TableOfFigures::GetIncludePageNumbers ( );
__declspec(implementation_key(2404)) void TableOfFigures::PutIncludePageNumbers ( VARIANT_BOOL prop );
__declspec(implementation_key(2405)) RangePtr TableOfFigures::GetRange ( );
__declspec(implementation_key(2406)) VARIANT_BOOL TableOfFigures::GetUseFields ( );
__declspec(implementation_key(2407)) void TableOfFigures::PutUseFields ( VARIANT_BOOL prop );
__declspec(implementation_key(2408)) _bstr_t TableOfFigures::GetTableID ( );
__declspec(implementation_key(2409)) void TableOfFigures::PutTableID ( _bstr_t prop );
__declspec(implementation_key(2410)) HeadingStylesPtr TableOfFigures::GetHeadingStyles ( );
__declspec(implementation_key(2411)) enum WdTabLeader TableOfFigures::GetTabLeader ( );
__declspec(implementation_key(2412)) void TableOfFigures::PutTabLeader ( enum WdTabLeader prop );
__declspec(implementation_key(2413)) HRESULT TableOfFigures::Delete ( );
__declspec(implementation_key(2414)) HRESULT TableOfFigures::UpdatePageNumbers ( );
__declspec(implementation_key(2415)) HRESULT TableOfFigures::Update ( );
__declspec(implementation_key(2416)) VARIANT_BOOL TableOfFigures::GetUseHyperlinks ( );
__declspec(implementation_key(2417)) void TableOfFigures::PutUseHyperlinks ( VARIANT_BOOL prop );
__declspec(implementation_key(2418)) VARIANT_BOOL TableOfFigures::GetHidePageNumbersInWeb ( );
__declspec(implementation_key(2419)) void TableOfFigures::PutHidePageNumbersInWeb ( VARIANT_BOOL prop );
__declspec(implementation_key(2420)) _ApplicationPtr MailMerge::GetApplication ( );
__declspec(implementation_key(2421)) long MailMerge::GetCreator ( );
__declspec(implementation_key(2422)) IDispatchPtr MailMerge::GetParent ( );
__declspec(implementation_key(2423)) enum WdMailMergeMainDocType MailMerge::GetMainDocumentType ( );
__declspec(implementation_key(2424)) void MailMerge::PutMainDocumentType ( enum WdMailMergeMainDocType prop );
__declspec(implementation_key(2425)) enum WdMailMergeState MailMerge::GetState ( );
__declspec(implementation_key(2426)) enum WdMailMergeDestination MailMerge::GetDestination ( );
__declspec(implementation_key(2427)) void MailMerge::PutDestination ( enum WdMailMergeDestination prop );
__declspec(implementation_key(2428)) MailMergeDataSourcePtr MailMerge::GetDataSource ( );
__declspec(implementation_key(2429)) MailMergeFieldsPtr MailMerge::GetFields ( );
__declspec(implementation_key(2430)) long MailMerge::GetViewMailMergeFieldCodes ( );
__declspec(implementation_key(2431)) void MailMerge::PutViewMailMergeFieldCodes ( long prop );
__declspec(implementation_key(2432)) VARIANT_BOOL MailMerge::GetSuppressBlankLines ( );
__declspec(implementation_key(2433)) void MailMerge::PutSuppressBlankLines ( VARIANT_BOOL prop );
__declspec(implementation_key(2434)) VARIANT_BOOL MailMerge::GetMailAsAttachment ( );
__declspec(implementation_key(2435)) void MailMerge::PutMailAsAttachment ( VARIANT_BOOL prop );
__declspec(implementation_key(2436)) _bstr_t MailMerge::GetMailAddressFieldName ( );
__declspec(implementation_key(2437)) void MailMerge::PutMailAddressFieldName ( _bstr_t prop );
__declspec(implementation_key(2438)) _bstr_t MailMerge::GetMailSubject ( );
__declspec(implementation_key(2439)) void MailMerge::PutMailSubject ( _bstr_t prop );
__declspec(implementation_key(2440)) HRESULT MailMerge::CreateDataSource ( VARIANT * Name, VARIANT * PasswordDocument, VARIANT * WritePasswordDocument, VARIANT * HeaderRecord, VARIANT * MSQuery, VARIANT * SQLStatement, VARIANT * SQLStatement1, VARIANT * Connection, VARIANT * LinkToSource );
__declspec(implementation_key(2441)) HRESULT MailMerge::CreateHeaderSource ( _bstr_t Name, VARIANT * PasswordDocument, VARIANT * WritePasswordDocument, VARIANT * HeaderRecord );
__declspec(implementation_key(2442)) HRESULT MailMerge::OpenDataSource ( _bstr_t Name, VARIANT * Format, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * LinkToSource, VARIANT * AddToRecentFiles, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate, VARIANT * Connection, VARIANT * SQLStatement, VARIANT * SQLStatement1 );
__declspec(implementation_key(2443)) HRESULT MailMerge::OpenHeaderSource ( _bstr_t Name, VARIANT * Format, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * AddToRecentFiles, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate );
__declspec(implementation_key(2444)) HRESULT MailMerge::Execute ( VARIANT * Pause );
__declspec(implementation_key(2445)) HRESULT MailMerge::Check ( );
__declspec(implementation_key(2446)) HRESULT MailMerge::EditDataSource ( );
__declspec(implementation_key(2447)) HRESULT MailMerge::EditHeaderSource ( );
__declspec(implementation_key(2448)) HRESULT MailMerge::EditMainDocument ( );
__declspec(implementation_key(2449)) HRESULT MailMerge::UseAddressBook ( _bstr_t Type );
__declspec(implementation_key(2450)) _ApplicationPtr MailMergeFields::GetApplication ( );
__declspec(implementation_key(2451)) long MailMergeFields::GetCreator ( );
__declspec(implementation_key(2452)) IDispatchPtr MailMergeFields::GetParent ( );
__declspec(implementation_key(2453)) IUnknownPtr MailMergeFields::Get_NewEnum ( );
__declspec(implementation_key(2454)) long MailMergeFields::GetCount ( );
__declspec(implementation_key(2455)) MailMergeFieldPtr MailMergeFields::Item ( long Index );
__declspec(implementation_key(2456)) MailMergeFieldPtr MailMergeFields::Add ( struct Range * Range, _bstr_t Name );
__declspec(implementation_key(2457)) MailMergeFieldPtr MailMergeFields::AddAsk ( struct Range * Range, _bstr_t Name, VARIANT * Prompt, VARIANT * DefaultAskText, VARIANT * AskOnce );
__declspec(implementation_key(2458)) MailMergeFieldPtr MailMergeFields::AddFillIn ( struct Range * Range, VARIANT * Prompt, VARIANT * DefaultFillInText, VARIANT * AskOnce );
__declspec(implementation_key(2459)) MailMergeFieldPtr MailMergeFields::AddIf ( struct Range * Range, _bstr_t MergeField, enum WdMailMergeComparison Comparison, VARIANT * CompareTo, VARIANT * TrueAutoText, VARIANT * TrueText, VARIANT * FalseAutoText, VARIANT * FalseText );
__declspec(implementation_key(2460)) MailMergeFieldPtr MailMergeFields::AddMergeRec ( struct Range * Range );
__declspec(implementation_key(2461)) MailMergeFieldPtr MailMergeFields::AddMergeSeq ( struct Range * Range );
__declspec(implementation_key(2462)) MailMergeFieldPtr MailMergeFields::AddNext ( struct Range * Range );
__declspec(implementation_key(2463)) MailMergeFieldPtr MailMergeFields::AddNextIf ( struct Range * Range, _bstr_t MergeField, enum WdMailMergeComparison Comparison, VARIANT * CompareTo );
__declspec(implementation_key(2464)) MailMergeFieldPtr MailMergeFields::AddSet ( struct Range * Range, _bstr_t Name, VARIANT * ValueText, VARIANT * ValueAutoText );
__declspec(implementation_key(2465)) MailMergeFieldPtr MailMergeFields::AddSkipIf ( struct Range * Range, _bstr_t MergeField, enum WdMailMergeComparison Comparison, VARIANT * CompareTo );
__declspec(implementation_key(2466)) _ApplicationPtr MailMergeField::GetApplication ( );
__declspec(implementation_key(2467)) long MailMergeField::GetCreator ( );
__declspec(implementation_key(2468)) IDispatchPtr MailMergeField::GetParent ( );
__declspec(implementation_key(2469)) enum WdFieldType MailMergeField::GetType ( );
__declspec(implementation_key(2470)) VARIANT_BOOL MailMergeField::GetLocked ( );
__declspec(implementation_key(2471)) void MailMergeField::PutLocked ( VARIANT_BOOL prop );
__declspec(implementation_key(2472)) RangePtr MailMergeField::GetCode ( );
__declspec(implementation_key(2473)) void MailMergeField::PutCode ( struct Range * prop );
__declspec(implementation_key(2474)) MailMergeFieldPtr MailMergeField::GetNext ( );
__declspec(implementation_key(2475)) MailMergeFieldPtr MailMergeField::GetPrevious ( );
__declspec(implementation_key(2476)) HRESULT MailMergeField::Select ( );
__declspec(implementation_key(2477)) HRESULT MailMergeField::Copy ( );
__declspec(implementation_key(2478)) HRESULT MailMergeField::Cut ( );
__declspec(implementation_key(2479)) HRESULT MailMergeField::Delete ( );
__declspec(implementation_key(2480)) _ApplicationPtr MailMergeDataSource::GetApplication ( );
__declspec(implementation_key(2481)) long MailMergeDataSource::GetCreator ( );
__declspec(implementation_key(2482)) IDispatchPtr MailMergeDataSource::GetParent ( );
__declspec(implementation_key(2483)) _bstr_t MailMergeDataSource::GetName ( );
__declspec(implementation_key(2484)) _bstr_t MailMergeDataSource::GetHeaderSourceName ( );
__declspec(implementation_key(2485)) enum WdMailMergeDataSource MailMergeDataSource::GetType ( );
__declspec(implementation_key(2486)) enum WdMailMergeDataSource MailMergeDataSource::GetHeaderSourceType ( );
__declspec(implementation_key(2487)) _bstr_t MailMergeDataSource::GetConnectString ( );
__declspec(implementation_key(2488)) _bstr_t MailMergeDataSource::GetQueryString ( );
__declspec(implementation_key(2489)) void MailMergeDataSource::PutQueryString ( _bstr_t prop );
__declspec(implementation_key(2490)) enum WdMailMergeActiveRecord MailMergeDataSource::GetActiveRecord ( );
__declspec(implementation_key(2491)) void MailMergeDataSource::PutActiveRecord ( enum WdMailMergeActiveRecord prop );
__declspec(implementation_key(2492)) long MailMergeDataSource::GetFirstRecord ( );
__declspec(implementation_key(2493)) void MailMergeDataSource::PutFirstRecord ( long prop );
__declspec(implementation_key(2494)) long MailMergeDataSource::GetLastRecord ( );
__declspec(implementation_key(2495)) void MailMergeDataSource::PutLastRecord ( long prop );
__declspec(implementation_key(2496)) MailMergeFieldNamesPtr MailMergeDataSource::GetFieldNames ( );
__declspec(implementation_key(2497)) MailMergeDataFieldsPtr MailMergeDataSource::GetDataFields ( );
__declspec(implementation_key(2498)) VARIANT_BOOL MailMergeDataSource::FindRecord ( _bstr_t FindText, _bstr_t Field );
__declspec(implementation_key(2499)) _ApplicationPtr MailMergeFieldNames::GetApplication ( );
__declspec(implementation_key(2500)) long MailMergeFieldNames::GetCreator ( );
__declspec(implementation_key(2501)) IDispatchPtr MailMergeFieldNames::GetParent ( );
__declspec(implementation_key(2502)) IUnknownPtr MailMergeFieldNames::Get_NewEnum ( );
__declspec(implementation_key(2503)) long MailMergeFieldNames::GetCount ( );
__declspec(implementation_key(2504)) MailMergeFieldNamePtr MailMergeFieldNames::Item ( VARIANT * Index );
__declspec(implementation_key(2505)) _ApplicationPtr MailMergeFieldName::GetApplication ( );
__declspec(implementation_key(2506)) long MailMergeFieldName::GetCreator ( );
__declspec(implementation_key(2507)) IDispatchPtr MailMergeFieldName::GetParent ( );
__declspec(implementation_key(2508)) _bstr_t MailMergeFieldName::GetName ( );
__declspec(implementation_key(2509)) long MailMergeFieldName::GetIndex ( );
__declspec(implementation_key(2510)) _ApplicationPtr MailMergeDataFields::GetApplication ( );
__declspec(implementation_key(2511)) long MailMergeDataFields::GetCreator ( );
__declspec(implementation_key(2512)) IDispatchPtr MailMergeDataFields::GetParent ( );
__declspec(implementation_key(2513)) IUnknownPtr MailMergeDataFields::Get_NewEnum ( );
__declspec(implementation_key(2514)) long MailMergeDataFields::GetCount ( );
__declspec(implementation_key(2515)) MailMergeDataFieldPtr MailMergeDataFields::Item ( VARIANT * Index );
__declspec(implementation_key(2516)) _ApplicationPtr MailMergeDataField::GetApplication ( );
__declspec(implementation_key(2517)) long MailMergeDataField::GetCreator ( );
__declspec(implementation_key(2518)) IDispatchPtr MailMergeDataField::GetParent ( );
__declspec(implementation_key(2519)) _bstr_t MailMergeDataField::GetValue ( );
__declspec(implementation_key(2520)) _bstr_t MailMergeDataField::GetName ( );
__declspec(implementation_key(2521)) long MailMergeDataField::GetIndex ( );
__declspec(implementation_key(2522)) _ApplicationPtr Envelope::GetApplication ( );
__declspec(implementation_key(2523)) long Envelope::GetCreator ( );
__declspec(implementation_key(2524)) IDispatchPtr Envelope::GetParent ( );
__declspec(implementation_key(2525)) RangePtr Envelope::GetAddress ( );
__declspec(implementation_key(2526)) RangePtr Envelope::GetReturnAddress ( );
__declspec(implementation_key(2527)) VARIANT_BOOL Envelope::GetDefaultPrintBarCode ( );
__declspec(implementation_key(2528)) void Envelope::PutDefaultPrintBarCode ( VARIANT_BOOL prop );
__declspec(implementation_key(2529)) VARIANT_BOOL Envelope::GetDefaultPrintFIMA ( );
__declspec(implementation_key(2530)) void Envelope::PutDefaultPrintFIMA ( VARIANT_BOOL prop );
__declspec(implementation_key(2531)) float Envelope::GetDefaultHeight ( );
__declspec(implementation_key(2532)) void Envelope::PutDefaultHeight ( float prop );
__declspec(implementation_key(2533)) float Envelope::GetDefaultWidth ( );
__declspec(implementation_key(2534)) void Envelope::PutDefaultWidth ( float prop );
__declspec(implementation_key(2535)) _bstr_t Envelope::GetDefaultSize ( );
__declspec(implementation_key(2536)) void Envelope::PutDefaultSize ( _bstr_t prop );
__declspec(implementation_key(2537)) VARIANT_BOOL Envelope::GetDefaultOmitReturnAddress ( );
__declspec(implementation_key(2538)) void Envelope::PutDefaultOmitReturnAddress ( VARIANT_BOOL prop );
__declspec(implementation_key(2539)) enum WdPaperTray Envelope::GetFeedSource ( );
__declspec(implementation_key(2540)) void Envelope::PutFeedSource ( enum WdPaperTray prop );
__declspec(implementation_key(2541)) float Envelope::GetAddressFromLeft ( );
__declspec(implementation_key(2542)) void Envelope::PutAddressFromLeft ( float prop );
__declspec(implementation_key(2543)) float Envelope::GetAddressFromTop ( );
__declspec(implementation_key(2544)) void Envelope::PutAddressFromTop ( float prop );
__declspec(implementation_key(2545)) float Envelope::GetReturnAddressFromLeft ( );
__declspec(implementation_key(2546)) void Envelope::PutReturnAddressFromLeft ( float prop );
__declspec(implementation_key(2547)) float Envelope::GetReturnAddressFromTop ( );
__declspec(implementation_key(2548)) void Envelope::PutReturnAddressFromTop ( float prop );
__declspec(implementation_key(2549)) StylePtr Envelope::GetAddressStyle ( );
__declspec(implementation_key(2550)) StylePtr Envelope::GetReturnAddressStyle ( );
__declspec(implementation_key(2551)) enum WdEnvelopeOrientation Envelope::GetDefaultOrientation ( );
__declspec(implementation_key(2552)) void Envelope::PutDefaultOrientation ( enum WdEnvelopeOrientation prop );
__declspec(implementation_key(2553)) VARIANT_BOOL Envelope::GetDefaultFaceUp ( );
__declspec(implementation_key(2554)) void Envelope::PutDefaultFaceUp ( VARIANT_BOOL prop );
__declspec(implementation_key(2555)) HRESULT Envelope::Insert ( VARIANT * ExtractAddress, VARIANT * Address, VARIANT * AutoText, VARIANT * OmitReturnAddress, VARIANT * ReturnAddress, VARIANT * ReturnAutoText, VARIANT * PrintBarCode, VARIANT * PrintFIMA, VARIANT * Size, VARIANT * Height, VARIANT * Width, VARIANT * FeedSource, VARIANT * AddressFromLeft, VARIANT * AddressFromTop, VARIANT * ReturnAddressFromLeft, VARIANT * ReturnAddressFromTop, VARIANT * DefaultFaceUp, VARIANT * DefaultOrientation );
__declspec(implementation_key(2556)) HRESULT Envelope::PrintOut ( VARIANT * ExtractAddress, VARIANT * Address, VARIANT * AutoText, VARIANT * OmitReturnAddress, VARIANT * ReturnAddress, VARIANT * ReturnAutoText, VARIANT * PrintBarCode, VARIANT * PrintFIMA, VARIANT * Size, VARIANT * Height, VARIANT * Width, VARIANT * FeedSource, VARIANT * AddressFromLeft, VARIANT * AddressFromTop, VARIANT * ReturnAddressFromLeft, VARIANT * ReturnAddressFromTop, VARIANT * DefaultFaceUp, VARIANT * DefaultOrientation );
__declspec(implementation_key(2557)) HRESULT Envelope::UpdateDocument ( );
__declspec(implementation_key(2558)) _ApplicationPtr MailingLabel::GetApplication ( );
__declspec(implementation_key(2559)) long MailingLabel::GetCreator ( );
__declspec(implementation_key(2560)) IDispatchPtr MailingLabel::GetParent ( );
__declspec(implementation_key(2561)) VARIANT_BOOL MailingLabel::GetDefaultPrintBarCode ( );
__declspec(implementation_key(2562)) void MailingLabel::PutDefaultPrintBarCode ( VARIANT_BOOL prop );
__declspec(implementation_key(2563)) enum WdPaperTray MailingLabel::GetDefaultLaserTray ( );
__declspec(implementation_key(2564)) void MailingLabel::PutDefaultLaserTray ( enum WdPaperTray prop );
__declspec(implementation_key(2565)) CustomLabelsPtr MailingLabel::GetCustomLabels ( );
__declspec(implementation_key(2566)) _bstr_t MailingLabel::GetDefaultLabelName ( );
__declspec(implementation_key(2567)) void MailingLabel::PutDefaultLabelName ( _bstr_t prop );
__declspec(implementation_key(2568)) _DocumentPtr MailingLabel::CreateNewDocument ( VARIANT * Name, VARIANT * Address, VARIANT * AutoText, VARIANT * ExtractAddress, VARIANT * LaserTray );
__declspec(implementation_key(2569)) HRESULT MailingLabel::PrintOut ( VARIANT * Name, VARIANT * Address, VARIANT * ExtractAddress, VARIANT * LaserTray, VARIANT * SingleLabel, VARIANT * Row, VARIANT * Column );
__declspec(implementation_key(2570)) _ApplicationPtr CustomLabels::GetApplication ( );
__declspec(implementation_key(2571)) long CustomLabels::GetCreator ( );
__declspec(implementation_key(2572)) IDispatchPtr CustomLabels::GetParent ( );
__declspec(implementation_key(2573)) IUnknownPtr CustomLabels::Get_NewEnum ( );
__declspec(implementation_key(2574)) long CustomLabels::GetCount ( );
__declspec(implementation_key(2575)) CustomLabelPtr CustomLabels::Item ( VARIANT * Index );
__declspec(implementation_key(2576)) CustomLabelPtr CustomLabels::Add ( _bstr_t Name, VARIANT * DotMatrix );
__declspec(implementation_key(2577)) _ApplicationPtr CustomLabel::GetApplication ( );
__declspec(implementation_key(2578)) long CustomLabel::GetCreator ( );
__declspec(implementation_key(2579)) IDispatchPtr CustomLabel::GetParent ( );
__declspec(implementation_key(2580)) long CustomLabel::GetIndex ( );
__declspec(implementation_key(2581)) _bstr_t CustomLabel::GetName ( );
__declspec(implementation_key(2582)) void CustomLabel::PutName ( _bstr_t prop );
__declspec(implementation_key(2583)) float CustomLabel::GetTopMargin ( );
__declspec(implementation_key(2584)) void CustomLabel::PutTopMargin ( float prop );
__declspec(implementation_key(2585)) float CustomLabel::GetSideMargin ( );
__declspec(implementation_key(2586)) void CustomLabel::PutSideMargin ( float prop );
__declspec(implementation_key(2587)) float CustomLabel::GetHeight ( );
__declspec(implementation_key(2588)) void CustomLabel::PutHeight ( float prop );
__declspec(implementation_key(2589)) float CustomLabel::GetWidth ( );
__declspec(implementation_key(2590)) void CustomLabel::PutWidth ( float prop );
__declspec(implementation_key(2591)) float CustomLabel::GetVerticalPitch ( );
__declspec(implementation_key(2592)) void CustomLabel::PutVerticalPitch ( float prop );
__declspec(implementation_key(2593)) float CustomLabel::GetHorizontalPitch ( );
__declspec(implementation_key(2594)) void CustomLabel::PutHorizontalPitch ( float prop );
__declspec(implementation_key(2595)) long CustomLabel::GetNumberAcross ( );
__declspec(implementation_key(2596)) void CustomLabel::PutNumberAcross ( long prop );
__declspec(implementation_key(2597)) long CustomLabel::GetNumberDown ( );
__declspec(implementation_key(2598)) void CustomLabel::PutNumberDown ( long prop );
__declspec(implementation_key(2599)) VARIANT_BOOL CustomLabel::GetDotMatrix ( );
__declspec(implementation_key(2600)) enum WdCustomLabelPageSize CustomLabel::GetPageSize ( );
__declspec(implementation_key(2601)) void CustomLabel::PutPageSize ( enum WdCustomLabelPageSize prop );
__declspec(implementation_key(2602)) VARIANT_BOOL CustomLabel::GetValid ( );
__declspec(implementation_key(2603)) HRESULT CustomLabel::Delete ( );
__declspec(implementation_key(2604)) _ApplicationPtr TablesOfContents::GetApplication ( );
__declspec(implementation_key(2605)) long TablesOfContents::GetCreator ( );
__declspec(implementation_key(2606)) IDispatchPtr TablesOfContents::GetParent ( );
__declspec(implementation_key(2607)) IUnknownPtr TablesOfContents::Get_NewEnum ( );
__declspec(implementation_key(2608)) long TablesOfContents::GetCount ( );
__declspec(implementation_key(2609)) enum WdTocFormat TablesOfContents::GetFormat ( );
__declspec(implementation_key(2610)) void TablesOfContents::PutFormat ( enum WdTocFormat prop );
__declspec(implementation_key(2611)) TableOfContentsPtr TablesOfContents::Item ( long Index );
__declspec(implementation_key(2612)) TableOfContentsPtr TablesOfContents::AddOld ( struct Range * Range, VARIANT * UseHeadingStyles, VARIANT * UpperHeadingLevel, VARIANT * LowerHeadingLevel, VARIANT * UseFields, VARIANT * TableID, VARIANT * RightAlignPageNumbers, VARIANT * IncludePageNumbers, VARIANT * AddedStyles );
__declspec(implementation_key(2613)) FieldPtr TablesOfContents::MarkEntry ( struct Range * Range, VARIANT * Entry, VARIANT * EntryAutoText, VARIANT * TableID, VARIANT * Level );
__declspec(implementation_key(2614)) TableOfContentsPtr TablesOfContents::Add ( struct Range * Range, VARIANT * UseHeadingStyles, VARIANT * UpperHeadingLevel, VARIANT * LowerHeadingLevel, VARIANT * UseFields, VARIANT * TableID, VARIANT * RightAlignPageNumbers, VARIANT * IncludePageNumbers, VARIANT * AddedStyles, VARIANT * UseHyperlinks, VARIANT * HidePageNumbersInWeb );
__declspec(implementation_key(2615)) _ApplicationPtr TableOfContents::GetApplication ( );
__declspec(implementation_key(2616)) long TableOfContents::GetCreator ( );
__declspec(implementation_key(2617)) IDispatchPtr TableOfContents::GetParent ( );
__declspec(implementation_key(2618)) VARIANT_BOOL TableOfContents::GetUseHeadingStyles ( );
__declspec(implementation_key(2619)) void TableOfContents::PutUseHeadingStyles ( VARIANT_BOOL prop );
__declspec(implementation_key(2620)) VARIANT_BOOL TableOfContents::GetUseFields ( );
__declspec(implementation_key(2621)) void TableOfContents::PutUseFields ( VARIANT_BOOL prop );
__declspec(implementation_key(2622)) long TableOfContents::GetUpperHeadingLevel ( );
__declspec(implementation_key(2623)) void TableOfContents::PutUpperHeadingLevel ( long prop );
__declspec(implementation_key(2624)) long TableOfContents::GetLowerHeadingLevel ( );
__declspec(implementation_key(2625)) void TableOfContents::PutLowerHeadingLevel ( long prop );
__declspec(implementation_key(2626)) _bstr_t TableOfContents::GetTableID ( );
__declspec(implementation_key(2627)) void TableOfContents::PutTableID ( _bstr_t prop );
__declspec(implementation_key(2628)) HeadingStylesPtr TableOfContents::GetHeadingStyles ( );
__declspec(implementation_key(2629)) VARIANT_BOOL TableOfContents::GetRightAlignPageNumbers ( );
__declspec(implementation_key(2630)) void TableOfContents::PutRightAlignPageNumbers ( VARIANT_BOOL prop );
__declspec(implementation_key(2631)) VARIANT_BOOL TableOfContents::GetIncludePageNumbers ( );
__declspec(implementation_key(2632)) void TableOfContents::PutIncludePageNumbers ( VARIANT_BOOL prop );
__declspec(implementation_key(2633)) RangePtr TableOfContents::GetRange ( );
__declspec(implementation_key(2634)) enum WdTabLeader TableOfContents::GetTabLeader ( );
__declspec(implementation_key(2635)) void TableOfContents::PutTabLeader ( enum WdTabLeader prop );
__declspec(implementation_key(2636)) HRESULT TableOfContents::Delete ( );
__declspec(implementation_key(2637)) HRESULT TableOfContents::UpdatePageNumbers ( );
__declspec(implementation_key(2638)) HRESULT TableOfContents::Update ( );
__declspec(implementation_key(2639)) VARIANT_BOOL TableOfContents::GetUseHyperlinks ( );
__declspec(implementation_key(2640)) void TableOfContents::PutUseHyperlinks ( VARIANT_BOOL prop );
__declspec(implementation_key(2641)) VARIANT_BOOL TableOfContents::GetHidePageNumbersInWeb ( );
__declspec(implementation_key(2642)) void TableOfContents::PutHidePageNumbersInWeb ( VARIANT_BOOL prop );
__declspec(implementation_key(2643)) _ApplicationPtr TablesOfAuthorities::GetApplication ( );
__declspec(implementation_key(2644)) long TablesOfAuthorities::GetCreator ( );
__declspec(implementation_key(2645)) IDispatchPtr TablesOfAuthorities::GetParent ( );
__declspec(implementation_key(2646)) IUnknownPtr TablesOfAuthorities::Get_NewEnum ( );
__declspec(implementation_key(2647)) long TablesOfAuthorities::GetCount ( );
__declspec(implementation_key(2648)) enum WdToaFormat TablesOfAuthorities::GetFormat ( );
__declspec(implementation_key(2649)) void TablesOfAuthorities::PutFormat ( enum WdToaFormat prop );
__declspec(implementation_key(2650)) TableOfAuthoritiesPtr TablesOfAuthorities::Item ( long Index );
__declspec(implementation_key(2651)) TableOfAuthoritiesPtr TablesOfAuthorities::Add ( struct Range * Range, VARIANT * Category, VARIANT * Bookmark, VARIANT * Passim, VARIANT * KeepEntryFormatting, VARIANT * Separator, VARIANT * IncludeSequenceName, VARIANT * EntrySeparator, VARIANT * PageRangeSeparator, VARIANT * IncludeCategoryHeader, VARIANT * PageNumberSeparator );
__declspec(implementation_key(2652)) HRESULT TablesOfAuthorities::NextCitation ( _bstr_t ShortCitation );
__declspec(implementation_key(2653)) FieldPtr TablesOfAuthorities::MarkCitation ( struct Range * Range, _bstr_t ShortCitation, VARIANT * LongCitation, VARIANT * LongCitationAutoText, VARIANT * Category );
__declspec(implementation_key(2654)) HRESULT TablesOfAuthorities::MarkAllCitations ( _bstr_t ShortCitation, VARIANT * LongCitation, VARIANT * LongCitationAutoText, VARIANT * Category );
__declspec(implementation_key(2655)) _ApplicationPtr TableOfAuthorities::GetApplication ( );
__declspec(implementation_key(2656)) long TableOfAuthorities::GetCreator ( );
__declspec(implementation_key(2657)) IDispatchPtr TableOfAuthorities::GetParent ( );
__declspec(implementation_key(2658)) VARIANT_BOOL TableOfAuthorities::GetPassim ( );
__declspec(implementation_key(2659)) void TableOfAuthorities::PutPassim ( VARIANT_BOOL prop );
__declspec(implementation_key(2660)) VARIANT_BOOL TableOfAuthorities::GetKeepEntryFormatting ( );
__declspec(implementation_key(2661)) void TableOfAuthorities::PutKeepEntryFormatting ( VARIANT_BOOL prop );
__declspec(implementation_key(2662)) long TableOfAuthorities::GetCategory ( );
__declspec(implementation_key(2663)) void TableOfAuthorities::PutCategory ( long prop );
__declspec(implementation_key(2664)) _bstr_t TableOfAuthorities::GetBookmark ( );
__declspec(implementation_key(2665)) void TableOfAuthorities::PutBookmark ( _bstr_t prop );
__declspec(implementation_key(2666)) _bstr_t TableOfAuthorities::GetSeparator ( );
__declspec(implementation_key(2667)) void TableOfAuthorities::PutSeparator ( _bstr_t prop );
__declspec(implementation_key(2668)) _bstr_t TableOfAuthorities::GetIncludeSequenceName ( );
__declspec(implementation_key(2669)) void TableOfAuthorities::PutIncludeSequenceName ( _bstr_t prop );
__declspec(implementation_key(2670)) _bstr_t TableOfAuthorities::GetEntrySeparator ( );
__declspec(implementation_key(2671)) void TableOfAuthorities::PutEntrySeparator ( _bstr_t prop );
__declspec(implementation_key(2672)) _bstr_t TableOfAuthorities::GetPageRangeSeparator ( );
__declspec(implementation_key(2673)) void TableOfAuthorities::PutPageRangeSeparator ( _bstr_t prop );
__declspec(implementation_key(2674)) VARIANT_BOOL TableOfAuthorities::GetIncludeCategoryHeader ( );
__declspec(implementation_key(2675)) void TableOfAuthorities::PutIncludeCategoryHeader ( VARIANT_BOOL prop );
__declspec(implementation_key(2676)) _bstr_t TableOfAuthorities::GetPageNumberSeparator ( );
__declspec(implementation_key(2677)) void TableOfAuthorities::PutPageNumberSeparator ( _bstr_t prop );
__declspec(implementation_key(2678)) RangePtr TableOfAuthorities::GetRange ( );
__declspec(implementation_key(2679)) enum WdTabLeader TableOfAuthorities::GetTabLeader ( );
__declspec(implementation_key(2680)) void TableOfAuthorities::PutTabLeader ( enum WdTabLeader prop );
__declspec(implementation_key(2681)) HRESULT TableOfAuthorities::Delete ( );
__declspec(implementation_key(2682)) HRESULT TableOfAuthorities::Update ( );
__declspec(implementation_key(2683)) _ApplicationPtr Dialogs::GetApplication ( );
__declspec(implementation_key(2684)) long Dialogs::GetCreator ( );
__declspec(implementation_key(2685)) IDispatchPtr Dialogs::GetParent ( );
__declspec(implementation_key(2686)) IUnknownPtr Dialogs::Get_NewEnum ( );
__declspec(implementation_key(2687)) long Dialogs::GetCount ( );
__declspec(implementation_key(2688)) DialogPtr Dialogs::Item ( enum WdWordDialog Index );
__declspec(implementation_key(2689)) _ApplicationPtr Dialog::GetApplication ( );
__declspec(implementation_key(2690)) long Dialog::GetCreator ( );
__declspec(implementation_key(2691)) IDispatchPtr Dialog::GetParent ( );
__declspec(implementation_key(2692)) enum WdWordDialogTab Dialog::GetDefaultTab ( );
__declspec(implementation_key(2693)) void Dialog::PutDefaultTab ( enum WdWordDialogTab prop );
__declspec(implementation_key(2694)) enum WdWordDialog Dialog::GetType ( );
__declspec(implementation_key(2695)) long Dialog::Show ( VARIANT * TimeOut );
__declspec(implementation_key(2696)) long Dialog::Display ( VARIANT * TimeOut );
__declspec(implementation_key(2697)) HRESULT Dialog::Execute ( );
__declspec(implementation_key(2698)) HRESULT Dialog::Update ( );
__declspec(implementation_key(2699)) _bstr_t Dialog::GetCommandName ( );
__declspec(implementation_key(2700)) _ApplicationPtr PageSetup::GetApplication ( );
__declspec(implementation_key(2701)) long PageSetup::GetCreator ( );
__declspec(implementation_key(2702)) IDispatchPtr PageSetup::GetParent ( );
__declspec(implementation_key(2703)) float PageSetup::GetTopMargin ( );
__declspec(implementation_key(2704)) void PageSetup::PutTopMargin ( float prop );
__declspec(implementation_key(2705)) float PageSetup::GetBottomMargin ( );
__declspec(implementation_key(2706)) void PageSetup::PutBottomMargin ( float prop );
__declspec(implementation_key(2707)) float PageSetup::GetLeftMargin ( );
__declspec(implementation_key(2708)) void PageSetup::PutLeftMargin ( float prop );
__declspec(implementation_key(2709)) float PageSetup::GetRightMargin ( );
__declspec(implementation_key(2710)) void PageSetup::PutRightMargin ( float prop );
__declspec(implementation_key(2711)) float PageSetup::GetGutter ( );
__declspec(implementation_key(2712)) void PageSetup::PutGutter ( float prop );
__declspec(implementation_key(2713)) float PageSetup::GetPageWidth ( );
__declspec(implementation_key(2714)) void PageSetup::PutPageWidth ( float prop );
__declspec(implementation_key(2715)) float PageSetup::GetPageHeight ( );
__declspec(implementation_key(2716)) void PageSetup::PutPageHeight ( float prop );
__declspec(implementation_key(2717)) enum WdOrientation PageSetup::GetOrientation ( );
__declspec(implementation_key(2718)) void PageSetup::PutOrientation ( enum WdOrientation prop );
__declspec(implementation_key(2719)) enum WdPaperTray PageSetup::GetFirstPageTray ( );
__declspec(implementation_key(2720)) void PageSetup::PutFirstPageTray ( enum WdPaperTray prop );
__declspec(implementation_key(2721)) enum WdPaperTray PageSetup::GetOtherPagesTray ( );
__declspec(implementation_key(2722)) void PageSetup::PutOtherPagesTray ( enum WdPaperTray prop );
__declspec(implementation_key(2723)) enum WdVerticalAlignment PageSetup::GetVerticalAlignment ( );
__declspec(implementation_key(2724)) void PageSetup::PutVerticalAlignment ( enum WdVerticalAlignment prop );
__declspec(implementation_key(2725)) long PageSetup::GetMirrorMargins ( );
__declspec(implementation_key(2726)) void PageSetup::PutMirrorMargins ( long prop );
__declspec(implementation_key(2727)) float PageSetup::GetHeaderDistance ( );
__declspec(implementation_key(2728)) void PageSetup::PutHeaderDistance ( float prop );
__declspec(implementation_key(2729)) float PageSetup::GetFooterDistance ( );
__declspec(implementation_key(2730)) void PageSetup::PutFooterDistance ( float prop );
__declspec(implementation_key(2731)) enum WdSectionStart PageSetup::GetSectionStart ( );
__declspec(implementation_key(2732)) void PageSetup::PutSectionStart ( enum WdSectionStart prop );
__declspec(implementation_key(2733)) long PageSetup::GetOddAndEvenPagesHeaderFooter ( );
__declspec(implementation_key(2734)) void PageSetup::PutOddAndEvenPagesHeaderFooter ( long prop );
__declspec(implementation_key(2735)) long PageSetup::GetDifferentFirstPageHeaderFooter ( );
__declspec(implementation_key(2736)) void PageSetup::PutDifferentFirstPageHeaderFooter ( long prop );
__declspec(implementation_key(2737)) long PageSetup::GetSuppressEndnotes ( );
__declspec(implementation_key(2738)) void PageSetup::PutSuppressEndnotes ( long prop );
__declspec(implementation_key(2739)) LineNumberingPtr PageSetup::GetLineNumbering ( );
__declspec(implementation_key(2740)) void PageSetup::PutLineNumbering ( struct LineNumbering * prop );
__declspec(implementation_key(2741)) TextColumnsPtr PageSetup::GetTextColumns ( );
__declspec(implementation_key(2742)) void PageSetup::PutTextColumns ( struct TextColumns * prop );
__declspec(implementation_key(2743)) enum WdPaperSize PageSetup::GetPaperSize ( );
__declspec(implementation_key(2744)) void PageSetup::PutPaperSize ( enum WdPaperSize prop );
__declspec(implementation_key(2745)) VARIANT_BOOL PageSetup::GetTwoPagesOnOne ( );
__declspec(implementation_key(2746)) void PageSetup::PutTwoPagesOnOne ( VARIANT_BOOL prop );
__declspec(implementation_key(2747)) VARIANT_BOOL PageSetup::GetGutterOnTop ( );
__declspec(implementation_key(2748)) void PageSetup::PutGutterOnTop ( VARIANT_BOOL prop );
__declspec(implementation_key(2749)) float PageSetup::GetCharsLine ( );
__declspec(implementation_key(2750)) void PageSetup::PutCharsLine ( float prop );
__declspec(implementation_key(2751)) float PageSetup::GetLinesPage ( );
__declspec(implementation_key(2752)) void PageSetup::PutLinesPage ( float prop );
__declspec(implementation_key(2753)) VARIANT_BOOL PageSetup::GetShowGrid ( );
__declspec(implementation_key(2754)) void PageSetup::PutShowGrid ( VARIANT_BOOL prop );
__declspec(implementation_key(2755)) HRESULT PageSetup::TogglePortrait ( );
__declspec(implementation_key(2756)) HRESULT PageSetup::SetAsTemplateDefault ( );
__declspec(implementation_key(2757)) enum WdGutterStyleOld PageSetup::GetGutterStyle ( );
__declspec(implementation_key(2758)) void PageSetup::PutGutterStyle ( enum WdGutterStyleOld prop );
__declspec(implementation_key(2759)) enum WdSectionDirection PageSetup::GetSectionDirection ( );
__declspec(implementation_key(2760)) void PageSetup::PutSectionDirection ( enum WdSectionDirection prop );
__declspec(implementation_key(2761)) enum WdLayoutMode PageSetup::GetLayoutMode ( );
__declspec(implementation_key(2762)) void PageSetup::PutLayoutMode ( enum WdLayoutMode prop );
__declspec(implementation_key(2763)) enum WdGutterStyle PageSetup::GetGutterPos ( );
__declspec(implementation_key(2764)) void PageSetup::PutGutterPos ( enum WdGutterStyle prop );
__declspec(implementation_key(2765)) _ApplicationPtr LineNumbering::GetApplication ( );
__declspec(implementation_key(2766)) long LineNumbering::GetCreator ( );
__declspec(implementation_key(2767)) IDispatchPtr LineNumbering::GetParent ( );
__declspec(implementation_key(2768)) enum WdNumberingRule LineNumbering::GetRestartMode ( );
__declspec(implementation_key(2769)) void LineNumbering::PutRestartMode ( enum WdNumberingRule prop );
__declspec(implementation_key(2770)) long LineNumbering::GetStartingNumber ( );
__declspec(implementation_key(2771)) void LineNumbering::PutStartingNumber ( long prop );
__declspec(implementation_key(2772)) float LineNumbering::GetDistanceFromText ( );
__declspec(implementation_key(2773)) void LineNumbering::PutDistanceFromText ( float prop );
__declspec(implementation_key(2774)) long LineNumbering::GetCountBy ( );
__declspec(implementation_key(2775)) void LineNumbering::PutCountBy ( long prop );
__declspec(implementation_key(2776)) long LineNumbering::GetActive ( );
__declspec(implementation_key(2777)) void LineNumbering::PutActive ( long prop );
__declspec(implementation_key(2778)) IUnknownPtr TextColumns::Get_NewEnum ( );
__declspec(implementation_key(2779)) long TextColumns::GetCount ( );
__declspec(implementation_key(2780)) _ApplicationPtr TextColumns::GetApplication ( );
__declspec(implementation_key(2781)) long TextColumns::GetCreator ( );
__declspec(implementation_key(2782)) IDispatchPtr TextColumns::GetParent ( );
__declspec(implementation_key(2783)) long TextColumns::GetEvenlySpaced ( );
__declspec(implementation_key(2784)) void TextColumns::PutEvenlySpaced ( long prop );
__declspec(implementation_key(2785)) long TextColumns::GetLineBetween ( );
__declspec(implementation_key(2786)) void TextColumns::PutLineBetween ( long prop );
__declspec(implementation_key(2787)) float TextColumns::GetWidth ( );
__declspec(implementation_key(2788)) void TextColumns::PutWidth ( float prop );
__declspec(implementation_key(2789)) float TextColumns::GetSpacing ( );
__declspec(implementation_key(2790)) void TextColumns::PutSpacing ( float prop );
__declspec(implementation_key(2791)) TextColumnPtr TextColumns::Item ( long Index );
__declspec(implementation_key(2792)) TextColumnPtr TextColumns::Add ( VARIANT * Width, VARIANT * Spacing, VARIANT * EvenlySpaced );
__declspec(implementation_key(2793)) HRESULT TextColumns::SetCount ( long NumColumns );
__declspec(implementation_key(2794)) enum WdFlowDirection TextColumns::GetFlowDirection ( );
__declspec(implementation_key(2795)) void TextColumns::PutFlowDirection ( enum WdFlowDirection prop );
__declspec(implementation_key(2796)) _ApplicationPtr TextColumn::GetApplication ( );
__declspec(implementation_key(2797)) long TextColumn::GetCreator ( );
__declspec(implementation_key(2798)) IDispatchPtr TextColumn::GetParent ( );
__declspec(implementation_key(2799)) float TextColumn::GetWidth ( );
__declspec(implementation_key(2800)) void TextColumn::PutWidth ( float prop );
__declspec(implementation_key(2801)) float TextColumn::GetSpaceAfter ( );
__declspec(implementation_key(2802)) void TextColumn::PutSpaceAfter ( float prop );
__declspec(implementation_key(2803)) _bstr_t Selection::GetText ( );
__declspec(implementation_key(2804)) void Selection::PutText ( _bstr_t prop );
__declspec(implementation_key(2805)) RangePtr Selection::GetFormattedText ( );
__declspec(implementation_key(2806)) void Selection::PutFormattedText ( struct Range * prop );
__declspec(implementation_key(2807)) long Selection::GetStart ( );
__declspec(implementation_key(2808)) void Selection::PutStart ( long prop );
__declspec(implementation_key(2809)) long Selection::GetEnd ( );
__declspec(implementation_key(2810)) void Selection::PutEnd ( long prop );
__declspec(implementation_key(2811)) _FontPtr Selection::GetFont ( );
__declspec(implementation_key(2812)) void Selection::PutFont ( struct _Font * prop );
__declspec(implementation_key(2813)) enum WdSelectionType Selection::GetType ( );
__declspec(implementation_key(2814)) enum WdStoryType Selection::GetStoryType ( );
__declspec(implementation_key(2815)) _variant_t Selection::GetStyle ( );
__declspec(implementation_key(2816)) void Selection::PutStyle ( VARIANT * prop );
__declspec(implementation_key(2817)) TablesPtr Selection::GetTables ( );
__declspec(implementation_key(2818)) WordsPtr Selection::GetWords ( );
__declspec(implementation_key(2819)) SentencesPtr Selection::GetSentences ( );
__declspec(implementation_key(2820)) CharactersPtr Selection::GetCharacters ( );
__declspec(implementation_key(2821)) FootnotesPtr Selection::GetFootnotes ( );
__declspec(implementation_key(2822)) EndnotesPtr Selection::GetEndnotes ( );
__declspec(implementation_key(2823)) CommentsPtr Selection::GetComments ( );
__declspec(implementation_key(2824)) CellsPtr Selection::GetCells ( );
__declspec(implementation_key(2825)) SectionsPtr Selection::GetSections ( );
__declspec(implementation_key(2826)) ParagraphsPtr Selection::GetParagraphs ( );
__declspec(implementation_key(2827)) BordersPtr Selection::GetBorders ( );
__declspec(implementation_key(2828)) void Selection::PutBorders ( struct Borders * prop );
__declspec(implementation_key(2829)) ShadingPtr Selection::GetShading ( );
__declspec(implementation_key(2830)) FieldsPtr Selection::GetFields ( );
__declspec(implementation_key(2831)) FormFieldsPtr Selection::GetFormFields ( );
__declspec(implementation_key(2832)) FramesPtr Selection::GetFrames ( );
__declspec(implementation_key(2833)) _ParagraphFormatPtr Selection::GetParagraphFormat ( );
__declspec(implementation_key(2834)) void Selection::PutParagraphFormat ( struct _ParagraphFormat * prop );
__declspec(implementation_key(2835)) PageSetupPtr Selection::GetPageSetup ( );
__declspec(implementation_key(2836)) void Selection::PutPageSetup ( struct PageSetup * prop );
__declspec(implementation_key(2837)) BookmarksPtr Selection::GetBookmarks ( );
__declspec(implementation_key(2838)) long Selection::GetStoryLength ( );
__declspec(implementation_key(2839)) enum WdLanguageID Selection::GetLanguageID ( );
__declspec(implementation_key(2840)) void Selection::PutLanguageID ( enum WdLanguageID prop );
__declspec(implementation_key(2841)) enum WdLanguageID Selection::GetLanguageIDFarEast ( );
__declspec(implementation_key(2842)) void Selection::PutLanguageIDFarEast ( enum WdLanguageID prop );
__declspec(implementation_key(2843)) enum WdLanguageID Selection::GetLanguageIDOther ( );
__declspec(implementation_key(2844)) void Selection::PutLanguageIDOther ( enum WdLanguageID prop );
__declspec(implementation_key(2845)) HyperlinksPtr Selection::GetHyperlinks ( );
__declspec(implementation_key(2846)) ColumnsPtr Selection::GetColumns ( );
__declspec(implementation_key(2847)) RowsPtr Selection::GetRows ( );
__declspec(implementation_key(2848)) HeaderFooterPtr Selection::GetHeaderFooter ( );
__declspec(implementation_key(2849)) VARIANT_BOOL Selection::GetIsEndOfRowMark ( );
__declspec(implementation_key(2850)) long Selection::GetBookmarkID ( );
__declspec(implementation_key(2851)) long Selection::GetPreviousBookmarkID ( );
__declspec(implementation_key(2852)) FindPtr Selection::GetFind ( );
__declspec(implementation_key(2853)) RangePtr Selection::GetRange ( );
__declspec(implementation_key(2854)) _variant_t Selection::GetInformation ( enum WdInformation Type );
__declspec(implementation_key(2855)) enum WdSelectionFlags Selection::GetFlags ( );
__declspec(implementation_key(2856)) void Selection::PutFlags ( enum WdSelectionFlags prop );
__declspec(implementation_key(2857)) VARIANT_BOOL Selection::GetActive ( );
__declspec(implementation_key(2858)) VARIANT_BOOL Selection::GetStartIsActive ( );
__declspec(implementation_key(2859)) void Selection::PutStartIsActive ( VARIANT_BOOL prop );
__declspec(implementation_key(2860)) VARIANT_BOOL Selection::GetIPAtEndOfLine ( );
__declspec(implementation_key(2861)) VARIANT_BOOL Selection::GetExtendMode ( );
__declspec(implementation_key(2862)) void Selection::PutExtendMode ( VARIANT_BOOL prop );
__declspec(implementation_key(2863)) VARIANT_BOOL Selection::GetColumnSelectMode ( );
__declspec(implementation_key(2864)) void Selection::PutColumnSelectMode ( VARIANT_BOOL prop );
__declspec(implementation_key(2865)) enum WdTextOrientation Selection::GetOrientation ( );
__declspec(implementation_key(2866)) void Selection::PutOrientation ( enum WdTextOrientation prop );
__declspec(implementation_key(2867)) InlineShapesPtr Selection::GetInlineShapes ( );
__declspec(implementation_key(2868)) _ApplicationPtr Selection::GetApplication ( );
__declspec(implementation_key(2869)) long Selection::GetCreator ( );
__declspec(implementation_key(2870)) IDispatchPtr Selection::GetParent ( );
__declspec(implementation_key(2871)) _DocumentPtr Selection::GetDocument ( );
__declspec(implementation_key(2872)) ShapeRangePtr Selection::GetShapeRange ( );
__declspec(implementation_key(2873)) HRESULT Selection::Select ( );
__declspec(implementation_key(2874)) HRESULT Selection::SetRange ( long Start, long End );
__declspec(implementation_key(2875)) HRESULT Selection::Collapse ( VARIANT * Direction );
__declspec(implementation_key(2876)) HRESULT Selection::InsertBefore ( _bstr_t Text );
__declspec(implementation_key(2877)) HRESULT Selection::InsertAfter ( _bstr_t Text );
__declspec(implementation_key(2878)) RangePtr Selection::Next ( VARIANT * Unit, VARIANT * Count );
__declspec(implementation_key(2879)) RangePtr Selection::Previous ( VARIANT * Unit, VARIANT * Count );
__declspec(implementation_key(2880)) long Selection::StartOf ( VARIANT * Unit, VARIANT * Extend );
__declspec(implementation_key(2881)) long Selection::EndOf ( VARIANT * Unit, VARIANT * Extend );
__declspec(implementation_key(2882)) long Selection::Move ( VARIANT * Unit, VARIANT * Count );
__declspec(implementation_key(2883)) long Selection::MoveStart ( VARIANT * Unit, VARIANT * Count );
__declspec(implementation_key(2884)) long Selection::MoveEnd ( VARIANT * Unit, VARIANT * Count );
__declspec(implementation_key(2885)) long Selection::MoveWhile ( VARIANT * Cset, VARIANT * Count );
__declspec(implementation_key(2886)) long Selection::MoveStartWhile ( VARIANT * Cset, VARIANT * Count );
__declspec(implementation_key(2887)) long Selection::MoveEndWhile ( VARIANT * Cset, VARIANT * Count );
__declspec(implementation_key(2888)) long Selection::MoveUntil ( VARIANT * Cset, VARIANT * Count );
__declspec(implementation_key(2889)) long Selection::MoveStartUntil ( VARIANT * Cset, VARIANT * Count );
__declspec(implementation_key(2890)) long Selection::MoveEndUntil ( VARIANT * Cset, VARIANT * Count );
__declspec(implementation_key(2891)) HRESULT Selection::Cut ( );
__declspec(implementation_key(2892)) HRESULT Selection::Copy ( );
__declspec(implementation_key(2893)) HRESULT Selection::Paste ( );
__declspec(implementation_key(2894)) HRESULT Selection::InsertBreak ( VARIANT * Type );
__declspec(implementation_key(2895)) HRESULT Selection::InsertFile ( _bstr_t FileName, VARIANT * Range, VARIANT * ConfirmConversions, VARIANT * Link, VARIANT * Attachment );
__declspec(implementation_key(2896)) VARIANT_BOOL Selection::InStory ( struct Range * Range );
__declspec(implementation_key(2897)) VARIANT_BOOL Selection::InRange ( struct Range * Range );
__declspec(implementation_key(2898)) long Selection::Delete ( VARIANT * Unit, VARIANT * Count );
__declspec(implementation_key(2899)) long Selection::Expand ( VARIANT * Unit );
__declspec(implementation_key(2900)) HRESULT Selection::InsertParagraph ( );
__declspec(implementation_key(2901)) HRESULT Selection::InsertParagraphAfter ( );
__declspec(implementation_key(2902)) TablePtr Selection::ConvertToTableOld ( VARIANT * Separator, VARIANT * NumRows, VARIANT * NumColumns, VARIANT * InitialColumnWidth, VARIANT * Format, VARIANT * ApplyBorders, VARIANT * ApplyShading, VARIANT * ApplyFont, VARIANT * ApplyColor, VARIANT * ApplyHeadingRows, VARIANT * ApplyLastRow, VARIANT * ApplyFirstColumn, VARIANT * ApplyLastColumn, VARIANT * AutoFit );
__declspec(implementation_key(2903)) HRESULT Selection::InsertDateTimeOld ( VARIANT * DateTimeFormat, VARIANT * InsertAsField, VARIANT * InsertAsFullWidth );
__declspec(implementation_key(2904)) HRESULT Selection::InsertSymbol ( long CharacterNumber, VARIANT * Font, VARIANT * Unicode, VARIANT * Bias );
__declspec(implementation_key(2905)) HRESULT Selection::InsertCrossReference ( VARIANT * ReferenceType, enum WdReferenceKind ReferenceKind, VARIANT * ReferenceItem, VARIANT * InsertAsHyperlink, VARIANT * IncludePosition );
__declspec(implementation_key(2906)) HRESULT Selection::InsertCaption ( VARIANT * Label, VARIANT * Title, VARIANT * TitleAutoText, VARIANT * Position );
__declspec(implementation_key(2907)) HRESULT Selection::CopyAsPicture ( );
__declspec(implementation_key(2908)) HRESULT Selection::SortOld ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * SortColumn, VARIANT * Separator, VARIANT * CaseSensitive, VARIANT * LanguageID );
__declspec(implementation_key(2909)) HRESULT Selection::SortAscending ( );
__declspec(implementation_key(2910)) HRESULT Selection::SortDescending ( );
__declspec(implementation_key(2911)) VARIANT_BOOL Selection::IsEqual ( struct Range * Range );
__declspec(implementation_key(2912)) float Selection::Calculate ( );
__declspec(implementation_key(2913)) RangePtr Selection::GoTo ( VARIANT * What, VARIANT * Which, VARIANT * Count, VARIANT * Name );
__declspec(implementation_key(2914)) RangePtr Selection::GoToNext ( enum WdGoToItem What );
__declspec(implementation_key(2915)) RangePtr Selection::GoToPrevious ( enum WdGoToItem What );
__declspec(implementation_key(2916)) HRESULT Selection::PasteSpecial ( VARIANT * IconIndex, VARIANT * Link, VARIANT * Placement, VARIANT * DisplayAsIcon, VARIANT * DataType, VARIANT * IconFileName, VARIANT * IconLabel );
__declspec(implementation_key(2917)) FieldPtr Selection::PreviousField ( );
__declspec(implementation_key(2918)) FieldPtr Selection::NextField ( );
__declspec(implementation_key(2919)) HRESULT Selection::InsertParagraphBefore ( );
__declspec(implementation_key(2920)) HRESULT Selection::InsertCells ( VARIANT * ShiftCells );
__declspec(implementation_key(2921)) HRESULT Selection::Extend ( VARIANT * Character );
__declspec(implementation_key(2922)) HRESULT Selection::Shrink ( );
__declspec(implementation_key(2923)) long Selection::MoveLeft ( VARIANT * Unit, VARIANT * Count, VARIANT * Extend );
__declspec(implementation_key(2924)) long Selection::MoveRight ( VARIANT * Unit, VARIANT * Count, VARIANT * Extend );
__declspec(implementation_key(2925)) long Selection::MoveUp ( VARIANT * Unit, VARIANT * Count, VARIANT * Extend );
__declspec(implementation_key(2926)) long Selection::MoveDown ( VARIANT * Unit, VARIANT * Count, VARIANT * Extend );
__declspec(implementation_key(2927)) long Selection::HomeKey ( VARIANT * Unit, VARIANT * Extend );
__declspec(implementation_key(2928)) long Selection::EndKey ( VARIANT * Unit, VARIANT * Extend );
__declspec(implementation_key(2929)) HRESULT Selection::EscapeKey ( );
__declspec(implementation_key(2930)) HRESULT Selection::TypeText ( _bstr_t Text );
__declspec(implementation_key(2931)) HRESULT Selection::CopyFormat ( );
__declspec(implementation_key(2932)) HRESULT Selection::PasteFormat ( );
__declspec(implementation_key(2933)) HRESULT Selection::TypeParagraph ( );
__declspec(implementation_key(2934)) HRESULT Selection::TypeBackspace ( );
__declspec(implementation_key(2935)) HRESULT Selection::NextSubdocument ( );
__declspec(implementation_key(2936)) HRESULT Selection::PreviousSubdocument ( );
__declspec(implementation_key(2937)) HRESULT Selection::SelectColumn ( );
__declspec(implementation_key(2938)) HRESULT Selection::SelectCurrentFont ( );
__declspec(implementation_key(2939)) HRESULT Selection::SelectCurrentAlignment ( );
__declspec(implementation_key(2940)) HRESULT Selection::SelectCurrentSpacing ( );
__declspec(implementation_key(2941)) HRESULT Selection::SelectCurrentIndent ( );
__declspec(implementation_key(2942)) HRESULT Selection::SelectCurrentTabs ( );
__declspec(implementation_key(2943)) HRESULT Selection::SelectCurrentColor ( );
__declspec(implementation_key(2944)) HRESULT Selection::CreateTextbox ( );
__declspec(implementation_key(2945)) HRESULT Selection::WholeStory ( );
__declspec(implementation_key(2946)) HRESULT Selection::SelectRow ( );
__declspec(implementation_key(2947)) HRESULT Selection::SplitTable ( );
__declspec(implementation_key(2948)) HRESULT Selection::InsertRows ( VARIANT * NumRows );
__declspec(implementation_key(2949)) HRESULT Selection::InsertColumns ( );
__declspec(implementation_key(2950)) HRESULT Selection::InsertFormula ( VARIANT * Formula, VARIANT * NumberFormat );
__declspec(implementation_key(2951)) RevisionPtr Selection::NextRevision ( VARIANT * Wrap );
__declspec(implementation_key(2952)) RevisionPtr Selection::PreviousRevision ( VARIANT * Wrap );
__declspec(implementation_key(2953)) HRESULT Selection::PasteAsNestedTable ( );
__declspec(implementation_key(2954)) AutoTextEntryPtr Selection::CreateAutoTextEntry ( _bstr_t Name, _bstr_t StyleName );
__declspec(implementation_key(2955)) HRESULT Selection::DetectLanguage ( );
__declspec(implementation_key(2956)) HRESULT Selection::SelectCell ( );
__declspec(implementation_key(2957)) HRESULT Selection::InsertRowsBelow ( VARIANT * NumRows );
__declspec(implementation_key(2958)) HRESULT Selection::InsertColumnsRight ( );
__declspec(implementation_key(2959)) HRESULT Selection::InsertRowsAbove ( VARIANT * NumRows );
__declspec(implementation_key(2960)) HRESULT Selection::RtlRun ( );
__declspec(implementation_key(2961)) HRESULT Selection::LtrRun ( );
__declspec(implementation_key(2962)) HRESULT Selection::BoldRun ( );
__declspec(implementation_key(2963)) HRESULT Selection::ItalicRun ( );
__declspec(implementation_key(2964)) HRESULT Selection::RtlPara ( );
__declspec(implementation_key(2965)) HRESULT Selection::LtrPara ( );
__declspec(implementation_key(2966)) HRESULT Selection::InsertDateTime ( VARIANT * DateTimeFormat, VARIANT * InsertAsField, VARIANT * InsertAsFullWidth, VARIANT * DateLanguage, VARIANT * CalendarType );
__declspec(implementation_key(2967)) HRESULT Selection::Sort ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * SortColumn, VARIANT * Separator, VARIANT * CaseSensitive, VARIANT * BidiSort, VARIANT * IgnoreThe, VARIANT * IgnoreKashida, VARIANT * IgnoreDiacritics, VARIANT * IgnoreHe, VARIANT * LanguageID );
__declspec(implementation_key(2968)) TablePtr Selection::ConvertToTable ( VARIANT * Separator, VARIANT * NumRows, VARIANT * NumColumns, VARIANT * InitialColumnWidth, VARIANT * Format, VARIANT * ApplyBorders, VARIANT * ApplyShading, VARIANT * ApplyFont, VARIANT * ApplyColor, VARIANT * ApplyHeadingRows, VARIANT * ApplyLastRow, VARIANT * ApplyFirstColumn, VARIANT * ApplyLastColumn, VARIANT * AutoFit, VARIANT * AutoFitBehavior, VARIANT * DefaultTableBehavior );
__declspec(implementation_key(2969)) long Selection::GetNoProofing ( );
__declspec(implementation_key(2970)) void Selection::PutNoProofing ( long prop );
__declspec(implementation_key(2971)) TablesPtr Selection::GetTopLevelTables ( );
__declspec(implementation_key(2972)) VARIANT_BOOL Selection::GetLanguageDetected ( );
__declspec(implementation_key(2973)) void Selection::PutLanguageDetected ( VARIANT_BOOL prop );
__declspec(implementation_key(2974)) float Selection::GetFitTextWidth ( );
__declspec(implementation_key(2975)) void Selection::PutFitTextWidth ( float prop );
__declspec(implementation_key(2976)) _ApplicationPtr TablesOfAuthoritiesCategories::GetApplication ( );
__declspec(implementation_key(2977)) long TablesOfAuthoritiesCategories::GetCreator ( );
__declspec(implementation_key(2978)) IDispatchPtr TablesOfAuthoritiesCategories::GetParent ( );
__declspec(implementation_key(2979)) IUnknownPtr TablesOfAuthoritiesCategories::Get_NewEnum ( );
__declspec(implementation_key(2980)) long TablesOfAuthoritiesCategories::GetCount ( );
__declspec(implementation_key(2981)) TableOfAuthoritiesCategoryPtr TablesOfAuthoritiesCategories::Item ( VARIANT * Index );
__declspec(implementation_key(2982)) _ApplicationPtr TableOfAuthoritiesCategory::GetApplication ( );
__declspec(implementation_key(2983)) long TableOfAuthoritiesCategory::GetCreator ( );
__declspec(implementation_key(2984)) IDispatchPtr TableOfAuthoritiesCategory::GetParent ( );
__declspec(implementation_key(2985)) _bstr_t TableOfAuthoritiesCategory::GetName ( );
__declspec(implementation_key(2986)) void TableOfAuthoritiesCategory::PutName ( _bstr_t prop );
__declspec(implementation_key(2987)) long TableOfAuthoritiesCategory::GetIndex ( );
__declspec(implementation_key(2988)) _ApplicationPtr CaptionLabels::GetApplication ( );
__declspec(implementation_key(2989)) long CaptionLabels::GetCreator ( );
__declspec(implementation_key(2990)) IDispatchPtr CaptionLabels::GetParent ( );
__declspec(implementation_key(2991)) IUnknownPtr CaptionLabels::Get_NewEnum ( );
__declspec(implementation_key(2992)) long CaptionLabels::GetCount ( );
__declspec(implementation_key(2993)) CaptionLabelPtr CaptionLabels::Item ( VARIANT * Index );
__declspec(implementation_key(2994)) CaptionLabelPtr CaptionLabels::Add ( _bstr_t Name );
__declspec(implementation_key(2995)) _ApplicationPtr CaptionLabel::GetApplication ( );
__declspec(implementation_key(2996)) long CaptionLabel::GetCreator ( );
__declspec(implementation_key(2997)) IDispatchPtr CaptionLabel::GetParent ( );
__declspec(implementation_key(2998)) _bstr_t CaptionLabel::GetName ( );
__declspec(implementation_key(2999)) VARIANT_BOOL CaptionLabel::GetBuiltIn ( );
__declspec(implementation_key(3000)) enum WdCaptionLabelID CaptionLabel::GetID ( );
__declspec(implementation_key(3001)) VARIANT_BOOL CaptionLabel::GetIncludeChapterNumber ( );
__declspec(implementation_key(3002)) void CaptionLabel::PutIncludeChapterNumber ( VARIANT_BOOL prop );
__declspec(implementation_key(3003)) enum WdCaptionNumberStyle CaptionLabel::GetNumberStyle ( );
__declspec(implementation_key(3004)) void CaptionLabel::PutNumberStyle ( enum WdCaptionNumberStyle prop );
__declspec(implementation_key(3005)) long CaptionLabel::GetChapterStyleLevel ( );
__declspec(implementation_key(3006)) void CaptionLabel::PutChapterStyleLevel ( long prop );
__declspec(implementation_key(3007)) enum WdSeparatorType CaptionLabel::GetSeparator ( );
__declspec(implementation_key(3008)) void CaptionLabel::PutSeparator ( enum WdSeparatorType prop );
__declspec(implementation_key(3009)) enum WdCaptionPosition CaptionLabel::GetPosition ( );
__declspec(implementation_key(3010)) void CaptionLabel::PutPosition ( enum WdCaptionPosition prop );
__declspec(implementation_key(3011)) HRESULT CaptionLabel::Delete ( );
__declspec(implementation_key(3012)) _ApplicationPtr AutoCaptions::GetApplication ( );
__declspec(implementation_key(3013)) long AutoCaptions::GetCreator ( );
__declspec(implementation_key(3014)) IDispatchPtr AutoCaptions::GetParent ( );
__declspec(implementation_key(3015)) IUnknownPtr AutoCaptions::Get_NewEnum ( );
__declspec(implementation_key(3016)) long AutoCaptions::GetCount ( );
__declspec(implementation_key(3017)) AutoCaptionPtr AutoCaptions::Item ( VARIANT * Index );
__declspec(implementation_key(3018)) HRESULT AutoCaptions::CancelAutoInsert ( );
__declspec(implementation_key(3019)) _ApplicationPtr AutoCaption::GetApplication ( );
__declspec(implementation_key(3020)) long AutoCaption::GetCreator ( );
__declspec(implementation_key(3021)) IDispatchPtr AutoCaption::GetParent ( );
__declspec(implementation_key(3022)) _bstr_t AutoCaption::GetName ( );
__declspec(implementation_key(3023)) VARIANT_BOOL AutoCaption::GetAutoInsert ( );
__declspec(implementation_key(3024)) void AutoCaption::PutAutoInsert ( VARIANT_BOOL prop );
__declspec(implementation_key(3025)) long AutoCaption::GetIndex ( );
__declspec(implementation_key(3026)) _variant_t AutoCaption::GetCaptionLabel ( );
__declspec(implementation_key(3027)) void AutoCaption::PutCaptionLabel ( VARIANT * prop );
__declspec(implementation_key(3028)) _ApplicationPtr Indexes::GetApplication ( );
__declspec(implementation_key(3029)) long Indexes::GetCreator ( );
__declspec(implementation_key(3030)) IDispatchPtr Indexes::GetParent ( );
__declspec(implementation_key(3031)) IUnknownPtr Indexes::Get_NewEnum ( );
__declspec(implementation_key(3032)) long Indexes::GetCount ( );
__declspec(implementation_key(3033)) enum WdIndexFormat Indexes::GetFormat ( );
__declspec(implementation_key(3034)) void Indexes::PutFormat ( enum WdIndexFormat prop );
__declspec(implementation_key(3035)) IndexPtr Indexes::Item ( long Index );
__declspec(implementation_key(3036)) IndexPtr Indexes::AddOld ( struct Range * Range, VARIANT * HeadingSeparator, VARIANT * RightAlignPageNumbers, VARIANT * Type, VARIANT * NumberOfColumns, VARIANT * AccentedLetters );
__declspec(implementation_key(3037)) FieldPtr Indexes::MarkEntry ( struct Range * Range, VARIANT * Entry, VARIANT * EntryAutoText, VARIANT * CrossReference, VARIANT * CrossReferenceAutoText, VARIANT * BookmarkName, VARIANT * Bold, VARIANT * Italic, VARIANT * Reading );
__declspec(implementation_key(3038)) HRESULT Indexes::MarkAllEntries ( struct Range * Range, VARIANT * Entry, VARIANT * EntryAutoText, VARIANT * CrossReference, VARIANT * CrossReferenceAutoText, VARIANT * BookmarkName, VARIANT * Bold, VARIANT * Italic );
__declspec(implementation_key(3039)) HRESULT Indexes::AutoMarkEntries ( _bstr_t ConcordanceFileName );
__declspec(implementation_key(3040)) IndexPtr Indexes::Add ( struct Range * Range, VARIANT * HeadingSeparator, VARIANT * RightAlignPageNumbers, VARIANT * Type, VARIANT * NumberOfColumns, VARIANT * AccentedLetters, VARIANT * SortBy, VARIANT * IndexLanguage );
__declspec(implementation_key(3041)) _ApplicationPtr Index::GetApplication ( );
__declspec(implementation_key(3042)) long Index::GetCreator ( );
__declspec(implementation_key(3043)) IDispatchPtr Index::GetParent ( );
__declspec(implementation_key(3044)) enum WdHeadingSeparator Index::GetHeadingSeparator ( );
__declspec(implementation_key(3045)) void Index::PutHeadingSeparator ( enum WdHeadingSeparator prop );
__declspec(implementation_key(3046)) VARIANT_BOOL Index::GetRightAlignPageNumbers ( );
__declspec(implementation_key(3047)) void Index::PutRightAlignPageNumbers ( VARIANT_BOOL prop );
__declspec(implementation_key(3048)) enum WdIndexType Index::GetType ( );
__declspec(implementation_key(3049)) void Index::PutType ( enum WdIndexType prop );
__declspec(implementation_key(3050)) long Index::GetNumberOfColumns ( );
__declspec(implementation_key(3051)) void Index::PutNumberOfColumns ( long prop );
__declspec(implementation_key(3052)) RangePtr Index::GetRange ( );
__declspec(implementation_key(3053)) enum WdTabLeader Index::GetTabLeader ( );
__declspec(implementation_key(3054)) void Index::PutTabLeader ( enum WdTabLeader prop );
__declspec(implementation_key(3055)) VARIANT_BOOL Index::GetAccentedLetters ( );
__declspec(implementation_key(3056)) void Index::PutAccentedLetters ( VARIANT_BOOL prop );
__declspec(implementation_key(3057)) enum WdIndexSortBy Index::GetSortBy ( );
__declspec(implementation_key(3058)) void Index::PutSortBy ( enum WdIndexSortBy prop );
__declspec(implementation_key(3059)) enum WdIndexFilter Index::GetFilter ( );
__declspec(implementation_key(3060)) void Index::PutFilter ( enum WdIndexFilter prop );
__declspec(implementation_key(3061)) HRESULT Index::Delete ( );
__declspec(implementation_key(3062)) HRESULT Index::Update ( );
__declspec(implementation_key(3063)) enum WdLanguageID Index::GetIndexLanguage ( );
__declspec(implementation_key(3064)) void Index::PutIndexLanguage ( enum WdLanguageID prop );
__declspec(implementation_key(3065)) _ApplicationPtr AddIn::GetApplication ( );
__declspec(implementation_key(3066)) long AddIn::GetCreator ( );
__declspec(implementation_key(3067)) IDispatchPtr AddIn::GetParent ( );
__declspec(implementation_key(3068)) _bstr_t AddIn::GetName ( );
__declspec(implementation_key(3069)) long AddIn::GetIndex ( );
__declspec(implementation_key(3070)) _bstr_t AddIn::GetPath ( );
__declspec(implementation_key(3071)) VARIANT_BOOL AddIn::GetInstalled ( );
__declspec(implementation_key(3072)) void AddIn::PutInstalled ( VARIANT_BOOL prop );
__declspec(implementation_key(3073)) VARIANT_BOOL AddIn::GetCompiled ( );
__declspec(implementation_key(3074)) VARIANT_BOOL AddIn::GetAutoload ( );
__declspec(implementation_key(3075)) HRESULT AddIn::Delete ( );
__declspec(implementation_key(3076)) _ApplicationPtr AddIns::GetApplication ( );
__declspec(implementation_key(3077)) long AddIns::GetCreator ( );
__declspec(implementation_key(3078)) IDispatchPtr AddIns::GetParent ( );
__declspec(implementation_key(3079)) IUnknownPtr AddIns::Get_NewEnum ( );
__declspec(implementation_key(3080)) long AddIns::GetCount ( );
__declspec(implementation_key(3081)) AddInPtr AddIns::Item ( VARIANT * Index );
__declspec(implementation_key(3082)) AddInPtr AddIns::Add ( _bstr_t FileName, VARIANT * Install );
__declspec(implementation_key(3083)) HRESULT AddIns::Unload ( VARIANT_BOOL RemoveFromList );
__declspec(implementation_key(3084)) _ApplicationPtr Revisions::GetApplication ( );
__declspec(implementation_key(3085)) long Revisions::GetCreator ( );
__declspec(implementation_key(3086)) IDispatchPtr Revisions::GetParent ( );
__declspec(implementation_key(3087)) IUnknownPtr Revisions::Get_NewEnum ( );
__declspec(implementation_key(3088)) long Revisions::GetCount ( );
__declspec(implementation_key(3089)) RevisionPtr Revisions::Item ( long Index );
__declspec(implementation_key(3090)) HRESULT Revisions::AcceptAll ( );
__declspec(implementation_key(3091)) HRESULT Revisions::RejectAll ( );
__declspec(implementation_key(3092)) _ApplicationPtr Revision::GetApplication ( );
__declspec(implementation_key(3093)) long Revision::GetCreator ( );
__declspec(implementation_key(3094)) IDispatchPtr Revision::GetParent ( );
__declspec(implementation_key(3095)) _bstr_t Revision::GetAuthor ( );
__declspec(implementation_key(3096)) DATE Revision::GetDate ( );
__declspec(implementation_key(3097)) RangePtr Revision::GetRange ( );
__declspec(implementation_key(3098)) enum WdRevisionType Revision::GetType ( );
__declspec(implementation_key(3099)) long Revision::GetIndex ( );
__declspec(implementation_key(3100)) HRESULT Revision::Accept ( );
__declspec(implementation_key(3101)) HRESULT Revision::Reject ( );
__declspec(implementation_key(3102)) _ApplicationPtr Task::GetApplication ( );
__declspec(implementation_key(3103)) long Task::GetCreator ( );
__declspec(implementation_key(3104)) IDispatchPtr Task::GetParent ( );
__declspec(implementation_key(3105)) _bstr_t Task::GetName ( );
__declspec(implementation_key(3106)) long Task::GetLeft ( );
__declspec(implementation_key(3107)) void Task::PutLeft ( long prop );
__declspec(implementation_key(3108)) long Task::GetTop ( );
__declspec(implementation_key(3109)) void Task::PutTop ( long prop );
__declspec(implementation_key(3110)) long Task::GetWidth ( );
__declspec(implementation_key(3111)) void Task::PutWidth ( long prop );
__declspec(implementation_key(3112)) long Task::GetHeight ( );
__declspec(implementation_key(3113)) void Task::PutHeight ( long prop );
__declspec(implementation_key(3114)) enum WdWindowState Task::GetWindowState ( );
__declspec(implementation_key(3115)) void Task::PutWindowState ( enum WdWindowState prop );
__declspec(implementation_key(3116)) VARIANT_BOOL Task::GetVisible ( );
__declspec(implementation_key(3117)) void Task::PutVisible ( VARIANT_BOOL prop );
__declspec(implementation_key(3118)) HRESULT Task::Activate ( VARIANT * Wait );
__declspec(implementation_key(3119)) HRESULT Task::Close ( );
__declspec(implementation_key(3120)) HRESULT Task::Move ( long Left, long Top );
__declspec(implementation_key(3121)) HRESULT Task::Resize ( long Width, long Height );
__declspec(implementation_key(3122)) HRESULT Task::SendWindowMessage ( long Message, long wParam, long lParam );
__declspec(implementation_key(3123)) _ApplicationPtr Tasks::GetApplication ( );
__declspec(implementation_key(3124)) long Tasks::GetCreator ( );
__declspec(implementation_key(3125)) IDispatchPtr Tasks::GetParent ( );
__declspec(implementation_key(3126)) IUnknownPtr Tasks::Get_NewEnum ( );
__declspec(implementation_key(3127)) long Tasks::GetCount ( );
__declspec(implementation_key(3128)) TaskPtr Tasks::Item ( VARIANT * Index );
__declspec(implementation_key(3129)) VARIANT_BOOL Tasks::Exists ( _bstr_t Name );
__declspec(implementation_key(3130)) HRESULT Tasks::ExitWindows ( );
__declspec(implementation_key(3131)) _ApplicationPtr HeadersFooters::GetApplication ( );
__declspec(implementation_key(3132)) long HeadersFooters::GetCreator ( );
__declspec(implementation_key(3133)) IDispatchPtr HeadersFooters::GetParent ( );
__declspec(implementation_key(3134)) IUnknownPtr HeadersFooters::Get_NewEnum ( );
__declspec(implementation_key(3135)) long HeadersFooters::GetCount ( );
__declspec(implementation_key(3136)) HeaderFooterPtr HeadersFooters::Item ( enum WdHeaderFooterIndex Index );
__declspec(implementation_key(3137)) _ApplicationPtr HeaderFooter::GetApplication ( );
__declspec(implementation_key(3138)) long HeaderFooter::GetCreator ( );
__declspec(implementation_key(3139)) IDispatchPtr HeaderFooter::GetParent ( );
__declspec(implementation_key(3140)) RangePtr HeaderFooter::GetRange ( );
__declspec(implementation_key(3141)) enum WdHeaderFooterIndex HeaderFooter::GetIndex ( );
__declspec(implementation_key(3142)) VARIANT_BOOL HeaderFooter::GetIsHeader ( );
__declspec(implementation_key(3143)) VARIANT_BOOL HeaderFooter::GetExists ( );
__declspec(implementation_key(3144)) void HeaderFooter::PutExists ( VARIANT_BOOL prop );
__declspec(implementation_key(3145)) PageNumbersPtr HeaderFooter::GetPageNumbers ( );
__declspec(implementation_key(3146)) VARIANT_BOOL HeaderFooter::GetLinkToPrevious ( );
__declspec(implementation_key(3147)) void HeaderFooter::PutLinkToPrevious ( VARIANT_BOOL prop );
__declspec(implementation_key(3148)) ShapesPtr HeaderFooter::GetShapes ( );
__declspec(implementation_key(3149)) _ApplicationPtr PageNumbers::GetApplication ( );
__declspec(implementation_key(3150)) long PageNumbers::GetCreator ( );
__declspec(implementation_key(3151)) IDispatchPtr PageNumbers::GetParent ( );
__declspec(implementation_key(3152)) IUnknownPtr PageNumbers::Get_NewEnum ( );
__declspec(implementation_key(3153)) long PageNumbers::GetCount ( );
__declspec(implementation_key(3154)) enum WdPageNumberStyle PageNumbers::GetNumberStyle ( );
__declspec(implementation_key(3155)) void PageNumbers::PutNumberStyle ( enum WdPageNumberStyle prop );
__declspec(implementation_key(3156)) VARIANT_BOOL PageNumbers::GetIncludeChapterNumber ( );
__declspec(implementation_key(3157)) void PageNumbers::PutIncludeChapterNumber ( VARIANT_BOOL prop );
__declspec(implementation_key(3158)) long PageNumbers::GetHeadingLevelForChapter ( );
__declspec(implementation_key(3159)) void PageNumbers::PutHeadingLevelForChapter ( long prop );
__declspec(implementation_key(3160)) enum WdSeparatorType PageNumbers::GetChapterPageSeparator ( );
__declspec(implementation_key(3161)) void PageNumbers::PutChapterPageSeparator ( enum WdSeparatorType prop );
__declspec(implementation_key(3162)) VARIANT_BOOL PageNumbers::GetRestartNumberingAtSection ( );
__declspec(implementation_key(3163)) void PageNumbers::PutRestartNumberingAtSection ( VARIANT_BOOL prop );
__declspec(implementation_key(3164)) long PageNumbers::GetStartingNumber ( );
__declspec(implementation_key(3165)) void PageNumbers::PutStartingNumber ( long prop );
__declspec(implementation_key(3166)) VARIANT_BOOL PageNumbers::GetShowFirstPageNumber ( );
__declspec(implementation_key(3167)) void PageNumbers::PutShowFirstPageNumber ( VARIANT_BOOL prop );
__declspec(implementation_key(3168)) PageNumberPtr PageNumbers::Item ( long Index );
__declspec(implementation_key(3169)) PageNumberPtr PageNumbers::Add ( VARIANT * PageNumberAlignment, VARIANT * FirstPage );
__declspec(implementation_key(3170)) VARIANT_BOOL PageNumbers::GetDoubleQuote ( );
__declspec(implementation_key(3171)) void PageNumbers::PutDoubleQuote ( VARIANT_BOOL prop );
__declspec(implementation_key(3172)) _ApplicationPtr PageNumber::GetApplication ( );
__declspec(implementation_key(3173)) long PageNumber::GetCreator ( );
__declspec(implementation_key(3174)) IDispatchPtr PageNumber::GetParent ( );
__declspec(implementation_key(3175)) long PageNumber::GetIndex ( );
__declspec(implementation_key(3176)) enum WdPageNumberAlignment PageNumber::GetAlignment ( );
__declspec(implementation_key(3177)) void PageNumber::PutAlignment ( enum WdPageNumberAlignment prop );
__declspec(implementation_key(3178)) HRESULT PageNumber::Select ( );
__declspec(implementation_key(3179)) HRESULT PageNumber::Copy ( );
__declspec(implementation_key(3180)) HRESULT PageNumber::Cut ( );
__declspec(implementation_key(3181)) HRESULT PageNumber::Delete ( );
__declspec(implementation_key(3182)) _ApplicationPtr Subdocuments::GetApplication ( );
__declspec(implementation_key(3183)) long Subdocuments::GetCreator ( );
__declspec(implementation_key(3184)) IDispatchPtr Subdocuments::GetParent ( );
__declspec(implementation_key(3185)) long Subdocuments::GetCount ( );
__declspec(implementation_key(3186)) IUnknownPtr Subdocuments::Get_NewEnum ( );
__declspec(implementation_key(3187)) VARIANT_BOOL Subdocuments::GetExpanded ( );
__declspec(implementation_key(3188)) void Subdocuments::PutExpanded ( VARIANT_BOOL prop );
__declspec(implementation_key(3189)) SubdocumentPtr Subdocuments::Item ( long Index );
__declspec(implementation_key(3190)) SubdocumentPtr Subdocuments::AddFromFile ( VARIANT * Name, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate );
__declspec(implementation_key(3191)) SubdocumentPtr Subdocuments::AddFromRange ( struct Range * Range );
__declspec(implementation_key(3192)) HRESULT Subdocuments::Merge ( VARIANT * FirstSubdocument, VARIANT * LastSubdocument );
__declspec(implementation_key(3193)) HRESULT Subdocuments::Delete ( );
__declspec(implementation_key(3194)) HRESULT Subdocuments::Select ( );
__declspec(implementation_key(3195)) _ApplicationPtr Subdocument::GetApplication ( );
__declspec(implementation_key(3196)) long Subdocument::GetCreator ( );
__declspec(implementation_key(3197)) IDispatchPtr Subdocument::GetParent ( );
__declspec(implementation_key(3198)) VARIANT_BOOL Subdocument::GetLocked ( );
__declspec(implementation_key(3199)) void Subdocument::PutLocked ( VARIANT_BOOL prop );
__declspec(implementation_key(3200)) RangePtr Subdocument::GetRange ( );
__declspec(implementation_key(3201)) _bstr_t Subdocument::GetName ( );
__declspec(implementation_key(3202)) _bstr_t Subdocument::GetPath ( );
__declspec(implementation_key(3203)) VARIANT_BOOL Subdocument::GetHasFile ( );
__declspec(implementation_key(3204)) long Subdocument::GetLevel ( );
__declspec(implementation_key(3205)) HRESULT Subdocument::Delete ( );
__declspec(implementation_key(3206)) HRESULT Subdocument::Split ( struct Range * Range );
__declspec(implementation_key(3207)) _DocumentPtr Subdocument::Open ( );
__declspec(implementation_key(3208)) _ApplicationPtr HeadingStyles::GetApplication ( );
__declspec(implementation_key(3209)) long HeadingStyles::GetCreator ( );
__declspec(implementation_key(3210)) IDispatchPtr HeadingStyles::GetParent ( );
__declspec(implementation_key(3211)) IUnknownPtr HeadingStyles::Get_NewEnum ( );
__declspec(implementation_key(3212)) long HeadingStyles::GetCount ( );
__declspec(implementation_key(3213)) HeadingStylePtr HeadingStyles::Item ( long Index );
__declspec(implementation_key(3214)) HeadingStylePtr HeadingStyles::Add ( VARIANT * Style, short Level );
__declspec(implementation_key(3215)) _ApplicationPtr HeadingStyle::GetApplication ( );
__declspec(implementation_key(3216)) long HeadingStyle::GetCreator ( );
__declspec(implementation_key(3217)) IDispatchPtr HeadingStyle::GetParent ( );
__declspec(implementation_key(3218)) _variant_t HeadingStyle::GetStyle ( );
__declspec(implementation_key(3219)) void HeadingStyle::PutStyle ( VARIANT * prop );
__declspec(implementation_key(3220)) short HeadingStyle::GetLevel ( );
__declspec(implementation_key(3221)) void HeadingStyle::PutLevel ( short prop );
__declspec(implementation_key(3222)) HRESULT HeadingStyle::Delete ( );
__declspec(implementation_key(3223)) IUnknownPtr StoryRanges::Get_NewEnum ( );
__declspec(implementation_key(3224)) long StoryRanges::GetCount ( );
__declspec(implementation_key(3225)) _ApplicationPtr StoryRanges::GetApplication ( );
__declspec(implementation_key(3226)) long StoryRanges::GetCreator ( );
__declspec(implementation_key(3227)) IDispatchPtr StoryRanges::GetParent ( );
__declspec(implementation_key(3228)) RangePtr StoryRanges::Item ( enum WdStoryType Index );
__declspec(implementation_key(3229)) long ListLevel::GetIndex ( );
__declspec(implementation_key(3230)) _bstr_t ListLevel::GetNumberFormat ( );
__declspec(implementation_key(3231)) void ListLevel::PutNumberFormat ( _bstr_t prop );
__declspec(implementation_key(3232)) enum WdTrailingCharacter ListLevel::GetTrailingCharacter ( );
__declspec(implementation_key(3233)) void ListLevel::PutTrailingCharacter ( enum WdTrailingCharacter prop );
__declspec(implementation_key(3234)) enum WdListNumberStyle ListLevel::GetNumberStyle ( );
__declspec(implementation_key(3235)) void ListLevel::PutNumberStyle ( enum WdListNumberStyle prop );
__declspec(implementation_key(3236)) float ListLevel::GetNumberPosition ( );
__declspec(implementation_key(3237)) void ListLevel::PutNumberPosition ( float prop );
__declspec(implementation_key(3238)) enum WdListLevelAlignment ListLevel::GetAlignment ( );
__declspec(implementation_key(3239)) void ListLevel::PutAlignment ( enum WdListLevelAlignment prop );
__declspec(implementation_key(3240)) float ListLevel::GetTextPosition ( );
__declspec(implementation_key(3241)) void ListLevel::PutTextPosition ( float prop );
__declspec(implementation_key(3242)) float ListLevel::GetTabPosition ( );
__declspec(implementation_key(3243)) void ListLevel::PutTabPosition ( float prop );
__declspec(implementation_key(3244)) VARIANT_BOOL ListLevel::GetResetOnHigherOld ( );
__declspec(implementation_key(3245)) void ListLevel::PutResetOnHigherOld ( VARIANT_BOOL prop );
__declspec(implementation_key(3246)) long ListLevel::GetStartAt ( );
__declspec(implementation_key(3247)) void ListLevel::PutStartAt ( long prop );
__declspec(implementation_key(3248)) _bstr_t ListLevel::GetLinkedStyle ( );
__declspec(implementation_key(3249)) void ListLevel::PutLinkedStyle ( _bstr_t prop );
__declspec(implementation_key(3250)) _FontPtr ListLevel::GetFont ( );
__declspec(implementation_key(3251)) void ListLevel::PutFont ( struct _Font * prop );
__declspec(implementation_key(3252)) _ApplicationPtr ListLevel::GetApplication ( );
__declspec(implementation_key(3253)) long ListLevel::GetCreator ( );
__declspec(implementation_key(3254)) IDispatchPtr ListLevel::GetParent ( );
__declspec(implementation_key(3255)) long ListLevel::GetResetOnHigher ( );
__declspec(implementation_key(3256)) void ListLevel::PutResetOnHigher ( long prop );
__declspec(implementation_key(3257)) IUnknownPtr ListLevels::Get_NewEnum ( );
__declspec(implementation_key(3258)) long ListLevels::GetCount ( );
__declspec(implementation_key(3259)) _ApplicationPtr ListLevels::GetApplication ( );
__declspec(implementation_key(3260)) long ListLevels::GetCreator ( );
__declspec(implementation_key(3261)) IDispatchPtr ListLevels::GetParent ( );
__declspec(implementation_key(3262)) ListLevelPtr ListLevels::Item ( long Index );
__declspec(implementation_key(3263)) _ApplicationPtr ListTemplate::GetApplication ( );
__declspec(implementation_key(3264)) long ListTemplate::GetCreator ( );
__declspec(implementation_key(3265)) IDispatchPtr ListTemplate::GetParent ( );
__declspec(implementation_key(3266)) VARIANT_BOOL ListTemplate::GetOutlineNumbered ( );
__declspec(implementation_key(3267)) void ListTemplate::PutOutlineNumbered ( VARIANT_BOOL prop );
__declspec(implementation_key(3268)) _bstr_t ListTemplate::GetName ( );
__declspec(implementation_key(3269)) void ListTemplate::PutName ( _bstr_t prop );
__declspec(implementation_key(3270)) ListLevelsPtr ListTemplate::GetListLevels ( );
__declspec(implementation_key(3271)) ListTemplatePtr ListTemplate::Convert ( VARIANT * Level );
__declspec(implementation_key(3272)) IUnknownPtr ListTemplates::Get_NewEnum ( );
__declspec(implementation_key(3273)) long ListTemplates::GetCount ( );
__declspec(implementation_key(3274)) _ApplicationPtr ListTemplates::GetApplication ( );
__declspec(implementation_key(3275)) long ListTemplates::GetCreator ( );
__declspec(implementation_key(3276)) IDispatchPtr ListTemplates::GetParent ( );
__declspec(implementation_key(3277)) ListTemplatePtr ListTemplates::Item ( VARIANT * Index );
__declspec(implementation_key(3278)) ListTemplatePtr ListTemplates::Add ( VARIANT * OutlineNumbered, VARIANT * Name );
__declspec(implementation_key(3279)) IUnknownPtr ListParagraphs::Get_NewEnum ( );
__declspec(implementation_key(3280)) long ListParagraphs::GetCount ( );
__declspec(implementation_key(3281)) _ApplicationPtr ListParagraphs::GetApplication ( );
__declspec(implementation_key(3282)) long ListParagraphs::GetCreator ( );
__declspec(implementation_key(3283)) IDispatchPtr ListParagraphs::GetParent ( );
__declspec(implementation_key(3284)) ParagraphPtr ListParagraphs::Item ( long Index );
__declspec(implementation_key(3285)) RangePtr List::GetRange ( );
__declspec(implementation_key(3286)) ListParagraphsPtr List::GetListParagraphs ( );
__declspec(implementation_key(3287)) VARIANT_BOOL List::GetSingleListTemplate ( );
__declspec(implementation_key(3288)) _ApplicationPtr List::GetApplication ( );
__declspec(implementation_key(3289)) long List::GetCreator ( );
__declspec(implementation_key(3290)) IDispatchPtr List::GetParent ( );
__declspec(implementation_key(3291)) HRESULT List::ConvertNumbersToText ( VARIANT * NumberType );
__declspec(implementation_key(3292)) HRESULT List::RemoveNumbers ( VARIANT * NumberType );
__declspec(implementation_key(3293)) long List::CountNumberedItems ( VARIANT * NumberType, VARIANT * Level );
__declspec(implementation_key(3294)) HRESULT List::ApplyListTemplateOld ( struct ListTemplate * ListTemplate, VARIANT * ContinuePreviousList );
__declspec(implementation_key(3295)) enum WdContinue List::CanContinuePreviousList ( struct ListTemplate * ListTemplate );
__declspec(implementation_key(3296)) HRESULT List::ApplyListTemplate ( struct ListTemplate * ListTemplate, VARIANT * ContinuePreviousList, VARIANT * DefaultListBehavior );
__declspec(implementation_key(3297)) IUnknownPtr Lists::Get_NewEnum ( );
__declspec(implementation_key(3298)) long Lists::GetCount ( );
__declspec(implementation_key(3299)) _ApplicationPtr Lists::GetApplication ( );
__declspec(implementation_key(3300)) long Lists::GetCreator ( );
__declspec(implementation_key(3301)) IDispatchPtr Lists::GetParent ( );
__declspec(implementation_key(3302)) ListPtr Lists::Item ( long Index );
__declspec(implementation_key(3303)) ListTemplatesPtr ListGallery::GetListTemplates ( );
__declspec(implementation_key(3304)) _ApplicationPtr ListGallery::GetApplication ( );
__declspec(implementation_key(3305)) long ListGallery::GetCreator ( );
__declspec(implementation_key(3306)) IDispatchPtr ListGallery::GetParent ( );
__declspec(implementation_key(3307)) VARIANT_BOOL ListGallery::GetModified ( long Index );
__declspec(implementation_key(3308)) HRESULT ListGallery::Reset ( long Index );
__declspec(implementation_key(3309)) IUnknownPtr ListGalleries::Get_NewEnum ( );
__declspec(implementation_key(3310)) long ListGalleries::GetCount ( );
__declspec(implementation_key(3311)) _ApplicationPtr ListGalleries::GetApplication ( );
__declspec(implementation_key(3312)) long ListGalleries::GetCreator ( );
__declspec(implementation_key(3313)) IDispatchPtr ListGalleries::GetParent ( );
__declspec(implementation_key(3314)) ListGalleryPtr ListGalleries::Item ( enum WdListGalleryType Index );
__declspec(implementation_key(3315)) _ApplicationPtr KeyBindings::GetApplication ( );
__declspec(implementation_key(3316)) long KeyBindings::GetCreator ( );
__declspec(implementation_key(3317)) IDispatchPtr KeyBindings::GetParent ( );
__declspec(implementation_key(3318)) IUnknownPtr KeyBindings::Get_NewEnum ( );
__declspec(implementation_key(3319)) long KeyBindings::GetCount ( );
__declspec(implementation_key(3320)) IDispatchPtr KeyBindings::GetContext ( );
__declspec(implementation_key(3321)) KeyBindingPtr KeyBindings::Item ( long Index );
__declspec(implementation_key(3322)) KeyBindingPtr KeyBindings::Add ( enum WdKeyCategory KeyCategory, _bstr_t Command, long KeyCode, VARIANT * KeyCode2, VARIANT * CommandParameter );
__declspec(implementation_key(3323)) HRESULT KeyBindings::ClearAll ( );
__declspec(implementation_key(3324)) KeyBindingPtr KeyBindings::Key ( long KeyCode, VARIANT * KeyCode2 );
__declspec(implementation_key(3325)) _ApplicationPtr KeysBoundTo::GetApplication ( );
__declspec(implementation_key(3326)) long KeysBoundTo::GetCreator ( );
__declspec(implementation_key(3327)) IDispatchPtr KeysBoundTo::GetParent ( );
__declspec(implementation_key(3328)) IUnknownPtr KeysBoundTo::Get_NewEnum ( );
__declspec(implementation_key(3329)) long KeysBoundTo::GetCount ( );
__declspec(implementation_key(3330)) enum WdKeyCategory KeysBoundTo::GetKeyCategory ( );
__declspec(implementation_key(3331)) _bstr_t KeysBoundTo::GetCommand ( );
__declspec(implementation_key(3332)) _bstr_t KeysBoundTo::GetCommandParameter ( );
__declspec(implementation_key(3333)) IDispatchPtr KeysBoundTo::GetContext ( );
__declspec(implementation_key(3334)) KeyBindingPtr KeysBoundTo::Item ( long Index );
__declspec(implementation_key(3335)) KeyBindingPtr KeysBoundTo::Key ( long KeyCode, VARIANT * KeyCode2 );
__declspec(implementation_key(3336)) _ApplicationPtr KeyBinding::GetApplication ( );
__declspec(implementation_key(3337)) long KeyBinding::GetCreator ( );
__declspec(implementation_key(3338)) IDispatchPtr KeyBinding::GetParent ( );
__declspec(implementation_key(3339)) _bstr_t KeyBinding::GetCommand ( );
__declspec(implementation_key(3340)) _bstr_t KeyBinding::GetKeyString ( );
__declspec(implementation_key(3341)) VARIANT_BOOL KeyBinding::GetProtected ( );
__declspec(implementation_key(3342)) enum WdKeyCategory KeyBinding::GetKeyCategory ( );
__declspec(implementation_key(3343)) long KeyBinding::GetKeyCode ( );
__declspec(implementation_key(3344)) long KeyBinding::GetKeyCode2 ( );
__declspec(implementation_key(3345)) _bstr_t KeyBinding::GetCommandParameter ( );
__declspec(implementation_key(3346)) IDispatchPtr KeyBinding::GetContext ( );
__declspec(implementation_key(3347)) HRESULT KeyBinding::Clear ( );
__declspec(implementation_key(3348)) HRESULT KeyBinding::Disable ( );
__declspec(implementation_key(3349)) HRESULT KeyBinding::Execute ( );
__declspec(implementation_key(3350)) HRESULT KeyBinding::Rebind ( enum WdKeyCategory KeyCategory, _bstr_t Command, VARIANT * CommandParameter );
__declspec(implementation_key(3351)) _ApplicationPtr FileConverter::GetApplication ( );
__declspec(implementation_key(3352)) long FileConverter::GetCreator ( );
__declspec(implementation_key(3353)) IDispatchPtr FileConverter::GetParent ( );
__declspec(implementation_key(3354)) _bstr_t FileConverter::GetFormatName ( );
__declspec(implementation_key(3355)) _bstr_t FileConverter::GetClassName ( );
__declspec(implementation_key(3356)) long FileConverter::GetSaveFormat ( );
__declspec(implementation_key(3357)) long FileConverter::GetOpenFormat ( );
__declspec(implementation_key(3358)) VARIANT_BOOL FileConverter::GetCanSave ( );
__declspec(implementation_key(3359)) VARIANT_BOOL FileConverter::GetCanOpen ( );
__declspec(implementation_key(3360)) _bstr_t FileConverter::GetPath ( );
__declspec(implementation_key(3361)) _bstr_t FileConverter::GetName ( );
__declspec(implementation_key(3362)) _bstr_t FileConverter::GetExtensions ( );
__declspec(implementation_key(3363)) _ApplicationPtr FileConverters::GetApplication ( );
__declspec(implementation_key(3364)) long FileConverters::GetCreator ( );
__declspec(implementation_key(3365)) IDispatchPtr FileConverters::GetParent ( );
__declspec(implementation_key(3366)) long FileConverters::GetCount ( );
__declspec(implementation_key(3367)) IUnknownPtr FileConverters::Get_NewEnum ( );
__declspec(implementation_key(3368)) enum WdChevronConvertRule FileConverters::GetConvertMacWordChevrons ( );
__declspec(implementation_key(3369)) void FileConverters::PutConvertMacWordChevrons ( enum WdChevronConvertRule prop );
__declspec(implementation_key(3370)) FileConverterPtr FileConverters::Item ( VARIANT * Index );
__declspec(implementation_key(3371)) _ApplicationPtr SynonymInfo::GetApplication ( );
__declspec(implementation_key(3372)) long SynonymInfo::GetCreator ( );
__declspec(implementation_key(3373)) IDispatchPtr SynonymInfo::GetParent ( );
__declspec(implementation_key(3374)) _bstr_t SynonymInfo::GetWord ( );
__declspec(implementation_key(3375)) VARIANT_BOOL SynonymInfo::GetFound ( );
__declspec(implementation_key(3376)) long SynonymInfo::GetMeaningCount ( );
__declspec(implementation_key(3377)) _variant_t SynonymInfo::GetMeaningList ( );
__declspec(implementation_key(3378)) _variant_t SynonymInfo::GetPartOfSpeechList ( );
__declspec(implementation_key(3379)) _variant_t SynonymInfo::GetSynonymList ( VARIANT * Meaning );
__declspec(implementation_key(3380)) _variant_t SynonymInfo::GetAntonymList ( );
__declspec(implementation_key(3381)) _variant_t SynonymInfo::GetRelatedExpressionList ( );
__declspec(implementation_key(3382)) _variant_t SynonymInfo::GetRelatedWordList ( );
__declspec(implementation_key(3383)) _ApplicationPtr Hyperlinks::GetApplication ( );
__declspec(implementation_key(3384)) long Hyperlinks::GetCreator ( );
__declspec(implementation_key(3385)) IDispatchPtr Hyperlinks::GetParent ( );
__declspec(implementation_key(3386)) long Hyperlinks::GetCount ( );
__declspec(implementation_key(3387)) IUnknownPtr Hyperlinks::Get_NewEnum ( );
__declspec(implementation_key(3388)) HyperlinkPtr Hyperlinks::Item ( VARIANT * Index );
__declspec(implementation_key(3389)) HyperlinkPtr Hyperlinks::_Add ( IDispatch * Anchor, VARIANT * Address, VARIANT * SubAddress );
__declspec(implementation_key(3390)) HyperlinkPtr Hyperlinks::Add ( IDispatch * Anchor, VARIANT * Address, VARIANT * SubAddress, VARIANT * ScreenTip, VARIANT * TextToDisplay, VARIANT * Target );
__declspec(implementation_key(3391)) _ApplicationPtr Hyperlink::GetApplication ( );
__declspec(implementation_key(3392)) long Hyperlink::GetCreator ( );
__declspec(implementation_key(3393)) IDispatchPtr Hyperlink::GetParent ( );
__declspec(implementation_key(3394)) _bstr_t Hyperlink::GetName ( );
__declspec(implementation_key(3395)) _bstr_t Hyperlink::GetAddressOld ( );
__declspec(implementation_key(3396)) enum Office::MsoHyperlinkType Hyperlink::GetType ( );
__declspec(implementation_key(3397)) RangePtr Hyperlink::GetRange ( );
__declspec(implementation_key(3398)) ShapePtr Hyperlink::GetShape ( );
__declspec(implementation_key(3399)) _bstr_t Hyperlink::GetSubAddressOld ( );
__declspec(implementation_key(3400)) VARIANT_BOOL Hyperlink::GetExtraInfoRequired ( );
__declspec(implementation_key(3401)) HRESULT Hyperlink::Delete ( );
__declspec(implementation_key(3402)) HRESULT Hyperlink::Follow ( VARIANT * NewWindow, VARIANT * AddHistory, VARIANT * ExtraInfo, VARIANT * Method, VARIANT * HeaderInfo );
__declspec(implementation_key(3403)) HRESULT Hyperlink::AddToFavorites ( );
__declspec(implementation_key(3404)) HRESULT Hyperlink::CreateNewDocument ( _bstr_t FileName, VARIANT_BOOL EditNow, VARIANT_BOOL Overwrite );
__declspec(implementation_key(3405)) _bstr_t Hyperlink::GetAddress ( );
__declspec(implementation_key(3406)) void Hyperlink::PutAddress ( _bstr_t prop );
__declspec(implementation_key(3407)) _bstr_t Hyperlink::GetSubAddress ( );
__declspec(implementation_key(3408)) void Hyperlink::PutSubAddress ( _bstr_t prop );
__declspec(implementation_key(3409)) _bstr_t Hyperlink::GetEmailSubject ( );
__declspec(implementation_key(3410)) void Hyperlink::PutEmailSubject ( _bstr_t prop );
__declspec(implementation_key(3411)) _bstr_t Hyperlink::GetScreenTip ( );
__declspec(implementation_key(3412)) void Hyperlink::PutScreenTip ( _bstr_t prop );
__declspec(implementation_key(3413)) _bstr_t Hyperlink::GetTextToDisplay ( );
__declspec(implementation_key(3414)) void Hyperlink::PutTextToDisplay ( _bstr_t prop );
__declspec(implementation_key(3415)) _bstr_t Hyperlink::GetTarget ( );
__declspec(implementation_key(3416)) void Hyperlink::PutTarget ( _bstr_t prop );
__declspec(implementation_key(3417)) _ApplicationPtr Shapes::GetApplication ( );
__declspec(implementation_key(3418)) long Shapes::GetCreator ( );
__declspec(implementation_key(3419)) IDispatchPtr Shapes::GetParent ( );
__declspec(implementation_key(3420)) long Shapes::GetCount ( );
__declspec(implementation_key(3421)) IUnknownPtr Shapes::Get_NewEnum ( );
__declspec(implementation_key(3422)) ShapePtr Shapes::Item ( VARIANT * Index );
__declspec(implementation_key(3423)) ShapePtr Shapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height, VARIANT * Anchor );
__declspec(implementation_key(3424)) ShapePtr Shapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(3425)) ShapePtr Shapes::AddCurve ( VARIANT * SafeArrayOfPoints, VARIANT * Anchor );
__declspec(implementation_key(3426)) ShapePtr Shapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height, VARIANT * Anchor );
__declspec(implementation_key(3427)) ShapePtr Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY, VARIANT * Anchor );
__declspec(implementation_key(3428)) ShapePtr Shapes::AddPicture ( _bstr_t FileName, VARIANT * LinkToFile, VARIANT * SaveWithDocument, VARIANT * Left, VARIANT * Top, VARIANT * Width, VARIANT * Height, VARIANT * Anchor );
__declspec(implementation_key(3429)) ShapePtr Shapes::AddPolyline ( VARIANT * SafeArrayOfPoints, VARIANT * Anchor );
__declspec(implementation_key(3430)) ShapePtr Shapes::AddShape ( long Type, float Left, float Top, float Width, float Height, VARIANT * Anchor );
__declspec(implementation_key(3431)) ShapePtr Shapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top, VARIANT * Anchor );
__declspec(implementation_key(3432)) ShapePtr Shapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height, VARIANT * Anchor );
__declspec(implementation_key(3433)) FreeformBuilderPtr Shapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 );
__declspec(implementation_key(3434)) ShapeRangePtr Shapes::Range ( VARIANT * Index );
__declspec(implementation_key(3435)) HRESULT Shapes::SelectAll ( );
__declspec(implementation_key(3436)) ShapePtr Shapes::AddOLEObject ( VARIANT * ClassType, VARIANT * FileName, VARIANT * LinkToFile, VARIANT * DisplayAsIcon, VARIANT * IconFileName, VARIANT * IconIndex, VARIANT * IconLabel, VARIANT * Left, VARIANT * Top, VARIANT * Width, VARIANT * Height, VARIANT * Anchor );
__declspec(implementation_key(3437)) ShapePtr Shapes::AddOLEControl ( VARIANT * ClassType, VARIANT * Left, VARIANT * Top, VARIANT * Width, VARIANT * Height, VARIANT * Anchor );
__declspec(implementation_key(3438)) _ApplicationPtr ShapeRange::GetApplication ( );
__declspec(implementation_key(3439)) long ShapeRange::GetCreator ( );
__declspec(implementation_key(3440)) IDispatchPtr ShapeRange::GetParent ( );
__declspec(implementation_key(3441)) long ShapeRange::GetCount ( );
__declspec(implementation_key(3442)) IUnknownPtr ShapeRange::Get_NewEnum ( );
__declspec(implementation_key(3443)) AdjustmentsPtr ShapeRange::GetAdjustments ( );
__declspec(implementation_key(3444)) enum Office::MsoAutoShapeType ShapeRange::GetAutoShapeType ( );
__declspec(implementation_key(3445)) void ShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType prop );
__declspec(implementation_key(3446)) CalloutFormatPtr ShapeRange::GetCallout ( );
__declspec(implementation_key(3447)) long ShapeRange::GetConnectionSiteCount ( );
__declspec(implementation_key(3448)) enum Office::MsoTriState ShapeRange::GetConnector ( );
__declspec(implementation_key(3449)) ConnectorFormatPtr ShapeRange::GetConnectorFormat ( );
__declspec(implementation_key(3450)) FillFormatPtr ShapeRange::GetFill ( );
__declspec(implementation_key(3451)) GroupShapesPtr ShapeRange::GetGroupItems ( );
__declspec(implementation_key(3452)) float ShapeRange::GetHeight ( );
__declspec(implementation_key(3453)) void ShapeRange::PutHeight ( float prop );
__declspec(implementation_key(3454)) enum Office::MsoTriState ShapeRange::GetHorizontalFlip ( );
__declspec(implementation_key(3455)) float ShapeRange::GetLeft ( );
__declspec(implementation_key(3456)) void ShapeRange::PutLeft ( float prop );
__declspec(implementation_key(3457)) LineFormatPtr ShapeRange::GetLine ( );
__declspec(implementation_key(3458)) enum Office::MsoTriState ShapeRange::GetLockAspectRatio ( );
__declspec(implementation_key(3459)) void ShapeRange::PutLockAspectRatio ( enum Office::MsoTriState prop );
__declspec(implementation_key(3460)) _bstr_t ShapeRange::GetName ( );
__declspec(implementation_key(3461)) void ShapeRange::PutName ( _bstr_t prop );
__declspec(implementation_key(3462)) ShapeNodesPtr ShapeRange::GetNodes ( );
__declspec(implementation_key(3463)) float ShapeRange::GetRotation ( );
__declspec(implementation_key(3464)) void ShapeRange::PutRotation ( float prop );
__declspec(implementation_key(3465)) PictureFormatPtr ShapeRange::GetPictureFormat ( );
__declspec(implementation_key(3466)) ShadowFormatPtr ShapeRange::GetShadow ( );
__declspec(implementation_key(3467)) TextEffectFormatPtr ShapeRange::GetTextEffect ( );
__declspec(implementation_key(3468)) TextFramePtr ShapeRange::GetTextFrame ( );
__declspec(implementation_key(3469)) ThreeDFormatPtr ShapeRange::GetThreeD ( );
__declspec(implementation_key(3470)) float ShapeRange::GetTop ( );
__declspec(implementation_key(3471)) void ShapeRange::PutTop ( float prop );
__declspec(implementation_key(3472)) enum Office::MsoShapeType ShapeRange::GetType ( );
__declspec(implementation_key(3473)) enum Office::MsoTriState ShapeRange::GetVerticalFlip ( );
__declspec(implementation_key(3474)) _variant_t ShapeRange::GetVertices ( );
__declspec(implementation_key(3475)) enum Office::MsoTriState ShapeRange::GetVisible ( );
__declspec(implementation_key(3476)) void ShapeRange::PutVisible ( enum Office::MsoTriState prop );
__declspec(implementation_key(3477)) float ShapeRange::GetWidth ( );
__declspec(implementation_key(3478)) void ShapeRange::PutWidth ( float prop );
__declspec(implementation_key(3479)) long ShapeRange::GetZOrderPosition ( );
__declspec(implementation_key(3480)) HyperlinkPtr ShapeRange::GetHyperlink ( );
__declspec(implementation_key(3481)) enum WdRelativeHorizontalPosition ShapeRange::GetRelativeHorizontalPosition ( );
__declspec(implementation_key(3482)) void ShapeRange::PutRelativeHorizontalPosition ( enum WdRelativeHorizontalPosition prop );
__declspec(implementation_key(3483)) enum WdRelativeVerticalPosition ShapeRange::GetRelativeVerticalPosition ( );
__declspec(implementation_key(3484)) void ShapeRange::PutRelativeVerticalPosition ( enum WdRelativeVerticalPosition prop );
__declspec(implementation_key(3485)) long ShapeRange::GetLockAnchor ( );
__declspec(implementation_key(3486)) void ShapeRange::PutLockAnchor ( long prop );
__declspec(implementation_key(3487)) WrapFormatPtr ShapeRange::GetWrapFormat ( );
__declspec(implementation_key(3488)) RangePtr ShapeRange::GetAnchor ( );
__declspec(implementation_key(3489)) ShapePtr ShapeRange::Item ( VARIANT * Index );
__declspec(implementation_key(3490)) HRESULT ShapeRange::Align ( enum Office::MsoAlignCmd Align, long RelativeTo );
__declspec(implementation_key(3491)) HRESULT ShapeRange::Apply ( );
__declspec(implementation_key(3492)) HRESULT ShapeRange::Delete ( );
__declspec(implementation_key(3493)) HRESULT ShapeRange::Distribute ( enum Office::MsoDistributeCmd Distribute, long RelativeTo );
__declspec(implementation_key(3494)) ShapeRangePtr ShapeRange::Duplicate ( );
__declspec(implementation_key(3495)) HRESULT ShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(3496)) HRESULT ShapeRange::IncrementLeft ( float Increment );
__declspec(implementation_key(3497)) HRESULT ShapeRange::IncrementRotation ( float Increment );
__declspec(implementation_key(3498)) HRESULT ShapeRange::IncrementTop ( float Increment );
__declspec(implementation_key(3499)) ShapePtr ShapeRange::Group ( );
__declspec(implementation_key(3500)) HRESULT ShapeRange::PickUp ( );
__declspec(implementation_key(3501)) ShapePtr ShapeRange::Regroup ( );
__declspec(implementation_key(3502)) HRESULT ShapeRange::RerouteConnections ( );
__declspec(implementation_key(3503)) HRESULT ShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom Scale );
__declspec(implementation_key(3504)) HRESULT ShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom Scale );
__declspec(implementation_key(3505)) HRESULT ShapeRange::Select ( VARIANT * Replace );
__declspec(implementation_key(3506)) HRESULT ShapeRange::SetShapesDefaultProperties ( );
__declspec(implementation_key(3507)) ShapeRangePtr ShapeRange::Ungroup ( );
__declspec(implementation_key(3508)) HRESULT ShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(3509)) FramePtr ShapeRange::ConvertToFrame ( );
__declspec(implementation_key(3510)) InlineShapePtr ShapeRange::ConvertToInlineShape ( );
__declspec(implementation_key(3511)) HRESULT ShapeRange::Activate ( );
__declspec(implementation_key(3512)) _bstr_t ShapeRange::GetAlternativeText ( );
__declspec(implementation_key(3513)) void ShapeRange::PutAlternativeText ( _bstr_t prop );
__declspec(implementation_key(3514)) _ApplicationPtr GroupShapes::GetApplication ( );
__declspec(implementation_key(3515)) long GroupShapes::GetCreator ( );
__declspec(implementation_key(3516)) IDispatchPtr GroupShapes::GetParent ( );
__declspec(implementation_key(3517)) long GroupShapes::GetCount ( );
__declspec(implementation_key(3518)) IUnknownPtr GroupShapes::Get_NewEnum ( );
__declspec(implementation_key(3519)) ShapePtr GroupShapes::Item ( VARIANT * Index );
__declspec(implementation_key(3520)) _ApplicationPtr Shape::GetApplication ( );
__declspec(implementation_key(3521)) long Shape::GetCreator ( );
__declspec(implementation_key(3522)) IDispatchPtr Shape::GetParent ( );
__declspec(implementation_key(3523)) AdjustmentsPtr Shape::GetAdjustments ( );
__declspec(implementation_key(3524)) enum Office::MsoAutoShapeType Shape::GetAutoShapeType ( );
__declspec(implementation_key(3525)) void Shape::PutAutoShapeType ( enum Office::MsoAutoShapeType prop );
__declspec(implementation_key(3526)) CalloutFormatPtr Shape::GetCallout ( );
__declspec(implementation_key(3527)) long Shape::GetConnectionSiteCount ( );
__declspec(implementation_key(3528)) enum Office::MsoTriState Shape::GetConnector ( );
__declspec(implementation_key(3529)) ConnectorFormatPtr Shape::GetConnectorFormat ( );
__declspec(implementation_key(3530)) FillFormatPtr Shape::GetFill ( );
__declspec(implementation_key(3531)) GroupShapesPtr Shape::GetGroupItems ( );
__declspec(implementation_key(3532)) float Shape::GetHeight ( );
__declspec(implementation_key(3533)) void Shape::PutHeight ( float prop );
__declspec(implementation_key(3534)) enum Office::MsoTriState Shape::GetHorizontalFlip ( );
__declspec(implementation_key(3535)) float Shape::GetLeft ( );
__declspec(implementation_key(3536)) void Shape::PutLeft ( float prop );
__declspec(implementation_key(3537)) LineFormatPtr Shape::GetLine ( );
__declspec(implementation_key(3538)) enum Office::MsoTriState Shape::GetLockAspectRatio ( );
__declspec(implementation_key(3539)) void Shape::PutLockAspectRatio ( enum Office::MsoTriState prop );
__declspec(implementation_key(3540)) _bstr_t Shape::GetName ( );
__declspec(implementation_key(3541)) void Shape::PutName ( _bstr_t prop );
__declspec(implementation_key(3542)) ShapeNodesPtr Shape::GetNodes ( );
__declspec(implementation_key(3543)) float Shape::GetRotation ( );
__declspec(implementation_key(3544)) void Shape::PutRotation ( float prop );
__declspec(implementation_key(3545)) PictureFormatPtr Shape::GetPictureFormat ( );
__declspec(implementation_key(3546)) ShadowFormatPtr Shape::GetShadow ( );
__declspec(implementation_key(3547)) TextEffectFormatPtr Shape::GetTextEffect ( );
__declspec(implementation_key(3548)) TextFramePtr Shape::GetTextFrame ( );
__declspec(implementation_key(3549)) ThreeDFormatPtr Shape::GetThreeD ( );
__declspec(implementation_key(3550)) float Shape::GetTop ( );
__declspec(implementation_key(3551)) void Shape::PutTop ( float prop );
__declspec(implementation_key(3552)) enum Office::MsoShapeType Shape::GetType ( );
__declspec(implementation_key(3553)) enum Office::MsoTriState Shape::GetVerticalFlip ( );
__declspec(implementation_key(3554)) _variant_t Shape::GetVertices ( );
__declspec(implementation_key(3555)) enum Office::MsoTriState Shape::GetVisible ( );
__declspec(implementation_key(3556)) void Shape::PutVisible ( enum Office::MsoTriState prop );
__declspec(implementation_key(3557)) float Shape::GetWidth ( );
__declspec(implementation_key(3558)) void Shape::PutWidth ( float prop );
__declspec(implementation_key(3559)) long Shape::GetZOrderPosition ( );
__declspec(implementation_key(3560)) HyperlinkPtr Shape::GetHyperlink ( );
__declspec(implementation_key(3561)) enum WdRelativeHorizontalPosition Shape::GetRelativeHorizontalPosition ( );
__declspec(implementation_key(3562)) void Shape::PutRelativeHorizontalPosition ( enum WdRelativeHorizontalPosition prop );
__declspec(implementation_key(3563)) enum WdRelativeVerticalPosition Shape::GetRelativeVerticalPosition ( );
__declspec(implementation_key(3564)) void Shape::PutRelativeVerticalPosition ( enum WdRelativeVerticalPosition prop );
__declspec(implementation_key(3565)) long Shape::GetLockAnchor ( );
__declspec(implementation_key(3566)) void Shape::PutLockAnchor ( long prop );
__declspec(implementation_key(3567)) WrapFormatPtr Shape::GetWrapFormat ( );
__declspec(implementation_key(3568)) OLEFormatPtr Shape::GetOLEFormat ( );
__declspec(implementation_key(3569)) RangePtr Shape::GetAnchor ( );
__declspec(implementation_key(3570)) LinkFormatPtr Shape::GetLinkFormat ( );
__declspec(implementation_key(3571)) HRESULT Shape::Apply ( );
__declspec(implementation_key(3572)) HRESULT Shape::Delete ( );
__declspec(implementation_key(3573)) ShapePtr Shape::Duplicate ( );
__declspec(implementation_key(3574)) HRESULT Shape::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(3575)) HRESULT Shape::IncrementLeft ( float Increment );
__declspec(implementation_key(3576)) HRESULT Shape::IncrementRotation ( float Increment );
__declspec(implementation_key(3577)) HRESULT Shape::IncrementTop ( float Increment );
__declspec(implementation_key(3578)) HRESULT Shape::PickUp ( );
__declspec(implementation_key(3579)) HRESULT Shape::RerouteConnections ( );
__declspec(implementation_key(3580)) HRESULT Shape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom Scale );
__declspec(implementation_key(3581)) HRESULT Shape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom Scale );
__declspec(implementation_key(3582)) HRESULT Shape::Select ( VARIANT * Replace );
__declspec(implementation_key(3583)) HRESULT Shape::SetShapesDefaultProperties ( );
__declspec(implementation_key(3584)) ShapeRangePtr Shape::Ungroup ( );
__declspec(implementation_key(3585)) HRESULT Shape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(3586)) InlineShapePtr Shape::ConvertToInlineShape ( );
__declspec(implementation_key(3587)) FramePtr Shape::ConvertToFrame ( );
__declspec(implementation_key(3588)) HRESULT Shape::Activate ( );
__declspec(implementation_key(3589)) _bstr_t Shape::GetAlternativeText ( );
__declspec(implementation_key(3590)) void Shape::PutAlternativeText ( _bstr_t prop );
__declspec(implementation_key(3591)) Office::ScriptPtr Shape::GetScript ( );
__declspec(implementation_key(3592)) _ApplicationPtr TextFrame::GetApplication ( );
__declspec(implementation_key(3593)) long TextFrame::GetCreator ( );
__declspec(implementation_key(3594)) ShapePtr TextFrame::GetParent ( );
__declspec(implementation_key(3595)) float TextFrame::GetMarginBottom ( );
__declspec(implementation_key(3596)) void TextFrame::PutMarginBottom ( float prop );
__declspec(implementation_key(3597)) float TextFrame::GetMarginLeft ( );
__declspec(implementation_key(3598)) void TextFrame::PutMarginLeft ( float prop );
__declspec(implementation_key(3599)) float TextFrame::GetMarginRight ( );
__declspec(implementation_key(3600)) void TextFrame::PutMarginRight ( float prop );
__declspec(implementation_key(3601)) float TextFrame::GetMarginTop ( );
__declspec(implementation_key(3602)) void TextFrame::PutMarginTop ( float prop );
__declspec(implementation_key(3603)) enum Office::MsoTextOrientation TextFrame::GetOrientation ( );
__declspec(implementation_key(3604)) void TextFrame::PutOrientation ( enum Office::MsoTextOrientation prop );
__declspec(implementation_key(3605)) RangePtr TextFrame::GetTextRange ( );
__declspec(implementation_key(3606)) RangePtr TextFrame::GetContainingRange ( );
__declspec(implementation_key(3607)) TextFramePtr TextFrame::GetNext ( );
__declspec(implementation_key(3608)) void TextFrame::PutNext ( struct TextFrame * prop );
__declspec(implementation_key(3609)) TextFramePtr TextFrame::GetPrevious ( );
__declspec(implementation_key(3610)) void TextFrame::PutPrevious ( struct TextFrame * prop );
__declspec(implementation_key(3611)) VARIANT_BOOL TextFrame::GetOverflowing ( );
__declspec(implementation_key(3612)) long TextFrame::GetHasText ( );
__declspec(implementation_key(3613)) HRESULT TextFrame::BreakForwardLink ( );
__declspec(implementation_key(3614)) VARIANT_BOOL TextFrame::ValidLinkTarget ( struct TextFrame * TargetTextFrame );
__declspec(implementation_key(3615)) _ApplicationPtr _LetterContent::GetApplication ( );
__declspec(implementation_key(3616)) long _LetterContent::GetCreator ( );
__declspec(implementation_key(3617)) IDispatchPtr _LetterContent::GetParent ( );
__declspec(implementation_key(3618)) _LetterContentPtr _LetterContent::GetDuplicate ( );
__declspec(implementation_key(3619)) _bstr_t _LetterContent::GetDateFormat ( );
__declspec(implementation_key(3620)) void _LetterContent::PutDateFormat ( _bstr_t prop );
__declspec(implementation_key(3621)) VARIANT_BOOL _LetterContent::GetIncludeHeaderFooter ( );
__declspec(implementation_key(3622)) void _LetterContent::PutIncludeHeaderFooter ( VARIANT_BOOL prop );
__declspec(implementation_key(3623)) _bstr_t _LetterContent::GetPageDesign ( );
__declspec(implementation_key(3624)) void _LetterContent::PutPageDesign ( _bstr_t prop );
__declspec(implementation_key(3625)) enum WdLetterStyle _LetterContent::GetLetterStyle ( );
__declspec(implementation_key(3626)) void _LetterContent::PutLetterStyle ( enum WdLetterStyle prop );
__declspec(implementation_key(3627)) VARIANT_BOOL _LetterContent::GetLetterhead ( );
__declspec(implementation_key(3628)) void _LetterContent::PutLetterhead ( VARIANT_BOOL prop );
__declspec(implementation_key(3629)) enum WdLetterheadLocation _LetterContent::GetLetterheadLocation ( );
__declspec(implementation_key(3630)) void _LetterContent::PutLetterheadLocation ( enum WdLetterheadLocation prop );
__declspec(implementation_key(3631)) float _LetterContent::GetLetterheadSize ( );
__declspec(implementation_key(3632)) void _LetterContent::PutLetterheadSize ( float prop );
__declspec(implementation_key(3633)) _bstr_t _LetterContent::GetRecipientName ( );
__declspec(implementation_key(3634)) void _LetterContent::PutRecipientName ( _bstr_t prop );
__declspec(implementation_key(3635)) _bstr_t _LetterContent::GetRecipientAddress ( );
__declspec(implementation_key(3636)) void _LetterContent::PutRecipientAddress ( _bstr_t prop );
__declspec(implementation_key(3637)) _bstr_t _LetterContent::GetSalutation ( );
__declspec(implementation_key(3638)) void _LetterContent::PutSalutation ( _bstr_t prop );
__declspec(implementation_key(3639)) enum WdSalutationType _LetterContent::GetSalutationType ( );
__declspec(implementation_key(3640)) void _LetterContent::PutSalutationType ( enum WdSalutationType prop );
__declspec(implementation_key(3641)) _bstr_t _LetterContent::GetRecipientReference ( );
__declspec(implementation_key(3642)) void _LetterContent::PutRecipientReference ( _bstr_t prop );
__declspec(implementation_key(3643)) _bstr_t _LetterContent::GetMailingInstructions ( );
__declspec(implementation_key(3644)) void _LetterContent::PutMailingInstructions ( _bstr_t prop );
__declspec(implementation_key(3645)) _bstr_t _LetterContent::GetAttentionLine ( );
__declspec(implementation_key(3646)) void _LetterContent::PutAttentionLine ( _bstr_t prop );
__declspec(implementation_key(3647)) _bstr_t _LetterContent::GetSubject ( );
__declspec(implementation_key(3648)) void _LetterContent::PutSubject ( _bstr_t prop );
__declspec(implementation_key(3649)) long _LetterContent::GetEnclosureNumber ( );
__declspec(implementation_key(3650)) void _LetterContent::PutEnclosureNumber ( long prop );
__declspec(implementation_key(3651)) _bstr_t _LetterContent::GetCCList ( );
__declspec(implementation_key(3652)) void _LetterContent::PutCCList ( _bstr_t prop );
__declspec(implementation_key(3653)) _bstr_t _LetterContent::GetReturnAddress ( );
__declspec(implementation_key(3654)) void _LetterContent::PutReturnAddress ( _bstr_t prop );
__declspec(implementation_key(3655)) _bstr_t _LetterContent::GetSenderName ( );
__declspec(implementation_key(3656)) void _LetterContent::PutSenderName ( _bstr_t prop );
__declspec(implementation_key(3657)) _bstr_t _LetterContent::GetClosing ( );
__declspec(implementation_key(3658)) void _LetterContent::PutClosing ( _bstr_t prop );
__declspec(implementation_key(3659)) _bstr_t _LetterContent::GetSenderCompany ( );
__declspec(implementation_key(3660)) void _LetterContent::PutSenderCompany ( _bstr_t prop );
__declspec(implementation_key(3661)) _bstr_t _LetterContent::GetSenderJobTitle ( );
__declspec(implementation_key(3662)) void _LetterContent::PutSenderJobTitle ( _bstr_t prop );
__declspec(implementation_key(3663)) _bstr_t _LetterContent::GetSenderInitials ( );
__declspec(implementation_key(3664)) void _LetterContent::PutSenderInitials ( _bstr_t prop );
__declspec(implementation_key(3665)) VARIANT_BOOL _LetterContent::GetInfoBlock ( );
__declspec(implementation_key(3666)) void _LetterContent::PutInfoBlock ( VARIANT_BOOL prop );
__declspec(implementation_key(3667)) _bstr_t _LetterContent::GetRecipientCode ( );
__declspec(implementation_key(3668)) void _LetterContent::PutRecipientCode ( _bstr_t prop );
__declspec(implementation_key(3669)) enum WdSalutationGender _LetterContent::GetRecipientGender ( );
__declspec(implementation_key(3670)) void _LetterContent::PutRecipientGender ( enum WdSalutationGender prop );
__declspec(implementation_key(3671)) _bstr_t _LetterContent::GetReturnAddressShortForm ( );
__declspec(implementation_key(3672)) void _LetterContent::PutReturnAddressShortForm ( _bstr_t prop );
__declspec(implementation_key(3673)) _bstr_t _LetterContent::GetSenderCity ( );
__declspec(implementation_key(3674)) void _LetterContent::PutSenderCity ( _bstr_t prop );
__declspec(implementation_key(3675)) _bstr_t _LetterContent::GetSenderCode ( );
__declspec(implementation_key(3676)) void _LetterContent::PutSenderCode ( _bstr_t prop );
__declspec(implementation_key(3677)) enum WdSalutationGender _LetterContent::GetSenderGender ( );
__declspec(implementation_key(3678)) void _LetterContent::PutSenderGender ( enum WdSalutationGender prop );
__declspec(implementation_key(3679)) _bstr_t _LetterContent::GetSenderReference ( );
__declspec(implementation_key(3680)) void _LetterContent::PutSenderReference ( _bstr_t prop );
__declspec(implementation_key(3681)) _ApplicationPtr View::GetApplication ( );
__declspec(implementation_key(3682)) long View::GetCreator ( );
__declspec(implementation_key(3683)) IDispatchPtr View::GetParent ( );
__declspec(implementation_key(3684)) enum WdViewType View::GetType ( );
__declspec(implementation_key(3685)) void View::PutType ( enum WdViewType prop );
__declspec(implementation_key(3686)) VARIANT_BOOL View::GetFullScreen ( );
__declspec(implementation_key(3687)) void View::PutFullScreen ( VARIANT_BOOL prop );
__declspec(implementation_key(3688)) VARIANT_BOOL View::GetDraft ( );
__declspec(implementation_key(3689)) void View::PutDraft ( VARIANT_BOOL prop );
__declspec(implementation_key(3690)) VARIANT_BOOL View::GetShowAll ( );
__declspec(implementation_key(3691)) void View::PutShowAll ( VARIANT_BOOL prop );
__declspec(implementation_key(3692)) VARIANT_BOOL View::GetShowFieldCodes ( );
__declspec(implementation_key(3693)) void View::PutShowFieldCodes ( VARIANT_BOOL prop );
__declspec(implementation_key(3694)) VARIANT_BOOL View::GetMailMergeDataView ( );
__declspec(implementation_key(3695)) void View::PutMailMergeDataView ( VARIANT_BOOL prop );
__declspec(implementation_key(3696)) VARIANT_BOOL View::GetMagnifier ( );
__declspec(implementation_key(3697)) void View::PutMagnifier ( VARIANT_BOOL prop );
__declspec(implementation_key(3698)) VARIANT_BOOL View::GetShowFirstLineOnly ( );
__declspec(implementation_key(3699)) void View::PutShowFirstLineOnly ( VARIANT_BOOL prop );
__declspec(implementation_key(3700)) VARIANT_BOOL View::GetShowFormat ( );
__declspec(implementation_key(3701)) void View::PutShowFormat ( VARIANT_BOOL prop );
__declspec(implementation_key(3702)) ZoomPtr View::GetZoom ( );
__declspec(implementation_key(3703)) VARIANT_BOOL View::GetShowObjectAnchors ( );
__declspec(implementation_key(3704)) void View::PutShowObjectAnchors ( VARIANT_BOOL prop );
__declspec(implementation_key(3705)) VARIANT_BOOL View::GetShowTextBoundaries ( );
__declspec(implementation_key(3706)) void View::PutShowTextBoundaries ( VARIANT_BOOL prop );
__declspec(implementation_key(3707)) VARIANT_BOOL View::GetShowHighlight ( );
__declspec(implementation_key(3708)) void View::PutShowHighlight ( VARIANT_BOOL prop );
__declspec(implementation_key(3709)) VARIANT_BOOL View::GetShowDrawings ( );
__declspec(implementation_key(3710)) void View::PutShowDrawings ( VARIANT_BOOL prop );
__declspec(implementation_key(3711)) VARIANT_BOOL View::GetShowTabs ( );
__declspec(implementation_key(3712)) void View::PutShowTabs ( VARIANT_BOOL prop );
__declspec(implementation_key(3713)) VARIANT_BOOL View::GetShowSpaces ( );
__declspec(implementation_key(3714)) void View::PutShowSpaces ( VARIANT_BOOL prop );
__declspec(implementation_key(3715)) VARIANT_BOOL View::GetShowParagraphs ( );
__declspec(implementation_key(3716)) void View::PutShowParagraphs ( VARIANT_BOOL prop );
__declspec(implementation_key(3717)) VARIANT_BOOL View::GetShowHyphens ( );
__declspec(implementation_key(3718)) void View::PutShowHyphens ( VARIANT_BOOL prop );
__declspec(implementation_key(3719)) VARIANT_BOOL View::GetShowHiddenText ( );
__declspec(implementation_key(3720)) void View::PutShowHiddenText ( VARIANT_BOOL prop );
__declspec(implementation_key(3721)) VARIANT_BOOL View::GetWrapToWindow ( );
__declspec(implementation_key(3722)) void View::PutWrapToWindow ( VARIANT_BOOL prop );
__declspec(implementation_key(3723)) VARIANT_BOOL View::GetShowPicturePlaceHolders ( );
__declspec(implementation_key(3724)) void View::PutShowPicturePlaceHolders ( VARIANT_BOOL prop );
__declspec(implementation_key(3725)) VARIANT_BOOL View::GetShowBookmarks ( );
__declspec(implementation_key(3726)) void View::PutShowBookmarks ( VARIANT_BOOL prop );
__declspec(implementation_key(3727)) enum WdFieldShading View::GetFieldShading ( );
__declspec(implementation_key(3728)) void View::PutFieldShading ( enum WdFieldShading prop );
__declspec(implementation_key(3729)) VARIANT_BOOL View::GetShowAnimation ( );
__declspec(implementation_key(3730)) void View::PutShowAnimation ( VARIANT_BOOL prop );
__declspec(implementation_key(3731)) VARIANT_BOOL View::GetTableGridlines ( );
__declspec(implementation_key(3732)) void View::PutTableGridlines ( VARIANT_BOOL prop );
__declspec(implementation_key(3733)) long View::GetEnlargeFontsLessThan ( );
__declspec(implementation_key(3734)) void View::PutEnlargeFontsLessThan ( long prop );
__declspec(implementation_key(3735)) VARIANT_BOOL View::GetShowMainTextLayer ( );
__declspec(implementation_key(3736)) void View::PutShowMainTextLayer ( VARIANT_BOOL prop );
__declspec(implementation_key(3737)) enum WdSeekView View::GetSeekView ( );
__declspec(implementation_key(3738)) void View::PutSeekView ( enum WdSeekView prop );
__declspec(implementation_key(3739)) enum WdSpecialPane View::GetSplitSpecial ( );
__declspec(implementation_key(3740)) void View::PutSplitSpecial ( enum WdSpecialPane prop );
__declspec(implementation_key(3741)) long View::GetBrowseToWindow ( );
__declspec(implementation_key(3742)) void View::PutBrowseToWindow ( long prop );
__declspec(implementation_key(3743)) VARIANT_BOOL View::GetShowOptionalBreaks ( );
__declspec(implementation_key(3744)) void View::PutShowOptionalBreaks ( VARIANT_BOOL prop );
__declspec(implementation_key(3745)) HRESULT View::CollapseOutline ( VARIANT * Range );
__declspec(implementation_key(3746)) HRESULT View::ExpandOutline ( VARIANT * Range );
__declspec(implementation_key(3747)) HRESULT View::ShowAllHeadings ( );
__declspec(implementation_key(3748)) HRESULT View::ShowHeading ( long Level );
__declspec(implementation_key(3749)) HRESULT View::PreviousHeaderFooter ( );
__declspec(implementation_key(3750)) HRESULT View::NextHeaderFooter ( );
__declspec(implementation_key(3751)) _ApplicationPtr Zoom::GetApplication ( );
__declspec(implementation_key(3752)) long Zoom::GetCreator ( );
__declspec(implementation_key(3753)) IDispatchPtr Zoom::GetParent ( );
__declspec(implementation_key(3754)) long Zoom::GetPercentage ( );
__declspec(implementation_key(3755)) void Zoom::PutPercentage ( long prop );
__declspec(implementation_key(3756)) enum WdPageFit Zoom::GetPageFit ( );
__declspec(implementation_key(3757)) void Zoom::PutPageFit ( enum WdPageFit prop );
__declspec(implementation_key(3758)) long Zoom::GetPageRows ( );
__declspec(implementation_key(3759)) void Zoom::PutPageRows ( long prop );
__declspec(implementation_key(3760)) long Zoom::GetPageColumns ( );
__declspec(implementation_key(3761)) void Zoom::PutPageColumns ( long prop );
__declspec(implementation_key(3762)) _ApplicationPtr Zooms::GetApplication ( );
__declspec(implementation_key(3763)) long Zooms::GetCreator ( );
__declspec(implementation_key(3764)) IDispatchPtr Zooms::GetParent ( );
__declspec(implementation_key(3765)) ZoomPtr Zooms::Item ( enum WdViewType Index );
__declspec(implementation_key(3766)) _ApplicationPtr InlineShape::GetApplication ( );
__declspec(implementation_key(3767)) long InlineShape::GetCreator ( );
__declspec(implementation_key(3768)) IDispatchPtr InlineShape::GetParent ( );
__declspec(implementation_key(3769)) BordersPtr InlineShape::GetBorders ( );
__declspec(implementation_key(3770)) void InlineShape::PutBorders ( struct Borders * prop );
__declspec(implementation_key(3771)) RangePtr InlineShape::GetRange ( );
__declspec(implementation_key(3772)) LinkFormatPtr InlineShape::GetLinkFormat ( );
__declspec(implementation_key(3773)) FieldPtr InlineShape::GetField ( );
__declspec(implementation_key(3774)) OLEFormatPtr InlineShape::GetOLEFormat ( );
__declspec(implementation_key(3775)) enum WdInlineShapeType InlineShape::GetType ( );
__declspec(implementation_key(3776)) HyperlinkPtr InlineShape::GetHyperlink ( );
__declspec(implementation_key(3777)) float InlineShape::GetHeight ( );
__declspec(implementation_key(3778)) void InlineShape::PutHeight ( float prop );
__declspec(implementation_key(3779)) float InlineShape::GetWidth ( );
__declspec(implementation_key(3780)) void InlineShape::PutWidth ( float prop );
__declspec(implementation_key(3781)) float InlineShape::GetScaleHeight ( );
__declspec(implementation_key(3782)) void InlineShape::PutScaleHeight ( float prop );
__declspec(implementation_key(3783)) float InlineShape::GetScaleWidth ( );
__declspec(implementation_key(3784)) void InlineShape::PutScaleWidth ( float prop );
__declspec(implementation_key(3785)) enum Office::MsoTriState InlineShape::GetLockAspectRatio ( );
__declspec(implementation_key(3786)) void InlineShape::PutLockAspectRatio ( enum Office::MsoTriState prop );
__declspec(implementation_key(3787)) LineFormatPtr InlineShape::GetLine ( );
__declspec(implementation_key(3788)) FillFormatPtr InlineShape::GetFill ( );
__declspec(implementation_key(3789)) PictureFormatPtr InlineShape::GetPictureFormat ( );
__declspec(implementation_key(3790)) void InlineShape::PutPictureFormat ( struct PictureFormat * prop );
__declspec(implementation_key(3791)) HRESULT InlineShape::Activate ( );
__declspec(implementation_key(3792)) HRESULT InlineShape::Reset ( );
__declspec(implementation_key(3793)) HRESULT InlineShape::Delete ( );
__declspec(implementation_key(3794)) HRESULT InlineShape::Select ( );
__declspec(implementation_key(3795)) ShapePtr InlineShape::ConvertToShape ( );
__declspec(implementation_key(3796)) HorizontalLineFormatPtr InlineShape::GetHorizontalLineFormat ( );
__declspec(implementation_key(3797)) Office::ScriptPtr InlineShape::GetScript ( );
__declspec(implementation_key(3798)) long InlineShape::GetOWSAnchor ( );
__declspec(implementation_key(3799)) TextEffectFormatPtr InlineShape::GetTextEffect ( );
__declspec(implementation_key(3800)) void InlineShape::PutTextEffect ( struct TextEffectFormat * prop );
__declspec(implementation_key(3801)) _bstr_t InlineShape::GetAlternativeText ( );
__declspec(implementation_key(3802)) void InlineShape::PutAlternativeText ( _bstr_t prop );
__declspec(implementation_key(3803)) _ApplicationPtr InlineShapes::GetApplication ( );
__declspec(implementation_key(3804)) long InlineShapes::GetCreator ( );
__declspec(implementation_key(3805)) IDispatchPtr InlineShapes::GetParent ( );
__declspec(implementation_key(3806)) long InlineShapes::GetCount ( );
__declspec(implementation_key(3807)) IUnknownPtr InlineShapes::Get_NewEnum ( );
__declspec(implementation_key(3808)) InlineShapePtr InlineShapes::Item ( long Index );
__declspec(implementation_key(3809)) InlineShapePtr InlineShapes::AddPicture ( _bstr_t FileName, VARIANT * LinkToFile, VARIANT * SaveWithDocument, VARIANT * Range );
__declspec(implementation_key(3810)) InlineShapePtr InlineShapes::AddOLEObject ( VARIANT * ClassType, VARIANT * FileName, VARIANT * LinkToFile, VARIANT * DisplayAsIcon, VARIANT * IconFileName, VARIANT * IconIndex, VARIANT * IconLabel, VARIANT * Range );
__declspec(implementation_key(3811)) InlineShapePtr InlineShapes::AddOLEControl ( VARIANT * ClassType, VARIANT * Range );
__declspec(implementation_key(3812)) InlineShapePtr InlineShapes::New ( struct Range * Range );
__declspec(implementation_key(3813)) InlineShapePtr InlineShapes::AddHorizontalLine ( _bstr_t FileName, VARIANT * Range );
__declspec(implementation_key(3814)) InlineShapePtr InlineShapes::AddHorizontalLineStandard ( VARIANT * Range );
__declspec(implementation_key(3815)) InlineShapePtr InlineShapes::AddPictureBullet ( _bstr_t FileName, VARIANT * Range );
__declspec(implementation_key(3816)) _ApplicationPtr SpellingSuggestions::GetApplication ( );
__declspec(implementation_key(3817)) long SpellingSuggestions::GetCreator ( );
__declspec(implementation_key(3818)) IDispatchPtr SpellingSuggestions::GetParent ( );
__declspec(implementation_key(3819)) IUnknownPtr SpellingSuggestions::Get_NewEnum ( );
__declspec(implementation_key(3820)) long SpellingSuggestions::GetCount ( );
__declspec(implementation_key(3821)) enum WdSpellingErrorType SpellingSuggestions::GetSpellingErrorType ( );
__declspec(implementation_key(3822)) SpellingSuggestionPtr SpellingSuggestions::Item ( long Index );
__declspec(implementation_key(3823)) _ApplicationPtr SpellingSuggestion::GetApplication ( );
__declspec(implementation_key(3824)) long SpellingSuggestion::GetCreator ( );
__declspec(implementation_key(3825)) IDispatchPtr SpellingSuggestion::GetParent ( );
__declspec(implementation_key(3826)) _bstr_t SpellingSuggestion::GetName ( );
__declspec(implementation_key(3827)) _ApplicationPtr Dictionaries::GetApplication ( );
__declspec(implementation_key(3828)) long Dictionaries::GetCreator ( );
__declspec(implementation_key(3829)) IDispatchPtr Dictionaries::GetParent ( );
__declspec(implementation_key(3830)) IUnknownPtr Dictionaries::Get_NewEnum ( );
__declspec(implementation_key(3831)) long Dictionaries::GetCount ( );
__declspec(implementation_key(3832)) long Dictionaries::GetMaximum ( );
__declspec(implementation_key(3833)) DictionaryPtr Dictionaries::GetActiveCustomDictionary ( );
__declspec(implementation_key(3834)) void Dictionaries::PutActiveCustomDictionary ( struct Dictionary * prop );
__declspec(implementation_key(3835)) DictionaryPtr Dictionaries::Item ( VARIANT * Index );
__declspec(implementation_key(3836)) DictionaryPtr Dictionaries::Add ( _bstr_t FileName );
__declspec(implementation_key(3837)) HRESULT Dictionaries::ClearAll ( );
__declspec(implementation_key(3838)) _ApplicationPtr HangulHanjaConversionDictionaries::GetApplication ( );
__declspec(implementation_key(3839)) long HangulHanjaConversionDictionaries::GetCreator ( );
__declspec(implementation_key(3840)) IDispatchPtr HangulHanjaConversionDictionaries::GetParent ( );
__declspec(implementation_key(3841)) IUnknownPtr HangulHanjaConversionDictionaries::Get_NewEnum ( );
__declspec(implementation_key(3842)) long HangulHanjaConversionDictionaries::GetCount ( );
__declspec(implementation_key(3843)) long HangulHanjaConversionDictionaries::GetMaximum ( );
__declspec(implementation_key(3844)) DictionaryPtr HangulHanjaConversionDictionaries::GetActiveCustomDictionary ( );
__declspec(implementation_key(3845)) void HangulHanjaConversionDictionaries::PutActiveCustomDictionary ( struct Dictionary * prop );
__declspec(implementation_key(3846)) DictionaryPtr HangulHanjaConversionDictionaries::GetBuiltinDictionary ( );
__declspec(implementation_key(3847)) DictionaryPtr HangulHanjaConversionDictionaries::Item ( VARIANT * Index );
__declspec(implementation_key(3848)) DictionaryPtr HangulHanjaConversionDictionaries::Add ( _bstr_t FileName );
__declspec(implementation_key(3849)) HRESULT HangulHanjaConversionDictionaries::ClearAll ( );
__declspec(implementation_key(3850)) _ApplicationPtr Dictionary::GetApplication ( );
__declspec(implementation_key(3851)) long Dictionary::GetCreator ( );
__declspec(implementation_key(3852)) IDispatchPtr Dictionary::GetParent ( );
__declspec(implementation_key(3853)) _bstr_t Dictionary::GetName ( );
__declspec(implementation_key(3854)) _bstr_t Dictionary::GetPath ( );
__declspec(implementation_key(3855)) enum WdLanguageID Dictionary::GetLanguageID ( );
__declspec(implementation_key(3856)) void Dictionary::PutLanguageID ( enum WdLanguageID prop );
__declspec(implementation_key(3857)) VARIANT_BOOL Dictionary::GetReadOnly ( );
__declspec(implementation_key(3858)) enum WdDictionaryType Dictionary::GetType ( );
__declspec(implementation_key(3859)) VARIANT_BOOL Dictionary::GetLanguageSpecific ( );
__declspec(implementation_key(3860)) void Dictionary::PutLanguageSpecific ( VARIANT_BOOL prop );
__declspec(implementation_key(3861)) HRESULT Dictionary::Delete ( );
__declspec(implementation_key(3862)) _ApplicationPtr ReadabilityStatistics::GetApplication ( );
__declspec(implementation_key(3863)) long ReadabilityStatistics::GetCreator ( );
__declspec(implementation_key(3864)) IDispatchPtr ReadabilityStatistics::GetParent ( );
__declspec(implementation_key(3865)) IUnknownPtr ReadabilityStatistics::Get_NewEnum ( );
__declspec(implementation_key(3866)) long ReadabilityStatistics::GetCount ( );
__declspec(implementation_key(3867)) ReadabilityStatisticPtr ReadabilityStatistics::Item ( VARIANT * Index );
__declspec(implementation_key(3868)) _ApplicationPtr ReadabilityStatistic::GetApplication ( );
__declspec(implementation_key(3869)) long ReadabilityStatistic::GetCreator ( );
__declspec(implementation_key(3870)) IDispatchPtr ReadabilityStatistic::GetParent ( );
__declspec(implementation_key(3871)) _bstr_t ReadabilityStatistic::GetName ( );
__declspec(implementation_key(3872)) float ReadabilityStatistic::GetValue ( );
__declspec(implementation_key(3873)) _ApplicationPtr Versions::GetApplication ( );
__declspec(implementation_key(3874)) long Versions::GetCreator ( );
__declspec(implementation_key(3875)) IDispatchPtr Versions::GetParent ( );
__declspec(implementation_key(3876)) IUnknownPtr Versions::Get_NewEnum ( );
__declspec(implementation_key(3877)) long Versions::GetCount ( );
__declspec(implementation_key(3878)) enum WdAutoVersions Versions::GetAutoVersion ( );
__declspec(implementation_key(3879)) void Versions::PutAutoVersion ( enum WdAutoVersions prop );
__declspec(implementation_key(3880)) VersionPtr Versions::Item ( long Index );
__declspec(implementation_key(3881)) HRESULT Versions::Save ( VARIANT * Comment );
__declspec(implementation_key(3882)) _ApplicationPtr Version::GetApplication ( );
__declspec(implementation_key(3883)) long Version::GetCreator ( );
__declspec(implementation_key(3884)) IDispatchPtr Version::GetParent ( );
__declspec(implementation_key(3885)) _bstr_t Version::GetSavedBy ( );
__declspec(implementation_key(3886)) _bstr_t Version::GetComment ( );
__declspec(implementation_key(3887)) DATE Version::GetDate ( );
__declspec(implementation_key(3888)) long Version::GetIndex ( );
__declspec(implementation_key(3889)) HRESULT Version::OpenOld ( );
__declspec(implementation_key(3890)) HRESULT Version::Delete ( );
__declspec(implementation_key(3891)) _DocumentPtr Version::Open ( );
__declspec(implementation_key(3892)) _ApplicationPtr Options::GetApplication ( );
__declspec(implementation_key(3893)) long Options::GetCreator ( );
__declspec(implementation_key(3894)) IDispatchPtr Options::GetParent ( );
__declspec(implementation_key(3895)) VARIANT_BOOL Options::GetAllowAccentedUppercase ( );
__declspec(implementation_key(3896)) void Options::PutAllowAccentedUppercase ( VARIANT_BOOL prop );
__declspec(implementation_key(3897)) VARIANT_BOOL Options::GetWPHelp ( );
__declspec(implementation_key(3898)) void Options::PutWPHelp ( VARIANT_BOOL prop );
__declspec(implementation_key(3899)) VARIANT_BOOL Options::GetWPDocNavKeys ( );
__declspec(implementation_key(3900)) void Options::PutWPDocNavKeys ( VARIANT_BOOL prop );
__declspec(implementation_key(3901)) VARIANT_BOOL Options::GetPagination ( );
__declspec(implementation_key(3902)) void Options::PutPagination ( VARIANT_BOOL prop );
__declspec(implementation_key(3903)) VARIANT_BOOL Options::GetBlueScreen ( );
__declspec(implementation_key(3904)) void Options::PutBlueScreen ( VARIANT_BOOL prop );
__declspec(implementation_key(3905)) VARIANT_BOOL Options::GetEnableSound ( );
__declspec(implementation_key(3906)) void Options::PutEnableSound ( VARIANT_BOOL prop );
__declspec(implementation_key(3907)) VARIANT_BOOL Options::GetConfirmConversions ( );
__declspec(implementation_key(3908)) void Options::PutConfirmConversions ( VARIANT_BOOL prop );
__declspec(implementation_key(3909)) VARIANT_BOOL Options::GetUpdateLinksAtOpen ( );
__declspec(implementation_key(3910)) void Options::PutUpdateLinksAtOpen ( VARIANT_BOOL prop );
__declspec(implementation_key(3911)) VARIANT_BOOL Options::GetSendMailAttach ( );
__declspec(implementation_key(3912)) void Options::PutSendMailAttach ( VARIANT_BOOL prop );
__declspec(implementation_key(3913)) enum WdMeasurementUnits Options::GetMeasurementUnit ( );
__declspec(implementation_key(3914)) void Options::PutMeasurementUnit ( enum WdMeasurementUnits prop );
__declspec(implementation_key(3915)) long Options::GetButtonFieldClicks ( );
__declspec(implementation_key(3916)) void Options::PutButtonFieldClicks ( long prop );
__declspec(implementation_key(3917)) VARIANT_BOOL Options::GetShortMenuNames ( );
__declspec(implementation_key(3918)) void Options::PutShortMenuNames ( VARIANT_BOOL prop );
__declspec(implementation_key(3919)) VARIANT_BOOL Options::GetRTFInClipboard ( );
__declspec(implementation_key(3920)) void Options::PutRTFInClipboard ( VARIANT_BOOL prop );
__declspec(implementation_key(3921)) VARIANT_BOOL Options::GetUpdateFieldsAtPrint ( );
__declspec(implementation_key(3922)) void Options::PutUpdateFieldsAtPrint ( VARIANT_BOOL prop );
__declspec(implementation_key(3923)) VARIANT_BOOL Options::GetPrintProperties ( );
__declspec(implementation_key(3924)) void Options::PutPrintProperties ( VARIANT_BOOL prop );
__declspec(implementation_key(3925)) VARIANT_BOOL Options::GetPrintFieldCodes ( );
__declspec(implementation_key(3926)) void Options::PutPrintFieldCodes ( VARIANT_BOOL prop );
__declspec(implementation_key(3927)) VARIANT_BOOL Options::GetPrintComments ( );
__declspec(implementation_key(3928)) void Options::PutPrintComments ( VARIANT_BOOL prop );
__declspec(implementation_key(3929)) VARIANT_BOOL Options::GetPrintHiddenText ( );
__declspec(implementation_key(3930)) void Options::PutPrintHiddenText ( VARIANT_BOOL prop );
__declspec(implementation_key(3931)) VARIANT_BOOL Options::GetEnvelopeFeederInstalled ( );
__declspec(implementation_key(3932)) VARIANT_BOOL Options::GetUpdateLinksAtPrint ( );
__declspec(implementation_key(3933)) void Options::PutUpdateLinksAtPrint ( VARIANT_BOOL prop );
__declspec(implementation_key(3934)) VARIANT_BOOL Options::GetPrintBackground ( );
__declspec(implementation_key(3935)) void Options::PutPrintBackground ( VARIANT_BOOL prop );
__declspec(implementation_key(3936)) VARIANT_BOOL Options::GetPrintDrawingObjects ( );
__declspec(implementation_key(3937)) void Options::PutPrintDrawingObjects ( VARIANT_BOOL prop );
__declspec(implementation_key(3938)) _bstr_t Options::GetDefaultTray ( );
__declspec(implementation_key(3939)) void Options::PutDefaultTray ( _bstr_t prop );
__declspec(implementation_key(3940)) long Options::GetDefaultTrayID ( );
__declspec(implementation_key(3941)) void Options::PutDefaultTrayID ( long prop );
__declspec(implementation_key(3942)) VARIANT_BOOL Options::GetCreateBackup ( );
__declspec(implementation_key(3943)) void Options::PutCreateBackup ( VARIANT_BOOL prop );
__declspec(implementation_key(3944)) VARIANT_BOOL Options::GetAllowFastSave ( );
__declspec(implementation_key(3945)) void Options::PutAllowFastSave ( VARIANT_BOOL prop );
__declspec(implementation_key(3946)) VARIANT_BOOL Options::GetSavePropertiesPrompt ( );
__declspec(implementation_key(3947)) void Options::PutSavePropertiesPrompt ( VARIANT_BOOL prop );
__declspec(implementation_key(3948)) VARIANT_BOOL Options::GetSaveNormalPrompt ( );
__declspec(implementation_key(3949)) void Options::PutSaveNormalPrompt ( VARIANT_BOOL prop );
__declspec(implementation_key(3950)) long Options::GetSaveInterval ( );
__declspec(implementation_key(3951)) void Options::PutSaveInterval ( long prop );
__declspec(implementation_key(3952)) VARIANT_BOOL Options::GetBackgroundSave ( );
__declspec(implementation_key(3953)) void Options::PutBackgroundSave ( VARIANT_BOOL prop );
__declspec(implementation_key(3954)) enum WdInsertedTextMark Options::GetInsertedTextMark ( );
__declspec(implementation_key(3955)) void Options::PutInsertedTextMark ( enum WdInsertedTextMark prop );
__declspec(implementation_key(3956)) enum WdDeletedTextMark Options::GetDeletedTextMark ( );
__declspec(implementation_key(3957)) void Options::PutDeletedTextMark ( enum WdDeletedTextMark prop );
__declspec(implementation_key(3958)) enum WdRevisedLinesMark Options::GetRevisedLinesMark ( );
__declspec(implementation_key(3959)) void Options::PutRevisedLinesMark ( enum WdRevisedLinesMark prop );
__declspec(implementation_key(3960)) enum WdColorIndex Options::GetInsertedTextColor ( );
__declspec(implementation_key(3961)) void Options::PutInsertedTextColor ( enum WdColorIndex prop );
__declspec(implementation_key(3962)) enum WdColorIndex Options::GetDeletedTextColor ( );
__declspec(implementation_key(3963)) void Options::PutDeletedTextColor ( enum WdColorIndex prop );
__declspec(implementation_key(3964)) enum WdColorIndex Options::GetRevisedLinesColor ( );
__declspec(implementation_key(3965)) void Options::PutRevisedLinesColor ( enum WdColorIndex prop );
__declspec(implementation_key(3966)) _bstr_t Options::GetDefaultFilePath ( enum WdDefaultFilePath Path );
__declspec(implementation_key(3967)) void Options::PutDefaultFilePath ( enum WdDefaultFilePath Path, _bstr_t prop );
__declspec(implementation_key(3968)) VARIANT_BOOL Options::GetOvertype ( );
__declspec(implementation_key(3969)) void Options::PutOvertype ( VARIANT_BOOL prop );
__declspec(implementation_key(3970)) VARIANT_BOOL Options::GetReplaceSelection ( );
__declspec(implementation_key(3971)) void Options::PutReplaceSelection ( VARIANT_BOOL prop );
__declspec(implementation_key(3972)) VARIANT_BOOL Options::GetAllowDragAndDrop ( );
__declspec(implementation_key(3973)) void Options::PutAllowDragAndDrop ( VARIANT_BOOL prop );
__declspec(implementation_key(3974)) VARIANT_BOOL Options::GetAutoWordSelection ( );
__declspec(implementation_key(3975)) void Options::PutAutoWordSelection ( VARIANT_BOOL prop );
__declspec(implementation_key(3976)) VARIANT_BOOL Options::GetINSKeyForPaste ( );
__declspec(implementation_key(3977)) void Options::PutINSKeyForPaste ( VARIANT_BOOL prop );
__declspec(implementation_key(3978)) VARIANT_BOOL Options::GetSmartCutPaste ( );
__declspec(implementation_key(3979)) void Options::PutSmartCutPaste ( VARIANT_BOOL prop );
__declspec(implementation_key(3980)) VARIANT_BOOL Options::GetTabIndentKey ( );
__declspec(implementation_key(3981)) void Options::PutTabIndentKey ( VARIANT_BOOL prop );
__declspec(implementation_key(3982)) _bstr_t Options::GetPictureEditor ( );
__declspec(implementation_key(3983)) void Options::PutPictureEditor ( _bstr_t prop );
__declspec(implementation_key(3984)) VARIANT_BOOL Options::GetAnimateScreenMovements ( );
__declspec(implementation_key(3985)) void Options::PutAnimateScreenMovements ( VARIANT_BOOL prop );
__declspec(implementation_key(3986)) VARIANT_BOOL Options::GetVirusProtection ( );
__declspec(implementation_key(3987)) void Options::PutVirusProtection ( VARIANT_BOOL prop );
__declspec(implementation_key(3988)) enum WdRevisedPropertiesMark Options::GetRevisedPropertiesMark ( );
__declspec(implementation_key(3989)) void Options::PutRevisedPropertiesMark ( enum WdRevisedPropertiesMark prop );
__declspec(implementation_key(3990)) enum WdColorIndex Options::GetRevisedPropertiesColor ( );
__declspec(implementation_key(3991)) void Options::PutRevisedPropertiesColor ( enum WdColorIndex prop );
__declspec(implementation_key(3992)) VARIANT_BOOL Options::GetSnapToGrid ( );
__declspec(implementation_key(3993)) void Options::PutSnapToGrid ( VARIANT_BOOL prop );
__declspec(implementation_key(3994)) VARIANT_BOOL Options::GetSnapToShapes ( );
__declspec(implementation_key(3995)) void Options::PutSnapToShapes ( VARIANT_BOOL prop );
__declspec(implementation_key(3996)) float Options::GetGridDistanceHorizontal ( );
__declspec(implementation_key(3997)) void Options::PutGridDistanceHorizontal ( float prop );
__declspec(implementation_key(3998)) float Options::GetGridDistanceVertical ( );
__declspec(implementation_key(3999)) void Options::PutGridDistanceVertical ( float prop );
__declspec(implementation_key(4000)) float Options::GetGridOriginHorizontal ( );
__declspec(implementation_key(4001)) void Options::PutGridOriginHorizontal ( float prop );
__declspec(implementation_key(4002)) float Options::GetGridOriginVertical ( );
__declspec(implementation_key(4003)) void Options::PutGridOriginVertical ( float prop );
__declspec(implementation_key(4004)) VARIANT_BOOL Options::GetInlineConversion ( );
__declspec(implementation_key(4005)) void Options::PutInlineConversion ( VARIANT_BOOL prop );
__declspec(implementation_key(4006)) VARIANT_BOOL Options::GetIMEAutomaticControl ( );
__declspec(implementation_key(4007)) void Options::PutIMEAutomaticControl ( VARIANT_BOOL prop );
__declspec(implementation_key(4008)) VARIANT_BOOL Options::GetAutoFormatApplyHeadings ( );
__declspec(implementation_key(4009)) void Options::PutAutoFormatApplyHeadings ( VARIANT_BOOL prop );
__declspec(implementation_key(4010)) VARIANT_BOOL Options::GetAutoFormatApplyLists ( );
__declspec(implementation_key(4011)) void Options::PutAutoFormatApplyLists ( VARIANT_BOOL prop );
__declspec(implementation_key(4012)) VARIANT_BOOL Options::GetAutoFormatApplyBulletedLists ( );
__declspec(implementation_key(4013)) void Options::PutAutoFormatApplyBulletedLists ( VARIANT_BOOL prop );
__declspec(implementation_key(4014)) VARIANT_BOOL Options::GetAutoFormatApplyOtherParas ( );
__declspec(implementation_key(4015)) void Options::PutAutoFormatApplyOtherParas ( VARIANT_BOOL prop );
__declspec(implementation_key(4016)) VARIANT_BOOL Options::GetAutoFormatReplaceQuotes ( );
__declspec(implementation_key(4017)) void Options::PutAutoFormatReplaceQuotes ( VARIANT_BOOL prop );
__declspec(implementation_key(4018)) VARIANT_BOOL Options::GetAutoFormatReplaceSymbols ( );
__declspec(implementation_key(4019)) void Options::PutAutoFormatReplaceSymbols ( VARIANT_BOOL prop );
__declspec(implementation_key(4020)) VARIANT_BOOL Options::GetAutoFormatReplaceOrdinals ( );
__declspec(implementation_key(4021)) void Options::PutAutoFormatReplaceOrdinals ( VARIANT_BOOL prop );
__declspec(implementation_key(4022)) VARIANT_BOOL Options::GetAutoFormatReplaceFractions ( );
__declspec(implementation_key(4023)) void Options::PutAutoFormatReplaceFractions ( VARIANT_BOOL prop );
__declspec(implementation_key(4024)) VARIANT_BOOL Options::GetAutoFormatReplacePlainTextEmphasis ( );
__declspec(implementation_key(4025)) void Options::PutAutoFormatReplacePlainTextEmphasis ( VARIANT_BOOL prop );
__declspec(implementation_key(4026)) VARIANT_BOOL Options::GetAutoFormatPreserveStyles ( );
__declspec(implementation_key(4027)) void Options::PutAutoFormatPreserveStyles ( VARIANT_BOOL prop );
__declspec(implementation_key(4028)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeApplyHeadings ( );
__declspec(implementation_key(4029)) void Options::PutAutoFormatAsYouTypeApplyHeadings ( VARIANT_BOOL prop );
__declspec(implementation_key(4030)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeApplyBorders ( );
__declspec(implementation_key(4031)) void Options::PutAutoFormatAsYouTypeApplyBorders ( VARIANT_BOOL prop );
__declspec(implementation_key(4032)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeApplyBulletedLists ( );
__declspec(implementation_key(4033)) void Options::PutAutoFormatAsYouTypeApplyBulletedLists ( VARIANT_BOOL prop );
__declspec(implementation_key(4034)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeApplyNumberedLists ( );
__declspec(implementation_key(4035)) void Options::PutAutoFormatAsYouTypeApplyNumberedLists ( VARIANT_BOOL prop );
__declspec(implementation_key(4036)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeReplaceQuotes ( );
__declspec(implementation_key(4037)) void Options::PutAutoFormatAsYouTypeReplaceQuotes ( VARIANT_BOOL prop );
__declspec(implementation_key(4038)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeReplaceSymbols ( );
__declspec(implementation_key(4039)) void Options::PutAutoFormatAsYouTypeReplaceSymbols ( VARIANT_BOOL prop );
__declspec(implementation_key(4040)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeReplaceOrdinals ( );
__declspec(implementation_key(4041)) void Options::PutAutoFormatAsYouTypeReplaceOrdinals ( VARIANT_BOOL prop );
__declspec(implementation_key(4042)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeReplaceFractions ( );
__declspec(implementation_key(4043)) void Options::PutAutoFormatAsYouTypeReplaceFractions ( VARIANT_BOOL prop );
__declspec(implementation_key(4044)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeReplacePlainTextEmphasis ( );
__declspec(implementation_key(4045)) void Options::PutAutoFormatAsYouTypeReplacePlainTextEmphasis ( VARIANT_BOOL prop );
__declspec(implementation_key(4046)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeFormatListItemBeginning ( );
__declspec(implementation_key(4047)) void Options::PutAutoFormatAsYouTypeFormatListItemBeginning ( VARIANT_BOOL prop );
__declspec(implementation_key(4048)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeDefineStyles ( );
__declspec(implementation_key(4049)) void Options::PutAutoFormatAsYouTypeDefineStyles ( VARIANT_BOOL prop );
__declspec(implementation_key(4050)) VARIANT_BOOL Options::GetAutoFormatPlainTextWordMail ( );
__declspec(implementation_key(4051)) void Options::PutAutoFormatPlainTextWordMail ( VARIANT_BOOL prop );
__declspec(implementation_key(4052)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeReplaceHyperlinks ( );
__declspec(implementation_key(4053)) void Options::PutAutoFormatAsYouTypeReplaceHyperlinks ( VARIANT_BOOL prop );
__declspec(implementation_key(4054)) VARIANT_BOOL Options::GetAutoFormatReplaceHyperlinks ( );
__declspec(implementation_key(4055)) void Options::PutAutoFormatReplaceHyperlinks ( VARIANT_BOOL prop );
__declspec(implementation_key(4056)) enum WdColorIndex Options::GetDefaultHighlightColorIndex ( );
__declspec(implementation_key(4057)) void Options::PutDefaultHighlightColorIndex ( enum WdColorIndex prop );
__declspec(implementation_key(4058)) enum WdLineStyle Options::GetDefaultBorderLineStyle ( );
__declspec(implementation_key(4059)) void Options::PutDefaultBorderLineStyle ( enum WdLineStyle prop );
__declspec(implementation_key(4060)) VARIANT_BOOL Options::GetCheckSpellingAsYouType ( );
__declspec(implementation_key(4061)) void Options::PutCheckSpellingAsYouType ( VARIANT_BOOL prop );
__declspec(implementation_key(4062)) VARIANT_BOOL Options::GetCheckGrammarAsYouType ( );
__declspec(implementation_key(4063)) void Options::PutCheckGrammarAsYouType ( VARIANT_BOOL prop );
__declspec(implementation_key(4064)) VARIANT_BOOL Options::GetIgnoreInternetAndFileAddresses ( );
__declspec(implementation_key(4065)) void Options::PutIgnoreInternetAndFileAddresses ( VARIANT_BOOL prop );
__declspec(implementation_key(4066)) VARIANT_BOOL Options::GetShowReadabilityStatistics ( );
__declspec(implementation_key(4067)) void Options::PutShowReadabilityStatistics ( VARIANT_BOOL prop );
__declspec(implementation_key(4068)) VARIANT_BOOL Options::GetIgnoreUppercase ( );
__declspec(implementation_key(4069)) void Options::PutIgnoreUppercase ( VARIANT_BOOL prop );
__declspec(implementation_key(4070)) VARIANT_BOOL Options::GetIgnoreMixedDigits ( );
__declspec(implementation_key(4071)) void Options::PutIgnoreMixedDigits ( VARIANT_BOOL prop );
__declspec(implementation_key(4072)) VARIANT_BOOL Options::GetSuggestFromMainDictionaryOnly ( );
__declspec(implementation_key(4073)) void Options::PutSuggestFromMainDictionaryOnly ( VARIANT_BOOL prop );
__declspec(implementation_key(4074)) VARIANT_BOOL Options::GetSuggestSpellingCorrections ( );
__declspec(implementation_key(4075)) void Options::PutSuggestSpellingCorrections ( VARIANT_BOOL prop );
__declspec(implementation_key(4076)) enum WdLineWidth Options::GetDefaultBorderLineWidth ( );
__declspec(implementation_key(4077)) void Options::PutDefaultBorderLineWidth ( enum WdLineWidth prop );
__declspec(implementation_key(4078)) VARIANT_BOOL Options::GetCheckGrammarWithSpelling ( );
__declspec(implementation_key(4079)) void Options::PutCheckGrammarWithSpelling ( VARIANT_BOOL prop );
__declspec(implementation_key(4080)) enum WdOpenFormat Options::GetDefaultOpenFormat ( );
__declspec(implementation_key(4081)) void Options::PutDefaultOpenFormat ( enum WdOpenFormat prop );
__declspec(implementation_key(4082)) VARIANT_BOOL Options::GetPrintDraft ( );
__declspec(implementation_key(4083)) void Options::PutPrintDraft ( VARIANT_BOOL prop );
__declspec(implementation_key(4084)) VARIANT_BOOL Options::GetPrintReverse ( );
__declspec(implementation_key(4085)) void Options::PutPrintReverse ( VARIANT_BOOL prop );
__declspec(implementation_key(4086)) VARIANT_BOOL Options::GetMapPaperSize ( );
__declspec(implementation_key(4087)) void Options::PutMapPaperSize ( VARIANT_BOOL prop );
__declspec(implementation_key(4088)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeApplyTables ( );
__declspec(implementation_key(4089)) void Options::PutAutoFormatAsYouTypeApplyTables ( VARIANT_BOOL prop );
__declspec(implementation_key(4090)) VARIANT_BOOL Options::GetAutoFormatApplyFirstIndents ( );
__declspec(implementation_key(4091)) void Options::PutAutoFormatApplyFirstIndents ( VARIANT_BOOL prop );
__declspec(implementation_key(4092)) VARIANT_BOOL Options::GetAutoFormatMatchParentheses ( );
__declspec(implementation_key(4093)) void Options::PutAutoFormatMatchParentheses ( VARIANT_BOOL prop );
__declspec(implementation_key(4094)) VARIANT_BOOL Options::GetAutoFormatReplaceFarEastDashes ( );
__declspec(implementation_key(4095)) void Options::PutAutoFormatReplaceFarEastDashes ( VARIANT_BOOL prop );
__declspec(implementation_key(4096)) VARIANT_BOOL Options::GetAutoFormatDeleteAutoSpaces ( );
__declspec(implementation_key(4097)) void Options::PutAutoFormatDeleteAutoSpaces ( VARIANT_BOOL prop );
__declspec(implementation_key(4098)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeApplyFirstIndents ( );
__declspec(implementation_key(4099)) void Options::PutAutoFormatAsYouTypeApplyFirstIndents ( VARIANT_BOOL prop );
__declspec(implementation_key(4100)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeApplyDates ( );
__declspec(implementation_key(4101)) void Options::PutAutoFormatAsYouTypeApplyDates ( VARIANT_BOOL prop );
__declspec(implementation_key(4102)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeApplyClosings ( );
__declspec(implementation_key(4103)) void Options::PutAutoFormatAsYouTypeApplyClosings ( VARIANT_BOOL prop );
__declspec(implementation_key(4104)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeMatchParentheses ( );
__declspec(implementation_key(4105)) void Options::PutAutoFormatAsYouTypeMatchParentheses ( VARIANT_BOOL prop );
__declspec(implementation_key(4106)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeReplaceFarEastDashes ( );
__declspec(implementation_key(4107)) void Options::PutAutoFormatAsYouTypeReplaceFarEastDashes ( VARIANT_BOOL prop );
__declspec(implementation_key(4108)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeDeleteAutoSpaces ( );
__declspec(implementation_key(4109)) void Options::PutAutoFormatAsYouTypeDeleteAutoSpaces ( VARIANT_BOOL prop );
__declspec(implementation_key(4110)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeInsertClosings ( );
__declspec(implementation_key(4111)) void Options::PutAutoFormatAsYouTypeInsertClosings ( VARIANT_BOOL prop );
__declspec(implementation_key(4112)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeAutoLetterWizard ( );
__declspec(implementation_key(4113)) void Options::PutAutoFormatAsYouTypeAutoLetterWizard ( VARIANT_BOOL prop );
__declspec(implementation_key(4114)) VARIANT_BOOL Options::GetAutoFormatAsYouTypeInsertOvers ( );
__declspec(implementation_key(4115)) void Options::PutAutoFormatAsYouTypeInsertOvers ( VARIANT_BOOL prop );
__declspec(implementation_key(4116)) VARIANT_BOOL Options::GetDisplayGridLines ( );
__declspec(implementation_key(4117)) void Options::PutDisplayGridLines ( VARIANT_BOOL prop );
__declspec(implementation_key(4118)) VARIANT_BOOL Options::GetMatchFuzzyCase ( );
__declspec(implementation_key(4119)) void Options::PutMatchFuzzyCase ( VARIANT_BOOL prop );
__declspec(implementation_key(4120)) VARIANT_BOOL Options::GetMatchFuzzyByte ( );
__declspec(implementation_key(4121)) void Options::PutMatchFuzzyByte ( VARIANT_BOOL prop );
__declspec(implementation_key(4122)) VARIANT_BOOL Options::GetMatchFuzzyHiragana ( );
__declspec(implementation_key(4123)) void Options::PutMatchFuzzyHiragana ( VARIANT_BOOL prop );
__declspec(implementation_key(4124)) VARIANT_BOOL Options::GetMatchFuzzySmallKana ( );
__declspec(implementation_key(4125)) void Options::PutMatchFuzzySmallKana ( VARIANT_BOOL prop );
__declspec(implementation_key(4126)) VARIANT_BOOL Options::GetMatchFuzzyDash ( );
__declspec(implementation_key(4127)) void Options::PutMatchFuzzyDash ( VARIANT_BOOL prop );
__declspec(implementation_key(4128)) VARIANT_BOOL Options::GetMatchFuzzyIterationMark ( );
__declspec(implementation_key(4129)) void Options::PutMatchFuzzyIterationMark ( VARIANT_BOOL prop );
__declspec(implementation_key(4130)) VARIANT_BOOL Options::GetMatchFuzzyKanji ( );
__declspec(implementation_key(4131)) void Options::PutMatchFuzzyKanji ( VARIANT_BOOL prop );
__declspec(implementation_key(4132)) VARIANT_BOOL Options::GetMatchFuzzyOldKana ( );
__declspec(implementation_key(4133)) void Options::PutMatchFuzzyOldKana ( VARIANT_BOOL prop );
__declspec(implementation_key(4134)) VARIANT_BOOL Options::GetMatchFuzzyProlongedSoundMark ( );
__declspec(implementation_key(4135)) void Options::PutMatchFuzzyProlongedSoundMark ( VARIANT_BOOL prop );
__declspec(implementation_key(4136)) VARIANT_BOOL Options::GetMatchFuzzyDZ ( );
__declspec(implementation_key(4137)) void Options::PutMatchFuzzyDZ ( VARIANT_BOOL prop );
__declspec(implementation_key(4138)) VARIANT_BOOL Options::GetMatchFuzzyBV ( );
__declspec(implementation_key(4139)) void Options::PutMatchFuzzyBV ( VARIANT_BOOL prop );
__declspec(implementation_key(4140)) VARIANT_BOOL Options::GetMatchFuzzyTC ( );
__declspec(implementation_key(4141)) void Options::PutMatchFuzzyTC ( VARIANT_BOOL prop );
__declspec(implementation_key(4142)) VARIANT_BOOL Options::GetMatchFuzzyHF ( );
__declspec(implementation_key(4143)) void Options::PutMatchFuzzyHF ( VARIANT_BOOL prop );
__declspec(implementation_key(4144)) VARIANT_BOOL Options::GetMatchFuzzyZJ ( );
__declspec(implementation_key(4145)) void Options::PutMatchFuzzyZJ ( VARIANT_BOOL prop );
__declspec(implementation_key(4146)) VARIANT_BOOL Options::GetMatchFuzzyAY ( );
__declspec(implementation_key(4147)) void Options::PutMatchFuzzyAY ( VARIANT_BOOL prop );
__declspec(implementation_key(4148)) VARIANT_BOOL Options::GetMatchFuzzyKiKu ( );
__declspec(implementation_key(4149)) void Options::PutMatchFuzzyKiKu ( VARIANT_BOOL prop );
__declspec(implementation_key(4150)) VARIANT_BOOL Options::GetMatchFuzzyPunctuation ( );
__declspec(implementation_key(4151)) void Options::PutMatchFuzzyPunctuation ( VARIANT_BOOL prop );
__declspec(implementation_key(4152)) VARIANT_BOOL Options::GetMatchFuzzySpace ( );
__declspec(implementation_key(4153)) void Options::PutMatchFuzzySpace ( VARIANT_BOOL prop );
__declspec(implementation_key(4154)) VARIANT_BOOL Options::GetApplyFarEastFontsToAscii ( );
__declspec(implementation_key(4155)) void Options::PutApplyFarEastFontsToAscii ( VARIANT_BOOL prop );
__declspec(implementation_key(4156)) VARIANT_BOOL Options::GetConvertHighAnsiToFarEast ( );
__declspec(implementation_key(4157)) void Options::PutConvertHighAnsiToFarEast ( VARIANT_BOOL prop );
__declspec(implementation_key(4158)) VARIANT_BOOL Options::GetPrintOddPagesInAscendingOrder ( );
__declspec(implementation_key(4159)) void Options::PutPrintOddPagesInAscendingOrder ( VARIANT_BOOL prop );
__declspec(implementation_key(4160)) VARIANT_BOOL Options::GetPrintEvenPagesInAscendingOrder ( );
__declspec(implementation_key(4161)) void Options::PutPrintEvenPagesInAscendingOrder ( VARIANT_BOOL prop );
__declspec(implementation_key(4162)) enum WdColorIndex Options::GetDefaultBorderColorIndex ( );
__declspec(implementation_key(4163)) void Options::PutDefaultBorderColorIndex ( enum WdColorIndex prop );
__declspec(implementation_key(4164)) VARIANT_BOOL Options::GetEnableMisusedWordsDictionary ( );
__declspec(implementation_key(4165)) void Options::PutEnableMisusedWordsDictionary ( VARIANT_BOOL prop );
__declspec(implementation_key(4166)) VARIANT_BOOL Options::GetAllowCombinedAuxiliaryForms ( );
__declspec(implementation_key(4167)) void Options::PutAllowCombinedAuxiliaryForms ( VARIANT_BOOL prop );
__declspec(implementation_key(4168)) VARIANT_BOOL Options::GetHangulHanjaFastConversion ( );
__declspec(implementation_key(4169)) void Options::PutHangulHanjaFastConversion ( VARIANT_BOOL prop );
__declspec(implementation_key(4170)) VARIANT_BOOL Options::GetCheckHangulEndings ( );
__declspec(implementation_key(4171)) void Options::PutCheckHangulEndings ( VARIANT_BOOL prop );
__declspec(implementation_key(4172)) VARIANT_BOOL Options::GetEnableHangulHanjaRecentOrdering ( );
__declspec(implementation_key(4173)) void Options::PutEnableHangulHanjaRecentOrdering ( VARIANT_BOOL prop );
__declspec(implementation_key(4174)) enum WdMultipleWordConversionsMode Options::GetMultipleWordConversionsMode ( );
__declspec(implementation_key(4175)) void Options::PutMultipleWordConversionsMode ( enum WdMultipleWordConversionsMode prop );
__declspec(implementation_key(4176)) HRESULT Options::SetWPHelpOptions ( VARIANT * CommandKeyHelp, VARIANT * DocNavigationKeys, VARIANT * MouseSimulation, VARIANT * DemoGuidance, VARIANT * DemoSpeed, VARIANT * HelpType );
__declspec(implementation_key(4177)) enum WdColor Options::GetDefaultBorderColor ( );
__declspec(implementation_key(4178)) void Options::PutDefaultBorderColor ( enum WdColor prop );
__declspec(implementation_key(4179)) VARIANT_BOOL Options::GetAllowPixelUnits ( );
__declspec(implementation_key(4180)) void Options::PutAllowPixelUnits ( VARIANT_BOOL prop );
__declspec(implementation_key(4181)) VARIANT_BOOL Options::GetUseCharacterUnit ( );
__declspec(implementation_key(4182)) void Options::PutUseCharacterUnit ( VARIANT_BOOL prop );
__declspec(implementation_key(4183)) VARIANT_BOOL Options::GetAllowCompoundNounProcessing ( );
__declspec(implementation_key(4184)) void Options::PutAllowCompoundNounProcessing ( VARIANT_BOOL prop );
__declspec(implementation_key(4185)) VARIANT_BOOL Options::GetAutoKeyboardSwitching ( );
__declspec(implementation_key(4186)) void Options::PutAutoKeyboardSwitching ( VARIANT_BOOL prop );
__declspec(implementation_key(4187)) enum WdDocumentViewDirection Options::GetDocumentViewDirection ( );
__declspec(implementation_key(4188)) void Options::PutDocumentViewDirection ( enum WdDocumentViewDirection prop );
__declspec(implementation_key(4189)) enum WdArabicNumeral Options::GetArabicNumeral ( );
__declspec(implementation_key(4190)) void Options::PutArabicNumeral ( enum WdArabicNumeral prop );
__declspec(implementation_key(4191)) enum WdMonthNames Options::GetMonthNames ( );
__declspec(implementation_key(4192)) void Options::PutMonthNames ( enum WdMonthNames prop );
__declspec(implementation_key(4193)) enum WdCursorMovement Options::GetCursorMovement ( );
__declspec(implementation_key(4194)) void Options::PutCursorMovement ( enum WdCursorMovement prop );
__declspec(implementation_key(4195)) enum WdVisualSelection Options::GetVisualSelection ( );
__declspec(implementation_key(4196)) void Options::PutVisualSelection ( enum WdVisualSelection prop );
__declspec(implementation_key(4197)) VARIANT_BOOL Options::GetShowDiacritics ( );
__declspec(implementation_key(4198)) void Options::PutShowDiacritics ( VARIANT_BOOL prop );
__declspec(implementation_key(4199)) VARIANT_BOOL Options::GetShowControlCharacters ( );
__declspec(implementation_key(4200)) void Options::PutShowControlCharacters ( VARIANT_BOOL prop );
__declspec(implementation_key(4201)) VARIANT_BOOL Options::GetAddControlCharacters ( );
__declspec(implementation_key(4202)) void Options::PutAddControlCharacters ( VARIANT_BOOL prop );
__declspec(implementation_key(4203)) VARIANT_BOOL Options::GetAddBiDirectionalMarksWhenSavingTextFile ( );
__declspec(implementation_key(4204)) void Options::PutAddBiDirectionalMarksWhenSavingTextFile ( VARIANT_BOOL prop );
__declspec(implementation_key(4205)) VARIANT_BOOL Options::GetStrictInitialAlefHamza ( );
__declspec(implementation_key(4206)) void Options::PutStrictInitialAlefHamza ( VARIANT_BOOL prop );
__declspec(implementation_key(4207)) VARIANT_BOOL Options::GetStrictFinalYaa ( );
__declspec(implementation_key(4208)) void Options::PutStrictFinalYaa ( VARIANT_BOOL prop );
__declspec(implementation_key(4209)) enum WdHebSpellStart Options::GetHebrewMode ( );
__declspec(implementation_key(4210)) void Options::PutHebrewMode ( enum WdHebSpellStart prop );
__declspec(implementation_key(4211)) enum WdAraSpeller Options::GetArabicMode ( );
__declspec(implementation_key(4212)) void Options::PutArabicMode ( enum WdAraSpeller prop );
__declspec(implementation_key(4213)) VARIANT_BOOL Options::GetAllowClickAndTypeMouse ( );
__declspec(implementation_key(4214)) void Options::PutAllowClickAndTypeMouse ( VARIANT_BOOL prop );
__declspec(implementation_key(4215)) VARIANT_BOOL Options::GetUseGermanSpellingReform ( );
__declspec(implementation_key(4216)) void Options::PutUseGermanSpellingReform ( VARIANT_BOOL prop );
__declspec(implementation_key(4217)) enum WdHighAnsiText Options::GetInterpretHighAnsi ( );
__declspec(implementation_key(4218)) void Options::PutInterpretHighAnsi ( enum WdHighAnsiText prop );
__declspec(implementation_key(4219)) VARIANT_BOOL Options::GetAddHebDoubleQuote ( );
__declspec(implementation_key(4220)) void Options::PutAddHebDoubleQuote ( VARIANT_BOOL prop );
__declspec(implementation_key(4221)) VARIANT_BOOL Options::GetUseDiffDiacColor ( );
__declspec(implementation_key(4222)) void Options::PutUseDiffDiacColor ( VARIANT_BOOL prop );
__declspec(implementation_key(4223)) enum WdColor Options::GetDiacriticColorVal ( );
__declspec(implementation_key(4224)) void Options::PutDiacriticColorVal ( enum WdColor prop );
__declspec(implementation_key(4225)) VARIANT_BOOL Options::GetOptimizeForWord97byDefault ( );
__declspec(implementation_key(4226)) void Options::PutOptimizeForWord97byDefault ( VARIANT_BOOL prop );
__declspec(implementation_key(4227)) _ApplicationPtr MailMessage::GetApplication ( );
__declspec(implementation_key(4228)) long MailMessage::GetCreator ( );
__declspec(implementation_key(4229)) IDispatchPtr MailMessage::GetParent ( );
__declspec(implementation_key(4230)) HRESULT MailMessage::CheckName ( );
__declspec(implementation_key(4231)) HRESULT MailMessage::Delete ( );
__declspec(implementation_key(4232)) HRESULT MailMessage::DisplayMoveDialog ( );
__declspec(implementation_key(4233)) HRESULT MailMessage::DisplayProperties ( );
__declspec(implementation_key(4234)) HRESULT MailMessage::DisplaySelectNamesDialog ( );
__declspec(implementation_key(4235)) HRESULT MailMessage::Forward ( );
__declspec(implementation_key(4236)) HRESULT MailMessage::GoToNext ( );
__declspec(implementation_key(4237)) HRESULT MailMessage::GoToPrevious ( );
__declspec(implementation_key(4238)) HRESULT MailMessage::Reply ( );
__declspec(implementation_key(4239)) HRESULT MailMessage::ReplyAll ( );
__declspec(implementation_key(4240)) HRESULT MailMessage::ToggleHeader ( );
__declspec(implementation_key(4241)) _ApplicationPtr ProofreadingErrors::GetApplication ( );
__declspec(implementation_key(4242)) long ProofreadingErrors::GetCreator ( );
__declspec(implementation_key(4243)) IDispatchPtr ProofreadingErrors::GetParent ( );
__declspec(implementation_key(4244)) IUnknownPtr ProofreadingErrors::Get_NewEnum ( );
__declspec(implementation_key(4245)) long ProofreadingErrors::GetCount ( );
__declspec(implementation_key(4246)) enum WdProofreadingErrorType ProofreadingErrors::GetType ( );
__declspec(implementation_key(4247)) RangePtr ProofreadingErrors::Item ( long Index );
__declspec(implementation_key(4248)) _ApplicationPtr Mailer::GetApplication ( );
__declspec(implementation_key(4249)) long Mailer::GetCreator ( );
__declspec(implementation_key(4250)) IDispatchPtr Mailer::GetParent ( );
__declspec(implementation_key(4251)) _variant_t Mailer::GetBCCRecipients ( );
__declspec(implementation_key(4252)) void Mailer::PutBCCRecipients ( VARIANT * prop );
__declspec(implementation_key(4253)) _variant_t Mailer::GetCCRecipients ( );
__declspec(implementation_key(4254)) void Mailer::PutCCRecipients ( VARIANT * prop );
__declspec(implementation_key(4255)) _variant_t Mailer::GetRecipients ( );
__declspec(implementation_key(4256)) void Mailer::PutRecipients ( VARIANT * prop );
__declspec(implementation_key(4257)) _variant_t Mailer::GetEnclosures ( );
__declspec(implementation_key(4258)) void Mailer::PutEnclosures ( VARIANT * prop );
__declspec(implementation_key(4259)) _bstr_t Mailer::GetSender ( );
__declspec(implementation_key(4260)) DATE Mailer::GetSendDateTime ( );
__declspec(implementation_key(4261)) VARIANT_BOOL Mailer::GetReceived ( );
__declspec(implementation_key(4262)) _bstr_t Mailer::GetSubject ( );
__declspec(implementation_key(4263)) void Mailer::PutSubject ( _bstr_t prop );
__declspec(implementation_key(4264)) _ApplicationPtr WrapFormat::GetApplication ( );
__declspec(implementation_key(4265)) long WrapFormat::GetCreator ( );
__declspec(implementation_key(4266)) IDispatchPtr WrapFormat::GetParent ( );
__declspec(implementation_key(4267)) enum WdWrapType WrapFormat::GetType ( );
__declspec(implementation_key(4268)) void WrapFormat::PutType ( enum WdWrapType prop );
__declspec(implementation_key(4269)) enum WdWrapSideType WrapFormat::GetSide ( );
__declspec(implementation_key(4270)) void WrapFormat::PutSide ( enum WdWrapSideType prop );
__declspec(implementation_key(4271)) float WrapFormat::GetDistanceTop ( );
__declspec(implementation_key(4272)) void WrapFormat::PutDistanceTop ( float prop );
__declspec(implementation_key(4273)) float WrapFormat::GetDistanceBottom ( );
__declspec(implementation_key(4274)) void WrapFormat::PutDistanceBottom ( float prop );
__declspec(implementation_key(4275)) float WrapFormat::GetDistanceLeft ( );
__declspec(implementation_key(4276)) void WrapFormat::PutDistanceLeft ( float prop );
__declspec(implementation_key(4277)) float WrapFormat::GetDistanceRight ( );
__declspec(implementation_key(4278)) void WrapFormat::PutDistanceRight ( float prop );
__declspec(implementation_key(4279)) long WrapFormat::GetAllowOverlap ( );
__declspec(implementation_key(4280)) void WrapFormat::PutAllowOverlap ( long prop );
__declspec(implementation_key(4281)) _ApplicationPtr HangulAndAlphabetExceptions::GetApplication ( );
__declspec(implementation_key(4282)) long HangulAndAlphabetExceptions::GetCreator ( );
__declspec(implementation_key(4283)) IDispatchPtr HangulAndAlphabetExceptions::GetParent ( );
__declspec(implementation_key(4284)) IUnknownPtr HangulAndAlphabetExceptions::Get_NewEnum ( );
__declspec(implementation_key(4285)) long HangulAndAlphabetExceptions::GetCount ( );
__declspec(implementation_key(4286)) HangulAndAlphabetExceptionPtr HangulAndAlphabetExceptions::Item ( VARIANT * Index );
__declspec(implementation_key(4287)) HangulAndAlphabetExceptionPtr HangulAndAlphabetExceptions::Add ( _bstr_t Name );
__declspec(implementation_key(4288)) _ApplicationPtr HangulAndAlphabetException::GetApplication ( );
__declspec(implementation_key(4289)) long HangulAndAlphabetException::GetCreator ( );
__declspec(implementation_key(4290)) IDispatchPtr HangulAndAlphabetException::GetParent ( );
__declspec(implementation_key(4291)) long HangulAndAlphabetException::GetIndex ( );
__declspec(implementation_key(4292)) _bstr_t HangulAndAlphabetException::GetName ( );
__declspec(implementation_key(4293)) HRESULT HangulAndAlphabetException::Delete ( );
__declspec(implementation_key(4294)) _ApplicationPtr Adjustments::GetApplication ( );
__declspec(implementation_key(4295)) long Adjustments::GetCreator ( );
__declspec(implementation_key(4296)) IDispatchPtr Adjustments::GetParent ( );
__declspec(implementation_key(4297)) long Adjustments::GetCount ( );
__declspec(implementation_key(4298)) float Adjustments::GetItem ( long Index );
__declspec(implementation_key(4299)) void Adjustments::PutItem ( long Index, float prop );
__declspec(implementation_key(4300)) _ApplicationPtr CalloutFormat::GetApplication ( );
__declspec(implementation_key(4301)) long CalloutFormat::GetCreator ( );
__declspec(implementation_key(4302)) IDispatchPtr CalloutFormat::GetParent ( );
__declspec(implementation_key(4303)) enum Office::MsoTriState CalloutFormat::GetAccent ( );
__declspec(implementation_key(4304)) void CalloutFormat::PutAccent ( enum Office::MsoTriState prop );
__declspec(implementation_key(4305)) enum Office::MsoCalloutAngleType CalloutFormat::GetAngle ( );
__declspec(implementation_key(4306)) void CalloutFormat::PutAngle ( enum Office::MsoCalloutAngleType prop );
__declspec(implementation_key(4307)) enum Office::MsoTriState CalloutFormat::GetAutoAttach ( );
__declspec(implementation_key(4308)) void CalloutFormat::PutAutoAttach ( enum Office::MsoTriState prop );
__declspec(implementation_key(4309)) enum Office::MsoTriState CalloutFormat::GetAutoLength ( );
__declspec(implementation_key(4310)) enum Office::MsoTriState CalloutFormat::GetBorder ( );
__declspec(implementation_key(4311)) void CalloutFormat::PutBorder ( enum Office::MsoTriState prop );
__declspec(implementation_key(4312)) float CalloutFormat::GetDrop ( );
__declspec(implementation_key(4313)) enum Office::MsoCalloutDropType CalloutFormat::GetDropType ( );
__declspec(implementation_key(4314)) float CalloutFormat::GetGap ( );
__declspec(implementation_key(4315)) void CalloutFormat::PutGap ( float prop );
__declspec(implementation_key(4316)) float CalloutFormat::GetLength ( );
__declspec(implementation_key(4317)) enum Office::MsoCalloutType CalloutFormat::GetType ( );
__declspec(implementation_key(4318)) void CalloutFormat::PutType ( enum Office::MsoCalloutType prop );
__declspec(implementation_key(4319)) HRESULT CalloutFormat::AutomaticLength ( );
__declspec(implementation_key(4320)) HRESULT CalloutFormat::CustomDrop ( float Drop );
__declspec(implementation_key(4321)) HRESULT CalloutFormat::CustomLength ( float Length );
__declspec(implementation_key(4322)) HRESULT CalloutFormat::PresetDrop ( enum Office::MsoCalloutDropType DropType );
__declspec(implementation_key(4323)) _ApplicationPtr ColorFormat::GetApplication ( );
__declspec(implementation_key(4324)) long ColorFormat::GetCreator ( );
__declspec(implementation_key(4325)) IDispatchPtr ColorFormat::GetParent ( );
__declspec(implementation_key(4326)) long ColorFormat::GetRGB ( );
__declspec(implementation_key(4327)) void ColorFormat::PutRGB ( long prop );
__declspec(implementation_key(4328)) long ColorFormat::GetSchemeColor ( );
__declspec(implementation_key(4329)) void ColorFormat::PutSchemeColor ( long prop );
__declspec(implementation_key(4330)) enum Office::MsoColorType ColorFormat::GetType ( );
__declspec(implementation_key(4331)) _ApplicationPtr ConnectorFormat::GetApplication ( );
__declspec(implementation_key(4332)) long ConnectorFormat::GetCreator ( );
__declspec(implementation_key(4333)) enum Office::MsoTriState ConnectorFormat::GetBeginConnected ( );
__declspec(implementation_key(4334)) ShapePtr ConnectorFormat::GetBeginConnectedShape ( );
__declspec(implementation_key(4335)) long ConnectorFormat::GetBeginConnectionSite ( );
__declspec(implementation_key(4336)) enum Office::MsoTriState ConnectorFormat::GetEndConnected ( );
__declspec(implementation_key(4337)) ShapePtr ConnectorFormat::GetEndConnectedShape ( );
__declspec(implementation_key(4338)) long ConnectorFormat::GetEndConnectionSite ( );
__declspec(implementation_key(4339)) IDispatchPtr ConnectorFormat::GetParent ( );
__declspec(implementation_key(4340)) enum Office::MsoConnectorType ConnectorFormat::GetType ( );
__declspec(implementation_key(4341)) void ConnectorFormat::PutType ( enum Office::MsoConnectorType prop );
__declspec(implementation_key(4342)) HRESULT ConnectorFormat::BeginConnect ( struct Shape * * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(4343)) HRESULT ConnectorFormat::BeginDisconnect ( );
__declspec(implementation_key(4344)) HRESULT ConnectorFormat::EndConnect ( struct Shape * * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(4345)) HRESULT ConnectorFormat::EndDisconnect ( );
__declspec(implementation_key(4346)) _ApplicationPtr FillFormat::GetApplication ( );
__declspec(implementation_key(4347)) long FillFormat::GetCreator ( );
__declspec(implementation_key(4348)) IDispatchPtr FillFormat::GetParent ( );
__declspec(implementation_key(4349)) ColorFormatPtr FillFormat::GetBackColor ( );
__declspec(implementation_key(4350)) ColorFormatPtr FillFormat::GetForeColor ( );
__declspec(implementation_key(4351)) enum Office::MsoGradientColorType FillFormat::GetGradientColorType ( );
__declspec(implementation_key(4352)) float FillFormat::GetGradientDegree ( );
__declspec(implementation_key(4353)) enum Office::MsoGradientStyle FillFormat::GetGradientStyle ( );
__declspec(implementation_key(4354)) long FillFormat::GetGradientVariant ( );
__declspec(implementation_key(4355)) enum Office::MsoPatternType FillFormat::GetPattern ( );
__declspec(implementation_key(4356)) enum Office::MsoPresetGradientType FillFormat::GetPresetGradientType ( );
__declspec(implementation_key(4357)) enum Office::MsoPresetTexture FillFormat::GetPresetTexture ( );
__declspec(implementation_key(4358)) _bstr_t FillFormat::GetTextureName ( );
__declspec(implementation_key(4359)) enum Office::MsoTextureType FillFormat::GetTextureType ( );
__declspec(implementation_key(4360)) float FillFormat::GetTransparency ( );
__declspec(implementation_key(4361)) void FillFormat::PutTransparency ( float prop );
__declspec(implementation_key(4362)) enum Office::MsoFillType FillFormat::GetType ( );
__declspec(implementation_key(4363)) enum Office::MsoTriState FillFormat::GetVisible ( );
__declspec(implementation_key(4364)) void FillFormat::PutVisible ( enum Office::MsoTriState prop );
__declspec(implementation_key(4365)) HRESULT FillFormat::Background ( );
__declspec(implementation_key(4366)) HRESULT FillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree );
__declspec(implementation_key(4367)) HRESULT FillFormat::Patterned ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(4368)) HRESULT FillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(4369)) HRESULT FillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture );
__declspec(implementation_key(4370)) HRESULT FillFormat::Solid ( );
__declspec(implementation_key(4371)) HRESULT FillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant );
__declspec(implementation_key(4372)) HRESULT FillFormat::UserPicture ( _bstr_t PictureFile );
__declspec(implementation_key(4373)) HRESULT FillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(4374)) _ApplicationPtr FreeformBuilder::GetApplication ( );
__declspec(implementation_key(4375)) long FreeformBuilder::GetCreator ( );
__declspec(implementation_key(4376)) IDispatchPtr FreeformBuilder::GetParent ( );
__declspec(implementation_key(4377)) HRESULT FreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(4378)) ShapePtr FreeformBuilder::ConvertToShape ( VARIANT * Anchor );
__declspec(implementation_key(4379)) _ApplicationPtr LineFormat::GetApplication ( );
__declspec(implementation_key(4380)) long LineFormat::GetCreator ( );
__declspec(implementation_key(4381)) IDispatchPtr LineFormat::GetParent ( );
__declspec(implementation_key(4382)) ColorFormatPtr LineFormat::GetBackColor ( );
__declspec(implementation_key(4383)) enum Office::MsoArrowheadLength LineFormat::GetBeginArrowheadLength ( );
__declspec(implementation_key(4384)) void LineFormat::PutBeginArrowheadLength ( enum Office::MsoArrowheadLength prop );
__declspec(implementation_key(4385)) enum Office::MsoArrowheadStyle LineFormat::GetBeginArrowheadStyle ( );
__declspec(implementation_key(4386)) void LineFormat::PutBeginArrowheadStyle ( enum Office::MsoArrowheadStyle prop );
__declspec(implementation_key(4387)) enum Office::MsoArrowheadWidth LineFormat::GetBeginArrowheadWidth ( );
__declspec(implementation_key(4388)) void LineFormat::PutBeginArrowheadWidth ( enum Office::MsoArrowheadWidth prop );
__declspec(implementation_key(4389)) enum Office::MsoLineDashStyle LineFormat::GetDashStyle ( );
__declspec(implementation_key(4390)) void LineFormat::PutDashStyle ( enum Office::MsoLineDashStyle prop );
__declspec(implementation_key(4391)) enum Office::MsoArrowheadLength LineFormat::GetEndArrowheadLength ( );
__declspec(implementation_key(4392)) void LineFormat::PutEndArrowheadLength ( enum Office::MsoArrowheadLength prop );
__declspec(implementation_key(4393)) enum Office::MsoArrowheadStyle LineFormat::GetEndArrowheadStyle ( );
__declspec(implementation_key(4394)) void LineFormat::PutEndArrowheadStyle ( enum Office::MsoArrowheadStyle prop );
__declspec(implementation_key(4395)) enum Office::MsoArrowheadWidth LineFormat::GetEndArrowheadWidth ( );
__declspec(implementation_key(4396)) void LineFormat::PutEndArrowheadWidth ( enum Office::MsoArrowheadWidth prop );
__declspec(implementation_key(4397)) ColorFormatPtr LineFormat::GetForeColor ( );
__declspec(implementation_key(4398)) enum Office::MsoPatternType LineFormat::GetPattern ( );
__declspec(implementation_key(4399)) void LineFormat::PutPattern ( enum Office::MsoPatternType prop );
__declspec(implementation_key(4400)) enum Office::MsoLineStyle LineFormat::GetStyle ( );
__declspec(implementation_key(4401)) void LineFormat::PutStyle ( enum Office::MsoLineStyle prop );
__declspec(implementation_key(4402)) float LineFormat::GetTransparency ( );
__declspec(implementation_key(4403)) void LineFormat::PutTransparency ( float prop );
__declspec(implementation_key(4404)) enum Office::MsoTriState LineFormat::GetVisible ( );
__declspec(implementation_key(4405)) void LineFormat::PutVisible ( enum Office::MsoTriState prop );
__declspec(implementation_key(4406)) float LineFormat::GetWeight ( );
__declspec(implementation_key(4407)) void LineFormat::PutWeight ( float prop );
__declspec(implementation_key(4408)) _ApplicationPtr PictureFormat::GetApplication ( );
__declspec(implementation_key(4409)) long PictureFormat::GetCreator ( );
__declspec(implementation_key(4410)) IDispatchPtr PictureFormat::GetParent ( );
__declspec(implementation_key(4411)) float PictureFormat::GetBrightness ( );
__declspec(implementation_key(4412)) void PictureFormat::PutBrightness ( float prop );
__declspec(implementation_key(4413)) enum Office::MsoPictureColorType PictureFormat::GetColorType ( );
__declspec(implementation_key(4414)) void PictureFormat::PutColorType ( enum Office::MsoPictureColorType prop );
__declspec(implementation_key(4415)) float PictureFormat::GetContrast ( );
__declspec(implementation_key(4416)) void PictureFormat::PutContrast ( float prop );
__declspec(implementation_key(4417)) float PictureFormat::GetCropBottom ( );
__declspec(implementation_key(4418)) void PictureFormat::PutCropBottom ( float prop );
__declspec(implementation_key(4419)) float PictureFormat::GetCropLeft ( );
__declspec(implementation_key(4420)) void PictureFormat::PutCropLeft ( float prop );
__declspec(implementation_key(4421)) float PictureFormat::GetCropRight ( );
__declspec(implementation_key(4422)) void PictureFormat::PutCropRight ( float prop );
__declspec(implementation_key(4423)) float PictureFormat::GetCropTop ( );
__declspec(implementation_key(4424)) void PictureFormat::PutCropTop ( float prop );
__declspec(implementation_key(4425)) long PictureFormat::GetTransparencyColor ( );
__declspec(implementation_key(4426)) void PictureFormat::PutTransparencyColor ( long prop );
__declspec(implementation_key(4427)) enum Office::MsoTriState PictureFormat::GetTransparentBackground ( );
__declspec(implementation_key(4428)) void PictureFormat::PutTransparentBackground ( enum Office::MsoTriState prop );
__declspec(implementation_key(4429)) HRESULT PictureFormat::IncrementBrightness ( float Increment );
__declspec(implementation_key(4430)) HRESULT PictureFormat::IncrementContrast ( float Increment );
__declspec(implementation_key(4431)) _ApplicationPtr ShadowFormat::GetApplication ( );
__declspec(implementation_key(4432)) long ShadowFormat::GetCreator ( );
__declspec(implementation_key(4433)) IDispatchPtr ShadowFormat::GetParent ( );
__declspec(implementation_key(4434)) ColorFormatPtr ShadowFormat::GetForeColor ( );
__declspec(implementation_key(4435)) enum Office::MsoTriState ShadowFormat::GetObscured ( );
__declspec(implementation_key(4436)) void ShadowFormat::PutObscured ( enum Office::MsoTriState prop );
__declspec(implementation_key(4437)) float ShadowFormat::GetOffsetX ( );
__declspec(implementation_key(4438)) void ShadowFormat::PutOffsetX ( float prop );
__declspec(implementation_key(4439)) float ShadowFormat::GetOffsetY ( );
__declspec(implementation_key(4440)) void ShadowFormat::PutOffsetY ( float prop );
__declspec(implementation_key(4441)) float ShadowFormat::GetTransparency ( );
__declspec(implementation_key(4442)) void ShadowFormat::PutTransparency ( float prop );
__declspec(implementation_key(4443)) enum Office::MsoShadowType ShadowFormat::GetType ( );
__declspec(implementation_key(4444)) void ShadowFormat::PutType ( enum Office::MsoShadowType prop );
__declspec(implementation_key(4445)) enum Office::MsoTriState ShadowFormat::GetVisible ( );
__declspec(implementation_key(4446)) void ShadowFormat::PutVisible ( enum Office::MsoTriState prop );
__declspec(implementation_key(4447)) HRESULT ShadowFormat::IncrementOffsetX ( float Increment );
__declspec(implementation_key(4448)) HRESULT ShadowFormat::IncrementOffsetY ( float Increment );
__declspec(implementation_key(4449)) _ApplicationPtr ShapeNode::GetApplication ( );
__declspec(implementation_key(4450)) long ShapeNode::GetCreator ( );
__declspec(implementation_key(4451)) IDispatchPtr ShapeNode::GetParent ( );
__declspec(implementation_key(4452)) enum Office::MsoEditingType ShapeNode::GetEditingType ( );
__declspec(implementation_key(4453)) _variant_t ShapeNode::GetPoints ( );
__declspec(implementation_key(4454)) enum Office::MsoSegmentType ShapeNode::GetSegmentType ( );
__declspec(implementation_key(4455)) _ApplicationPtr ShapeNodes::GetApplication ( );
__declspec(implementation_key(4456)) long ShapeNodes::GetCreator ( );
__declspec(implementation_key(4457)) IDispatchPtr ShapeNodes::GetParent ( );
__declspec(implementation_key(4458)) long ShapeNodes::GetCount ( );
__declspec(implementation_key(4459)) IUnknownPtr ShapeNodes::Get_NewEnum ( );
__declspec(implementation_key(4460)) HRESULT ShapeNodes::Delete ( long Index );
__declspec(implementation_key(4461)) ShapeNodePtr ShapeNodes::Item ( VARIANT * Index );
__declspec(implementation_key(4462)) HRESULT ShapeNodes::SetEditingType ( long Index, enum Office::MsoEditingType EditingType );
__declspec(implementation_key(4463)) HRESULT ShapeNodes::SetPosition ( long Index, float X1, float Y1 );
__declspec(implementation_key(4464)) HRESULT ShapeNodes::SetSegmentType ( long Index, enum Office::MsoSegmentType SegmentType );
__declspec(implementation_key(4465)) HRESULT ShapeNodes::Insert ( long Index, enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(4466)) _ApplicationPtr TextEffectFormat::GetApplication ( );
__declspec(implementation_key(4467)) long TextEffectFormat::GetCreator ( );
__declspec(implementation_key(4468)) IDispatchPtr TextEffectFormat::GetParent ( );
__declspec(implementation_key(4469)) enum Office::MsoTextEffectAlignment TextEffectFormat::GetAlignment ( );
__declspec(implementation_key(4470)) void TextEffectFormat::PutAlignment ( enum Office::MsoTextEffectAlignment prop );
__declspec(implementation_key(4471)) enum Office::MsoTriState TextEffectFormat::GetFontBold ( );
__declspec(implementation_key(4472)) void TextEffectFormat::PutFontBold ( enum Office::MsoTriState prop );
__declspec(implementation_key(4473)) enum Office::MsoTriState TextEffectFormat::GetFontItalic ( );
__declspec(implementation_key(4474)) void TextEffectFormat::PutFontItalic ( enum Office::MsoTriState prop );
__declspec(implementation_key(4475)) _bstr_t TextEffectFormat::GetFontName ( );
__declspec(implementation_key(4476)) void TextEffectFormat::PutFontName ( _bstr_t prop );
__declspec(implementation_key(4477)) float TextEffectFormat::GetFontSize ( );
__declspec(implementation_key(4478)) void TextEffectFormat::PutFontSize ( float prop );
__declspec(implementation_key(4479)) enum Office::MsoTriState TextEffectFormat::GetKernedPairs ( );
__declspec(implementation_key(4480)) void TextEffectFormat::PutKernedPairs ( enum Office::MsoTriState prop );
__declspec(implementation_key(4481)) enum Office::MsoTriState TextEffectFormat::GetNormalizedHeight ( );
__declspec(implementation_key(4482)) void TextEffectFormat::PutNormalizedHeight ( enum Office::MsoTriState prop );
__declspec(implementation_key(4483)) enum Office::MsoPresetTextEffectShape TextEffectFormat::GetPresetShape ( );
__declspec(implementation_key(4484)) void TextEffectFormat::PutPresetShape ( enum Office::MsoPresetTextEffectShape prop );
__declspec(implementation_key(4485)) enum Office::MsoPresetTextEffect TextEffectFormat::GetPresetTextEffect ( );
__declspec(implementation_key(4486)) void TextEffectFormat::PutPresetTextEffect ( enum Office::MsoPresetTextEffect prop );
__declspec(implementation_key(4487)) enum Office::MsoTriState TextEffectFormat::GetRotatedChars ( );
__declspec(implementation_key(4488)) void TextEffectFormat::PutRotatedChars ( enum Office::MsoTriState prop );
__declspec(implementation_key(4489)) _bstr_t TextEffectFormat::GetText ( );
__declspec(implementation_key(4490)) void TextEffectFormat::PutText ( _bstr_t prop );
__declspec(implementation_key(4491)) float TextEffectFormat::GetTracking ( );
__declspec(implementation_key(4492)) void TextEffectFormat::PutTracking ( float prop );
__declspec(implementation_key(4493)) HRESULT TextEffectFormat::ToggleVerticalText ( );
__declspec(implementation_key(4494)) _ApplicationPtr ThreeDFormat::GetApplication ( );
__declspec(implementation_key(4495)) long ThreeDFormat::GetCreator ( );
__declspec(implementation_key(4496)) IDispatchPtr ThreeDFormat::GetParent ( );
__declspec(implementation_key(4497)) float ThreeDFormat::GetDepth ( );
__declspec(implementation_key(4498)) void ThreeDFormat::PutDepth ( float prop );
__declspec(implementation_key(4499)) ColorFormatPtr ThreeDFormat::GetExtrusionColor ( );
__declspec(implementation_key(4500)) enum Office::MsoExtrusionColorType ThreeDFormat::GetExtrusionColorType ( );
__declspec(implementation_key(4501)) void ThreeDFormat::PutExtrusionColorType ( enum Office::MsoExtrusionColorType prop );
__declspec(implementation_key(4502)) enum Office::MsoTriState ThreeDFormat::GetPerspective ( );
__declspec(implementation_key(4503)) void ThreeDFormat::PutPerspective ( enum Office::MsoTriState prop );
__declspec(implementation_key(4504)) enum Office::MsoPresetExtrusionDirection ThreeDFormat::GetPresetExtrusionDirection ( );
__declspec(implementation_key(4505)) enum Office::MsoPresetLightingDirection ThreeDFormat::GetPresetLightingDirection ( );
__declspec(implementation_key(4506)) void ThreeDFormat::PutPresetLightingDirection ( enum Office::MsoPresetLightingDirection prop );
__declspec(implementation_key(4507)) enum Office::MsoPresetLightingSoftness ThreeDFormat::GetPresetLightingSoftness ( );
__declspec(implementation_key(4508)) void ThreeDFormat::PutPresetLightingSoftness ( enum Office::MsoPresetLightingSoftness prop );
__declspec(implementation_key(4509)) enum Office::MsoPresetMaterial ThreeDFormat::GetPresetMaterial ( );
__declspec(implementation_key(4510)) void ThreeDFormat::PutPresetMaterial ( enum Office::MsoPresetMaterial prop );
__declspec(implementation_key(4511)) enum Office::MsoPresetThreeDFormat ThreeDFormat::GetPresetThreeDFormat ( );
__declspec(implementation_key(4512)) float ThreeDFormat::GetRotationX ( );
__declspec(implementation_key(4513)) void ThreeDFormat::PutRotationX ( float prop );
__declspec(implementation_key(4514)) float ThreeDFormat::GetRotationY ( );
__declspec(implementation_key(4515)) void ThreeDFormat::PutRotationY ( float prop );
__declspec(implementation_key(4516)) enum Office::MsoTriState ThreeDFormat::GetVisible ( );
__declspec(implementation_key(4517)) void ThreeDFormat::PutVisible ( enum Office::MsoTriState prop );
__declspec(implementation_key(4518)) HRESULT ThreeDFormat::IncrementRotationX ( float Increment );
__declspec(implementation_key(4519)) HRESULT ThreeDFormat::IncrementRotationY ( float Increment );
__declspec(implementation_key(4520)) HRESULT ThreeDFormat::ResetRotation ( );
__declspec(implementation_key(4521)) HRESULT ThreeDFormat::SetExtrusionDirection ( enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection );
__declspec(implementation_key(4522)) HRESULT ThreeDFormat::SetThreeDFormat ( enum Office::MsoPresetThreeDFormat PresetThreeDFormat );
__declspec(implementation_key(4523)) HRESULT DocumentEvents::New ( );
__declspec(implementation_key(4524)) HRESULT DocumentEvents::Open ( );
__declspec(implementation_key(4525)) HRESULT DocumentEvents::Close ( );
__declspec(implementation_key(4526)) HRESULT OCXEvents::GotFocus ( );
__declspec(implementation_key(4527)) HRESULT OCXEvents::LostFocus ( );
__declspec(implementation_key(4528)) HRESULT IApplicationEvents::Startup ( );
__declspec(implementation_key(4529)) HRESULT IApplicationEvents::Quit ( );
__declspec(implementation_key(4530)) HRESULT IApplicationEvents::DocumentChange ( );
__declspec(implementation_key(4531)) HRESULT IApplicationEvents2::Startup ( );
__declspec(implementation_key(4532)) HRESULT IApplicationEvents2::Quit ( );
__declspec(implementation_key(4533)) HRESULT IApplicationEvents2::DocumentChange ( );
__declspec(implementation_key(4534)) HRESULT IApplicationEvents2::DocumentOpen ( struct _Document * Doc );
__declspec(implementation_key(4535)) HRESULT IApplicationEvents2::DocumentBeforeClose ( struct _Document * Doc, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4536)) HRESULT IApplicationEvents2::DocumentBeforePrint ( struct _Document * Doc, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4537)) HRESULT IApplicationEvents2::DocumentBeforeSave ( struct _Document * Doc, VARIANT_BOOL * SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4538)) HRESULT IApplicationEvents2::NewDocument ( struct _Document * Doc );
__declspec(implementation_key(4539)) HRESULT IApplicationEvents2::WindowActivate ( struct _Document * Doc, struct Window * Wn );
__declspec(implementation_key(4540)) HRESULT IApplicationEvents2::WindowDeactivate ( struct _Document * Doc, struct Window * Wn );
__declspec(implementation_key(4541)) HRESULT IApplicationEvents2::WindowSelectionChange ( struct Selection * Sel );
__declspec(implementation_key(4542)) HRESULT IApplicationEvents2::WindowBeforeRightClick ( struct Selection * Sel, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4543)) HRESULT IApplicationEvents2::WindowBeforeDoubleClick ( struct Selection * Sel, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4544)) HRESULT ApplicationEvents2::Quit ( );
__declspec(implementation_key(4545)) HRESULT ApplicationEvents2::DocumentChange ( );
__declspec(implementation_key(4546)) HRESULT ApplicationEvents2::DocumentOpen ( struct _Document * Doc );
__declspec(implementation_key(4547)) HRESULT ApplicationEvents2::DocumentBeforeClose ( struct _Document * Doc, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4548)) HRESULT ApplicationEvents2::DocumentBeforePrint ( struct _Document * Doc, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4549)) HRESULT ApplicationEvents2::DocumentBeforeSave ( struct _Document * Doc, VARIANT_BOOL * SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4550)) HRESULT ApplicationEvents2::NewDocument ( struct _Document * Doc );
__declspec(implementation_key(4551)) HRESULT ApplicationEvents2::WindowActivate ( struct _Document * Doc, struct Window * Wn );
__declspec(implementation_key(4552)) HRESULT ApplicationEvents2::WindowDeactivate ( struct _Document * Doc, struct Window * Wn );
__declspec(implementation_key(4553)) HRESULT ApplicationEvents2::WindowSelectionChange ( struct Selection * Sel );
__declspec(implementation_key(4554)) HRESULT ApplicationEvents2::WindowBeforeRightClick ( struct Selection * Sel, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4555)) HRESULT ApplicationEvents2::WindowBeforeDoubleClick ( struct Selection * Sel, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4556)) _ApplicationPtr EmailAuthor::GetApplication ( );
__declspec(implementation_key(4557)) long EmailAuthor::GetCreator ( );
__declspec(implementation_key(4558)) IDispatchPtr EmailAuthor::GetParent ( );
__declspec(implementation_key(4559)) StylePtr EmailAuthor::GetStyle ( );
__declspec(implementation_key(4560)) _ApplicationPtr EmailOptions::GetApplication ( );
__declspec(implementation_key(4561)) long EmailOptions::GetCreator ( );
__declspec(implementation_key(4562)) IDispatchPtr EmailOptions::GetParent ( );
__declspec(implementation_key(4563)) VARIANT_BOOL EmailOptions::GetUseThemeStyle ( );
__declspec(implementation_key(4564)) void EmailOptions::PutUseThemeStyle ( VARIANT_BOOL prop );
__declspec(implementation_key(4565)) _bstr_t EmailOptions::GetMarkCommentsWith ( );
__declspec(implementation_key(4566)) void EmailOptions::PutMarkCommentsWith ( _bstr_t prop );
__declspec(implementation_key(4567)) VARIANT_BOOL EmailOptions::GetMarkComments ( );
__declspec(implementation_key(4568)) void EmailOptions::PutMarkComments ( VARIANT_BOOL prop );
__declspec(implementation_key(4569)) EmailSignaturePtr EmailOptions::GetEmailSignature ( );
__declspec(implementation_key(4570)) StylePtr EmailOptions::GetComposeStyle ( );
__declspec(implementation_key(4571)) StylePtr EmailOptions::GetReplyStyle ( );
__declspec(implementation_key(4572)) _bstr_t EmailOptions::GetThemeName ( );
__declspec(implementation_key(4573)) void EmailOptions::PutThemeName ( _bstr_t prop );
__declspec(implementation_key(4574)) _ApplicationPtr EmailSignature::GetApplication ( );
__declspec(implementation_key(4575)) long EmailSignature::GetCreator ( );
__declspec(implementation_key(4576)) IDispatchPtr EmailSignature::GetParent ( );
__declspec(implementation_key(4577)) _bstr_t EmailSignature::GetNewMessageSignature ( );
__declspec(implementation_key(4578)) void EmailSignature::PutNewMessageSignature ( _bstr_t prop );
__declspec(implementation_key(4579)) _bstr_t EmailSignature::GetReplyMessageSignature ( );
__declspec(implementation_key(4580)) void EmailSignature::PutReplyMessageSignature ( _bstr_t prop );
__declspec(implementation_key(4581)) _ApplicationPtr Email::GetApplication ( );
__declspec(implementation_key(4582)) long Email::GetCreator ( );
__declspec(implementation_key(4583)) IDispatchPtr Email::GetParent ( );
__declspec(implementation_key(4584)) EmailAuthorPtr Email::GetCurrentEmailAuthor ( );
__declspec(implementation_key(4585)) _ApplicationPtr HorizontalLineFormat::GetApplication ( );
__declspec(implementation_key(4586)) long HorizontalLineFormat::GetCreator ( );
__declspec(implementation_key(4587)) IDispatchPtr HorizontalLineFormat::GetParent ( );
__declspec(implementation_key(4588)) float HorizontalLineFormat::GetPercentWidth ( );
__declspec(implementation_key(4589)) void HorizontalLineFormat::PutPercentWidth ( float prop );
__declspec(implementation_key(4590)) VARIANT_BOOL HorizontalLineFormat::GetNoShade ( );
__declspec(implementation_key(4591)) void HorizontalLineFormat::PutNoShade ( VARIANT_BOOL prop );
__declspec(implementation_key(4592)) enum WdHorizontalLineAlignment HorizontalLineFormat::GetAlignment ( );
__declspec(implementation_key(4593)) void HorizontalLineFormat::PutAlignment ( enum WdHorizontalLineAlignment prop );
__declspec(implementation_key(4594)) enum WdHorizontalLineWidthType HorizontalLineFormat::GetWidthType ( );
__declspec(implementation_key(4595)) void HorizontalLineFormat::PutWidthType ( enum WdHorizontalLineWidthType prop );
__declspec(implementation_key(4596)) _ApplicationPtr Frameset::GetApplication ( );
__declspec(implementation_key(4597)) long Frameset::GetCreator ( );
__declspec(implementation_key(4598)) IDispatchPtr Frameset::GetParent ( );
__declspec(implementation_key(4599)) IUnknownPtr Frameset::Get_NewEnum ( );
__declspec(implementation_key(4600)) FramesetPtr Frameset::GetParentFrameset ( );
__declspec(implementation_key(4601)) enum WdFramesetType Frameset::GetType ( );
__declspec(implementation_key(4602)) enum WdFramesetSizeType Frameset::GetWidthType ( );
__declspec(implementation_key(4603)) void Frameset::PutWidthType ( enum WdFramesetSizeType prop );
__declspec(implementation_key(4604)) enum WdFramesetSizeType Frameset::GetHeightType ( );
__declspec(implementation_key(4605)) void Frameset::PutHeightType ( enum WdFramesetSizeType prop );
__declspec(implementation_key(4606)) long Frameset::GetWidth ( );
__declspec(implementation_key(4607)) void Frameset::PutWidth ( long prop );
__declspec(implementation_key(4608)) long Frameset::GetHeight ( );
__declspec(implementation_key(4609)) void Frameset::PutHeight ( long prop );
__declspec(implementation_key(4610)) long Frameset::GetChildFramesetCount ( );
__declspec(implementation_key(4611)) FramesetPtr Frameset::GetChildFramesetItem ( long Index );
__declspec(implementation_key(4612)) float Frameset::GetFramesetBorderWidth ( );
__declspec(implementation_key(4613)) void Frameset::PutFramesetBorderWidth ( float prop );
__declspec(implementation_key(4614)) enum WdColor Frameset::GetFramesetBorderColor ( );
__declspec(implementation_key(4615)) void Frameset::PutFramesetBorderColor ( enum WdColor prop );
__declspec(implementation_key(4616)) enum WdScrollbarType Frameset::GetFrameScrollbarType ( );
__declspec(implementation_key(4617)) void Frameset::PutFrameScrollbarType ( enum WdScrollbarType prop );
__declspec(implementation_key(4618)) VARIANT_BOOL Frameset::GetFrameResizable ( );
__declspec(implementation_key(4619)) void Frameset::PutFrameResizable ( VARIANT_BOOL prop );
__declspec(implementation_key(4620)) _bstr_t Frameset::GetFrameName ( );
__declspec(implementation_key(4621)) void Frameset::PutFrameName ( _bstr_t prop );
__declspec(implementation_key(4622)) VARIANT_BOOL Frameset::GetFrameDisplayBorders ( );
__declspec(implementation_key(4623)) void Frameset::PutFrameDisplayBorders ( VARIANT_BOOL prop );
__declspec(implementation_key(4624)) _bstr_t Frameset::GetFrameDefaultURL ( );
__declspec(implementation_key(4625)) void Frameset::PutFrameDefaultURL ( _bstr_t prop );
__declspec(implementation_key(4626)) VARIANT_BOOL Frameset::GetFrameLinkToFile ( );
__declspec(implementation_key(4627)) void Frameset::PutFrameLinkToFile ( VARIANT_BOOL prop );
__declspec(implementation_key(4628)) FramesetPtr Frameset::AddNewFrame ( enum WdFramesetNewFrameLocation Where );
__declspec(implementation_key(4629)) HRESULT Frameset::Delete ( );
__declspec(implementation_key(4630)) _ApplicationPtr DefaultWebOptions::GetApplication ( );
__declspec(implementation_key(4631)) long DefaultWebOptions::GetCreator ( );
__declspec(implementation_key(4632)) IDispatchPtr DefaultWebOptions::GetParent ( );
__declspec(implementation_key(4633)) VARIANT_BOOL DefaultWebOptions::GetOptimizeForBrowser ( );
__declspec(implementation_key(4634)) void DefaultWebOptions::PutOptimizeForBrowser ( VARIANT_BOOL prop );
__declspec(implementation_key(4635)) enum WdBrowserLevel DefaultWebOptions::GetBrowserLevel ( );
__declspec(implementation_key(4636)) void DefaultWebOptions::PutBrowserLevel ( enum WdBrowserLevel prop );
__declspec(implementation_key(4637)) VARIANT_BOOL DefaultWebOptions::GetRelyOnCSS ( );
__declspec(implementation_key(4638)) void DefaultWebOptions::PutRelyOnCSS ( VARIANT_BOOL prop );
__declspec(implementation_key(4639)) VARIANT_BOOL DefaultWebOptions::GetOrganizeInFolder ( );
__declspec(implementation_key(4640)) void DefaultWebOptions::PutOrganizeInFolder ( VARIANT_BOOL prop );
__declspec(implementation_key(4641)) VARIANT_BOOL DefaultWebOptions::GetUpdateLinksOnSave ( );
__declspec(implementation_key(4642)) void DefaultWebOptions::PutUpdateLinksOnSave ( VARIANT_BOOL prop );
__declspec(implementation_key(4643)) VARIANT_BOOL DefaultWebOptions::GetUseLongFileNames ( );
__declspec(implementation_key(4644)) void DefaultWebOptions::PutUseLongFileNames ( VARIANT_BOOL prop );
__declspec(implementation_key(4645)) VARIANT_BOOL DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( );
__declspec(implementation_key(4646)) void DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( VARIANT_BOOL prop );
__declspec(implementation_key(4647)) VARIANT_BOOL DefaultWebOptions::GetCheckIfWordIsDefaultHTMLEditor ( );
__declspec(implementation_key(4648)) void DefaultWebOptions::PutCheckIfWordIsDefaultHTMLEditor ( VARIANT_BOOL prop );
__declspec(implementation_key(4649)) VARIANT_BOOL DefaultWebOptions::GetRelyOnVML ( );
__declspec(implementation_key(4650)) void DefaultWebOptions::PutRelyOnVML ( VARIANT_BOOL prop );
__declspec(implementation_key(4651)) VARIANT_BOOL DefaultWebOptions::GetAllowPNG ( );
__declspec(implementation_key(4652)) void DefaultWebOptions::PutAllowPNG ( VARIANT_BOOL prop );
__declspec(implementation_key(4653)) enum Office::MsoScreenSize DefaultWebOptions::GetScreenSize ( );
__declspec(implementation_key(4654)) void DefaultWebOptions::PutScreenSize ( enum Office::MsoScreenSize prop );
__declspec(implementation_key(4655)) long DefaultWebOptions::GetPixelsPerInch ( );
__declspec(implementation_key(4656)) void DefaultWebOptions::PutPixelsPerInch ( long prop );
__declspec(implementation_key(4657)) enum Office::MsoEncoding DefaultWebOptions::GetEncoding ( );
__declspec(implementation_key(4658)) void DefaultWebOptions::PutEncoding ( enum Office::MsoEncoding prop );
__declspec(implementation_key(4659)) VARIANT_BOOL DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( );
__declspec(implementation_key(4660)) void DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( VARIANT_BOOL prop );
__declspec(implementation_key(4661)) Office::WebPageFontsPtr DefaultWebOptions::GetFonts ( );
__declspec(implementation_key(4662)) _bstr_t DefaultWebOptions::GetFolderSuffix ( );
__declspec(implementation_key(4663)) _ApplicationPtr WebOptions::GetApplication ( );
__declspec(implementation_key(4664)) long WebOptions::GetCreator ( );
__declspec(implementation_key(4665)) IDispatchPtr WebOptions::GetParent ( );
__declspec(implementation_key(4666)) VARIANT_BOOL WebOptions::GetOptimizeForBrowser ( );
__declspec(implementation_key(4667)) void WebOptions::PutOptimizeForBrowser ( VARIANT_BOOL prop );
__declspec(implementation_key(4668)) enum WdBrowserLevel WebOptions::GetBrowserLevel ( );
__declspec(implementation_key(4669)) void WebOptions::PutBrowserLevel ( enum WdBrowserLevel prop );
__declspec(implementation_key(4670)) VARIANT_BOOL WebOptions::GetRelyOnCSS ( );
__declspec(implementation_key(4671)) void WebOptions::PutRelyOnCSS ( VARIANT_BOOL prop );
__declspec(implementation_key(4672)) VARIANT_BOOL WebOptions::GetOrganizeInFolder ( );
__declspec(implementation_key(4673)) void WebOptions::PutOrganizeInFolder ( VARIANT_BOOL prop );
__declspec(implementation_key(4674)) VARIANT_BOOL WebOptions::GetUseLongFileNames ( );
__declspec(implementation_key(4675)) void WebOptions::PutUseLongFileNames ( VARIANT_BOOL prop );
__declspec(implementation_key(4676)) VARIANT_BOOL WebOptions::GetRelyOnVML ( );
__declspec(implementation_key(4677)) void WebOptions::PutRelyOnVML ( VARIANT_BOOL prop );
__declspec(implementation_key(4678)) VARIANT_BOOL WebOptions::GetAllowPNG ( );
__declspec(implementation_key(4679)) void WebOptions::PutAllowPNG ( VARIANT_BOOL prop );
__declspec(implementation_key(4680)) enum Office::MsoScreenSize WebOptions::GetScreenSize ( );
__declspec(implementation_key(4681)) void WebOptions::PutScreenSize ( enum Office::MsoScreenSize prop );
__declspec(implementation_key(4682)) long WebOptions::GetPixelsPerInch ( );
__declspec(implementation_key(4683)) void WebOptions::PutPixelsPerInch ( long prop );
__declspec(implementation_key(4684)) enum Office::MsoEncoding WebOptions::GetEncoding ( );
__declspec(implementation_key(4685)) void WebOptions::PutEncoding ( enum Office::MsoEncoding prop );
__declspec(implementation_key(4686)) _bstr_t WebOptions::GetFolderSuffix ( );
__declspec(implementation_key(4687)) HRESULT WebOptions::UseDefaultFolderSuffix ( );
__declspec(implementation_key(4688)) _ApplicationPtr OtherCorrectionsExceptions::GetApplication ( );
__declspec(implementation_key(4689)) long OtherCorrectionsExceptions::GetCreator ( );
__declspec(implementation_key(4690)) IDispatchPtr OtherCorrectionsExceptions::GetParent ( );
__declspec(implementation_key(4691)) IUnknownPtr OtherCorrectionsExceptions::Get_NewEnum ( );
__declspec(implementation_key(4692)) long OtherCorrectionsExceptions::GetCount ( );
__declspec(implementation_key(4693)) OtherCorrectionsExceptionPtr OtherCorrectionsExceptions::Item ( VARIANT * Index );
__declspec(implementation_key(4694)) OtherCorrectionsExceptionPtr OtherCorrectionsExceptions::Add ( _bstr_t Name );
__declspec(implementation_key(4695)) _ApplicationPtr OtherCorrectionsException::GetApplication ( );
__declspec(implementation_key(4696)) long OtherCorrectionsException::GetCreator ( );
__declspec(implementation_key(4697)) IDispatchPtr OtherCorrectionsException::GetParent ( );
__declspec(implementation_key(4698)) long OtherCorrectionsException::GetIndex ( );
__declspec(implementation_key(4699)) _bstr_t OtherCorrectionsException::GetName ( );
__declspec(implementation_key(4700)) HRESULT OtherCorrectionsException::Delete ( );
#pragma stop_map_region

} // namespace Word

#pragma pack(pop)
