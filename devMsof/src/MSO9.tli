// Created by Microsoft (R) C/C++ Compiler Version 12.00.8447.0 (91c578a7).
//
// Mso9.tli
//
// Wrapper implementations for Win32 type library C:\Program Files\Microsoft Office\Office\Mso9.dll
// compiler-generated file created 07/30/07 at 13:08:08 - DO NOT EDIT!


//
// interface IAccessible wrapper method implementations
//

#pragma implementation_key(1)
inline IDispatchPtr IAccessible::GetaccParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_accParent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2)
inline long IAccessible::GetaccChildCount ( ) {
    long _result;
    HRESULT _hr = get_accChildCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3)
inline IDispatchPtr IAccessible::GetaccChild ( const _variant_t & varChild ) {
    IDispatch * _result;
    HRESULT _hr = get_accChild(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4)
inline _bstr_t IAccessible::GetaccName ( const _variant_t & varChild ) {
    BSTR _result;
    HRESULT _hr = get_accName(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5)
inline _bstr_t IAccessible::GetaccValue ( const _variant_t & varChild ) {
    BSTR _result;
    HRESULT _hr = get_accValue(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6)
inline _bstr_t IAccessible::GetaccDescription ( const _variant_t & varChild ) {
    BSTR _result;
    HRESULT _hr = get_accDescription(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7)
inline _variant_t IAccessible::GetaccRole ( const _variant_t & varChild ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accRole(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(8)
inline _variant_t IAccessible::GetaccState ( const _variant_t & varChild ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accState(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(9)
inline _bstr_t IAccessible::GetaccHelp ( const _variant_t & varChild ) {
    BSTR _result;
    HRESULT _hr = get_accHelp(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(10)
inline long IAccessible::GetaccHelpTopic ( BSTR * pszHelpFile, const _variant_t & varChild ) {
    long _result;
    HRESULT _hr = get_accHelpTopic(pszHelpFile, varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(11)
inline _bstr_t IAccessible::GetaccKeyboardShortcut ( const _variant_t & varChild ) {
    BSTR _result;
    HRESULT _hr = get_accKeyboardShortcut(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(12)
inline _variant_t IAccessible::GetaccFocus ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(13)
inline _variant_t IAccessible::GetaccSelection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(14)
inline _bstr_t IAccessible::GetaccDefaultAction ( const _variant_t & varChild ) {
    BSTR _result;
    HRESULT _hr = get_accDefaultAction(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(15)
inline HRESULT IAccessible::accSelect ( long flagsSelect, const _variant_t & varChild ) {
    HRESULT _hr = raw_accSelect(flagsSelect, varChild);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(16)
inline HRESULT IAccessible::accLocation ( long * pxLeft, long * pyTop, long * pcxWidth, long * pcyHeight, const _variant_t & varChild ) {
    HRESULT _hr = raw_accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(17)
inline _variant_t IAccessible::accNavigate ( long navDir, const _variant_t & varStart ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_accNavigate(navDir, varStart, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(18)
inline _variant_t IAccessible::accHitTest ( long xLeft, long yTop ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_accHitTest(xLeft, yTop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(19)
inline HRESULT IAccessible::accDoDefaultAction ( const _variant_t & varChild ) {
    HRESULT _hr = raw_accDoDefaultAction(varChild);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(20)
inline void IAccessible::PutaccName ( const _variant_t & varChild, _bstr_t pszName ) {
    HRESULT _hr = put_accName(varChild, pszName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(21)
inline void IAccessible::PutaccValue ( const _variant_t & varChild, _bstr_t pszValue ) {
    HRESULT _hr = put_accValue(varChild, pszValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IMsoDispObj wrapper method implementations
//

#pragma implementation_key(22)
inline IDispatchPtr _IMsoDispObj::GetApplication ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(23)
inline long _IMsoDispObj::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IMsoOleAccDispObj wrapper method implementations
//

#pragma implementation_key(24)
inline IDispatchPtr _IMsoOleAccDispObj::GetApplication ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(25)
inline long _IMsoOleAccDispObj::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _CommandBars wrapper method implementations
//

#pragma implementation_key(26)
inline CommandBarControlPtr _CommandBars::GetActionControl ( ) {
    struct CommandBarControl * _result;
    HRESULT _hr = get_ActionControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(27)
inline CommandBarPtr _CommandBars::GetActiveMenuBar ( ) {
    struct CommandBar * _result;
    HRESULT _hr = get_ActiveMenuBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(28)
inline CommandBarPtr _CommandBars::Add ( const _variant_t & Name, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary ) {
    struct CommandBar * _result;
    HRESULT _hr = raw_Add(Name, Position, MenuBar, Temporary, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(29)
inline int _CommandBars::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(30)
inline VARIANT_BOOL _CommandBars::GetDisplayTooltips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(31)
inline void _CommandBars::PutDisplayTooltips ( VARIANT_BOOL pvarfDisplayTooltips ) {
    HRESULT _hr = put_DisplayTooltips(pvarfDisplayTooltips);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(32)
inline VARIANT_BOOL _CommandBars::GetDisplayKeysInTooltips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayKeysInTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(33)
inline void _CommandBars::PutDisplayKeysInTooltips ( VARIANT_BOOL pvarfDisplayKeys ) {
    HRESULT _hr = put_DisplayKeysInTooltips(pvarfDisplayKeys);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(34)
inline CommandBarControlPtr _CommandBars::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible ) {
    struct CommandBarControl * _result;
    HRESULT _hr = raw_FindControl(Type, Id, Tag, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(35)
inline CommandBarPtr _CommandBars::GetItem ( const _variant_t & Index ) {
    struct CommandBar * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(36)
inline VARIANT_BOOL _CommandBars::GetLargeButtons ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LargeButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(37)
inline void _CommandBars::PutLargeButtons ( VARIANT_BOOL pvarfLargeButtons ) {
    HRESULT _hr = put_LargeButtons(pvarfLargeButtons);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(38)
inline enum MsoMenuAnimation _CommandBars::GetMenuAnimationStyle ( ) {
    enum MsoMenuAnimation _result;
    HRESULT _hr = get_MenuAnimationStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(39)
inline void _CommandBars::PutMenuAnimationStyle ( enum MsoMenuAnimation pma ) {
    HRESULT _hr = put_MenuAnimationStyle(pma);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(40)
inline IUnknownPtr _CommandBars::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(41)
inline IDispatchPtr _CommandBars::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(42)
inline HRESULT _CommandBars::ReleaseFocus ( ) {
    HRESULT _hr = raw_ReleaseFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(43)
inline int _CommandBars::GetIdsString ( int ids, BSTR * pbstrName ) {
    int _result;
    HRESULT _hr = get_IdsString(ids, pbstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(44)
inline int _CommandBars::GetTmcGetName ( int tmc, BSTR * pbstrName ) {
    int _result;
    HRESULT _hr = get_TmcGetName(tmc, pbstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(45)
inline VARIANT_BOOL _CommandBars::GetAdaptiveMenus ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AdaptiveMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline void _CommandBars::PutAdaptiveMenus ( VARIANT_BOOL pvarfAdaptiveMenus ) {
    HRESULT _hr = put_AdaptiveMenus(pvarfAdaptiveMenus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(47)
inline CommandBarControlsPtr _CommandBars::FindControls ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible ) {
    struct CommandBarControls * _result;
    HRESULT _hr = raw_FindControls(Type, Id, Tag, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlsPtr(_result, false);
}

#pragma implementation_key(48)
inline CommandBarPtr _CommandBars::AddEx ( const _variant_t & TbidOrName, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary, const _variant_t & TbtrProtection ) {
    struct CommandBar * _result;
    HRESULT _hr = raw_AddEx(TbidOrName, Position, MenuBar, Temporary, TbtrProtection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(49)
inline VARIANT_BOOL _CommandBars::GetDisplayFonts ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(50)
inline void _CommandBars::PutDisplayFonts ( VARIANT_BOOL pvarfDisplayFonts ) {
    HRESULT _hr = put_DisplayFonts(pvarfDisplayFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CommandBar wrapper method implementations
//

#pragma implementation_key(51)
inline VARIANT_BOOL CommandBar::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(52)
inline _bstr_t CommandBar::GetContext ( ) {
    BSTR _result;
    HRESULT _hr = get_Context(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(53)
inline void CommandBar::PutContext ( _bstr_t pbstrContext ) {
    HRESULT _hr = put_Context(pbstrContext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(54)
inline CommandBarControlsPtr CommandBar::GetControls ( ) {
    struct CommandBarControls * _result;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlsPtr(_result, false);
}

#pragma implementation_key(55)
inline HRESULT CommandBar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(56)
inline VARIANT_BOOL CommandBar::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(57)
inline void CommandBar::PutEnabled ( VARIANT_BOOL pvarfEnabled ) {
    HRESULT _hr = put_Enabled(pvarfEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(58)
inline CommandBarControlPtr CommandBar::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible, const _variant_t & Recursive ) {
    struct CommandBarControl * _result;
    HRESULT _hr = raw_FindControl(Type, Id, Tag, Visible, Recursive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(59)
inline int CommandBar::GetHeight ( ) {
    int _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(60)
inline void CommandBar::PutHeight ( int pdy ) {
    HRESULT _hr = put_Height(pdy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(61)
inline int CommandBar::GetIndex ( ) {
    int _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(62)
inline long CommandBar::GetInstanceId ( ) {
    long _result;
    HRESULT _hr = get_InstanceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(63)
inline int CommandBar::GetLeft ( ) {
    int _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(64)
inline void CommandBar::PutLeft ( int pxpLeft ) {
    HRESULT _hr = put_Left(pxpLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(65)
inline _bstr_t CommandBar::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(66)
inline void CommandBar::PutName ( _bstr_t pbstrName ) {
    HRESULT _hr = put_Name(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(67)
inline _bstr_t CommandBar::GetNameLocal ( ) {
    BSTR _result;
    HRESULT _hr = get_NameLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(68)
inline void CommandBar::PutNameLocal ( _bstr_t pbstrNameLocal ) {
    HRESULT _hr = put_NameLocal(pbstrNameLocal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(69)
inline IDispatchPtr CommandBar::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(70)
inline enum MsoBarPosition CommandBar::GetPosition ( ) {
    enum MsoBarPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(71)
inline void CommandBar::PutPosition ( enum MsoBarPosition ppos ) {
    HRESULT _hr = put_Position(ppos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(72)
inline int CommandBar::GetRowIndex ( ) {
    int _result;
    HRESULT _hr = get_RowIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(73)
inline void CommandBar::PutRowIndex ( int piRow ) {
    HRESULT _hr = put_RowIndex(piRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(74)
inline enum MsoBarProtection CommandBar::GetProtection ( ) {
    enum MsoBarProtection _result;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(75)
inline void CommandBar::PutProtection ( enum MsoBarProtection pprot ) {
    HRESULT _hr = put_Protection(pprot);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(76)
inline HRESULT CommandBar::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(77)
inline HRESULT CommandBar::ShowPopup ( const _variant_t & x, const _variant_t & y ) {
    HRESULT _hr = raw_ShowPopup(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(78)
inline int CommandBar::GetTop ( ) {
    int _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(79)
inline void CommandBar::PutTop ( int pypTop ) {
    HRESULT _hr = put_Top(pypTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(80)
inline enum MsoBarType CommandBar::GetType ( ) {
    enum MsoBarType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(81)
inline VARIANT_BOOL CommandBar::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(82)
inline void CommandBar::PutVisible ( VARIANT_BOOL pvarfVisible ) {
    HRESULT _hr = put_Visible(pvarfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(83)
inline int CommandBar::GetWidth ( ) {
    int _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(84)
inline void CommandBar::PutWidth ( int pdx ) {
    HRESULT _hr = put_Width(pdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(85)
inline VARIANT_BOOL CommandBar::GetAdaptiveMenu ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AdaptiveMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(86)
inline void CommandBar::PutAdaptiveMenu ( VARIANT_BOOL pvarfAdaptiveMenu ) {
    HRESULT _hr = put_AdaptiveMenu(pvarfAdaptiveMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CommandBarControls wrapper method implementations
//

#pragma implementation_key(87)
inline CommandBarControlPtr CommandBarControls::Add ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Parameter, const _variant_t & Before, const _variant_t & Temporary ) {
    struct CommandBarControl * _result;
    HRESULT _hr = raw_Add(Type, Id, Parameter, Before, Temporary, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(88)
inline int CommandBarControls::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(89)
inline CommandBarControlPtr CommandBarControls::GetItem ( const _variant_t & Index ) {
    struct CommandBarControl * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(90)
inline IUnknownPtr CommandBarControls::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(91)
inline CommandBarPtr CommandBarControls::GetParent ( ) {
    struct CommandBar * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

//
// interface CommandBarControl wrapper method implementations
//

#pragma implementation_key(92)
inline VARIANT_BOOL CommandBarControl::GetBeginGroup ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BeginGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(93)
inline void CommandBarControl::PutBeginGroup ( VARIANT_BOOL pvarfBeginGroup ) {
    HRESULT _hr = put_BeginGroup(pvarfBeginGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(94)
inline VARIANT_BOOL CommandBarControl::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(95)
inline _bstr_t CommandBarControl::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(96)
inline void CommandBarControl::PutCaption ( _bstr_t pbstrCaption ) {
    HRESULT _hr = put_Caption(pbstrCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(97)
inline IDispatchPtr CommandBarControl::GetControl ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Control(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(98)
inline CommandBarControlPtr CommandBarControl::Copy ( const _variant_t & Bar, const _variant_t & Before ) {
    struct CommandBarControl * _result;
    HRESULT _hr = raw_Copy(Bar, Before, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(99)
inline HRESULT CommandBarControl::Delete ( const _variant_t & Temporary ) {
    HRESULT _hr = raw_Delete(Temporary);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(100)
inline _bstr_t CommandBarControl::GetDescriptionText ( ) {
    BSTR _result;
    HRESULT _hr = get_DescriptionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(101)
inline void CommandBarControl::PutDescriptionText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_DescriptionText(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(102)
inline VARIANT_BOOL CommandBarControl::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(103)
inline void CommandBarControl::PutEnabled ( VARIANT_BOOL pvarfEnabled ) {
    HRESULT _hr = put_Enabled(pvarfEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(104)
inline HRESULT CommandBarControl::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(105)
inline int CommandBarControl::GetHeight ( ) {
    int _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(106)
inline void CommandBarControl::PutHeight ( int pdy ) {
    HRESULT _hr = put_Height(pdy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(107)
inline int CommandBarControl::GetHelpContextId ( ) {
    int _result;
    HRESULT _hr = get_HelpContextId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(108)
inline void CommandBarControl::PutHelpContextId ( int pid ) {
    HRESULT _hr = put_HelpContextId(pid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(109)
inline _bstr_t CommandBarControl::GetHelpFile ( ) {
    BSTR _result;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(110)
inline void CommandBarControl::PutHelpFile ( _bstr_t pbstrFilename ) {
    HRESULT _hr = put_HelpFile(pbstrFilename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(111)
inline int CommandBarControl::GetId ( ) {
    int _result;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(112)
inline int CommandBarControl::GetIndex ( ) {
    int _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(113)
inline long CommandBarControl::GetInstanceId ( ) {
    long _result;
    HRESULT _hr = get_InstanceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(114)
inline CommandBarControlPtr CommandBarControl::Move ( const _variant_t & Bar, const _variant_t & Before ) {
    struct CommandBarControl * _result;
    HRESULT _hr = raw_Move(Bar, Before, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(115)
inline int CommandBarControl::GetLeft ( ) {
    int _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(116)
inline enum MsoControlOLEUsage CommandBarControl::GetOLEUsage ( ) {
    enum MsoControlOLEUsage _result;
    HRESULT _hr = get_OLEUsage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(117)
inline void CommandBarControl::PutOLEUsage ( enum MsoControlOLEUsage pcou ) {
    HRESULT _hr = put_OLEUsage(pcou);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(118)
inline _bstr_t CommandBarControl::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(119)
inline void CommandBarControl::PutOnAction ( _bstr_t pbstrOnAction ) {
    HRESULT _hr = put_OnAction(pbstrOnAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(120)
inline CommandBarPtr CommandBarControl::GetParent ( ) {
    struct CommandBar * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(121)
inline _bstr_t CommandBarControl::GetParameter ( ) {
    BSTR _result;
    HRESULT _hr = get_Parameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(122)
inline void CommandBarControl::PutParameter ( _bstr_t pbstrParam ) {
    HRESULT _hr = put_Parameter(pbstrParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(123)
inline int CommandBarControl::GetPriority ( ) {
    int _result;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(124)
inline void CommandBarControl::PutPriority ( int pnPri ) {
    HRESULT _hr = put_Priority(pnPri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(125)
inline HRESULT CommandBarControl::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(126)
inline HRESULT CommandBarControl::SetFocus ( ) {
    HRESULT _hr = raw_SetFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(127)
inline _bstr_t CommandBarControl::GetTag ( ) {
    BSTR _result;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(128)
inline void CommandBarControl::PutTag ( _bstr_t pbstrTag ) {
    HRESULT _hr = put_Tag(pbstrTag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(129)
inline _bstr_t CommandBarControl::GetTooltipText ( ) {
    BSTR _result;
    HRESULT _hr = get_TooltipText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(130)
inline void CommandBarControl::PutTooltipText ( _bstr_t pbstrTooltip ) {
    HRESULT _hr = put_TooltipText(pbstrTooltip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(131)
inline int CommandBarControl::GetTop ( ) {
    int _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(132)
inline enum MsoControlType CommandBarControl::GetType ( ) {
    enum MsoControlType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(133)
inline VARIANT_BOOL CommandBarControl::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(134)
inline void CommandBarControl::PutVisible ( VARIANT_BOOL pvarfVisible ) {
    HRESULT _hr = put_Visible(pvarfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(135)
inline int CommandBarControl::GetWidth ( ) {
    int _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(136)
inline void CommandBarControl::PutWidth ( int pdx ) {
    HRESULT _hr = put_Width(pdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(137)
inline VARIANT_BOOL CommandBarControl::GetIsPriorityDropped ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsPriorityDropped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(138)
inline HRESULT CommandBarControl::Reserved1 ( ) {
    HRESULT _hr = raw_Reserved1();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(139)
inline HRESULT CommandBarControl::Reserved2 ( ) {
    HRESULT _hr = raw_Reserved2();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(140)
inline HRESULT CommandBarControl::Reserved3 ( ) {
    HRESULT _hr = raw_Reserved3();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(141)
inline HRESULT CommandBarControl::Reserved4 ( ) {
    HRESULT _hr = raw_Reserved4();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(142)
inline HRESULT CommandBarControl::Reserved5 ( ) {
    HRESULT _hr = raw_Reserved5();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(143)
inline HRESULT CommandBarControl::Reserved6 ( ) {
    HRESULT _hr = raw_Reserved6();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(144)
inline HRESULT CommandBarControl::Reserved7 ( ) {
    HRESULT _hr = raw_Reserved7();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _CommandBarButton wrapper method implementations
//

#pragma implementation_key(145)
inline VARIANT_BOOL _CommandBarButton::GetBuiltInFace ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltInFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(146)
inline void _CommandBarButton::PutBuiltInFace ( VARIANT_BOOL pvarfBuiltIn ) {
    HRESULT _hr = put_BuiltInFace(pvarfBuiltIn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(147)
inline HRESULT _CommandBarButton::CopyFace ( ) {
    HRESULT _hr = raw_CopyFace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(148)
inline int _CommandBarButton::GetFaceId ( ) {
    int _result;
    HRESULT _hr = get_FaceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(149)
inline void _CommandBarButton::PutFaceId ( int pid ) {
    HRESULT _hr = put_FaceId(pid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(150)
inline HRESULT _CommandBarButton::PasteFace ( ) {
    HRESULT _hr = raw_PasteFace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(151)
inline _bstr_t _CommandBarButton::GetShortcutText ( ) {
    BSTR _result;
    HRESULT _hr = get_ShortcutText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(152)
inline void _CommandBarButton::PutShortcutText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_ShortcutText(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(153)
inline enum MsoButtonState _CommandBarButton::GetState ( ) {
    enum MsoButtonState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(154)
inline void _CommandBarButton::PutState ( enum MsoButtonState pstate ) {
    HRESULT _hr = put_State(pstate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(155)
inline enum MsoButtonStyle _CommandBarButton::GetStyle ( ) {
    enum MsoButtonStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(156)
inline void _CommandBarButton::PutStyle ( enum MsoButtonStyle pstyle ) {
    HRESULT _hr = put_Style(pstyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(157)
inline enum MsoCommandBarButtonHyperlinkType _CommandBarButton::GetHyperlinkType ( ) {
    enum MsoCommandBarButtonHyperlinkType _result;
    HRESULT _hr = get_HyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(158)
inline void _CommandBarButton::PutHyperlinkType ( enum MsoCommandBarButtonHyperlinkType phlType ) {
    HRESULT _hr = put_HyperlinkType(phlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CommandBarPopup wrapper method implementations
//

#pragma implementation_key(159)
inline CommandBarPtr CommandBarPopup::GetCommandBar ( ) {
    struct CommandBar * _result;
    HRESULT _hr = get_CommandBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(160)
inline CommandBarControlsPtr CommandBarPopup::GetControls ( ) {
    struct CommandBarControls * _result;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlsPtr(_result, false);
}

#pragma implementation_key(161)
inline enum MsoOLEMenuGroup CommandBarPopup::GetOLEMenuGroup ( ) {
    enum MsoOLEMenuGroup _result;
    HRESULT _hr = get_OLEMenuGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(162)
inline void CommandBarPopup::PutOLEMenuGroup ( enum MsoOLEMenuGroup pomg ) {
    HRESULT _hr = put_OLEMenuGroup(pomg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _CommandBarComboBox wrapper method implementations
//

#pragma implementation_key(163)
inline HRESULT _CommandBarComboBox::AddItem ( _bstr_t Text, const _variant_t & Index ) {
    HRESULT _hr = raw_AddItem(Text, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(164)
inline HRESULT _CommandBarComboBox::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(165)
inline int _CommandBarComboBox::GetDropDownLines ( ) {
    int _result;
    HRESULT _hr = get_DropDownLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(166)
inline void _CommandBarComboBox::PutDropDownLines ( int pcLines ) {
    HRESULT _hr = put_DropDownLines(pcLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(167)
inline int _CommandBarComboBox::GetDropDownWidth ( ) {
    int _result;
    HRESULT _hr = get_DropDownWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(168)
inline void _CommandBarComboBox::PutDropDownWidth ( int pdx ) {
    HRESULT _hr = put_DropDownWidth(pdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(169)
inline _bstr_t _CommandBarComboBox::GetList ( int Index ) {
    BSTR _result;
    HRESULT _hr = get_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(170)
inline void _CommandBarComboBox::PutList ( int Index, _bstr_t pbstrItem ) {
    HRESULT _hr = put_List(Index, pbstrItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(171)
inline int _CommandBarComboBox::GetListCount ( ) {
    int _result;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(172)
inline int _CommandBarComboBox::GetListHeaderCount ( ) {
    int _result;
    HRESULT _hr = get_ListHeaderCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(173)
inline void _CommandBarComboBox::PutListHeaderCount ( int pcItems ) {
    HRESULT _hr = put_ListHeaderCount(pcItems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(174)
inline int _CommandBarComboBox::GetListIndex ( ) {
    int _result;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(175)
inline void _CommandBarComboBox::PutListIndex ( int pi ) {
    HRESULT _hr = put_ListIndex(pi);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(176)
inline HRESULT _CommandBarComboBox::RemoveItem ( int Index ) {
    HRESULT _hr = raw_RemoveItem(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(177)
inline enum MsoComboStyle _CommandBarComboBox::GetStyle ( ) {
    enum MsoComboStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(178)
inline void _CommandBarComboBox::PutStyle ( enum MsoComboStyle pstyle ) {
    HRESULT _hr = put_Style(pstyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(179)
inline _bstr_t _CommandBarComboBox::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(180)
inline void _CommandBarComboBox::PutText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_Text(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _CommandBarActiveX wrapper method implementations
//

#pragma implementation_key(181)
inline _bstr_t _CommandBarActiveX::GetControlCLSID ( ) {
    BSTR _result;
    HRESULT _hr = get_ControlCLSID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(182)
inline void _CommandBarActiveX::PutControlCLSID ( _bstr_t pbstrClsid ) {
    HRESULT _hr = put_ControlCLSID(pbstrClsid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(183)
inline IUnknownPtr _CommandBarActiveX::GetQueryControlInterface ( _bstr_t bstrIid ) {
    IUnknown * _result;
    HRESULT _hr = get_QueryControlInterface(bstrIid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(184)
inline HRESULT _CommandBarActiveX::SetInnerObjectFactory ( IUnknown * pUnk ) {
    HRESULT _hr = raw_SetInnerObjectFactory(pUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(185)
inline HRESULT _CommandBarActiveX::EnsureControl ( ) {
    HRESULT _hr = raw_EnsureControl();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(186)
inline void _CommandBarActiveX::PutInitWith ( IUnknown * _arg1 ) {
    HRESULT _hr = put_InitWith(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Adjustments wrapper method implementations
//

#pragma implementation_key(187)
inline IDispatchPtr Adjustments::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(188)
inline int Adjustments::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(189)
inline float Adjustments::GetItem ( int Index ) {
    float _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(190)
inline void Adjustments::PutItem ( int Index, float Val ) {
    HRESULT _hr = put_Item(Index, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CalloutFormat wrapper method implementations
//

#pragma implementation_key(191)
inline IDispatchPtr CalloutFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(192)
inline HRESULT CalloutFormat::AutomaticLength ( ) {
    HRESULT _hr = raw_AutomaticLength();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(193)
inline HRESULT CalloutFormat::CustomDrop ( float Drop ) {
    HRESULT _hr = raw_CustomDrop(Drop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(194)
inline HRESULT CalloutFormat::CustomLength ( float Length ) {
    HRESULT _hr = raw_CustomLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(195)
inline HRESULT CalloutFormat::PresetDrop ( enum MsoCalloutDropType DropType ) {
    HRESULT _hr = raw_PresetDrop(DropType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(196)
inline enum MsoTriState CalloutFormat::GetAccent ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Accent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(197)
inline void CalloutFormat::PutAccent ( enum MsoTriState Accent ) {
    HRESULT _hr = put_Accent(Accent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(198)
inline enum MsoCalloutAngleType CalloutFormat::GetAngle ( ) {
    enum MsoCalloutAngleType _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline void CalloutFormat::PutAngle ( enum MsoCalloutAngleType Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(200)
inline enum MsoTriState CalloutFormat::GetAutoAttach ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoAttach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(201)
inline void CalloutFormat::PutAutoAttach ( enum MsoTriState AutoAttach ) {
    HRESULT _hr = put_AutoAttach(AutoAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(202)
inline enum MsoTriState CalloutFormat::GetAutoLength ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(203)
inline enum MsoTriState CalloutFormat::GetBorder ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(204)
inline void CalloutFormat::PutBorder ( enum MsoTriState Border ) {
    HRESULT _hr = put_Border(Border);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(205)
inline float CalloutFormat::GetDrop ( ) {
    float _result;
    HRESULT _hr = get_Drop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(206)
inline enum MsoCalloutDropType CalloutFormat::GetDropType ( ) {
    enum MsoCalloutDropType _result;
    HRESULT _hr = get_DropType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline float CalloutFormat::GetGap ( ) {
    float _result;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(208)
inline void CalloutFormat::PutGap ( float Gap ) {
    HRESULT _hr = put_Gap(Gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(209)
inline float CalloutFormat::GetLength ( ) {
    float _result;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(210)
inline enum MsoCalloutType CalloutFormat::GetType ( ) {
    enum MsoCalloutType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(211)
inline void CalloutFormat::PutType ( enum MsoCalloutType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorFormat wrapper method implementations
//

#pragma implementation_key(212)
inline IDispatchPtr ColorFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(213)
inline MsoRGBType ColorFormat::GetRGB ( ) {
    MsoRGBType _result;
    HRESULT _hr = get_RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(214)
inline void ColorFormat::PutRGB ( MsoRGBType RGB ) {
    HRESULT _hr = put_RGB(RGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(215)
inline int ColorFormat::GetSchemeColor ( ) {
    int _result;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(216)
inline void ColorFormat::PutSchemeColor ( int SchemeColor ) {
    HRESULT _hr = put_SchemeColor(SchemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(217)
inline enum MsoColorType ColorFormat::GetType ( ) {
    enum MsoColorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ConnectorFormat wrapper method implementations
//

#pragma implementation_key(218)
inline IDispatchPtr ConnectorFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(219)
inline HRESULT ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_BeginConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(220)
inline HRESULT ConnectorFormat::BeginDisconnect ( ) {
    HRESULT _hr = raw_BeginDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(221)
inline HRESULT ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_EndConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(222)
inline HRESULT ConnectorFormat::EndDisconnect ( ) {
    HRESULT _hr = raw_EndDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(223)
inline enum MsoTriState ConnectorFormat::GetBeginConnected ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_BeginConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(224)
inline ShapePtr ConnectorFormat::GetBeginConnectedShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_BeginConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(225)
inline int ConnectorFormat::GetBeginConnectionSite ( ) {
    int _result;
    HRESULT _hr = get_BeginConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(226)
inline enum MsoTriState ConnectorFormat::GetEndConnected ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_EndConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(227)
inline ShapePtr ConnectorFormat::GetEndConnectedShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_EndConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(228)
inline int ConnectorFormat::GetEndConnectionSite ( ) {
    int _result;
    HRESULT _hr = get_EndConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(229)
inline enum MsoConnectorType ConnectorFormat::GetType ( ) {
    enum MsoConnectorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(230)
inline void ConnectorFormat::PutType ( enum MsoConnectorType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FillFormat wrapper method implementations
//

#pragma implementation_key(231)
inline IDispatchPtr FillFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(232)
inline HRESULT FillFormat::Background ( ) {
    HRESULT _hr = raw_Background();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(233)
inline HRESULT FillFormat::OneColorGradient ( enum MsoGradientStyle Style, int Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(234)
inline HRESULT FillFormat::Patterned ( enum MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(235)
inline HRESULT FillFormat::PresetGradient ( enum MsoGradientStyle Style, int Variant, enum MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(236)
inline HRESULT FillFormat::PresetTextured ( enum MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(237)
inline HRESULT FillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(238)
inline HRESULT FillFormat::TwoColorGradient ( enum MsoGradientStyle Style, int Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(239)
inline HRESULT FillFormat::UserPicture ( _bstr_t PictureFile ) {
    HRESULT _hr = raw_UserPicture(PictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(240)
inline HRESULT FillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(241)
inline ColorFormatPtr FillFormat::GetBackColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(242)
inline void FillFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(243)
inline ColorFormatPtr FillFormat::GetForeColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(244)
inline void FillFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(245)
inline enum MsoGradientColorType FillFormat::GetGradientColorType ( ) {
    enum MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(246)
inline float FillFormat::GetGradientDegree ( ) {
    float _result;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(247)
inline enum MsoGradientStyle FillFormat::GetGradientStyle ( ) {
    enum MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(248)
inline int FillFormat::GetGradientVariant ( ) {
    int _result;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(249)
inline enum MsoPatternType FillFormat::GetPattern ( ) {
    enum MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(250)
inline enum MsoPresetGradientType FillFormat::GetPresetGradientType ( ) {
    enum MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(251)
inline enum MsoPresetTexture FillFormat::GetPresetTexture ( ) {
    enum MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(252)
inline _bstr_t FillFormat::GetTextureName ( ) {
    BSTR _result;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(253)
inline enum MsoTextureType FillFormat::GetTextureType ( ) {
    enum MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(254)
inline float FillFormat::GetTransparency ( ) {
    float _result;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline void FillFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline enum MsoFillType FillFormat::GetType ( ) {
    enum MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline enum MsoTriState FillFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(258)
inline void FillFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FreeformBuilder wrapper method implementations
//

#pragma implementation_key(259)
inline IDispatchPtr FreeformBuilder::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(260)
inline HRESULT FreeformBuilder::AddNodes ( enum MsoSegmentType SegmentType, enum MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_AddNodes(SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(261)
inline ShapePtr FreeformBuilder::ConvertToShape ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_ConvertToShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface GroupShapes wrapper method implementations
//

#pragma implementation_key(262)
inline IDispatchPtr GroupShapes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(263)
inline int GroupShapes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(264)
inline ShapePtr GroupShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(265)
inline IUnknownPtr GroupShapes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface LineFormat wrapper method implementations
//

#pragma implementation_key(266)
inline IDispatchPtr LineFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(267)
inline ColorFormatPtr LineFormat::GetBackColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(268)
inline void LineFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(269)
inline enum MsoArrowheadLength LineFormat::GetBeginArrowheadLength ( ) {
    enum MsoArrowheadLength _result;
    HRESULT _hr = get_BeginArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(270)
inline void LineFormat::PutBeginArrowheadLength ( enum MsoArrowheadLength BeginArrowheadLength ) {
    HRESULT _hr = put_BeginArrowheadLength(BeginArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(271)
inline enum MsoArrowheadStyle LineFormat::GetBeginArrowheadStyle ( ) {
    enum MsoArrowheadStyle _result;
    HRESULT _hr = get_BeginArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(272)
inline void LineFormat::PutBeginArrowheadStyle ( enum MsoArrowheadStyle BeginArrowheadStyle ) {
    HRESULT _hr = put_BeginArrowheadStyle(BeginArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(273)
inline enum MsoArrowheadWidth LineFormat::GetBeginArrowheadWidth ( ) {
    enum MsoArrowheadWidth _result;
    HRESULT _hr = get_BeginArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(274)
inline void LineFormat::PutBeginArrowheadWidth ( enum MsoArrowheadWidth BeginArrowheadWidth ) {
    HRESULT _hr = put_BeginArrowheadWidth(BeginArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(275)
inline enum MsoLineDashStyle LineFormat::GetDashStyle ( ) {
    enum MsoLineDashStyle _result;
    HRESULT _hr = get_DashStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(276)
inline void LineFormat::PutDashStyle ( enum MsoLineDashStyle DashStyle ) {
    HRESULT _hr = put_DashStyle(DashStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(277)
inline enum MsoArrowheadLength LineFormat::GetEndArrowheadLength ( ) {
    enum MsoArrowheadLength _result;
    HRESULT _hr = get_EndArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(278)
inline void LineFormat::PutEndArrowheadLength ( enum MsoArrowheadLength EndArrowheadLength ) {
    HRESULT _hr = put_EndArrowheadLength(EndArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(279)
inline enum MsoArrowheadStyle LineFormat::GetEndArrowheadStyle ( ) {
    enum MsoArrowheadStyle _result;
    HRESULT _hr = get_EndArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(280)
inline void LineFormat::PutEndArrowheadStyle ( enum MsoArrowheadStyle EndArrowheadStyle ) {
    HRESULT _hr = put_EndArrowheadStyle(EndArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(281)
inline enum MsoArrowheadWidth LineFormat::GetEndArrowheadWidth ( ) {
    enum MsoArrowheadWidth _result;
    HRESULT _hr = get_EndArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(282)
inline void LineFormat::PutEndArrowheadWidth ( enum MsoArrowheadWidth EndArrowheadWidth ) {
    HRESULT _hr = put_EndArrowheadWidth(EndArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(283)
inline ColorFormatPtr LineFormat::GetForeColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(284)
inline void LineFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(285)
inline enum MsoPatternType LineFormat::GetPattern ( ) {
    enum MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(286)
inline void LineFormat::PutPattern ( enum MsoPatternType Pattern ) {
    HRESULT _hr = put_Pattern(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(287)
inline enum MsoLineStyle LineFormat::GetStyle ( ) {
    enum MsoLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(288)
inline void LineFormat::PutStyle ( enum MsoLineStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(289)
inline float LineFormat::GetTransparency ( ) {
    float _result;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(290)
inline void LineFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(291)
inline enum MsoTriState LineFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(292)
inline void LineFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(293)
inline float LineFormat::GetWeight ( ) {
    float _result;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(294)
inline void LineFormat::PutWeight ( float Weight ) {
    HRESULT _hr = put_Weight(Weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeNode wrapper method implementations
//

#pragma implementation_key(295)
inline IDispatchPtr ShapeNode::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(296)
inline enum MsoEditingType ShapeNode::GetEditingType ( ) {
    enum MsoEditingType _result;
    HRESULT _hr = get_EditingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(297)
inline _variant_t ShapeNode::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(298)
inline enum MsoSegmentType ShapeNode::GetSegmentType ( ) {
    enum MsoSegmentType _result;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeNodes wrapper method implementations
//

#pragma implementation_key(299)
inline IDispatchPtr ShapeNodes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(300)
inline int ShapeNodes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(301)
inline ShapeNodePtr ShapeNodes::Item ( const _variant_t & Index ) {
    struct ShapeNode * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodePtr(_result, false);
}

#pragma implementation_key(302)
inline IUnknownPtr ShapeNodes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(303)
inline HRESULT ShapeNodes::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(304)
inline HRESULT ShapeNodes::Insert ( int Index, enum MsoSegmentType SegmentType, enum MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_Insert(Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(305)
inline HRESULT ShapeNodes::SetEditingType ( int Index, enum MsoEditingType EditingType ) {
    HRESULT _hr = raw_SetEditingType(Index, EditingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(306)
inline HRESULT ShapeNodes::SetPosition ( int Index, float X1, float Y1 ) {
    HRESULT _hr = raw_SetPosition(Index, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(307)
inline HRESULT ShapeNodes::SetSegmentType ( int Index, enum MsoSegmentType SegmentType ) {
    HRESULT _hr = raw_SetSegmentType(Index, SegmentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PictureFormat wrapper method implementations
//

#pragma implementation_key(308)
inline IDispatchPtr PictureFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(309)
inline HRESULT PictureFormat::IncrementBrightness ( float Increment ) {
    HRESULT _hr = raw_IncrementBrightness(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(310)
inline HRESULT PictureFormat::IncrementContrast ( float Increment ) {
    HRESULT _hr = raw_IncrementContrast(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(311)
inline float PictureFormat::GetBrightness ( ) {
    float _result;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(312)
inline void PictureFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(313)
inline enum MsoPictureColorType PictureFormat::GetColorType ( ) {
    enum MsoPictureColorType _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(314)
inline void PictureFormat::PutColorType ( enum MsoPictureColorType ColorType ) {
    HRESULT _hr = put_ColorType(ColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(315)
inline float PictureFormat::GetContrast ( ) {
    float _result;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(316)
inline void PictureFormat::PutContrast ( float Contrast ) {
    HRESULT _hr = put_Contrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(317)
inline float PictureFormat::GetCropBottom ( ) {
    float _result;
    HRESULT _hr = get_CropBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(318)
inline void PictureFormat::PutCropBottom ( float CropBottom ) {
    HRESULT _hr = put_CropBottom(CropBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(319)
inline float PictureFormat::GetCropLeft ( ) {
    float _result;
    HRESULT _hr = get_CropLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(320)
inline void PictureFormat::PutCropLeft ( float CropLeft ) {
    HRESULT _hr = put_CropLeft(CropLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(321)
inline float PictureFormat::GetCropRight ( ) {
    float _result;
    HRESULT _hr = get_CropRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(322)
inline void PictureFormat::PutCropRight ( float CropRight ) {
    HRESULT _hr = put_CropRight(CropRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(323)
inline float PictureFormat::GetCropTop ( ) {
    float _result;
    HRESULT _hr = get_CropTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(324)
inline void PictureFormat::PutCropTop ( float CropTop ) {
    HRESULT _hr = put_CropTop(CropTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(325)
inline MsoRGBType PictureFormat::GetTransparencyColor ( ) {
    MsoRGBType _result;
    HRESULT _hr = get_TransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(326)
inline void PictureFormat::PutTransparencyColor ( MsoRGBType TransparencyColor ) {
    HRESULT _hr = put_TransparencyColor(TransparencyColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(327)
inline enum MsoTriState PictureFormat::GetTransparentBackground ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_TransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(328)
inline void PictureFormat::PutTransparentBackground ( enum MsoTriState TransparentBackground ) {
    HRESULT _hr = put_TransparentBackground(TransparentBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShadowFormat wrapper method implementations
//

#pragma implementation_key(329)
inline IDispatchPtr ShadowFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(330)
inline HRESULT ShadowFormat::IncrementOffsetX ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(331)
inline HRESULT ShadowFormat::IncrementOffsetY ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(332)
inline ColorFormatPtr ShadowFormat::GetForeColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(333)
inline void ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(334)
inline enum MsoTriState ShadowFormat::GetObscured ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Obscured(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(335)
inline void ShadowFormat::PutObscured ( enum MsoTriState Obscured ) {
    HRESULT _hr = put_Obscured(Obscured);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(336)
inline float ShadowFormat::GetOffsetX ( ) {
    float _result;
    HRESULT _hr = get_OffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline void ShadowFormat::PutOffsetX ( float OffsetX ) {
    HRESULT _hr = put_OffsetX(OffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(338)
inline float ShadowFormat::GetOffsetY ( ) {
    float _result;
    HRESULT _hr = get_OffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(339)
inline void ShadowFormat::PutOffsetY ( float OffsetY ) {
    HRESULT _hr = put_OffsetY(OffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(340)
inline float ShadowFormat::GetTransparency ( ) {
    float _result;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(341)
inline void ShadowFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(342)
inline enum MsoShadowType ShadowFormat::GetType ( ) {
    enum MsoShadowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(343)
inline void ShadowFormat::PutType ( enum MsoShadowType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(344)
inline enum MsoTriState ShadowFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(345)
inline void ShadowFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Script wrapper method implementations
//

#pragma implementation_key(346)
inline IDispatchPtr Script::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(347)
inline _bstr_t Script::GetExtended ( ) {
    BSTR _result;
    HRESULT _hr = get_Extended(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(348)
inline void Script::PutExtended ( _bstr_t Extended ) {
    HRESULT _hr = put_Extended(Extended);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(349)
inline _bstr_t Script::GetId ( ) {
    BSTR _result;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(350)
inline void Script::PutId ( _bstr_t Id ) {
    HRESULT _hr = put_Id(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(351)
inline enum MsoScriptLanguage Script::GetLanguage ( ) {
    enum MsoScriptLanguage _result;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(352)
inline void Script::PutLanguage ( enum MsoScriptLanguage Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(353)
inline enum MsoScriptLocation Script::GetLocation ( ) {
    enum MsoScriptLocation _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(354)
inline HRESULT Script::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(355)
inline IDispatchPtr Script::GetShape ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(356)
inline _bstr_t Script::GetScriptText ( ) {
    BSTR _result;
    HRESULT _hr = get_ScriptText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(357)
inline void Script::PutScriptText ( _bstr_t Script ) {
    HRESULT _hr = put_ScriptText(Script);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Scripts wrapper method implementations
//

#pragma implementation_key(358)
inline IDispatchPtr Scripts::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(359)
inline long Scripts::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(360)
inline IUnknownPtr Scripts::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(361)
inline ScriptPtr Scripts::Item ( const _variant_t & Index ) {
    struct Script * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

#pragma implementation_key(362)
inline ScriptPtr Scripts::Add ( IDispatch * Anchor, enum MsoScriptLocation Location, enum MsoScriptLanguage Language, _bstr_t Id, _bstr_t Extended, _bstr_t ScriptText ) {
    struct Script * _result;
    HRESULT _hr = raw_Add(Anchor, Location, Language, Id, Extended, ScriptText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

#pragma implementation_key(363)
inline HRESULT Scripts::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Shape wrapper method implementations
//

#pragma implementation_key(364)
inline IDispatchPtr Shape::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(365)
inline HRESULT Shape::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(366)
inline HRESULT Shape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(367)
inline ShapePtr Shape::Duplicate ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(368)
inline HRESULT Shape::Flip ( enum MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(369)
inline HRESULT Shape::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(370)
inline HRESULT Shape::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(371)
inline HRESULT Shape::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(372)
inline HRESULT Shape::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(373)
inline HRESULT Shape::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(374)
inline HRESULT Shape::ScaleHeight ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(375)
inline HRESULT Shape::ScaleWidth ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(376)
inline HRESULT Shape::Select ( const _variant_t & Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(377)
inline HRESULT Shape::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(378)
inline ShapeRangePtr Shape::Ungroup ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(379)
inline HRESULT Shape::ZOrder ( enum MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(380)
inline AdjustmentsPtr Shape::GetAdjustments ( ) {
    struct Adjustments * _result;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(381)
inline enum MsoAutoShapeType Shape::GetAutoShapeType ( ) {
    enum MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline void Shape::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(383)
inline enum MsoBlackWhiteMode Shape::GetBlackWhiteMode ( ) {
    enum MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(384)
inline void Shape::PutBlackWhiteMode ( enum MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(385)
inline CalloutFormatPtr Shape::GetCallout ( ) {
    struct CalloutFormat * _result;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(386)
inline int Shape::GetConnectionSiteCount ( ) {
    int _result;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(387)
inline enum MsoTriState Shape::GetConnector ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(388)
inline ConnectorFormatPtr Shape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(389)
inline FillFormatPtr Shape::GetFill ( ) {
    struct FillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(390)
inline GroupShapesPtr Shape::GetGroupItems ( ) {
    struct GroupShapes * _result;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(391)
inline float Shape::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(392)
inline void Shape::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(393)
inline enum MsoTriState Shape::GetHorizontalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(394)
inline float Shape::GetLeft ( ) {
    float _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(395)
inline void Shape::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(396)
inline LineFormatPtr Shape::GetLine ( ) {
    struct LineFormat * _result;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(397)
inline enum MsoTriState Shape::GetLockAspectRatio ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(398)
inline void Shape::PutLockAspectRatio ( enum MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(399)
inline _bstr_t Shape::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(400)
inline void Shape::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(401)
inline ShapeNodesPtr Shape::GetNodes ( ) {
    struct ShapeNodes * _result;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(402)
inline float Shape::GetRotation ( ) {
    float _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(403)
inline void Shape::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(404)
inline PictureFormatPtr Shape::GetPictureFormat ( ) {
    struct PictureFormat * _result;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(405)
inline ShadowFormatPtr Shape::GetShadow ( ) {
    struct ShadowFormat * _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(406)
inline TextEffectFormatPtr Shape::GetTextEffect ( ) {
    struct TextEffectFormat * _result;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(407)
inline TextFramePtr Shape::GetTextFrame ( ) {
    struct TextFrame * _result;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(408)
inline ThreeDFormatPtr Shape::GetThreeD ( ) {
    struct ThreeDFormat * _result;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(409)
inline float Shape::GetTop ( ) {
    float _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(410)
inline void Shape::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(411)
inline enum MsoShapeType Shape::GetType ( ) {
    enum MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(412)
inline enum MsoTriState Shape::GetVerticalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline _variant_t Shape::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(414)
inline enum MsoTriState Shape::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline void Shape::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline float Shape::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(417)
inline void Shape::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(418)
inline int Shape::GetZOrderPosition ( ) {
    int _result;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(419)
inline ScriptPtr Shape::GetScript ( ) {
    struct Script * _result;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

#pragma implementation_key(420)
inline _bstr_t Shape::GetAlternativeText ( ) {
    BSTR _result;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(421)
inline void Shape::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeRange wrapper method implementations
//

#pragma implementation_key(422)
inline IDispatchPtr ShapeRange::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(423)
inline int ShapeRange::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(424)
inline ShapePtr ShapeRange::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(425)
inline IUnknownPtr ShapeRange::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(426)
inline HRESULT ShapeRange::Align ( enum MsoAlignCmd AlignCmd, enum MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Align(AlignCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(427)
inline HRESULT ShapeRange::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(428)
inline HRESULT ShapeRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(429)
inline HRESULT ShapeRange::Distribute ( enum MsoDistributeCmd DistributeCmd, enum MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Distribute(DistributeCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(430)
inline ShapeRangePtr ShapeRange::Duplicate ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(431)
inline HRESULT ShapeRange::Flip ( enum MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(432)
inline HRESULT ShapeRange::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(433)
inline HRESULT ShapeRange::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(434)
inline HRESULT ShapeRange::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(435)
inline ShapePtr ShapeRange::Group ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(436)
inline HRESULT ShapeRange::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(437)
inline ShapePtr ShapeRange::Regroup ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_Regroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(438)
inline HRESULT ShapeRange::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(439)
inline HRESULT ShapeRange::ScaleHeight ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(440)
inline HRESULT ShapeRange::ScaleWidth ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(441)
inline HRESULT ShapeRange::Select ( const _variant_t & Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(442)
inline HRESULT ShapeRange::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(443)
inline ShapeRangePtr ShapeRange::Ungroup ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(444)
inline HRESULT ShapeRange::ZOrder ( enum MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(445)
inline AdjustmentsPtr ShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(446)
inline enum MsoAutoShapeType ShapeRange::GetAutoShapeType ( ) {
    enum MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(447)
inline void ShapeRange::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(448)
inline enum MsoBlackWhiteMode ShapeRange::GetBlackWhiteMode ( ) {
    enum MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(449)
inline void ShapeRange::PutBlackWhiteMode ( enum MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(450)
inline CalloutFormatPtr ShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(451)
inline int ShapeRange::GetConnectionSiteCount ( ) {
    int _result;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(452)
inline enum MsoTriState ShapeRange::GetConnector ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(453)
inline ConnectorFormatPtr ShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(454)
inline FillFormatPtr ShapeRange::GetFill ( ) {
    struct FillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(455)
inline GroupShapesPtr ShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(456)
inline float ShapeRange::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(457)
inline void ShapeRange::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(458)
inline enum MsoTriState ShapeRange::GetHorizontalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(459)
inline float ShapeRange::GetLeft ( ) {
    float _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(460)
inline void ShapeRange::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(461)
inline LineFormatPtr ShapeRange::GetLine ( ) {
    struct LineFormat * _result;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(462)
inline enum MsoTriState ShapeRange::GetLockAspectRatio ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(463)
inline void ShapeRange::PutLockAspectRatio ( enum MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(464)
inline _bstr_t ShapeRange::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(465)
inline void ShapeRange::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(466)
inline ShapeNodesPtr ShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(467)
inline float ShapeRange::GetRotation ( ) {
    float _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(468)
inline void ShapeRange::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(469)
inline PictureFormatPtr ShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(470)
inline ShadowFormatPtr ShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(471)
inline TextEffectFormatPtr ShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(472)
inline TextFramePtr ShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(473)
inline ThreeDFormatPtr ShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(474)
inline float ShapeRange::GetTop ( ) {
    float _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(475)
inline void ShapeRange::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(476)
inline enum MsoShapeType ShapeRange::GetType ( ) {
    enum MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(477)
inline enum MsoTriState ShapeRange::GetVerticalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(478)
inline _variant_t ShapeRange::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(479)
inline enum MsoTriState ShapeRange::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(480)
inline void ShapeRange::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(481)
inline float ShapeRange::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline void ShapeRange::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(483)
inline int ShapeRange::GetZOrderPosition ( ) {
    int _result;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(484)
inline ScriptPtr ShapeRange::GetScript ( ) {
    struct Script * _result;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

#pragma implementation_key(485)
inline _bstr_t ShapeRange::GetAlternativeText ( ) {
    BSTR _result;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(486)
inline void ShapeRange::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Shapes wrapper method implementations
//

#pragma implementation_key(487)
inline IDispatchPtr Shapes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(488)
inline int Shapes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(489)
inline ShapePtr Shapes::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(490)
inline IUnknownPtr Shapes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(491)
inline ShapePtr Shapes::AddCallout ( enum MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(492)
inline ShapePtr Shapes::AddConnector ( enum MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(493)
inline ShapePtr Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(494)
inline ShapePtr Shapes::AddLabel ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(495)
inline ShapePtr Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(496)
inline ShapePtr Shapes::AddPicture ( _bstr_t FileName, enum MsoTriState LinkToFile, enum MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(497)
inline ShapePtr Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(498)
inline ShapePtr Shapes::AddShape ( enum MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(499)
inline ShapePtr Shapes::AddTextEffect ( enum MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum MsoTriState FontBold, enum MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(500)
inline ShapePtr Shapes::AddTextbox ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(501)
inline FreeformBuilderPtr Shapes::BuildFreeform ( enum MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(502)
inline ShapeRangePtr Shapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(503)
inline HRESULT Shapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(504)
inline ShapePtr Shapes::GetBackground ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(505)
inline ShapePtr Shapes::GetDefault ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface TextEffectFormat wrapper method implementations
//

#pragma implementation_key(506)
inline IDispatchPtr TextEffectFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(507)
inline HRESULT TextEffectFormat::ToggleVerticalText ( ) {
    HRESULT _hr = raw_ToggleVerticalText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(508)
inline enum MsoTextEffectAlignment TextEffectFormat::GetAlignment ( ) {
    enum MsoTextEffectAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(509)
inline void TextEffectFormat::PutAlignment ( enum MsoTextEffectAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(510)
inline enum MsoTriState TextEffectFormat::GetFontBold ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(511)
inline void TextEffectFormat::PutFontBold ( enum MsoTriState FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(512)
inline enum MsoTriState TextEffectFormat::GetFontItalic ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(513)
inline void TextEffectFormat::PutFontItalic ( enum MsoTriState FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(514)
inline _bstr_t TextEffectFormat::GetFontName ( ) {
    BSTR _result;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(515)
inline void TextEffectFormat::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(516)
inline float TextEffectFormat::GetFontSize ( ) {
    float _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(517)
inline void TextEffectFormat::PutFontSize ( float FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(518)
inline enum MsoTriState TextEffectFormat::GetKernedPairs ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_KernedPairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(519)
inline void TextEffectFormat::PutKernedPairs ( enum MsoTriState KernedPairs ) {
    HRESULT _hr = put_KernedPairs(KernedPairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(520)
inline enum MsoTriState TextEffectFormat::GetNormalizedHeight ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_NormalizedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(521)
inline void TextEffectFormat::PutNormalizedHeight ( enum MsoTriState NormalizedHeight ) {
    HRESULT _hr = put_NormalizedHeight(NormalizedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(522)
inline enum MsoPresetTextEffectShape TextEffectFormat::GetPresetShape ( ) {
    enum MsoPresetTextEffectShape _result;
    HRESULT _hr = get_PresetShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(523)
inline void TextEffectFormat::PutPresetShape ( enum MsoPresetTextEffectShape PresetShape ) {
    HRESULT _hr = put_PresetShape(PresetShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(524)
inline enum MsoPresetTextEffect TextEffectFormat::GetPresetTextEffect ( ) {
    enum MsoPresetTextEffect _result;
    HRESULT _hr = get_PresetTextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(525)
inline void TextEffectFormat::PutPresetTextEffect ( enum MsoPresetTextEffect Preset ) {
    HRESULT _hr = put_PresetTextEffect(Preset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(526)
inline enum MsoTriState TextEffectFormat::GetRotatedChars ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_RotatedChars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(527)
inline void TextEffectFormat::PutRotatedChars ( enum MsoTriState RotatedChars ) {
    HRESULT _hr = put_RotatedChars(RotatedChars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(528)
inline _bstr_t TextEffectFormat::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(529)
inline void TextEffectFormat::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(530)
inline float TextEffectFormat::GetTracking ( ) {
    float _result;
    HRESULT _hr = get_Tracking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(531)
inline void TextEffectFormat::PutTracking ( float Tracking ) {
    HRESULT _hr = put_Tracking(Tracking);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextFrame wrapper method implementations
//

#pragma implementation_key(532)
inline IDispatchPtr TextFrame::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(533)
inline float TextFrame::GetMarginBottom ( ) {
    float _result;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(534)
inline void TextFrame::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(535)
inline float TextFrame::GetMarginLeft ( ) {
    float _result;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(536)
inline void TextFrame::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(537)
inline float TextFrame::GetMarginRight ( ) {
    float _result;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(538)
inline void TextFrame::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(539)
inline float TextFrame::GetMarginTop ( ) {
    float _result;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(540)
inline void TextFrame::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(541)
inline enum MsoTextOrientation TextFrame::GetOrientation ( ) {
    enum MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(542)
inline void TextFrame::PutOrientation ( enum MsoTextOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ThreeDFormat wrapper method implementations
//

#pragma implementation_key(543)
inline IDispatchPtr ThreeDFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(544)
inline HRESULT ThreeDFormat::IncrementRotationX ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(545)
inline HRESULT ThreeDFormat::IncrementRotationY ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(546)
inline HRESULT ThreeDFormat::ResetRotation ( ) {
    HRESULT _hr = raw_ResetRotation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(547)
inline HRESULT ThreeDFormat::SetThreeDFormat ( enum MsoPresetThreeDFormat PresetThreeDFormat ) {
    HRESULT _hr = raw_SetThreeDFormat(PresetThreeDFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(548)
inline HRESULT ThreeDFormat::SetExtrusionDirection ( enum MsoPresetExtrusionDirection PresetExtrusionDirection ) {
    HRESULT _hr = raw_SetExtrusionDirection(PresetExtrusionDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(549)
inline float ThreeDFormat::GetDepth ( ) {
    float _result;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(550)
inline void ThreeDFormat::PutDepth ( float Depth ) {
    HRESULT _hr = put_Depth(Depth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(551)
inline ColorFormatPtr ThreeDFormat::GetExtrusionColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ExtrusionColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(552)
inline enum MsoExtrusionColorType ThreeDFormat::GetExtrusionColorType ( ) {
    enum MsoExtrusionColorType _result;
    HRESULT _hr = get_ExtrusionColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(553)
inline void ThreeDFormat::PutExtrusionColorType ( enum MsoExtrusionColorType ExtrusionColorType ) {
    HRESULT _hr = put_ExtrusionColorType(ExtrusionColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(554)
inline enum MsoTriState ThreeDFormat::GetPerspective ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(555)
inline void ThreeDFormat::PutPerspective ( enum MsoTriState Perspective ) {
    HRESULT _hr = put_Perspective(Perspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(556)
inline enum MsoPresetExtrusionDirection ThreeDFormat::GetPresetExtrusionDirection ( ) {
    enum MsoPresetExtrusionDirection _result;
    HRESULT _hr = get_PresetExtrusionDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(557)
inline enum MsoPresetLightingDirection ThreeDFormat::GetPresetLightingDirection ( ) {
    enum MsoPresetLightingDirection _result;
    HRESULT _hr = get_PresetLightingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(558)
inline void ThreeDFormat::PutPresetLightingDirection ( enum MsoPresetLightingDirection PresetLightingDirection ) {
    HRESULT _hr = put_PresetLightingDirection(PresetLightingDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(559)
inline enum MsoPresetLightingSoftness ThreeDFormat::GetPresetLightingSoftness ( ) {
    enum MsoPresetLightingSoftness _result;
    HRESULT _hr = get_PresetLightingSoftness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(560)
inline void ThreeDFormat::PutPresetLightingSoftness ( enum MsoPresetLightingSoftness PresetLightingSoftness ) {
    HRESULT _hr = put_PresetLightingSoftness(PresetLightingSoftness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(561)
inline enum MsoPresetMaterial ThreeDFormat::GetPresetMaterial ( ) {
    enum MsoPresetMaterial _result;
    HRESULT _hr = get_PresetMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(562)
inline void ThreeDFormat::PutPresetMaterial ( enum MsoPresetMaterial PresetMaterial ) {
    HRESULT _hr = put_PresetMaterial(PresetMaterial);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(563)
inline enum MsoPresetThreeDFormat ThreeDFormat::GetPresetThreeDFormat ( ) {
    enum MsoPresetThreeDFormat _result;
    HRESULT _hr = get_PresetThreeDFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(564)
inline float ThreeDFormat::GetRotationX ( ) {
    float _result;
    HRESULT _hr = get_RotationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(565)
inline void ThreeDFormat::PutRotationX ( float RotationX ) {
    HRESULT _hr = put_RotationX(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(566)
inline float ThreeDFormat::GetRotationY ( ) {
    float _result;
    HRESULT _hr = get_RotationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(567)
inline void ThreeDFormat::PutRotationY ( float RotationY ) {
    HRESULT _hr = put_RotationY(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(568)
inline enum MsoTriState ThreeDFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(569)
inline void ThreeDFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMsoDispCagNotifySink wrapper method implementations
//

#pragma implementation_key(570)
inline HRESULT IMsoDispCagNotifySink::InsertClip ( IUnknown * pClipMoniker, IUnknown * pItemMoniker ) {
    HRESULT _hr = raw_InsertClip(pClipMoniker, pItemMoniker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(571)
inline HRESULT IMsoDispCagNotifySink::WindowIsClosing ( ) {
    HRESULT _hr = raw_WindowIsClosing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Balloon wrapper method implementations
//

#pragma implementation_key(572)
inline IDispatchPtr Balloon::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(573)
inline IDispatchPtr Balloon::GetCheckboxes ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Checkboxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(574)
inline IDispatchPtr Balloon::GetLabels ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Labels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(575)
inline void Balloon::PutBalloonType ( enum MsoBalloonType pbty ) {
    HRESULT _hr = put_BalloonType(pbty);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(576)
inline enum MsoBalloonType Balloon::GetBalloonType ( ) {
    enum MsoBalloonType _result;
    HRESULT _hr = get_BalloonType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(577)
inline void Balloon::PutIcon ( enum MsoIconType picn ) {
    HRESULT _hr = put_Icon(picn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(578)
inline enum MsoIconType Balloon::GetIcon ( ) {
    enum MsoIconType _result;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(579)
inline void Balloon::PutHeading ( _bstr_t pbstr ) {
    HRESULT _hr = put_Heading(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(580)
inline _bstr_t Balloon::GetHeading ( ) {
    BSTR _result;
    HRESULT _hr = get_Heading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(581)
inline void Balloon::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline _bstr_t Balloon::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(583)
inline void Balloon::PutMode ( enum MsoModeType pmd ) {
    HRESULT _hr = put_Mode(pmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(584)
inline enum MsoModeType Balloon::GetMode ( ) {
    enum MsoModeType _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(585)
inline void Balloon::PutAnimation ( enum MsoAnimationType pfca ) {
    HRESULT _hr = put_Animation(pfca);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(586)
inline enum MsoAnimationType Balloon::GetAnimation ( ) {
    enum MsoAnimationType _result;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(587)
inline void Balloon::PutButton ( enum MsoButtonSetType psbs ) {
    HRESULT _hr = put_Button(psbs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(588)
inline enum MsoButtonSetType Balloon::GetButton ( ) {
    enum MsoButtonSetType _result;
    HRESULT _hr = get_Button(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(589)
inline void Balloon::PutCallback ( _bstr_t pbstr ) {
    HRESULT _hr = put_Callback(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(590)
inline _bstr_t Balloon::GetCallback ( ) {
    BSTR _result;
    HRESULT _hr = get_Callback(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(591)
inline void Balloon::PutPrivate ( long plPrivate ) {
    HRESULT _hr = put_Private(plPrivate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(592)
inline long Balloon::GetPrivate ( ) {
    long _result;
    HRESULT _hr = get_Private(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(593)
inline HRESULT Balloon::SetAvoidRectangle ( int Left, int Top, int Right, int Bottom ) {
    HRESULT _hr = raw_SetAvoidRectangle(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(594)
inline _bstr_t Balloon::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(595)
inline enum MsoBalloonButtonType Balloon::Show ( ) {
    enum MsoBalloonButtonType _result;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(596)
inline HRESULT Balloon::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface BalloonCheckboxes wrapper method implementations
//

#pragma implementation_key(597)
inline _bstr_t BalloonCheckboxes::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(598)
inline IDispatchPtr BalloonCheckboxes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(599)
inline IDispatchPtr BalloonCheckboxes::GetItem ( int Index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(600)
inline int BalloonCheckboxes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(601)
inline void BalloonCheckboxes::PutCount ( int pccbx ) {
    HRESULT _hr = put_Count(pccbx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(602)
inline IUnknownPtr BalloonCheckboxes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface BalloonCheckbox wrapper method implementations
//

#pragma implementation_key(603)
inline _bstr_t BalloonCheckbox::GetItem ( ) {
    BSTR _result;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(604)
inline _bstr_t BalloonCheckbox::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(605)
inline IDispatchPtr BalloonCheckbox::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(606)
inline void BalloonCheckbox::PutChecked ( VARIANT_BOOL pvarfChecked ) {
    HRESULT _hr = put_Checked(pvarfChecked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(607)
inline VARIANT_BOOL BalloonCheckbox::GetChecked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Checked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(608)
inline void BalloonCheckbox::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(609)
inline _bstr_t BalloonCheckbox::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface BalloonLabels wrapper method implementations
//

#pragma implementation_key(610)
inline _bstr_t BalloonLabels::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(611)
inline IDispatchPtr BalloonLabels::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(612)
inline IDispatchPtr BalloonLabels::GetItem ( int Index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(613)
inline int BalloonLabels::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(614)
inline void BalloonLabels::PutCount ( int pcwz ) {
    HRESULT _hr = put_Count(pcwz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(615)
inline IUnknownPtr BalloonLabels::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface BalloonLabel wrapper method implementations
//

#pragma implementation_key(616)
inline _bstr_t BalloonLabel::GetItem ( ) {
    BSTR _result;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(617)
inline _bstr_t BalloonLabel::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(618)
inline IDispatchPtr BalloonLabel::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(619)
inline void BalloonLabel::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(620)
inline _bstr_t BalloonLabel::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface AnswerWizardFiles wrapper method implementations
//

#pragma implementation_key(621)
inline IDispatchPtr AnswerWizardFiles::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(622)
inline _bstr_t AnswerWizardFiles::GetItem ( int Index ) {
    BSTR _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(623)
inline int AnswerWizardFiles::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(624)
inline HRESULT AnswerWizardFiles::Add ( _bstr_t FileName ) {
    HRESULT _hr = raw_Add(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(625)
inline HRESULT AnswerWizardFiles::Delete ( _bstr_t FileName ) {
    HRESULT _hr = raw_Delete(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface AnswerWizard wrapper method implementations
//

#pragma implementation_key(626)
inline IDispatchPtr AnswerWizard::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(627)
inline AnswerWizardFilesPtr AnswerWizard::GetFiles ( ) {
    struct AnswerWizardFiles * _result;
    HRESULT _hr = get_Files(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnswerWizardFilesPtr(_result, false);
}

#pragma implementation_key(628)
inline HRESULT AnswerWizard::ClearFileList ( ) {
    HRESULT _hr = raw_ClearFileList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(629)
inline HRESULT AnswerWizard::ResetFileList ( ) {
    HRESULT _hr = raw_ResetFileList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Assistant wrapper method implementations
//

#pragma implementation_key(630)
inline IDispatchPtr Assistant::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(631)
inline HRESULT Assistant::Move ( int xLeft, int yTop ) {
    HRESULT _hr = raw_Move(xLeft, yTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(632)
inline void Assistant::PutTop ( int pyTop ) {
    HRESULT _hr = put_Top(pyTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(633)
inline int Assistant::GetTop ( ) {
    int _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(634)
inline void Assistant::PutLeft ( int pxLeft ) {
    HRESULT _hr = put_Left(pxLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(635)
inline int Assistant::GetLeft ( ) {
    int _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(636)
inline HRESULT Assistant::Help ( ) {
    HRESULT _hr = raw_Help();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(637)
inline long Assistant::StartWizard ( VARIANT_BOOL On, _bstr_t Callback, long PrivateX, const _variant_t & Animation, const _variant_t & CustomTeaser, const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right ) {
    long _result;
    HRESULT _hr = raw_StartWizard(On, Callback, PrivateX, Animation, CustomTeaser, Top, Left, Bottom, Right, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(638)
inline HRESULT Assistant::EndWizard ( long WizardID, VARIANT_BOOL varfSuccess, const _variant_t & Animation ) {
    HRESULT _hr = raw_EndWizard(WizardID, varfSuccess, Animation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(639)
inline HRESULT Assistant::ActivateWizard ( long WizardID, enum MsoWizardActType act, const _variant_t & Animation ) {
    HRESULT _hr = raw_ActivateWizard(WizardID, act, Animation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(640)
inline HRESULT Assistant::ResetTips ( ) {
    HRESULT _hr = raw_ResetTips();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(641)
inline BalloonPtr Assistant::GetNewBalloon ( ) {
    struct Balloon * _result;
    HRESULT _hr = get_NewBalloon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BalloonPtr(_result, false);
}

#pragma implementation_key(642)
inline enum MsoBalloonErrorType Assistant::GetBalloonError ( ) {
    enum MsoBalloonErrorType _result;
    HRESULT _hr = get_BalloonError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(643)
inline VARIANT_BOOL Assistant::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(644)
inline void Assistant::PutVisible ( VARIANT_BOOL pvarfVisible ) {
    HRESULT _hr = put_Visible(pvarfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(645)
inline enum MsoAnimationType Assistant::GetAnimation ( ) {
    enum MsoAnimationType _result;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(646)
inline void Assistant::PutAnimation ( enum MsoAnimationType pfca ) {
    HRESULT _hr = put_Animation(pfca);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(647)
inline VARIANT_BOOL Assistant::GetReduced ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Reduced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(648)
inline void Assistant::PutReduced ( VARIANT_BOOL pvarfReduced ) {
    HRESULT _hr = put_Reduced(pvarfReduced);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(649)
inline void Assistant::PutAssistWithHelp ( VARIANT_BOOL pvarfAssistWithHelp ) {
    HRESULT _hr = put_AssistWithHelp(pvarfAssistWithHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(650)
inline VARIANT_BOOL Assistant::GetAssistWithHelp ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AssistWithHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(651)
inline void Assistant::PutAssistWithWizards ( VARIANT_BOOL pvarfAssistWithWizards ) {
    HRESULT _hr = put_AssistWithWizards(pvarfAssistWithWizards);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(652)
inline VARIANT_BOOL Assistant::GetAssistWithWizards ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AssistWithWizards(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(653)
inline void Assistant::PutAssistWithAlerts ( VARIANT_BOOL pvarfAssistWithAlerts ) {
    HRESULT _hr = put_AssistWithAlerts(pvarfAssistWithAlerts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(654)
inline VARIANT_BOOL Assistant::GetAssistWithAlerts ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AssistWithAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(655)
inline void Assistant::PutMoveWhenInTheWay ( VARIANT_BOOL pvarfMove ) {
    HRESULT _hr = put_MoveWhenInTheWay(pvarfMove);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(656)
inline VARIANT_BOOL Assistant::GetMoveWhenInTheWay ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MoveWhenInTheWay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(657)
inline void Assistant::PutSounds ( VARIANT_BOOL pvarfSounds ) {
    HRESULT _hr = put_Sounds(pvarfSounds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(658)
inline VARIANT_BOOL Assistant::GetSounds ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Sounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(659)
inline void Assistant::PutFeatureTips ( VARIANT_BOOL pvarfFeatures ) {
    HRESULT _hr = put_FeatureTips(pvarfFeatures);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(660)
inline VARIANT_BOOL Assistant::GetFeatureTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FeatureTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(661)
inline void Assistant::PutMouseTips ( VARIANT_BOOL pvarfMouse ) {
    HRESULT _hr = put_MouseTips(pvarfMouse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(662)
inline VARIANT_BOOL Assistant::GetMouseTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MouseTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(663)
inline void Assistant::PutKeyboardShortcutTips ( VARIANT_BOOL pvarfKeyboardShortcuts ) {
    HRESULT _hr = put_KeyboardShortcutTips(pvarfKeyboardShortcuts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(664)
inline VARIANT_BOOL Assistant::GetKeyboardShortcutTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeyboardShortcutTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(665)
inline void Assistant::PutHighPriorityTips ( VARIANT_BOOL pvarfHighPriorityTips ) {
    HRESULT _hr = put_HighPriorityTips(pvarfHighPriorityTips);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(666)
inline VARIANT_BOOL Assistant::GetHighPriorityTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HighPriorityTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(667)
inline void Assistant::PutTipOfDay ( VARIANT_BOOL pvarfTipOfDay ) {
    HRESULT _hr = put_TipOfDay(pvarfTipOfDay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(668)
inline VARIANT_BOOL Assistant::GetTipOfDay ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TipOfDay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(669)
inline void Assistant::PutGuessHelp ( VARIANT_BOOL pvarfGuessHelp ) {
    HRESULT _hr = put_GuessHelp(pvarfGuessHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(670)
inline VARIANT_BOOL Assistant::GetGuessHelp ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_GuessHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(671)
inline void Assistant::PutSearchWhenProgramming ( VARIANT_BOOL pvarfSearchInProgram ) {
    HRESULT _hr = put_SearchWhenProgramming(pvarfSearchInProgram);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(672)
inline VARIANT_BOOL Assistant::GetSearchWhenProgramming ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SearchWhenProgramming(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(673)
inline _bstr_t Assistant::GetItem ( ) {
    BSTR _result;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(674)
inline _bstr_t Assistant::GetFileName ( ) {
    BSTR _result;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(675)
inline void Assistant::PutFileName ( _bstr_t pbstr ) {
    HRESULT _hr = put_FileName(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(676)
inline _bstr_t Assistant::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(677)
inline VARIANT_BOOL Assistant::GetOn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_On(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(678)
inline void Assistant::PutOn ( VARIANT_BOOL pvarfOn ) {
    HRESULT _hr = put_On(pvarfOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface DocumentProperty wrapper method implementations
//

#pragma implementation_key(679)
inline HRESULT DocumentProperty::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(680)
inline _bstr_t DocumentProperty::GetName ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Name(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(681)
inline void DocumentProperty::PutName ( long lcid, _bstr_t pbstrRetVal ) {
    HRESULT _hr = put_Name(lcid, pbstrRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(682)
inline _variant_t DocumentProperty::GetValue ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(683)
inline void DocumentProperty::PutValue ( long lcid, const _variant_t & pvargRetVal ) {
    HRESULT _hr = put_Value(lcid, pvargRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(684)
inline enum MsoDocProperties DocumentProperty::GetType ( long lcid ) {
    enum MsoDocProperties _result;
    HRESULT _hr = get_Type(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(685)
inline void DocumentProperty::PutType ( long lcid, enum MsoDocProperties ptypeRetVal ) {
    HRESULT _hr = put_Type(lcid, ptypeRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(686)
inline VARIANT_BOOL DocumentProperty::GetLinkToContent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LinkToContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(687)
inline void DocumentProperty::PutLinkToContent ( VARIANT_BOOL pfLinkRetVal ) {
    HRESULT _hr = put_LinkToContent(pfLinkRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(688)
inline _bstr_t DocumentProperty::GetLinkSource ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(689)
inline void DocumentProperty::PutLinkSource ( _bstr_t pbstrSourceRetVal ) {
    HRESULT _hr = put_LinkSource(pbstrSourceRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(690)
inline IDispatchPtr DocumentProperty::GetApplication ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(691)
inline long DocumentProperty::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface DocumentPropertiesACC wrapper method implementations
//

#pragma implementation_key(692)
inline DocumentPropertyPtr DocumentPropertiesACC::GetItem ( const _variant_t & Index, long lcid ) {
    struct DocumentProperty * _result;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentPropertyPtr(_result, false);
}

#pragma implementation_key(693)
inline long DocumentPropertiesACC::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(694)
inline DocumentPropertyPtr DocumentPropertiesACC::Add ( _bstr_t Name, VARIANT_BOOL LinkToContent, const _variant_t & Type, const _variant_t & Value, const _variant_t & LinkSource, long lcid ) {
    struct DocumentProperty * _result;
    HRESULT _hr = raw_Add(Name, LinkToContent, Type, Value, LinkSource, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentPropertyPtr(_result, false);
}

#pragma implementation_key(695)
inline IUnknownPtr DocumentPropertiesACC::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(696)
inline IDispatchPtr DocumentPropertiesACC::GetApplication ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(697)
inline long DocumentPropertiesACC::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IFoundFiles wrapper method implementations
//

#pragma implementation_key(698)
inline _bstr_t IFoundFiles::GetItem ( int Index ) {
    BSTR _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(699)
inline int IFoundFiles::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(700)
inline IUnknownPtr IFoundFiles::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IFind wrapper method implementations
//

#pragma implementation_key(701)
inline _bstr_t IFind::GetSearchPath ( ) {
    BSTR _result;
    HRESULT _hr = get_SearchPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(702)
inline _bstr_t IFind::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(703)
inline VARIANT_BOOL IFind::GetSubDir ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SubDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(704)
inline _bstr_t IFind::GetTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(705)
inline _bstr_t IFind::GetAuthor ( ) {
    BSTR _result;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(706)
inline _bstr_t IFind::GetKeywords ( ) {
    BSTR _result;
    HRESULT _hr = get_Keywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(707)
inline _bstr_t IFind::GetSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(708)
inline enum MsoFileFindOptions IFind::GetOptions ( ) {
    enum MsoFileFindOptions _result;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(709)
inline VARIANT_BOOL IFind::GetMatchCase ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchCase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(710)
inline _bstr_t IFind::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(711)
inline VARIANT_BOOL IFind::GetPatternMatch ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PatternMatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(712)
inline _variant_t IFind::GetDateSavedFrom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateSavedFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(713)
inline _variant_t IFind::GetDateSavedTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateSavedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(714)
inline _bstr_t IFind::GetSavedBy ( ) {
    BSTR _result;
    HRESULT _hr = get_SavedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(715)
inline _variant_t IFind::GetDateCreatedFrom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateCreatedFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(716)
inline _variant_t IFind::GetDateCreatedTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateCreatedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(717)
inline enum MsoFileFindView IFind::GetView ( ) {
    enum MsoFileFindView _result;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(718)
inline enum MsoFileFindSortBy IFind::GetSortBy ( ) {
    enum MsoFileFindSortBy _result;
    HRESULT _hr = get_SortBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(719)
inline enum MsoFileFindListBy IFind::GetListBy ( ) {
    enum MsoFileFindListBy _result;
    HRESULT _hr = get_ListBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(720)
inline int IFind::GetSelectedFile ( ) {
    int _result;
    HRESULT _hr = get_SelectedFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(721)
inline IFoundFilesPtr IFind::GetResults ( ) {
    struct IFoundFiles * _result;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFoundFilesPtr(_result, false);
}

#pragma implementation_key(722)
inline int IFind::Show ( ) {
    int _result;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(723)
inline void IFind::PutSearchPath ( _bstr_t pbstr ) {
    HRESULT _hr = put_SearchPath(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(724)
inline void IFind::PutName ( _bstr_t pbstr ) {
    HRESULT _hr = put_Name(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(725)
inline void IFind::PutSubDir ( VARIANT_BOOL retval ) {
    HRESULT _hr = put_SubDir(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(726)
inline void IFind::PutTitle ( _bstr_t pbstr ) {
    HRESULT _hr = put_Title(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(727)
inline void IFind::PutAuthor ( _bstr_t pbstr ) {
    HRESULT _hr = put_Author(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(728)
inline void IFind::PutKeywords ( _bstr_t pbstr ) {
    HRESULT _hr = put_Keywords(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline void IFind::PutSubject ( _bstr_t pbstr ) {
    HRESULT _hr = put_Subject(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(730)
inline void IFind::PutOptions ( enum MsoFileFindOptions penmOptions ) {
    HRESULT _hr = put_Options(penmOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(731)
inline void IFind::PutMatchCase ( VARIANT_BOOL retval ) {
    HRESULT _hr = put_MatchCase(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(732)
inline void IFind::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(733)
inline void IFind::PutPatternMatch ( VARIANT_BOOL retval ) {
    HRESULT _hr = put_PatternMatch(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(734)
inline void IFind::PutDateSavedFrom ( const _variant_t & pdatSavedFrom ) {
    HRESULT _hr = put_DateSavedFrom(pdatSavedFrom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(735)
inline void IFind::PutDateSavedTo ( const _variant_t & pdatSavedTo ) {
    HRESULT _hr = put_DateSavedTo(pdatSavedTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(736)
inline void IFind::PutSavedBy ( _bstr_t pbstr ) {
    HRESULT _hr = put_SavedBy(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(737)
inline void IFind::PutDateCreatedFrom ( const _variant_t & pdatCreatedFrom ) {
    HRESULT _hr = put_DateCreatedFrom(pdatCreatedFrom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(738)
inline void IFind::PutDateCreatedTo ( const _variant_t & pdatCreatedTo ) {
    HRESULT _hr = put_DateCreatedTo(pdatCreatedTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(739)
inline void IFind::PutView ( enum MsoFileFindView penmView ) {
    HRESULT _hr = put_View(penmView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(740)
inline void IFind::PutSortBy ( enum MsoFileFindSortBy penmSortBy ) {
    HRESULT _hr = put_SortBy(penmSortBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(741)
inline void IFind::PutListBy ( enum MsoFileFindListBy penmListBy ) {
    HRESULT _hr = put_ListBy(penmListBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(742)
inline void IFind::PutSelectedFile ( int pintSelectedFile ) {
    HRESULT _hr = put_SelectedFile(pintSelectedFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(743)
inline HRESULT IFind::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(744)
inline HRESULT IFind::Load ( _bstr_t bstrQueryName ) {
    HRESULT _hr = raw_Load(bstrQueryName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(745)
inline HRESULT IFind::Save ( _bstr_t bstrQueryName ) {
    HRESULT _hr = raw_Save(bstrQueryName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(746)
inline HRESULT IFind::Delete ( _bstr_t bstrQueryName ) {
    HRESULT _hr = raw_Delete(bstrQueryName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(747)
inline long IFind::GetFileType ( ) {
    long _result;
    HRESULT _hr = get_FileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(748)
inline void IFind::PutFileType ( long plFileType ) {
    HRESULT _hr = put_FileType(plFileType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FoundFiles wrapper method implementations
//

#pragma implementation_key(749)
inline _bstr_t FoundFiles::GetItem ( int Index, long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(750)
inline long FoundFiles::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(751)
inline IUnknownPtr FoundFiles::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PropertyTest wrapper method implementations
//

#pragma implementation_key(752)
inline _bstr_t PropertyTest::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(753)
inline enum MsoCondition PropertyTest::GetCondition ( ) {
    enum MsoCondition _result;
    HRESULT _hr = get_Condition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(754)
inline _variant_t PropertyTest::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(755)
inline _variant_t PropertyTest::GetSecondValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SecondValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(756)
inline enum MsoConnector PropertyTest::GetConnector ( ) {
    enum MsoConnector _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PropertyTests wrapper method implementations
//

#pragma implementation_key(757)
inline PropertyTestPtr PropertyTests::GetItem ( int Index, long lcid ) {
    struct PropertyTest * _result;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PropertyTestPtr(_result, false);
}

#pragma implementation_key(758)
inline long PropertyTests::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(759)
inline HRESULT PropertyTests::Add ( _bstr_t Name, enum MsoCondition Condition, const _variant_t & Value, const _variant_t & SecondValue, enum MsoConnector Connector ) {
    HRESULT _hr = raw_Add(Name, Condition, Value, SecondValue, Connector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(760)
inline HRESULT PropertyTests::Remove ( int Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(761)
inline IUnknownPtr PropertyTests::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface FileSearch wrapper method implementations
//

#pragma implementation_key(762)
inline VARIANT_BOOL FileSearch::GetSearchSubFolders ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SearchSubFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(763)
inline void FileSearch::PutSearchSubFolders ( VARIANT_BOOL SearchSubFoldersRetVal ) {
    HRESULT _hr = put_SearchSubFolders(SearchSubFoldersRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(764)
inline VARIANT_BOOL FileSearch::GetMatchTextExactly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchTextExactly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(765)
inline void FileSearch::PutMatchTextExactly ( VARIANT_BOOL MatchTextRetVal ) {
    HRESULT _hr = put_MatchTextExactly(MatchTextRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(766)
inline VARIANT_BOOL FileSearch::GetMatchAllWordForms ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchAllWordForms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline void FileSearch::PutMatchAllWordForms ( VARIANT_BOOL MatchAllWordFormsRetVal ) {
    HRESULT _hr = put_MatchAllWordForms(MatchAllWordFormsRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline _bstr_t FileSearch::GetFileName ( ) {
    BSTR _result;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(769)
inline void FileSearch::PutFileName ( _bstr_t FileNameRetVal ) {
    HRESULT _hr = put_FileName(FileNameRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(770)
inline enum MsoFileType FileSearch::GetFileType ( ) {
    enum MsoFileType _result;
    HRESULT _hr = get_FileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(771)
inline void FileSearch::PutFileType ( enum MsoFileType FileTypeRetVal ) {
    HRESULT _hr = put_FileType(FileTypeRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(772)
inline enum MsoLastModified FileSearch::GetLastModified ( ) {
    enum MsoLastModified _result;
    HRESULT _hr = get_LastModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(773)
inline void FileSearch::PutLastModified ( enum MsoLastModified LastModifiedRetVal ) {
    HRESULT _hr = put_LastModified(LastModifiedRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(774)
inline _bstr_t FileSearch::GetTextOrProperty ( ) {
    BSTR _result;
    HRESULT _hr = get_TextOrProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(775)
inline void FileSearch::PutTextOrProperty ( _bstr_t TextOrProperty ) {
    HRESULT _hr = put_TextOrProperty(TextOrProperty);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(776)
inline _bstr_t FileSearch::GetLookIn ( ) {
    BSTR _result;
    HRESULT _hr = get_LookIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(777)
inline void FileSearch::PutLookIn ( _bstr_t LookInRetVal ) {
    HRESULT _hr = put_LookIn(LookInRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(778)
inline int FileSearch::Execute ( enum MsoSortBy SortBy, enum MsoSortOrder SortOrder, VARIANT_BOOL AlwaysAccurate ) {
    int _result;
    HRESULT _hr = raw_Execute(SortBy, SortOrder, AlwaysAccurate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(779)
inline HRESULT FileSearch::NewSearch ( ) {
    HRESULT _hr = raw_NewSearch();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(780)
inline FoundFilesPtr FileSearch::GetFoundFiles ( ) {
    struct FoundFiles * _result;
    HRESULT _hr = get_FoundFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FoundFilesPtr(_result, false);
}

#pragma implementation_key(781)
inline PropertyTestsPtr FileSearch::GetPropertyTests ( ) {
    struct PropertyTests * _result;
    HRESULT _hr = get_PropertyTests(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PropertyTestsPtr(_result, false);
}

//
// interface COMAddIn wrapper method implementations
//

#pragma implementation_key(782)
inline _bstr_t COMAddIn::GetDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(783)
inline void COMAddIn::PutDescription ( _bstr_t RetValue ) {
    HRESULT _hr = put_Description(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(784)
inline _bstr_t COMAddIn::GetProgId ( ) {
    BSTR _result;
    HRESULT _hr = get_ProgId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(785)
inline _bstr_t COMAddIn::GetGuid ( ) {
    BSTR _result;
    HRESULT _hr = get_Guid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(786)
inline VARIANT_BOOL COMAddIn::GetConnect ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Connect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(787)
inline void COMAddIn::PutConnect ( VARIANT_BOOL RetValue ) {
    HRESULT _hr = put_Connect(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(788)
inline IDispatchPtr COMAddIn::GetObject ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(789)
inline void COMAddIn::PutObject ( IDispatch * RetValue ) {
    HRESULT _hr = put_Object(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(790)
inline IDispatchPtr COMAddIn::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface COMAddIns wrapper method implementations
//

#pragma implementation_key(791)
inline COMAddInPtr COMAddIns::Item ( VARIANT * Index ) {
    struct COMAddIn * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return COMAddInPtr(_result, false);
}

#pragma implementation_key(792)
inline long COMAddIns::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(793)
inline IUnknownPtr COMAddIns::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(794)
inline HRESULT COMAddIns::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(795)
inline IDispatchPtr COMAddIns::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(796)
inline HRESULT COMAddIns::SetAppModal ( VARIANT_BOOL varfModal ) {
    HRESULT _hr = raw_SetAppModal(varfModal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface LanguageSettings wrapper method implementations
//

#pragma implementation_key(797)
inline int LanguageSettings::GetLanguageID ( enum MsoAppLanguageID Id ) {
    int _result;
    HRESULT _hr = get_LanguageID(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(798)
inline VARIANT_BOOL LanguageSettings::GetLanguagePreferredForEditing ( enum MsoLanguageID lid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LanguagePreferredForEditing(lid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface _CommandBarsEvents wrapper method implementations
//

#pragma implementation_key(799)
inline HRESULT _CommandBarsEvents::OnUpdate ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface _CommandBarComboBoxEvents wrapper method implementations
//

#pragma implementation_key(800)
inline HRESULT _CommandBarComboBoxEvents::Change ( struct _CommandBarComboBox * Ctrl ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Ctrl);
}

//
// dispinterface _CommandBarButtonEvents wrapper method implementations
//

#pragma implementation_key(801)
inline HRESULT _CommandBarButtonEvents::Click ( struct _CommandBarButton * Ctrl, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Ctrl, CancelDefault);
}

//
// interface WebPageFont wrapper method implementations
//

#pragma implementation_key(802)
inline _bstr_t WebPageFont::GetProportionalFont ( ) {
    BSTR _result;
    HRESULT _hr = get_ProportionalFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(803)
inline void WebPageFont::PutProportionalFont ( _bstr_t pstr ) {
    HRESULT _hr = put_ProportionalFont(pstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(804)
inline float WebPageFont::GetProportionalFontSize ( ) {
    float _result;
    HRESULT _hr = get_ProportionalFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(805)
inline void WebPageFont::PutProportionalFontSize ( float pf ) {
    HRESULT _hr = put_ProportionalFontSize(pf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(806)
inline _bstr_t WebPageFont::GetFixedWidthFont ( ) {
    BSTR _result;
    HRESULT _hr = get_FixedWidthFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(807)
inline void WebPageFont::PutFixedWidthFont ( _bstr_t pstr ) {
    HRESULT _hr = put_FixedWidthFont(pstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(808)
inline float WebPageFont::GetFixedWidthFontSize ( ) {
    float _result;
    HRESULT _hr = get_FixedWidthFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(809)
inline void WebPageFont::PutFixedWidthFontSize ( float pf ) {
    HRESULT _hr = put_FixedWidthFontSize(pf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface WebPageFonts wrapper method implementations
//

#pragma implementation_key(810)
inline int WebPageFonts::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(811)
inline WebPageFontPtr WebPageFonts::GetItem ( enum MsoCharacterSet Index ) {
    struct WebPageFont * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebPageFontPtr(_result, false);
}

#pragma implementation_key(812)
inline IUnknownPtr WebPageFonts::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface HTMLProjectItem wrapper method implementations
//

#pragma implementation_key(813)
inline _bstr_t HTMLProjectItem::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(814)
inline VARIANT_BOOL HTMLProjectItem::GetIsOpen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(815)
inline HRESULT HTMLProjectItem::LoadFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(816)
inline HRESULT HTMLProjectItem::Open ( enum MsoHTMLProjectOpen OpenKind ) {
    HRESULT _hr = raw_Open(OpenKind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(817)
inline HRESULT HTMLProjectItem::SaveCopyAs ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveCopyAs(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(818)
inline _bstr_t HTMLProjectItem::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(819)
inline void HTMLProjectItem::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(820)
inline IDispatchPtr HTMLProjectItem::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface HTMLProjectItems wrapper method implementations
//

#pragma implementation_key(821)
inline HTMLProjectItemPtr HTMLProjectItems::Item ( VARIANT * Index ) {
    struct HTMLProjectItem * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLProjectItemPtr(_result, false);
}

#pragma implementation_key(822)
inline long HTMLProjectItems::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(823)
inline IUnknownPtr HTMLProjectItems::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(824)
inline IDispatchPtr HTMLProjectItems::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface HTMLProject wrapper method implementations
//

#pragma implementation_key(825)
inline enum MsoHTMLProjectState HTMLProject::GetState ( ) {
    enum MsoHTMLProjectState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(826)
inline HRESULT HTMLProject::RefreshProject ( VARIANT_BOOL Refresh ) {
    HRESULT _hr = raw_RefreshProject(Refresh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(827)
inline HRESULT HTMLProject::RefreshDocument ( VARIANT_BOOL Refresh ) {
    HRESULT _hr = raw_RefreshDocument(Refresh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(828)
inline HTMLProjectItemsPtr HTMLProject::GetHTMLProjectItems ( ) {
    struct HTMLProjectItems * _result;
    HRESULT _hr = get_HTMLProjectItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLProjectItemsPtr(_result, false);
}

#pragma implementation_key(829)
inline IDispatchPtr HTMLProject::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(830)
inline HRESULT HTMLProject::Open ( enum MsoHTMLProjectOpen OpenKind ) {
    HRESULT _hr = raw_Open(OpenKind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MsoDebugOptions wrapper method implementations
//

#pragma implementation_key(831)
inline int MsoDebugOptions::GetFeatureReports ( ) {
    int _result;
    HRESULT _hr = get_FeatureReports(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(832)
inline void MsoDebugOptions::PutFeatureReports ( int puintFeatureReports ) {
    HRESULT _hr = put_FeatureReports(puintFeatureReports);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
