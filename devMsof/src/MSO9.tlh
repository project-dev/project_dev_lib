// Created by Microsoft (R) C/C++ Compiler Version 12.00.8447.0 (91c578a7).
//
// Mso9.tlh
//
// C++ source equivalent of Win32 type library C:\Program Files\Microsoft Office\Office\Mso9.dll
// compiler-generated file created 07/30/07 at 13:08:08 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

typedef long MsoRGBType;
struct __declspec(uuid("618736e0-3c3d-11cf-810c-00aa00389b71"))
/* dual interface */ IAccessible;
struct __declspec(uuid("000c0300-0000-0000-c000-000000000046"))
/* dual interface */ _IMsoDispObj;
struct __declspec(uuid("000c0301-0000-0000-c000-000000000046"))
/* dual interface */ _IMsoOleAccDispObj;
struct __declspec(uuid("000c0302-0000-0000-c000-000000000046"))
/* dual interface */ _CommandBars;
struct __declspec(uuid("000c0304-0000-0000-c000-000000000046"))
/* dual interface */ CommandBar;
struct __declspec(uuid("000c0306-0000-0000-c000-000000000046"))
/* dual interface */ CommandBarControls;
struct __declspec(uuid("000c0308-0000-0000-c000-000000000046"))
/* dual interface */ CommandBarControl;
struct __declspec(uuid("000c030e-0000-0000-c000-000000000046"))
/* dual interface */ _CommandBarButton;
struct __declspec(uuid("000c030a-0000-0000-c000-000000000046"))
/* dual interface */ CommandBarPopup;
struct __declspec(uuid("000c030c-0000-0000-c000-000000000046"))
/* dual interface */ _CommandBarComboBox;
struct __declspec(uuid("000c030d-0000-0000-c000-000000000046"))
/* dual interface */ _CommandBarActiveX;
struct __declspec(uuid("000c0310-0000-0000-c000-000000000046"))
/* dual interface */ Adjustments;
struct __declspec(uuid("000c0311-0000-0000-c000-000000000046"))
/* dual interface */ CalloutFormat;
struct __declspec(uuid("000c0312-0000-0000-c000-000000000046"))
/* dual interface */ ColorFormat;
struct __declspec(uuid("000c0313-0000-0000-c000-000000000046"))
/* dual interface */ ConnectorFormat;
struct __declspec(uuid("000c0314-0000-0000-c000-000000000046"))
/* dual interface */ FillFormat;
struct __declspec(uuid("000c0315-0000-0000-c000-000000000046"))
/* dual interface */ FreeformBuilder;
struct __declspec(uuid("000c0316-0000-0000-c000-000000000046"))
/* dual interface */ GroupShapes;
struct __declspec(uuid("000c0317-0000-0000-c000-000000000046"))
/* dual interface */ LineFormat;
struct __declspec(uuid("000c0318-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNode;
struct __declspec(uuid("000c0319-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNodes;
struct __declspec(uuid("000c031a-0000-0000-c000-000000000046"))
/* dual interface */ PictureFormat;
struct __declspec(uuid("000c031b-0000-0000-c000-000000000046"))
/* dual interface */ ShadowFormat;
struct __declspec(uuid("000c0341-0000-0000-c000-000000000046"))
/* dual interface */ Script;
struct __declspec(uuid("000c0340-0000-0000-c000-000000000046"))
/* dual interface */ Scripts;
struct __declspec(uuid("000c031c-0000-0000-c000-000000000046"))
/* dual interface */ Shape;
struct __declspec(uuid("000c031d-0000-0000-c000-000000000046"))
/* dual interface */ ShapeRange;
struct __declspec(uuid("000c031e-0000-0000-c000-000000000046"))
/* dual interface */ Shapes;
struct __declspec(uuid("000c031f-0000-0000-c000-000000000046"))
/* dual interface */ TextEffectFormat;
struct __declspec(uuid("000c0320-0000-0000-c000-000000000046"))
/* dual interface */ TextFrame;
struct __declspec(uuid("000c0321-0000-0000-c000-000000000046"))
/* dual interface */ ThreeDFormat;
struct __declspec(uuid("000c0359-0000-0000-c000-000000000046"))
/* dual interface */ IMsoDispCagNotifySink;
struct __declspec(uuid("000c0324-0000-0000-c000-000000000046"))
/* dual interface */ Balloon;
struct __declspec(uuid("000c0326-0000-0000-c000-000000000046"))
/* dual interface */ BalloonCheckboxes;
struct __declspec(uuid("000c0328-0000-0000-c000-000000000046"))
/* dual interface */ BalloonCheckbox;
struct __declspec(uuid("000c032e-0000-0000-c000-000000000046"))
/* dual interface */ BalloonLabels;
struct __declspec(uuid("000c0330-0000-0000-c000-000000000046"))
/* dual interface */ BalloonLabel;
struct __declspec(uuid("000c0361-0000-0000-c000-000000000046"))
/* dual interface */ AnswerWizardFiles;
struct __declspec(uuid("000c0360-0000-0000-c000-000000000046"))
/* dual interface */ AnswerWizard;
struct __declspec(uuid("000c0322-0000-0000-c000-000000000046"))
/* dual interface */ Assistant;
struct __declspec(uuid("2df8d04e-5bfa-101b-bde5-00aa0044de52"))
/* interface */ DocumentProperty;
struct __declspec(uuid("2df8d04d-5bfa-101b-bde5-00aa0044de52"))
/* interface */ DocumentPropertiesACC;
struct __declspec(uuid("000c0338-0000-0000-c000-000000000046"))
/* dual interface */ IFoundFiles;
struct __declspec(uuid("000c0337-0000-0000-c000-000000000046"))
/* dual interface */ IFind;
struct __declspec(uuid("000c0331-0000-0000-c000-000000000046"))
/* dual interface */ FoundFiles;
struct __declspec(uuid("000c0333-0000-0000-c000-000000000046"))
/* dual interface */ PropertyTest;
struct __declspec(uuid("000c0334-0000-0000-c000-000000000046"))
/* dual interface */ PropertyTests;
struct __declspec(uuid("000c0332-0000-0000-c000-000000000046"))
/* dual interface */ FileSearch;
struct __declspec(uuid("000c033a-0000-0000-c000-000000000046"))
/* dual interface */ COMAddIn;
struct __declspec(uuid("000c0339-0000-0000-c000-000000000046"))
/* dual interface */ COMAddIns;
struct __declspec(uuid("000c0353-0000-0000-c000-000000000046"))
/* dual interface */ LanguageSettings;
struct __declspec(uuid("55f88892-7708-11d1-aceb-006008961da5"))
/* dual interface */ ICommandBarsEvents;
struct __declspec(uuid("000c0352-0000-0000-c000-000000000046"))
/* dispinterface */ _CommandBarsEvents;
struct /* coclass */ CommandBars;
struct __declspec(uuid("55f88896-7708-11d1-aceb-006008961da5"))
/* dual interface */ ICommandBarComboBoxEvents;
struct __declspec(uuid("000c0354-0000-0000-c000-000000000046"))
/* dispinterface */ _CommandBarComboBoxEvents;
struct /* coclass */ CommandBarComboBox;
struct __declspec(uuid("55f88890-7708-11d1-aceb-006008961da5"))
/* dual interface */ ICommandBarButtonEvents;
struct __declspec(uuid("000c0351-0000-0000-c000-000000000046"))
/* dispinterface */ _CommandBarButtonEvents;
struct /* coclass */ CommandBarButton;
struct __declspec(uuid("000c0913-0000-0000-c000-000000000046"))
/* dual interface */ WebPageFont;
struct __declspec(uuid("000c0914-0000-0000-c000-000000000046"))
/* dual interface */ WebPageFonts;
struct __declspec(uuid("000c0358-0000-0000-c000-000000000046"))
/* dual interface */ HTMLProjectItem;
struct __declspec(uuid("000c0357-0000-0000-c000-000000000046"))
/* dual interface */ HTMLProjectItems;
struct __declspec(uuid("000c0356-0000-0000-c000-000000000046"))
/* dual interface */ HTMLProject;
struct __declspec(uuid("000c035a-0000-0000-c000-000000000046"))
/* dual interface */ MsoDebugOptions;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAccessible, __uuidof(IAccessible));
_COM_SMARTPTR_TYPEDEF(_IMsoDispObj, __uuidof(_IMsoDispObj));
_COM_SMARTPTR_TYPEDEF(_IMsoOleAccDispObj, __uuidof(_IMsoOleAccDispObj));
_COM_SMARTPTR_TYPEDEF(_CommandBars, __uuidof(_CommandBars));
_COM_SMARTPTR_TYPEDEF(CommandBar, __uuidof(CommandBar));
_COM_SMARTPTR_TYPEDEF(CommandBarControls, __uuidof(CommandBarControls));
_COM_SMARTPTR_TYPEDEF(CommandBarControl, __uuidof(CommandBarControl));
_COM_SMARTPTR_TYPEDEF(_CommandBarButton, __uuidof(_CommandBarButton));
_COM_SMARTPTR_TYPEDEF(CommandBarPopup, __uuidof(CommandBarPopup));
_COM_SMARTPTR_TYPEDEF(_CommandBarComboBox, __uuidof(_CommandBarComboBox));
_COM_SMARTPTR_TYPEDEF(_CommandBarActiveX, __uuidof(_CommandBarActiveX));
_COM_SMARTPTR_TYPEDEF(Adjustments, __uuidof(Adjustments));
_COM_SMARTPTR_TYPEDEF(CalloutFormat, __uuidof(CalloutFormat));
_COM_SMARTPTR_TYPEDEF(ColorFormat, __uuidof(ColorFormat));
_COM_SMARTPTR_TYPEDEF(ConnectorFormat, __uuidof(ConnectorFormat));
_COM_SMARTPTR_TYPEDEF(FillFormat, __uuidof(FillFormat));
_COM_SMARTPTR_TYPEDEF(FreeformBuilder, __uuidof(FreeformBuilder));
_COM_SMARTPTR_TYPEDEF(GroupShapes, __uuidof(GroupShapes));
_COM_SMARTPTR_TYPEDEF(LineFormat, __uuidof(LineFormat));
_COM_SMARTPTR_TYPEDEF(ShapeNode, __uuidof(ShapeNode));
_COM_SMARTPTR_TYPEDEF(ShapeNodes, __uuidof(ShapeNodes));
_COM_SMARTPTR_TYPEDEF(PictureFormat, __uuidof(PictureFormat));
_COM_SMARTPTR_TYPEDEF(ShadowFormat, __uuidof(ShadowFormat));
_COM_SMARTPTR_TYPEDEF(Script, __uuidof(Script));
_COM_SMARTPTR_TYPEDEF(Scripts, __uuidof(Scripts));
_COM_SMARTPTR_TYPEDEF(Shape, __uuidof(Shape));
_COM_SMARTPTR_TYPEDEF(ShapeRange, __uuidof(ShapeRange));
_COM_SMARTPTR_TYPEDEF(Shapes, __uuidof(Shapes));
_COM_SMARTPTR_TYPEDEF(TextEffectFormat, __uuidof(TextEffectFormat));
_COM_SMARTPTR_TYPEDEF(TextFrame, __uuidof(TextFrame));
_COM_SMARTPTR_TYPEDEF(ThreeDFormat, __uuidof(ThreeDFormat));
_COM_SMARTPTR_TYPEDEF(IMsoDispCagNotifySink, __uuidof(IMsoDispCagNotifySink));
_COM_SMARTPTR_TYPEDEF(Balloon, __uuidof(Balloon));
_COM_SMARTPTR_TYPEDEF(BalloonCheckboxes, __uuidof(BalloonCheckboxes));
_COM_SMARTPTR_TYPEDEF(BalloonCheckbox, __uuidof(BalloonCheckbox));
_COM_SMARTPTR_TYPEDEF(BalloonLabels, __uuidof(BalloonLabels));
_COM_SMARTPTR_TYPEDEF(BalloonLabel, __uuidof(BalloonLabel));
_COM_SMARTPTR_TYPEDEF(AnswerWizardFiles, __uuidof(AnswerWizardFiles));
_COM_SMARTPTR_TYPEDEF(AnswerWizard, __uuidof(AnswerWizard));
_COM_SMARTPTR_TYPEDEF(Assistant, __uuidof(Assistant));
_COM_SMARTPTR_TYPEDEF(DocumentProperty, __uuidof(DocumentProperty));
_COM_SMARTPTR_TYPEDEF(DocumentPropertiesACC, __uuidof(DocumentPropertiesACC));
_COM_SMARTPTR_TYPEDEF(IFoundFiles, __uuidof(IFoundFiles));
_COM_SMARTPTR_TYPEDEF(IFind, __uuidof(IFind));
_COM_SMARTPTR_TYPEDEF(FoundFiles, __uuidof(FoundFiles));
_COM_SMARTPTR_TYPEDEF(PropertyTest, __uuidof(PropertyTest));
_COM_SMARTPTR_TYPEDEF(PropertyTests, __uuidof(PropertyTests));
_COM_SMARTPTR_TYPEDEF(FileSearch, __uuidof(FileSearch));
_COM_SMARTPTR_TYPEDEF(COMAddIn, __uuidof(COMAddIn));
_COM_SMARTPTR_TYPEDEF(COMAddIns, __uuidof(COMAddIns));
_COM_SMARTPTR_TYPEDEF(LanguageSettings, __uuidof(LanguageSettings));
_COM_SMARTPTR_TYPEDEF(ICommandBarsEvents, __uuidof(ICommandBarsEvents));
_COM_SMARTPTR_TYPEDEF(_CommandBarsEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ICommandBarComboBoxEvents, __uuidof(ICommandBarComboBoxEvents));
_COM_SMARTPTR_TYPEDEF(_CommandBarComboBoxEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ICommandBarButtonEvents, __uuidof(ICommandBarButtonEvents));
_COM_SMARTPTR_TYPEDEF(_CommandBarButtonEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(WebPageFont, __uuidof(WebPageFont));
_COM_SMARTPTR_TYPEDEF(WebPageFonts, __uuidof(WebPageFonts));
_COM_SMARTPTR_TYPEDEF(HTMLProjectItem, __uuidof(HTMLProjectItem));
_COM_SMARTPTR_TYPEDEF(HTMLProjectItems, __uuidof(HTMLProjectItems));
_COM_SMARTPTR_TYPEDEF(HTMLProject, __uuidof(HTMLProject));
_COM_SMARTPTR_TYPEDEF(MsoDebugOptions, __uuidof(MsoDebugOptions));

//
// Type library items
//

enum MsoLineDashStyle
{
    msoLineDashStyleMixed = -2,
    msoLineSolid = 1,
    msoLineSquareDot = 2,
    msoLineRoundDot = 3,
    msoLineDash = 4,
    msoLineDashDot = 5,
    msoLineDashDotDot = 6,
    msoLineLongDash = 7,
    msoLineLongDashDot = 8
};

enum MsoLineStyle
{
    msoLineStyleMixed = -2,
    msoLineSingle = 1,
    msoLineThinThin = 2,
    msoLineThinThick = 3,
    msoLineThickThin = 4,
    msoLineThickBetweenThin = 5
};

enum MsoArrowheadStyle
{
    msoArrowheadStyleMixed = -2,
    msoArrowheadNone = 1,
    msoArrowheadTriangle = 2,
    msoArrowheadOpen = 3,
    msoArrowheadStealth = 4,
    msoArrowheadDiamond = 5,
    msoArrowheadOval = 6
};

enum MsoArrowheadWidth
{
    msoArrowheadWidthMixed = -2,
    msoArrowheadNarrow = 1,
    msoArrowheadWidthMedium = 2,
    msoArrowheadWide = 3
};

enum MsoArrowheadLength
{
    msoArrowheadLengthMixed = -2,
    msoArrowheadShort = 1,
    msoArrowheadLengthMedium = 2,
    msoArrowheadLong = 3
};

enum MsoFillType
{
    msoFillMixed = -2,
    msoFillSolid = 1,
    msoFillPatterned = 2,
    msoFillGradient = 3,
    msoFillTextured = 4,
    msoFillBackground = 5,
    msoFillPicture = 6
};

enum MsoGradientStyle
{
    msoGradientMixed = -2,
    msoGradientHorizontal = 1,
    msoGradientVertical = 2,
    msoGradientDiagonalUp = 3,
    msoGradientDiagonalDown = 4,
    msoGradientFromCorner = 5,
    msoGradientFromTitle = 6,
    msoGradientFromCenter = 7
};

enum MsoGradientColorType
{
    msoGradientColorMixed = -2,
    msoGradientOneColor = 1,
    msoGradientTwoColors = 2,
    msoGradientPresetColors = 3
};

enum MsoTextureType
{
    msoTextureTypeMixed = -2,
    msoTexturePreset = 1,
    msoTextureUserDefined = 2
};

enum MsoPresetTexture
{
    msoPresetTextureMixed = -2,
    msoTexturePapyrus = 1,
    msoTextureCanvas = 2,
    msoTextureDenim = 3,
    msoTextureWovenMat = 4,
    msoTextureWaterDroplets = 5,
    msoTexturePaperBag = 6,
    msoTextureFishFossil = 7,
    msoTextureSand = 8,
    msoTextureGreenMarble = 9,
    msoTextureWhiteMarble = 10,
    msoTextureBrownMarble = 11,
    msoTextureGranite = 12,
    msoTextureNewsprint = 13,
    msoTextureRecycledPaper = 14,
    msoTextureParchment = 15,
    msoTextureStationery = 16,
    msoTextureBlueTissuePaper = 17,
    msoTexturePinkTissuePaper = 18,
    msoTexturePurpleMesh = 19,
    msoTextureBouquet = 20,
    msoTextureCork = 21,
    msoTextureWalnut = 22,
    msoTextureOak = 23,
    msoTextureMediumWood = 24
};

enum MsoPatternType
{
    msoPatternMixed = -2,
    msoPattern5Percent = 1,
    msoPattern10Percent = 2,
    msoPattern20Percent = 3,
    msoPattern25Percent = 4,
    msoPattern30Percent = 5,
    msoPattern40Percent = 6,
    msoPattern50Percent = 7,
    msoPattern60Percent = 8,
    msoPattern70Percent = 9,
    msoPattern75Percent = 10,
    msoPattern80Percent = 11,
    msoPattern90Percent = 12,
    msoPatternDarkHorizontal = 13,
    msoPatternDarkVertical = 14,
    msoPatternDarkDownwardDiagonal = 15,
    msoPatternDarkUpwardDiagonal = 16,
    msoPatternSmallCheckerBoard = 17,
    msoPatternTrellis = 18,
    msoPatternLightHorizontal = 19,
    msoPatternLightVertical = 20,
    msoPatternLightDownwardDiagonal = 21,
    msoPatternLightUpwardDiagonal = 22,
    msoPatternSmallGrid = 23,
    msoPatternDottedDiamond = 24,
    msoPatternWideDownwardDiagonal = 25,
    msoPatternWideUpwardDiagonal = 26,
    msoPatternDashedUpwardDiagonal = 27,
    msoPatternDashedDownwardDiagonal = 28,
    msoPatternNarrowVertical = 29,
    msoPatternNarrowHorizontal = 30,
    msoPatternDashedVertical = 31,
    msoPatternDashedHorizontal = 32,
    msoPatternLargeConfetti = 33,
    msoPatternLargeGrid = 34,
    msoPatternHorizontalBrick = 35,
    msoPatternLargeCheckerBoard = 36,
    msoPatternSmallConfetti = 37,
    msoPatternZigZag = 38,
    msoPatternSolidDiamond = 39,
    msoPatternDiagonalBrick = 40,
    msoPatternOutlinedDiamond = 41,
    msoPatternPlaid = 42,
    msoPatternSphere = 43,
    msoPatternWeave = 44,
    msoPatternDottedGrid = 45,
    msoPatternDivot = 46,
    msoPatternShingle = 47,
    msoPatternWave = 48
};

enum MsoPresetGradientType
{
    msoPresetGradientMixed = -2,
    msoGradientEarlySunset = 1,
    msoGradientLateSunset = 2,
    msoGradientNightfall = 3,
    msoGradientDaybreak = 4,
    msoGradientHorizon = 5,
    msoGradientDesert = 6,
    msoGradientOcean = 7,
    msoGradientCalmWater = 8,
    msoGradientFire = 9,
    msoGradientFog = 10,
    msoGradientMoss = 11,
    msoGradientPeacock = 12,
    msoGradientWheat = 13,
    msoGradientParchment = 14,
    msoGradientMahogany = 15,
    msoGradientRainbow = 16,
    msoGradientRainbowII = 17,
    msoGradientGold = 18,
    msoGradientGoldII = 19,
    msoGradientBrass = 20,
    msoGradientChrome = 21,
    msoGradientChromeII = 22,
    msoGradientSilver = 23,
    msoGradientSapphire = 24
};

enum MsoShadowType
{
    msoShadowMixed = -2,
    msoShadow1 = 1,
    msoShadow2 = 2,
    msoShadow3 = 3,
    msoShadow4 = 4,
    msoShadow5 = 5,
    msoShadow6 = 6,
    msoShadow7 = 7,
    msoShadow8 = 8,
    msoShadow9 = 9,
    msoShadow10 = 10,
    msoShadow11 = 11,
    msoShadow12 = 12,
    msoShadow13 = 13,
    msoShadow14 = 14,
    msoShadow15 = 15,
    msoShadow16 = 16,
    msoShadow17 = 17,
    msoShadow18 = 18,
    msoShadow19 = 19,
    msoShadow20 = 20
};

enum MsoPresetTextEffect
{
    msoTextEffectMixed = -2,
    msoTextEffect1 = 0,
    msoTextEffect2 = 1,
    msoTextEffect3 = 2,
    msoTextEffect4 = 3,
    msoTextEffect5 = 4,
    msoTextEffect6 = 5,
    msoTextEffect7 = 6,
    msoTextEffect8 = 7,
    msoTextEffect9 = 8,
    msoTextEffect10 = 9,
    msoTextEffect11 = 10,
    msoTextEffect12 = 11,
    msoTextEffect13 = 12,
    msoTextEffect14 = 13,
    msoTextEffect15 = 14,
    msoTextEffect16 = 15,
    msoTextEffect17 = 16,
    msoTextEffect18 = 17,
    msoTextEffect19 = 18,
    msoTextEffect20 = 19,
    msoTextEffect21 = 20,
    msoTextEffect22 = 21,
    msoTextEffect23 = 22,
    msoTextEffect24 = 23,
    msoTextEffect25 = 24,
    msoTextEffect26 = 25,
    msoTextEffect27 = 26,
    msoTextEffect28 = 27,
    msoTextEffect29 = 28,
    msoTextEffect30 = 29
};

enum MsoPresetTextEffectShape
{
    msoTextEffectShapeMixed = -2,
    msoTextEffectShapePlainText = 1,
    msoTextEffectShapeStop = 2,
    msoTextEffectShapeTriangleUp = 3,
    msoTextEffectShapeTriangleDown = 4,
    msoTextEffectShapeChevronUp = 5,
    msoTextEffectShapeChevronDown = 6,
    msoTextEffectShapeRingInside = 7,
    msoTextEffectShapeRingOutside = 8,
    msoTextEffectShapeArchUpCurve = 9,
    msoTextEffectShapeArchDownCurve = 10,
    msoTextEffectShapeCircleCurve = 11,
    msoTextEffectShapeButtonCurve = 12,
    msoTextEffectShapeArchUpPour = 13,
    msoTextEffectShapeArchDownPour = 14,
    msoTextEffectShapeCirclePour = 15,
    msoTextEffectShapeButtonPour = 16,
    msoTextEffectShapeCurveUp = 17,
    msoTextEffectShapeCurveDown = 18,
    msoTextEffectShapeCanUp = 19,
    msoTextEffectShapeCanDown = 20,
    msoTextEffectShapeWave1 = 21,
    msoTextEffectShapeWave2 = 22,
    msoTextEffectShapeDoubleWave1 = 23,
    msoTextEffectShapeDoubleWave2 = 24,
    msoTextEffectShapeInflate = 25,
    msoTextEffectShapeDeflate = 26,
    msoTextEffectShapeInflateBottom = 27,
    msoTextEffectShapeDeflateBottom = 28,
    msoTextEffectShapeInflateTop = 29,
    msoTextEffectShapeDeflateTop = 30,
    msoTextEffectShapeDeflateInflate = 31,
    msoTextEffectShapeDeflateInflateDeflate = 32,
    msoTextEffectShapeFadeRight = 33,
    msoTextEffectShapeFadeLeft = 34,
    msoTextEffectShapeFadeUp = 35,
    msoTextEffectShapeFadeDown = 36,
    msoTextEffectShapeSlantUp = 37,
    msoTextEffectShapeSlantDown = 38,
    msoTextEffectShapeCascadeUp = 39,
    msoTextEffectShapeCascadeDown = 40
};

enum MsoTextEffectAlignment
{
    msoTextEffectAlignmentMixed = -2,
    msoTextEffectAlignmentLeft = 1,
    msoTextEffectAlignmentCentered = 2,
    msoTextEffectAlignmentRight = 3,
    msoTextEffectAlignmentLetterJustify = 4,
    msoTextEffectAlignmentWordJustify = 5,
    msoTextEffectAlignmentStretchJustify = 6
};

enum MsoPresetLightingDirection
{
    msoPresetLightingDirectionMixed = -2,
    msoLightingTopLeft = 1,
    msoLightingTop = 2,
    msoLightingTopRight = 3,
    msoLightingLeft = 4,
    msoLightingNone = 5,
    msoLightingRight = 6,
    msoLightingBottomLeft = 7,
    msoLightingBottom = 8,
    msoLightingBottomRight = 9
};

enum MsoPresetLightingSoftness
{
    msoPresetLightingSoftnessMixed = -2,
    msoLightingDim = 1,
    msoLightingNormal = 2,
    msoLightingBright = 3
};

enum MsoPresetMaterial
{
    msoPresetMaterialMixed = -2,
    msoMaterialMatte = 1,
    msoMaterialPlastic = 2,
    msoMaterialMetal = 3,
    msoMaterialWireFrame = 4
};

enum MsoPresetExtrusionDirection
{
    msoPresetExtrusionDirectionMixed = -2,
    msoExtrusionBottomRight = 1,
    msoExtrusionBottom = 2,
    msoExtrusionBottomLeft = 3,
    msoExtrusionRight = 4,
    msoExtrusionNone = 5,
    msoExtrusionLeft = 6,
    msoExtrusionTopRight = 7,
    msoExtrusionTop = 8,
    msoExtrusionTopLeft = 9
};

enum MsoPresetThreeDFormat
{
    msoPresetThreeDFormatMixed = -2,
    msoThreeD1 = 1,
    msoThreeD2 = 2,
    msoThreeD3 = 3,
    msoThreeD4 = 4,
    msoThreeD5 = 5,
    msoThreeD6 = 6,
    msoThreeD7 = 7,
    msoThreeD8 = 8,
    msoThreeD9 = 9,
    msoThreeD10 = 10,
    msoThreeD11 = 11,
    msoThreeD12 = 12,
    msoThreeD13 = 13,
    msoThreeD14 = 14,
    msoThreeD15 = 15,
    msoThreeD16 = 16,
    msoThreeD17 = 17,
    msoThreeD18 = 18,
    msoThreeD19 = 19,
    msoThreeD20 = 20
};

enum MsoExtrusionColorType
{
    msoExtrusionColorTypeMixed = -2,
    msoExtrusionColorAutomatic = 1,
    msoExtrusionColorCustom = 2
};

enum MsoAlignCmd
{
    msoAlignLefts = 0,
    msoAlignCenters = 1,
    msoAlignRights = 2,
    msoAlignTops = 3,
    msoAlignMiddles = 4,
    msoAlignBottoms = 5
};

enum MsoDistributeCmd
{
    msoDistributeHorizontally = 0,
    msoDistributeVertically = 1
};

enum MsoConnectorType
{
    msoConnectorTypeMixed = -2,
    msoConnectorStraight = 1,
    msoConnectorElbow = 2,
    msoConnectorCurve = 3
};

enum MsoHorizontalAnchor
{
    msoHorizontalAnchorMixed = -2,
    msoAnchorNone = 1,
    msoAnchorCenter = 2
};

enum MsoVerticalAnchor
{
    msoVerticalAnchorMixed = -2,
    msoAnchorTop = 1,
    msoAnchorTopBaseline = 2,
    msoAnchorMiddle = 3,
    msoAnchorBottom = 4,
    msoAnchorBottomBaseLine = 5
};

enum MsoOrientation
{
    msoOrientationMixed = -2,
    msoOrientationHorizontal = 1,
    msoOrientationVertical = 2
};

enum MsoZOrderCmd
{
    msoBringToFront = 0,
    msoSendToBack = 1,
    msoBringForward = 2,
    msoSendBackward = 3,
    msoBringInFrontOfText = 4,
    msoSendBehindText = 5
};

enum MsoSegmentType
{
    msoSegmentLine = 0,
    msoSegmentCurve = 1
};

enum MsoEditingType
{
    msoEditingAuto = 0,
    msoEditingCorner = 1,
    msoEditingSmooth = 2,
    msoEditingSymmetric = 3
};

enum MsoAutoShapeType
{
    msoShapeMixed = -2,
    msoShapeRectangle = 1,
    msoShapeParallelogram = 2,
    msoShapeTrapezoid = 3,
    msoShapeDiamond = 4,
    msoShapeRoundedRectangle = 5,
    msoShapeOctagon = 6,
    msoShapeIsoscelesTriangle = 7,
    msoShapeRightTriangle = 8,
    msoShapeOval = 9,
    msoShapeHexagon = 10,
    msoShapeCross = 11,
    msoShapeRegularPentagon = 12,
    msoShapeCan = 13,
    msoShapeCube = 14,
    msoShapeBevel = 15,
    msoShapeFoldedCorner = 16,
    msoShapeSmileyFace = 17,
    msoShapeDonut = 18,
    msoShapeNoSymbol = 19,
    msoShapeBlockArc = 20,
    msoShapeHeart = 21,
    msoShapeLightningBolt = 22,
    msoShapeSun = 23,
    msoShapeMoon = 24,
    msoShapeArc = 25,
    msoShapeDoubleBracket = 26,
    msoShapeDoubleBrace = 27,
    msoShapePlaque = 28,
    msoShapeLeftBracket = 29,
    msoShapeRightBracket = 30,
    msoShapeLeftBrace = 31,
    msoShapeRightBrace = 32,
    msoShapeRightArrow = 33,
    msoShapeLeftArrow = 34,
    msoShapeUpArrow = 35,
    msoShapeDownArrow = 36,
    msoShapeLeftRightArrow = 37,
    msoShapeUpDownArrow = 38,
    msoShapeQuadArrow = 39,
    msoShapeLeftRightUpArrow = 40,
    msoShapeBentArrow = 41,
    msoShapeUTurnArrow = 42,
    msoShapeLeftUpArrow = 43,
    msoShapeBentUpArrow = 44,
    msoShapeCurvedRightArrow = 45,
    msoShapeCurvedLeftArrow = 46,
    msoShapeCurvedUpArrow = 47,
    msoShapeCurvedDownArrow = 48,
    msoShapeStripedRightArrow = 49,
    msoShapeNotchedRightArrow = 50,
    msoShapePentagon = 51,
    msoShapeChevron = 52,
    msoShapeRightArrowCallout = 53,
    msoShapeLeftArrowCallout = 54,
    msoShapeUpArrowCallout = 55,
    msoShapeDownArrowCallout = 56,
    msoShapeLeftRightArrowCallout = 57,
    msoShapeUpDownArrowCallout = 58,
    msoShapeQuadArrowCallout = 59,
    msoShapeCircularArrow = 60,
    msoShapeFlowchartProcess = 61,
    msoShapeFlowchartAlternateProcess = 62,
    msoShapeFlowchartDecision = 63,
    msoShapeFlowchartData = 64,
    msoShapeFlowchartPredefinedProcess = 65,
    msoShapeFlowchartInternalStorage = 66,
    msoShapeFlowchartDocument = 67,
    msoShapeFlowchartMultidocument = 68,
    msoShapeFlowchartTerminator = 69,
    msoShapeFlowchartPreparation = 70,
    msoShapeFlowchartManualInput = 71,
    msoShapeFlowchartManualOperation = 72,
    msoShapeFlowchartConnector = 73,
    msoShapeFlowchartOffpageConnector = 74,
    msoShapeFlowchartCard = 75,
    msoShapeFlowchartPunchedTape = 76,
    msoShapeFlowchartSummingJunction = 77,
    msoShapeFlowchartOr = 78,
    msoShapeFlowchartCollate = 79,
    msoShapeFlowchartSort = 80,
    msoShapeFlowchartExtract = 81,
    msoShapeFlowchartMerge = 82,
    msoShapeFlowchartStoredData = 83,
    msoShapeFlowchartDelay = 84,
    msoShapeFlowchartSequentialAccessStorage = 85,
    msoShapeFlowchartMagneticDisk = 86,
    msoShapeFlowchartDirectAccessStorage = 87,
    msoShapeFlowchartDisplay = 88,
    msoShapeExplosion1 = 89,
    msoShapeExplosion2 = 90,
    msoShape4pointStar = 91,
    msoShape5pointStar = 92,
    msoShape8pointStar = 93,
    msoShape16pointStar = 94,
    msoShape24pointStar = 95,
    msoShape32pointStar = 96,
    msoShapeUpRibbon = 97,
    msoShapeDownRibbon = 98,
    msoShapeCurvedUpRibbon = 99,
    msoShapeCurvedDownRibbon = 100,
    msoShapeVerticalScroll = 101,
    msoShapeHorizontalScroll = 102,
    msoShapeWave = 103,
    msoShapeDoubleWave = 104,
    msoShapeRectangularCallout = 105,
    msoShapeRoundedRectangularCallout = 106,
    msoShapeOvalCallout = 107,
    msoShapeCloudCallout = 108,
    msoShapeLineCallout1 = 109,
    msoShapeLineCallout2 = 110,
    msoShapeLineCallout3 = 111,
    msoShapeLineCallout4 = 112,
    msoShapeLineCallout1AccentBar = 113,
    msoShapeLineCallout2AccentBar = 114,
    msoShapeLineCallout3AccentBar = 115,
    msoShapeLineCallout4AccentBar = 116,
    msoShapeLineCallout1NoBorder = 117,
    msoShapeLineCallout2NoBorder = 118,
    msoShapeLineCallout3NoBorder = 119,
    msoShapeLineCallout4NoBorder = 120,
    msoShapeLineCallout1BorderandAccentBar = 121,
    msoShapeLineCallout2BorderandAccentBar = 122,
    msoShapeLineCallout3BorderandAccentBar = 123,
    msoShapeLineCallout4BorderandAccentBar = 124,
    msoShapeActionButtonCustom = 125,
    msoShapeActionButtonHome = 126,
    msoShapeActionButtonHelp = 127,
    msoShapeActionButtonInformation = 128,
    msoShapeActionButtonBackorPrevious = 129,
    msoShapeActionButtonForwardorNext = 130,
    msoShapeActionButtonBeginning = 131,
    msoShapeActionButtonEnd = 132,
    msoShapeActionButtonReturn = 133,
    msoShapeActionButtonDocument = 134,
    msoShapeActionButtonSound = 135,
    msoShapeActionButtonMovie = 136,
    msoShapeBalloon = 137,
    msoShapeNotPrimitive = 138
};

enum MsoShapeType
{
    msoShapeTypeMixed = -2,
    msoAutoShape = 1,
    msoCallout = 2,
    msoChart = 3,
    msoComment = 4,
    msoFreeform = 5,
    msoGroup = 6,
    msoEmbeddedOLEObject = 7,
    msoFormControl = 8,
    msoLine = 9,
    msoLinkedOLEObject = 10,
    msoLinkedPicture = 11,
    msoOLEControlObject = 12,
    msoPicture = 13,
    msoPlaceholder = 14,
    msoTextEffect = 15,
    msoMedia = 16,
    msoTextBox = 17,
    msoScriptAnchor = 18,
    msoTable = 19
};

enum MsoFlipCmd
{
    msoFlipHorizontal = 0,
    msoFlipVertical = 1
};

enum MsoTriState
{
    msoTrue = -1,
    msoFalse = 0,
    msoCTrue = 1,
    msoTriStateToggle = -3,
    msoTriStateMixed = -2
};

enum MsoColorType
{
    msoColorTypeMixed = -2,
    msoColorTypeRGB = 1,
    msoColorTypeScheme = 2
};

enum MsoPictureColorType
{
    msoPictureMixed = -2,
    msoPictureAutomatic = 1,
    msoPictureGrayscale = 2,
    msoPictureBlackAndWhite = 3,
    msoPictureWatermark = 4
};

enum MsoCalloutAngleType
{
    msoCalloutAngleMixed = -2,
    msoCalloutAngleAutomatic = 1,
    msoCalloutAngle30 = 2,
    msoCalloutAngle45 = 3,
    msoCalloutAngle60 = 4,
    msoCalloutAngle90 = 5
};

enum MsoCalloutDropType
{
    msoCalloutDropMixed = -2,
    msoCalloutDropCustom = 1,
    msoCalloutDropTop = 2,
    msoCalloutDropCenter = 3,
    msoCalloutDropBottom = 4
};

enum MsoCalloutType
{
    msoCalloutMixed = -2,
    msoCalloutOne = 1,
    msoCalloutTwo = 2,
    msoCalloutThree = 3,
    msoCalloutFour = 4
};

enum MsoBlackWhiteMode
{
    msoBlackWhiteMixed = -2,
    msoBlackWhiteAutomatic = 1,
    msoBlackWhiteGrayScale = 2,
    msoBlackWhiteLightGrayScale = 3,
    msoBlackWhiteInverseGrayScale = 4,
    msoBlackWhiteGrayOutline = 5,
    msoBlackWhiteBlackTextAndLine = 6,
    msoBlackWhiteHighContrast = 7,
    msoBlackWhiteBlack = 8,
    msoBlackWhiteWhite = 9,
    msoBlackWhiteDontShow = 10
};

enum MsoMixedType
{
    msoIntegerMixed = 32768,
    msoSingleMixed = -2147483648
};

enum MsoTextOrientation
{
    msoTextOrientationMixed = -2,
    msoTextOrientationHorizontal = 1,
    msoTextOrientationUpward = 2,
    msoTextOrientationDownward = 3,
    msoTextOrientationVerticalFarEast = 4,
    msoTextOrientationVertical = 5,
    msoTextOrientationHorizontalRotatedFarEast = 6
};

enum MsoScaleFrom
{
    msoScaleFromTopLeft = 0,
    msoScaleFromMiddle = 1,
    msoScaleFromBottomRight = 2
};

enum MsoBarPosition
{
    msoBarLeft = 0,
    msoBarTop = 1,
    msoBarRight = 2,
    msoBarBottom = 3,
    msoBarFloating = 4,
    msoBarPopup = 5,
    msoBarMenuBar = 6
};

enum MsoBarProtection
{
    msoBarNoProtection = 0,
    msoBarNoCustomize = 1,
    msoBarNoResize = 2,
    msoBarNoMove = 4,
    msoBarNoChangeVisible = 8,
    msoBarNoChangeDock = 16,
    msoBarNoVerticalDock = 32,
    msoBarNoHorizontalDock = 64
};

enum MsoBarType
{
    msoBarTypeNormal = 0,
    msoBarTypeMenuBar = 1,
    msoBarTypePopup = 2
};

enum MsoControlType
{
    msoControlCustom = 0,
    msoControlButton = 1,
    msoControlEdit = 2,
    msoControlDropdown = 3,
    msoControlComboBox = 4,
    msoControlButtonDropdown = 5,
    msoControlSplitDropdown = 6,
    msoControlOCXDropdown = 7,
    msoControlGenericDropdown = 8,
    msoControlGraphicDropdown = 9,
    msoControlPopup = 10,
    msoControlGraphicPopup = 11,
    msoControlButtonPopup = 12,
    msoControlSplitButtonPopup = 13,
    msoControlSplitButtonMRUPopup = 14,
    msoControlLabel = 15,
    msoControlExpandingGrid = 16,
    msoControlSplitExpandingGrid = 17,
    msoControlGrid = 18,
    msoControlGauge = 19,
    msoControlGraphicCombo = 20,
    msoControlPane = 21,
    msoControlActiveX = 22
};

enum MsoButtonState
{
    msoButtonUp = 0,
    msoButtonDown = -1,
    msoButtonMixed = 2
};

enum MsoControlOLEUsage
{
    msoControlOLEUsageNeither = 0,
    msoControlOLEUsageServer = 1,
    msoControlOLEUsageClient = 2,
    msoControlOLEUsageBoth = 3
};

enum MsoButtonStyleHidden
{
    msoButtonWrapText = 4,
    msoButtonTextBelow = 8
};

enum MsoButtonStyle
{
    msoButtonAutomatic = 0,
    msoButtonIcon = 1,
    msoButtonCaption = 2,
    msoButtonIconAndCaption = 3,
    msoButtonIconAndWrapCaption = 7,
    msoButtonIconAndCaptionBelow = 11,
    msoButtonWrapCaption = 14,
    msoButtonIconAndWrapCaptionBelow = 15
};

enum MsoComboStyle
{
    msoComboNormal = 0,
    msoComboLabel = 1
};

enum MsoOLEMenuGroup
{
    msoOLEMenuGroupNone = -1,
    msoOLEMenuGroupFile = 0,
    msoOLEMenuGroupEdit = 1,
    msoOLEMenuGroupContainer = 2,
    msoOLEMenuGroupObject = 3,
    msoOLEMenuGroupWindow = 4,
    msoOLEMenuGroupHelp = 5
};

enum MsoMenuAnimation
{
    msoMenuAnimationNone = 0,
    msoMenuAnimationRandom = 1,
    msoMenuAnimationUnfold = 2,
    msoMenuAnimationSlide = 3
};

enum MsoBarRow
{
    msoBarRowFirst = 0,
    msoBarRowLast = -1
};

enum MsoCommandBarButtonHyperlinkType
{
    msoCommandBarButtonHyperlinkNone = 0,
    msoCommandBarButtonHyperlinkOpen = 1,
    msoCommandBarButtonHyperlinkInsertPicture = 2
};

enum MsoHyperlinkType
{
    msoHyperlinkRange = 0,
    msoHyperlinkShape = 1,
    msoHyperlinkInlineShape = 2
};

enum MsoExtraInfoMethod
{
    msoMethodGet = 0,
    msoMethodPost = 1
};

enum MsoAnimationType
{
    msoAnimationIdle = 1,
    msoAnimationGreeting = 2,
    msoAnimationGoodbye = 3,
    msoAnimationBeginSpeaking = 4,
    msoAnimationRestPose = 5,
    msoAnimationCharacterSuccessMajor = 6,
    msoAnimationGetAttentionMajor = 11,
    msoAnimationGetAttentionMinor = 12,
    msoAnimationSearching = 13,
    msoAnimationPrinting = 18,
    msoAnimationGestureRight = 19,
    msoAnimationWritingNotingSomething = 22,
    msoAnimationWorkingAtSomething = 23,
    msoAnimationThinking = 24,
    msoAnimationSendingMail = 25,
    msoAnimationListensToComputer = 26,
    msoAnimationDisappear = 31,
    msoAnimationAppear = 32,
    msoAnimationGetArtsy = 100,
    msoAnimationGetTechy = 101,
    msoAnimationGetWizardy = 102,
    msoAnimationCheckingSomething = 103,
    msoAnimationLookDown = 104,
    msoAnimationLookDownLeft = 105,
    msoAnimationLookDownRight = 106,
    msoAnimationLookLeft = 107,
    msoAnimationLookRight = 108,
    msoAnimationLookUp = 109,
    msoAnimationLookUpLeft = 110,
    msoAnimationLookUpRight = 111,
    msoAnimationSaving = 112,
    msoAnimationGestureDown = 113,
    msoAnimationGestureLeft = 114,
    msoAnimationGestureUp = 115,
    msoAnimationEmptyTrash = 116
};

enum MsoButtonSetType
{
    msoButtonSetNone = 0,
    msoButtonSetOK = 1,
    msoButtonSetCancel = 2,
    msoButtonSetOkCancel = 3,
    msoButtonSetYesNo = 4,
    msoButtonSetYesNoCancel = 5,
    msoButtonSetBackClose = 6,
    msoButtonSetNextClose = 7,
    msoButtonSetBackNextClose = 8,
    msoButtonSetRetryCancel = 9,
    msoButtonSetAbortRetryIgnore = 10,
    msoButtonSetSearchClose = 11,
    msoButtonSetBackNextSnooze = 12,
    msoButtonSetTipsOptionsClose = 13,
    msoButtonSetYesAllNoCancel = 14
};

enum MsoIconType
{
    msoIconNone = 0,
    msoIconAlert = 2,
    msoIconTip = 3,
    msoIconAlertInfo = 4,
    msoIconAlertWarning = 5,
    msoIconAlertQuery = 6,
    msoIconAlertCritical = 7
};

enum MsoBalloonType
{
    msoBalloonTypeButtons = 0,
    msoBalloonTypeBullets = 1,
    msoBalloonTypeNumbers = 2
};

enum MsoModeType
{
    msoModeModal = 0,
    msoModeAutoDown = 1,
    msoModeModeless = 2
};

enum MsoBalloonErrorType
{
    msoBalloonErrorNone = 0,
    msoBalloonErrorOther = 1,
    msoBalloonErrorTooBig = 2,
    msoBalloonErrorOutOfMemory = 3,
    msoBalloonErrorBadPictureRef = 4,
    msoBalloonErrorBadReference = 5,
    msoBalloonErrorButtonlessModal = 6,
    msoBalloonErrorButtonModeless = 7,
    msoBalloonErrorBadCharacter = 8,
    msoBalloonErrorCOMFailure = 9,
    msoBalloonErrorCharNotTopmostForModal = 10,
    msoBalloonErrorTooManyControls = 11
};

enum MsoWizardActType
{
    msoWizardActInactive = 0,
    msoWizardActActive = 1,
    msoWizardActSuspend = 2,
    msoWizardActResume = 3
};

enum MsoWizardMsgType
{
    msoWizardMsgLocalStateOn = 1,
    msoWizardMsgLocalStateOff = 2,
    msoWizardMsgShowHelp = 3,
    msoWizardMsgSuspending = 4,
    msoWizardMsgResuming = 5
};

enum MsoBalloonButtonType
{
    msoBalloonButtonYesToAll = -15,
    msoBalloonButtonOptions = -14,
    msoBalloonButtonTips = -13,
    msoBalloonButtonClose = -12,
    msoBalloonButtonSnooze = -11,
    msoBalloonButtonSearch = -10,
    msoBalloonButtonIgnore = -9,
    msoBalloonButtonAbort = -8,
    msoBalloonButtonRetry = -7,
    msoBalloonButtonNext = -6,
    msoBalloonButtonBack = -5,
    msoBalloonButtonNo = -4,
    msoBalloonButtonYes = -3,
    msoBalloonButtonCancel = -2,
    msoBalloonButtonOK = -1,
    msoBalloonButtonNull = 0
};

enum DocProperties
{
    offPropertyTypeNumber = 1,
    offPropertyTypeBoolean = 2,
    offPropertyTypeDate = 3,
    offPropertyTypeString = 4,
    offPropertyTypeFloat = 5
};

enum MsoDocProperties
{
    msoPropertyTypeNumber = 1,
    msoPropertyTypeBoolean = 2,
    msoPropertyTypeDate = 3,
    msoPropertyTypeString = 4,
    msoPropertyTypeFloat = 5
};

enum MsoAppLanguageID
{
    msoLanguageIDInstall = 1,
    msoLanguageIDUI = 2,
    msoLanguageIDHelp = 3,
    msoLanguageIDExeMode = 4,
    msoLanguageIDUIPrevious = 5
};

enum MsoFarEastLineBreakLanguageID
{
    MsoFarEastLineBreakLanguageJapanese = 1041,
    MsoFarEastLineBreakLanguageKorean = 1042,
    MsoFarEastLineBreakLanguageSimplifiedChinese = 2052,
    MsoFarEastLineBreakLanguageTraditionalChinese = 1028
};

enum MsoFeatureInstall
{
    msoFeatureInstallNone = 0,
    msoFeatureInstallOnDemand = 1,
    msoFeatureInstallOnDemandWithUI = 2
};

struct __declspec(uuid("618736e0-3c3d-11cf-810c-00aa00389b71"))
IAccessible : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetaccDefaultAction))
    _bstr_t accDefaultAction[];
    __declspec(property(get=GetaccSelection))
    _variant_t accSelection;
    __declspec(property(get=GetaccFocus))
    _variant_t accFocus;
    __declspec(property(get=GetaccKeyboardShortcut))
    _bstr_t accKeyboardShortcut[];
    __declspec(property(get=GetaccHelp))
    _bstr_t accHelp[];
    __declspec(property(get=GetaccState))
    _variant_t accState[];
    __declspec(property(get=GetaccRole))
    _variant_t accRole[];
    __declspec(property(get=GetaccDescription))
    _bstr_t accDescription[];
    __declspec(property(get=GetaccValue,put=PutaccValue))
    _bstr_t accValue[];
    __declspec(property(get=GetaccName,put=PutaccName))
    _bstr_t accName[];
    __declspec(property(get=GetaccChild))
    IDispatchPtr accChild[];
    __declspec(property(get=GetaccChildCount))
    long accChildCount;
    __declspec(property(get=GetaccParent))
    IDispatchPtr accParent;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetaccParent ( );
    long GetaccChildCount ( );
    IDispatchPtr GetaccChild (
        const _variant_t & varChild );
    _bstr_t GetaccName (
        const _variant_t & varChild = vtMissing );
    _bstr_t GetaccValue (
        const _variant_t & varChild = vtMissing );
    _bstr_t GetaccDescription (
        const _variant_t & varChild = vtMissing );
    _variant_t GetaccRole (
        const _variant_t & varChild = vtMissing );
    _variant_t GetaccState (
        const _variant_t & varChild = vtMissing );
    _bstr_t GetaccHelp (
        const _variant_t & varChild = vtMissing );
    long GetaccHelpTopic (
        BSTR * pszHelpFile,
        const _variant_t & varChild = vtMissing );
    _bstr_t GetaccKeyboardShortcut (
        const _variant_t & varChild = vtMissing );
    _variant_t GetaccFocus ( );
    _variant_t GetaccSelection ( );
    _bstr_t GetaccDefaultAction (
        const _variant_t & varChild = vtMissing );
    HRESULT accSelect (
        long flagsSelect,
        const _variant_t & varChild = vtMissing );
    HRESULT accLocation (
        long * pxLeft,
        long * pyTop,
        long * pcxWidth,
        long * pcyHeight,
        const _variant_t & varChild = vtMissing );
    _variant_t accNavigate (
        long navDir,
        const _variant_t & varStart = vtMissing );
    _variant_t accHitTest (
        long xLeft,
        long yTop );
    HRESULT accDoDefaultAction (
        const _variant_t & varChild = vtMissing );
    void PutaccName (
        const _variant_t & varChild,
        _bstr_t pszName );
    void PutaccValue (
        const _variant_t & varChild,
        _bstr_t pszValue );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_accParent (
        IDispatch * * ppdispParent ) = 0;
    virtual HRESULT __stdcall get_accChildCount (
        long * pcountChildren ) = 0;
    virtual HRESULT __stdcall get_accChild (
        VARIANT varChild,
        IDispatch * * ppdispChild ) = 0;
    virtual HRESULT __stdcall get_accName (
        VARIANT varChild,
        BSTR * pszName ) = 0;
    virtual HRESULT __stdcall get_accValue (
        VARIANT varChild,
        BSTR * pszValue ) = 0;
    virtual HRESULT __stdcall get_accDescription (
        VARIANT varChild,
        BSTR * pszDescription ) = 0;
    virtual HRESULT __stdcall get_accRole (
        VARIANT varChild,
        VARIANT * pvarRole ) = 0;
    virtual HRESULT __stdcall get_accState (
        VARIANT varChild,
        VARIANT * pvarState ) = 0;
    virtual HRESULT __stdcall get_accHelp (
        VARIANT varChild,
        BSTR * pszHelp ) = 0;
    virtual HRESULT __stdcall get_accHelpTopic (
        BSTR * pszHelpFile,
        VARIANT varChild,
        long * pidTopic ) = 0;
    virtual HRESULT __stdcall get_accKeyboardShortcut (
        VARIANT varChild,
        BSTR * pszKeyboardShortcut ) = 0;
    virtual HRESULT __stdcall get_accFocus (
        VARIANT * pvarChild ) = 0;
    virtual HRESULT __stdcall get_accSelection (
        VARIANT * pvarChildren ) = 0;
    virtual HRESULT __stdcall get_accDefaultAction (
        VARIANT varChild,
        BSTR * pszDefaultAction ) = 0;
    virtual HRESULT __stdcall raw_accSelect (
        long flagsSelect,
        VARIANT varChild = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_accLocation (
        long * pxLeft,
        long * pyTop,
        long * pcxWidth,
        long * pcyHeight,
        VARIANT varChild = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_accNavigate (
        long navDir,
        VARIANT varStart,
        VARIANT * pvarEndUpAt ) = 0;
    virtual HRESULT __stdcall raw_accHitTest (
        long xLeft,
        long yTop,
        VARIANT * pvarChild ) = 0;
    virtual HRESULT __stdcall raw_accDoDefaultAction (
        VARIANT varChild = vtMissing ) = 0;
    virtual HRESULT __stdcall put_accName (
        VARIANT varChild,
        BSTR pszName ) = 0;
    virtual HRESULT __stdcall put_accValue (
        VARIANT varChild,
        BSTR pszValue ) = 0;
};

struct __declspec(uuid("000c0300-0000-0000-c000-000000000046"))
_IMsoDispObj : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * plCreator ) = 0;
};

struct __declspec(uuid("000c0301-0000-0000-c000-000000000046"))
_IMsoOleAccDispObj : IAccessible
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * plCreator ) = 0;
};

struct __declspec(uuid("000c0302-0000-0000-c000-000000000046"))
_CommandBars : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetActionControl))
    CommandBarControlPtr ActionControl;
    __declspec(property(get=GetActiveMenuBar))
    CommandBarPtr ActiveMenuBar;
    __declspec(property(get=GetItem))
    CommandBarPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetDisplayTooltips,put=PutDisplayTooltips))
    VARIANT_BOOL DisplayTooltips;
    __declspec(property(get=GetDisplayKeysInTooltips,put=PutDisplayKeysInTooltips))
    VARIANT_BOOL DisplayKeysInTooltips;
    __declspec(property(get=GetLargeButtons,put=PutLargeButtons))
    VARIANT_BOOL LargeButtons;
    __declspec(property(get=GetMenuAnimationStyle,put=PutMenuAnimationStyle))
    enum MsoMenuAnimation MenuAnimationStyle;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAdaptiveMenus,put=PutAdaptiveMenus))
    VARIANT_BOOL AdaptiveMenus;
    __declspec(property(get=GetDisplayFonts,put=PutDisplayFonts))
    VARIANT_BOOL DisplayFonts;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    CommandBarControlPtr GetActionControl ( );
    CommandBarPtr GetActiveMenuBar ( );
    CommandBarPtr Add (
        const _variant_t & Name = vtMissing,
        const _variant_t & Position = vtMissing,
        const _variant_t & MenuBar = vtMissing,
        const _variant_t & Temporary = vtMissing );
    int GetCount ( );
    VARIANT_BOOL GetDisplayTooltips ( );
    void PutDisplayTooltips (
        VARIANT_BOOL pvarfDisplayTooltips );
    VARIANT_BOOL GetDisplayKeysInTooltips ( );
    void PutDisplayKeysInTooltips (
        VARIANT_BOOL pvarfDisplayKeys );
    CommandBarControlPtr FindControl (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Tag = vtMissing,
        const _variant_t & Visible = vtMissing );
    CommandBarPtr GetItem (
        const _variant_t & Index );
    VARIANT_BOOL GetLargeButtons ( );
    void PutLargeButtons (
        VARIANT_BOOL pvarfLargeButtons );
    enum MsoMenuAnimation GetMenuAnimationStyle ( );
    void PutMenuAnimationStyle (
        enum MsoMenuAnimation pma );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetParent ( );
    HRESULT ReleaseFocus ( );
    int GetIdsString (
        int ids,
        BSTR * pbstrName );
    int GetTmcGetName (
        int tmc,
        BSTR * pbstrName );
    VARIANT_BOOL GetAdaptiveMenus ( );
    void PutAdaptiveMenus (
        VARIANT_BOOL pvarfAdaptiveMenus );
    CommandBarControlsPtr FindControls (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Tag = vtMissing,
        const _variant_t & Visible = vtMissing );
    CommandBarPtr AddEx (
        const _variant_t & TbidOrName = vtMissing,
        const _variant_t & Position = vtMissing,
        const _variant_t & MenuBar = vtMissing,
        const _variant_t & Temporary = vtMissing,
        const _variant_t & TbtrProtection = vtMissing );
    VARIANT_BOOL GetDisplayFonts ( );
    void PutDisplayFonts (
        VARIANT_BOOL pvarfDisplayFonts );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ActionControl (
        struct CommandBarControl * * ppcbc ) = 0;
    virtual HRESULT __stdcall get_ActiveMenuBar (
        struct CommandBar * * ppcb ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Name,
        VARIANT Position,
        VARIANT MenuBar,
        VARIANT Temporary,
        struct CommandBar * * ppcb ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * pcToolbars ) = 0;
    virtual HRESULT __stdcall get_DisplayTooltips (
        VARIANT_BOOL * pvarfDisplayTooltips ) = 0;
    virtual HRESULT __stdcall put_DisplayTooltips (
        VARIANT_BOOL pvarfDisplayTooltips ) = 0;
    virtual HRESULT __stdcall get_DisplayKeysInTooltips (
        VARIANT_BOOL * pvarfDisplayKeys ) = 0;
    virtual HRESULT __stdcall put_DisplayKeysInTooltips (
        VARIANT_BOOL pvarfDisplayKeys ) = 0;
    virtual HRESULT __stdcall raw_FindControl (
        VARIANT Type,
        VARIANT Id,
        VARIANT Tag,
        VARIANT Visible,
        struct CommandBarControl * * ppcbc ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct CommandBar * * ppcb ) = 0;
    virtual HRESULT __stdcall get_LargeButtons (
        VARIANT_BOOL * pvarfLargeButtons ) = 0;
    virtual HRESULT __stdcall put_LargeButtons (
        VARIANT_BOOL pvarfLargeButtons ) = 0;
    virtual HRESULT __stdcall get_MenuAnimationStyle (
        enum MsoMenuAnimation * pma ) = 0;
    virtual HRESULT __stdcall put_MenuAnimationStyle (
        enum MsoMenuAnimation pma ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppienum ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall raw_ReleaseFocus ( ) = 0;
    virtual HRESULT __stdcall get_IdsString (
        int ids,
        BSTR * pbstrName,
        int * pcch ) = 0;
    virtual HRESULT __stdcall get_TmcGetName (
        int tmc,
        BSTR * pbstrName,
        int * pcch ) = 0;
    virtual HRESULT __stdcall get_AdaptiveMenus (
        VARIANT_BOOL * pvarfAdaptiveMenus ) = 0;
    virtual HRESULT __stdcall put_AdaptiveMenus (
        VARIANT_BOOL pvarfAdaptiveMenus ) = 0;
    virtual HRESULT __stdcall raw_FindControls (
        VARIANT Type,
        VARIANT Id,
        VARIANT Tag,
        VARIANT Visible,
        struct CommandBarControls * * ppcbcs ) = 0;
    virtual HRESULT __stdcall raw_AddEx (
        VARIANT TbidOrName,
        VARIANT Position,
        VARIANT MenuBar,
        VARIANT Temporary,
        VARIANT TbtrProtection,
        struct CommandBar * * ppcb ) = 0;
    virtual HRESULT __stdcall get_DisplayFonts (
        VARIANT_BOOL * pvarfDisplayFonts ) = 0;
    virtual HRESULT __stdcall put_DisplayFonts (
        VARIANT_BOOL pvarfDisplayFonts ) = 0;
};

struct __declspec(uuid("000c0304-0000-0000-c000-000000000046"))
CommandBar : _IMsoOleAccDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetContext,put=PutContext))
    _bstr_t Context;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;
    __declspec(property(get=GetControls))
    CommandBarControlsPtr Controls;
    __declspec(property(get=GetAdaptiveMenu,put=PutAdaptiveMenu))
    VARIANT_BOOL AdaptiveMenu;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetHeight,put=PutHeight))
    int Height;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetInstanceId))
    long InstanceId;
    __declspec(property(get=GetLeft,put=PutLeft))
    int Left;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum MsoBarPosition Position;
    __declspec(property(get=GetRowIndex,put=PutRowIndex))
    int RowIndex;
    __declspec(property(get=GetProtection,put=PutProtection))
    enum MsoBarProtection Protection;
    __declspec(property(get=GetTop,put=PutTop))
    int Top;
    __declspec(property(get=GetType))
    enum MsoBarType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetContext ( );
    void PutContext (
        _bstr_t pbstrContext );
    CommandBarControlsPtr GetControls ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pvarfEnabled );
    CommandBarControlPtr FindControl (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Tag = vtMissing,
        const _variant_t & Visible = vtMissing,
        const _variant_t & Recursive = vtMissing );
    int GetHeight ( );
    void PutHeight (
        int pdy );
    int GetIndex ( );
    long GetInstanceId ( );
    int GetLeft ( );
    void PutLeft (
        int pxpLeft );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pbstrName );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t pbstrNameLocal );
    IDispatchPtr GetParent ( );
    enum MsoBarPosition GetPosition ( );
    void PutPosition (
        enum MsoBarPosition ppos );
    int GetRowIndex ( );
    void PutRowIndex (
        int piRow );
    enum MsoBarProtection GetProtection ( );
    void PutProtection (
        enum MsoBarProtection pprot );
    HRESULT Reset ( );
    HRESULT ShowPopup (
        const _variant_t & x = vtMissing,
        const _variant_t & y = vtMissing );
    int GetTop ( );
    void PutTop (
        int pypTop );
    enum MsoBarType GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pvarfVisible );
    int GetWidth ( );
    void PutWidth (
        int pdx );
    VARIANT_BOOL GetAdaptiveMenu ( );
    void PutAdaptiveMenu (
        VARIANT_BOOL pvarfAdaptiveMenu );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_BuiltIn (
        VARIANT_BOOL * pvarfBuiltIn ) = 0;
    virtual HRESULT __stdcall get_Context (
        BSTR * pbstrContext ) = 0;
    virtual HRESULT __stdcall put_Context (
        BSTR pbstrContext ) = 0;
    virtual HRESULT __stdcall get_Controls (
        struct CommandBarControls * * ppcbcs ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * pvarfEnabled ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL pvarfEnabled ) = 0;
    virtual HRESULT __stdcall raw_FindControl (
        VARIANT Type,
        VARIANT Id,
        VARIANT Tag,
        VARIANT Visible,
        VARIANT Recursive,
        struct CommandBarControl * * ppcbc ) = 0;
    virtual HRESULT __stdcall get_Height (
        int * pdy ) = 0;
    virtual HRESULT __stdcall put_Height (
        int pdy ) = 0;
    virtual HRESULT __stdcall get_Index (
        int * pi ) = 0;
    virtual HRESULT __stdcall get_InstanceId (
        long * pid ) = 0;
    virtual HRESULT __stdcall get_Left (
        int * pxpLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        int pxpLeft ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR pbstrName ) = 0;
    virtual HRESULT __stdcall get_NameLocal (
        BSTR * pbstrNameLocal ) = 0;
    virtual HRESULT __stdcall put_NameLocal (
        BSTR pbstrNameLocal ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Position (
        enum MsoBarPosition * ppos ) = 0;
    virtual HRESULT __stdcall put_Position (
        enum MsoBarPosition ppos ) = 0;
    virtual HRESULT __stdcall get_RowIndex (
        int * piRow ) = 0;
    virtual HRESULT __stdcall put_RowIndex (
        int piRow ) = 0;
    virtual HRESULT __stdcall get_Protection (
        enum MsoBarProtection * pprot ) = 0;
    virtual HRESULT __stdcall put_Protection (
        enum MsoBarProtection pprot ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
    virtual HRESULT __stdcall raw_ShowPopup (
        VARIANT x = vtMissing,
        VARIANT y = vtMissing ) = 0;
    virtual HRESULT __stdcall get_Top (
        int * pypTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        int pypTop ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum MsoBarType * ptype ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * pvarfVisible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL pvarfVisible ) = 0;
    virtual HRESULT __stdcall get_Width (
        int * pdx ) = 0;
    virtual HRESULT __stdcall put_Width (
        int pdx ) = 0;
    virtual HRESULT __stdcall get_AdaptiveMenu (
        VARIANT_BOOL * pvarfAdaptiveMenu ) = 0;
    virtual HRESULT __stdcall put_AdaptiveMenu (
        VARIANT_BOOL pvarfAdaptiveMenu ) = 0;
};

struct __declspec(uuid("000c0306-0000-0000-c000-000000000046"))
CommandBarControls : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    CommandBarControlPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetParent))
    CommandBarPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    CommandBarControlPtr Add (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Parameter = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & Temporary = vtMissing );
    int GetCount ( );
    CommandBarControlPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    CommandBarPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Add (
        VARIANT Type,
        VARIANT Id,
        VARIANT Parameter,
        VARIANT Before,
        VARIANT Temporary,
        struct CommandBarControl * * ppcbc ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * pcToolbarControls ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct CommandBarControl * * ppcbc ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppienum ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct CommandBar * * ppcb ) = 0;
};

struct __declspec(uuid("000c0308-0000-0000-c000-000000000046"))
CommandBarControl : _IMsoOleAccDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetBeginGroup,put=PutBeginGroup))
    VARIANT_BOOL BeginGroup;
    __declspec(property(get=GetIsPriorityDropped))
    VARIANT_BOOL IsPriorityDropped;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetControl))
    IDispatchPtr Control;
    __declspec(property(get=GetDescriptionText,put=PutDescriptionText))
    _bstr_t DescriptionText;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetHeight,put=PutHeight))
    int Height;
    __declspec(property(get=GetHelpContextId,put=PutHelpContextId))
    int HelpContextId;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetId))
    int Id;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetInstanceId))
    long InstanceId;
    __declspec(property(get=GetLeft))
    int Left;
    __declspec(property(get=GetOLEUsage,put=PutOLEUsage))
    enum MsoControlOLEUsage OLEUsage;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetParent))
    CommandBarPtr Parent;
    __declspec(property(get=GetParameter,put=PutParameter))
    _bstr_t Parameter;
    __declspec(property(get=GetPriority,put=PutPriority))
    int Priority;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetTooltipText,put=PutTooltipText))
    _bstr_t TooltipText;
    __declspec(property(get=GetTop))
    int Top;
    __declspec(property(get=GetType))
    enum MsoControlType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBeginGroup ( );
    void PutBeginGroup (
        VARIANT_BOOL pvarfBeginGroup );
    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t pbstrCaption );
    IDispatchPtr GetControl ( );
    CommandBarControlPtr Copy (
        const _variant_t & Bar = vtMissing,
        const _variant_t & Before = vtMissing );
    HRESULT Delete (
        const _variant_t & Temporary = vtMissing );
    _bstr_t GetDescriptionText ( );
    void PutDescriptionText (
        _bstr_t pbstrText );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pvarfEnabled );
    HRESULT Execute ( );
    int GetHeight ( );
    void PutHeight (
        int pdy );
    int GetHelpContextId ( );
    void PutHelpContextId (
        int pid );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t pbstrFilename );
    int GetId ( );
    int GetIndex ( );
    long GetInstanceId ( );
    CommandBarControlPtr Move (
        const _variant_t & Bar = vtMissing,
        const _variant_t & Before = vtMissing );
    int GetLeft ( );
    enum MsoControlOLEUsage GetOLEUsage ( );
    void PutOLEUsage (
        enum MsoControlOLEUsage pcou );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t pbstrOnAction );
    CommandBarPtr GetParent ( );
    _bstr_t GetParameter ( );
    void PutParameter (
        _bstr_t pbstrParam );
    int GetPriority ( );
    void PutPriority (
        int pnPri );
    HRESULT Reset ( );
    HRESULT SetFocus ( );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t pbstrTag );
    _bstr_t GetTooltipText ( );
    void PutTooltipText (
        _bstr_t pbstrTooltip );
    int GetTop ( );
    enum MsoControlType GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pvarfVisible );
    int GetWidth ( );
    void PutWidth (
        int pdx );
    VARIANT_BOOL GetIsPriorityDropped ( );
    HRESULT Reserved1 ( );
    HRESULT Reserved2 ( );
    HRESULT Reserved3 ( );
    HRESULT Reserved4 ( );
    HRESULT Reserved5 ( );
    HRESULT Reserved6 ( );
    HRESULT Reserved7 ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_BeginGroup (
        VARIANT_BOOL * pvarfBeginGroup ) = 0;
    virtual HRESULT __stdcall put_BeginGroup (
        VARIANT_BOOL pvarfBeginGroup ) = 0;
    virtual HRESULT __stdcall get_BuiltIn (
        VARIANT_BOOL * pvarfBuiltIn ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * pbstrCaption ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR pbstrCaption ) = 0;
    virtual HRESULT __stdcall get_Control (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT Bar,
        VARIANT Before,
        struct CommandBarControl * * ppcbc ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT Temporary = vtMissing ) = 0;
    virtual HRESULT __stdcall get_DescriptionText (
        BSTR * pbstrText ) = 0;
    virtual HRESULT __stdcall put_DescriptionText (
        BSTR pbstrText ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * pvarfEnabled ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL pvarfEnabled ) = 0;
    virtual HRESULT __stdcall raw_Execute ( ) = 0;
    virtual HRESULT __stdcall get_Height (
        int * pdy ) = 0;
    virtual HRESULT __stdcall put_Height (
        int pdy ) = 0;
    virtual HRESULT __stdcall get_HelpContextId (
        int * pid ) = 0;
    virtual HRESULT __stdcall put_HelpContextId (
        int pid ) = 0;
    virtual HRESULT __stdcall get_HelpFile (
        BSTR * pbstrFilename ) = 0;
    virtual HRESULT __stdcall put_HelpFile (
        BSTR pbstrFilename ) = 0;
    virtual HRESULT __stdcall get_Id (
        int * pid ) = 0;
    virtual HRESULT __stdcall get_Index (
        int * pi ) = 0;
    virtual HRESULT __stdcall get_InstanceId (
        long * pid ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT Bar,
        VARIANT Before,
        struct CommandBarControl * * ppcbc ) = 0;
    virtual HRESULT __stdcall get_Left (
        int * px ) = 0;
    virtual HRESULT __stdcall get_OLEUsage (
        enum MsoControlOLEUsage * pcou ) = 0;
    virtual HRESULT __stdcall put_OLEUsage (
        enum MsoControlOLEUsage pcou ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * pbstrOnAction ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR pbstrOnAction ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct CommandBar * * ppcb ) = 0;
    virtual HRESULT __stdcall get_Parameter (
        BSTR * pbstrParam ) = 0;
    virtual HRESULT __stdcall put_Parameter (
        BSTR pbstrParam ) = 0;
    virtual HRESULT __stdcall get_Priority (
        int * pnPri ) = 0;
    virtual HRESULT __stdcall put_Priority (
        int pnPri ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
    virtual HRESULT __stdcall raw_SetFocus ( ) = 0;
    virtual HRESULT __stdcall get_Tag (
        BSTR * pbstrTag ) = 0;
    virtual HRESULT __stdcall put_Tag (
        BSTR pbstrTag ) = 0;
    virtual HRESULT __stdcall get_TooltipText (
        BSTR * pbstrTooltip ) = 0;
    virtual HRESULT __stdcall put_TooltipText (
        BSTR pbstrTooltip ) = 0;
    virtual HRESULT __stdcall get_Top (
        int * py ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum MsoControlType * ptype ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * pvarfVisible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL pvarfVisible ) = 0;
    virtual HRESULT __stdcall get_Width (
        int * pdx ) = 0;
    virtual HRESULT __stdcall put_Width (
        int pdx ) = 0;
    virtual HRESULT __stdcall get_IsPriorityDropped (
        VARIANT_BOOL * pvarfDropped ) = 0;
    virtual HRESULT __stdcall raw_Reserved1 ( ) = 0;
    virtual HRESULT __stdcall raw_Reserved2 ( ) = 0;
    virtual HRESULT __stdcall raw_Reserved3 ( ) = 0;
    virtual HRESULT __stdcall raw_Reserved4 ( ) = 0;
    virtual HRESULT __stdcall raw_Reserved5 ( ) = 0;
    virtual HRESULT __stdcall raw_Reserved6 ( ) = 0;
    virtual HRESULT __stdcall raw_Reserved7 ( ) = 0;
};

struct __declspec(uuid("000c030e-0000-0000-c000-000000000046"))
_CommandBarButton : CommandBarControl
{
    //
    // Property data
    //

    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetFaceId,put=PutFaceId))
    int FaceId;
    __declspec(property(get=GetShortcutText,put=PutShortcutText))
    _bstr_t ShortcutText;
    __declspec(property(get=GetState,put=PutState))
    enum MsoButtonState State;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum MsoButtonStyle Style;
    __declspec(property(get=GetHyperlinkType,put=PutHyperlinkType))
    enum MsoCommandBarButtonHyperlinkType HyperlinkType;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL pvarfBuiltIn );
    HRESULT CopyFace ( );
    int GetFaceId ( );
    void PutFaceId (
        int pid );
    HRESULT PasteFace ( );
    _bstr_t GetShortcutText ( );
    void PutShortcutText (
        _bstr_t pbstrText );
    enum MsoButtonState GetState ( );
    void PutState (
        enum MsoButtonState pstate );
    enum MsoButtonStyle GetStyle ( );
    void PutStyle (
        enum MsoButtonStyle pstyle );
    enum MsoCommandBarButtonHyperlinkType GetHyperlinkType ( );
    void PutHyperlinkType (
        enum MsoCommandBarButtonHyperlinkType phlType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_BuiltInFace (
        VARIANT_BOOL * pvarfBuiltIn ) = 0;
    virtual HRESULT __stdcall put_BuiltInFace (
        VARIANT_BOOL pvarfBuiltIn ) = 0;
    virtual HRESULT __stdcall raw_CopyFace ( ) = 0;
    virtual HRESULT __stdcall get_FaceId (
        int * pid ) = 0;
    virtual HRESULT __stdcall put_FaceId (
        int pid ) = 0;
    virtual HRESULT __stdcall raw_PasteFace ( ) = 0;
    virtual HRESULT __stdcall get_ShortcutText (
        BSTR * pbstrText ) = 0;
    virtual HRESULT __stdcall put_ShortcutText (
        BSTR pbstrText ) = 0;
    virtual HRESULT __stdcall get_State (
        enum MsoButtonState * pstate ) = 0;
    virtual HRESULT __stdcall put_State (
        enum MsoButtonState pstate ) = 0;
    virtual HRESULT __stdcall get_Style (
        enum MsoButtonStyle * pstyle ) = 0;
    virtual HRESULT __stdcall put_Style (
        enum MsoButtonStyle pstyle ) = 0;
    virtual HRESULT __stdcall get_HyperlinkType (
        enum MsoCommandBarButtonHyperlinkType * phlType ) = 0;
    virtual HRESULT __stdcall put_HyperlinkType (
        enum MsoCommandBarButtonHyperlinkType phlType ) = 0;
};

struct __declspec(uuid("000c030a-0000-0000-c000-000000000046"))
CommandBarPopup : CommandBarControl
{
    //
    // Property data
    //

    __declspec(property(get=GetCommandBar))
    CommandBarPtr CommandBar;
    __declspec(property(get=GetControls))
    CommandBarControlsPtr Controls;
    __declspec(property(get=GetOLEMenuGroup,put=PutOLEMenuGroup))
    enum MsoOLEMenuGroup OLEMenuGroup;

    //
    // Wrapper methods for error-handling
    //

    CommandBarPtr GetCommandBar ( );
    CommandBarControlsPtr GetControls ( );
    enum MsoOLEMenuGroup GetOLEMenuGroup ( );
    void PutOLEMenuGroup (
        enum MsoOLEMenuGroup pomg );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_CommandBar (
        struct CommandBar * * ppcb ) = 0;
    virtual HRESULT __stdcall get_Controls (
        struct CommandBarControls * * ppcbcs ) = 0;
    virtual HRESULT __stdcall get_OLEMenuGroup (
        enum MsoOLEMenuGroup * pomg ) = 0;
    virtual HRESULT __stdcall put_OLEMenuGroup (
        enum MsoOLEMenuGroup pomg ) = 0;
};

struct __declspec(uuid("000c030c-0000-0000-c000-000000000046"))
_CommandBarComboBox : CommandBarControl
{
    //
    // Property data
    //

    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    int DropDownLines;
    __declspec(property(get=GetDropDownWidth,put=PutDropDownWidth))
    int DropDownWidth;
    __declspec(property(get=GetList,put=PutList))
    _bstr_t List[];
    __declspec(property(get=GetListCount))
    int ListCount;
    __declspec(property(get=GetListHeaderCount,put=PutListHeaderCount))
    int ListHeaderCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    int ListIndex;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum MsoComboStyle Style;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddItem (
        _bstr_t Text,
        const _variant_t & Index = vtMissing );
    HRESULT Clear ( );
    int GetDropDownLines ( );
    void PutDropDownLines (
        int pcLines );
    int GetDropDownWidth ( );
    void PutDropDownWidth (
        int pdx );
    _bstr_t GetList (
        int Index );
    void PutList (
        int Index,
        _bstr_t pbstrItem );
    int GetListCount ( );
    int GetListHeaderCount ( );
    void PutListHeaderCount (
        int pcItems );
    int GetListIndex ( );
    void PutListIndex (
        int pi );
    HRESULT RemoveItem (
        int Index );
    enum MsoComboStyle GetStyle ( );
    void PutStyle (
        enum MsoComboStyle pstyle );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pbstrText );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_AddItem (
        BSTR Text,
        VARIANT Index = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Clear ( ) = 0;
    virtual HRESULT __stdcall get_DropDownLines (
        int * pcLines ) = 0;
    virtual HRESULT __stdcall put_DropDownLines (
        int pcLines ) = 0;
    virtual HRESULT __stdcall get_DropDownWidth (
        int * pdx ) = 0;
    virtual HRESULT __stdcall put_DropDownWidth (
        int pdx ) = 0;
    virtual HRESULT __stdcall get_List (
        int Index,
        BSTR * pbstrItem ) = 0;
    virtual HRESULT __stdcall put_List (
        int Index,
        BSTR pbstrItem ) = 0;
    virtual HRESULT __stdcall get_ListCount (
        int * pcItems ) = 0;
    virtual HRESULT __stdcall get_ListHeaderCount (
        int * pcItems ) = 0;
    virtual HRESULT __stdcall put_ListHeaderCount (
        int pcItems ) = 0;
    virtual HRESULT __stdcall get_ListIndex (
        int * pi ) = 0;
    virtual HRESULT __stdcall put_ListIndex (
        int pi ) = 0;
    virtual HRESULT __stdcall raw_RemoveItem (
        int Index ) = 0;
    virtual HRESULT __stdcall get_Style (
        enum MsoComboStyle * pstyle ) = 0;
    virtual HRESULT __stdcall put_Style (
        enum MsoComboStyle pstyle ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * pbstrText ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR pbstrText ) = 0;
};

struct __declspec(uuid("000c030d-0000-0000-c000-000000000046"))
_CommandBarActiveX : CommandBarControl
{
    //
    // Property data
    //

    __declspec(property(get=GetControlCLSID,put=PutControlCLSID))
    _bstr_t ControlCLSID;
    __declspec(property(get=GetQueryControlInterface))
    IUnknownPtr QueryControlInterface[];
    __declspec(property(put=PutInitWith))
    IUnknownPtr InitWith;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetControlCLSID ( );
    void PutControlCLSID (
        _bstr_t pbstrClsid );
    IUnknownPtr GetQueryControlInterface (
        _bstr_t bstrIid );
    HRESULT SetInnerObjectFactory (
        IUnknown * pUnk );
    HRESULT EnsureControl ( );
    void PutInitWith (
        IUnknown * _arg1 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ControlCLSID (
        BSTR * pbstrClsid ) = 0;
    virtual HRESULT __stdcall put_ControlCLSID (
        BSTR pbstrClsid ) = 0;
    virtual HRESULT __stdcall get_QueryControlInterface (
        BSTR bstrIid,
        IUnknown * * ppUnk ) = 0;
    virtual HRESULT __stdcall raw_SetInnerObjectFactory (
        IUnknown * pUnk ) = 0;
    virtual HRESULT __stdcall raw_EnsureControl ( ) = 0;
    virtual HRESULT __stdcall put_InitWith (
        IUnknown * _arg1 ) = 0;
};

struct __declspec(uuid("000c0310-0000-0000-c000-000000000046"))
Adjustments : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    float Item[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    float GetItem (
        int Index );
    void PutItem (
        int Index,
        float Val );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * Count ) = 0;
    virtual HRESULT __stdcall get_Item (
        int Index,
        float * Val ) = 0;
    virtual HRESULT __stdcall put_Item (
        int Index,
        float Val ) = 0;
};

struct __declspec(uuid("000c0311-0000-0000-c000-000000000046"))
CalloutFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAccent,put=PutAccent))
    enum MsoTriState Accent;
    __declspec(property(get=GetAngle,put=PutAngle))
    enum MsoCalloutAngleType Angle;
    __declspec(property(get=GetAutoAttach,put=PutAutoAttach))
    enum MsoTriState AutoAttach;
    __declspec(property(get=GetAutoLength))
    enum MsoTriState AutoLength;
    __declspec(property(get=GetBorder,put=PutBorder))
    enum MsoTriState Border;
    __declspec(property(get=GetDrop))
    float Drop;
    __declspec(property(get=GetDropType))
    enum MsoCalloutDropType DropType;
    __declspec(property(get=GetGap,put=PutGap))
    float Gap;
    __declspec(property(get=GetLength))
    float Length;
    __declspec(property(get=GetType,put=PutType))
    enum MsoCalloutType Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT AutomaticLength ( );
    HRESULT CustomDrop (
        float Drop );
    HRESULT CustomLength (
        float Length );
    HRESULT PresetDrop (
        enum MsoCalloutDropType DropType );
    enum MsoTriState GetAccent ( );
    void PutAccent (
        enum MsoTriState Accent );
    enum MsoCalloutAngleType GetAngle ( );
    void PutAngle (
        enum MsoCalloutAngleType Angle );
    enum MsoTriState GetAutoAttach ( );
    void PutAutoAttach (
        enum MsoTriState AutoAttach );
    enum MsoTriState GetAutoLength ( );
    enum MsoTriState GetBorder ( );
    void PutBorder (
        enum MsoTriState Border );
    float GetDrop ( );
    enum MsoCalloutDropType GetDropType ( );
    float GetGap ( );
    void PutGap (
        float Gap );
    float GetLength ( );
    enum MsoCalloutType GetType ( );
    void PutType (
        enum MsoCalloutType Type );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_AutomaticLength ( ) = 0;
    virtual HRESULT __stdcall raw_CustomDrop (
        float Drop ) = 0;
    virtual HRESULT __stdcall raw_CustomLength (
        float Length ) = 0;
    virtual HRESULT __stdcall raw_PresetDrop (
        enum MsoCalloutDropType DropType ) = 0;
    virtual HRESULT __stdcall get_Accent (
        enum MsoTriState * Accent ) = 0;
    virtual HRESULT __stdcall put_Accent (
        enum MsoTriState Accent ) = 0;
    virtual HRESULT __stdcall get_Angle (
        enum MsoCalloutAngleType * Angle ) = 0;
    virtual HRESULT __stdcall put_Angle (
        enum MsoCalloutAngleType Angle ) = 0;
    virtual HRESULT __stdcall get_AutoAttach (
        enum MsoTriState * AutoAttach ) = 0;
    virtual HRESULT __stdcall put_AutoAttach (
        enum MsoTriState AutoAttach ) = 0;
    virtual HRESULT __stdcall get_AutoLength (
        enum MsoTriState * AutoLength ) = 0;
    virtual HRESULT __stdcall get_Border (
        enum MsoTriState * Border ) = 0;
    virtual HRESULT __stdcall put_Border (
        enum MsoTriState Border ) = 0;
    virtual HRESULT __stdcall get_Drop (
        float * Drop ) = 0;
    virtual HRESULT __stdcall get_DropType (
        enum MsoCalloutDropType * DropType ) = 0;
    virtual HRESULT __stdcall get_Gap (
        float * Gap ) = 0;
    virtual HRESULT __stdcall put_Gap (
        float Gap ) = 0;
    virtual HRESULT __stdcall get_Length (
        float * Length ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum MsoCalloutType * Type ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum MsoCalloutType Type ) = 0;
};

struct __declspec(uuid("000c0312-0000-0000-c000-000000000046"))
ColorFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetRGB,put=PutRGB))
    MsoRGBType RGB;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    int SchemeColor;
    __declspec(property(get=GetType))
    enum MsoColorType Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    MsoRGBType GetRGB ( );
    void PutRGB (
        MsoRGBType RGB );
    int GetSchemeColor ( );
    void PutSchemeColor (
        int SchemeColor );
    enum MsoColorType GetType ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_RGB (
        MsoRGBType * RGB ) = 0;
    virtual HRESULT __stdcall put_RGB (
        MsoRGBType RGB ) = 0;
    virtual HRESULT __stdcall get_SchemeColor (
        int * SchemeColor ) = 0;
    virtual HRESULT __stdcall put_SchemeColor (
        int SchemeColor ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum MsoColorType * Type ) = 0;
};

struct __declspec(uuid("000c0313-0000-0000-c000-000000000046"))
ConnectorFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    int BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum MsoTriState EndConnected;
    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    int EndConnectionSite;
    __declspec(property(get=GetType,put=PutType))
    enum MsoConnectorType Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        int ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        int ConnectionSite );
    HRESULT EndDisconnect ( );
    enum MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    int GetBeginConnectionSite ( );
    enum MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    int GetEndConnectionSite ( );
    enum MsoConnectorType GetType ( );
    void PutType (
        enum MsoConnectorType Type );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_BeginConnect (
        struct Shape * ConnectedShape,
        int ConnectionSite ) = 0;
    virtual HRESULT __stdcall raw_BeginDisconnect ( ) = 0;
    virtual HRESULT __stdcall raw_EndConnect (
        struct Shape * ConnectedShape,
        int ConnectionSite ) = 0;
    virtual HRESULT __stdcall raw_EndDisconnect ( ) = 0;
    virtual HRESULT __stdcall get_BeginConnected (
        enum MsoTriState * BeginConnected ) = 0;
    virtual HRESULT __stdcall get_BeginConnectedShape (
        struct Shape * * BeginConnectedShape ) = 0;
    virtual HRESULT __stdcall get_BeginConnectionSite (
        int * BeginConnectionSite ) = 0;
    virtual HRESULT __stdcall get_EndConnected (
        enum MsoTriState * EndConnected ) = 0;
    virtual HRESULT __stdcall get_EndConnectedShape (
        struct Shape * * EndConnectedShape ) = 0;
    virtual HRESULT __stdcall get_EndConnectionSite (
        int * EndConnectionSite ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum MsoConnectorType * Type ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum MsoConnectorType Type ) = 0;
};

struct __declspec(uuid("000c0314-0000-0000-c000-000000000046"))
FillFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    int GradientVariant;
    __declspec(property(get=GetPattern))
    enum MsoPatternType Pattern;
    __declspec(property(get=GetPresetGradientType))
    enum MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetPresetTexture))
    enum MsoPresetTexture PresetTexture;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum MsoTextureType TextureType;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType))
    enum MsoFillType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum MsoTriState Visible;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Background ( );
    HRESULT OneColorGradient (
        enum MsoGradientStyle Style,
        int Variant,
        float Degree );
    HRESULT Patterned (
        enum MsoPatternType Pattern );
    HRESULT PresetGradient (
        enum MsoGradientStyle Style,
        int Variant,
        enum MsoPresetGradientType PresetGradientType );
    HRESULT PresetTextured (
        enum MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT TwoColorGradient (
        enum MsoGradientStyle Style,
        int Variant );
    HRESULT UserPicture (
        _bstr_t PictureFile );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum MsoGradientStyle GetGradientStyle ( );
    int GetGradientVariant ( );
    enum MsoPatternType GetPattern ( );
    enum MsoPresetGradientType GetPresetGradientType ( );
    enum MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum MsoTextureType GetTextureType ( );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum MsoFillType GetType ( );
    enum MsoTriState GetVisible ( );
    void PutVisible (
        enum MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_Background ( ) = 0;
    virtual HRESULT __stdcall raw_OneColorGradient (
        enum MsoGradientStyle Style,
        int Variant,
        float Degree ) = 0;
    virtual HRESULT __stdcall raw_Patterned (
        enum MsoPatternType Pattern ) = 0;
    virtual HRESULT __stdcall raw_PresetGradient (
        enum MsoGradientStyle Style,
        int Variant,
        enum MsoPresetGradientType PresetGradientType ) = 0;
    virtual HRESULT __stdcall raw_PresetTextured (
        enum MsoPresetTexture PresetTexture ) = 0;
    virtual HRESULT __stdcall raw_Solid ( ) = 0;
    virtual HRESULT __stdcall raw_TwoColorGradient (
        enum MsoGradientStyle Style,
        int Variant ) = 0;
    virtual HRESULT __stdcall raw_UserPicture (
        BSTR PictureFile ) = 0;
    virtual HRESULT __stdcall raw_UserTextured (
        BSTR TextureFile ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        struct ColorFormat * * BackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        struct ColorFormat * BackColor ) = 0;
    virtual HRESULT __stdcall get_ForeColor (
        struct ColorFormat * * ForeColor ) = 0;
    virtual HRESULT __stdcall put_ForeColor (
        struct ColorFormat * ForeColor ) = 0;
    virtual HRESULT __stdcall get_GradientColorType (
        enum MsoGradientColorType * GradientColorType ) = 0;
    virtual HRESULT __stdcall get_GradientDegree (
        float * GradientDegree ) = 0;
    virtual HRESULT __stdcall get_GradientStyle (
        enum MsoGradientStyle * GradientStyle ) = 0;
    virtual HRESULT __stdcall get_GradientVariant (
        int * GradientVariant ) = 0;
    virtual HRESULT __stdcall get_Pattern (
        enum MsoPatternType * Pattern ) = 0;
    virtual HRESULT __stdcall get_PresetGradientType (
        enum MsoPresetGradientType * PresetGradientType ) = 0;
    virtual HRESULT __stdcall get_PresetTexture (
        enum MsoPresetTexture * PresetTexture ) = 0;
    virtual HRESULT __stdcall get_TextureName (
        BSTR * TextureName ) = 0;
    virtual HRESULT __stdcall get_TextureType (
        enum MsoTextureType * TextureType ) = 0;
    virtual HRESULT __stdcall get_Transparency (
        float * Transparency ) = 0;
    virtual HRESULT __stdcall put_Transparency (
        float Transparency ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum MsoFillType * Type ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum MsoTriState * Visible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c0315-0000-0000-c000-000000000046"))
FreeformBuilder : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum MsoSegmentType SegmentType,
        enum MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    ShapePtr ConvertToShape ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_AddNodes (
        enum MsoSegmentType SegmentType,
        enum MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 ) = 0;
    virtual HRESULT __stdcall raw_ConvertToShape (
        struct Shape * * Freeform ) = 0;
};

struct __declspec(uuid("000c0316-0000-0000-c000-000000000046"))
GroupShapes : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * pnShapes ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct Shape * * Item ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppienum ) = 0;
};

struct __declspec(uuid("000c0317-0000-0000-c000-000000000046"))
LineFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetBeginArrowheadLength,put=PutBeginArrowheadLength))
    enum MsoArrowheadLength BeginArrowheadLength;
    __declspec(property(get=GetBeginArrowheadStyle,put=PutBeginArrowheadStyle))
    enum MsoArrowheadStyle BeginArrowheadStyle;
    __declspec(property(get=GetBeginArrowheadWidth,put=PutBeginArrowheadWidth))
    enum MsoArrowheadWidth BeginArrowheadWidth;
    __declspec(property(get=GetDashStyle,put=PutDashStyle))
    enum MsoLineDashStyle DashStyle;
    __declspec(property(get=GetEndArrowheadLength,put=PutEndArrowheadLength))
    enum MsoArrowheadLength EndArrowheadLength;
    __declspec(property(get=GetEndArrowheadStyle,put=PutEndArrowheadStyle))
    enum MsoArrowheadStyle EndArrowheadStyle;
    __declspec(property(get=GetEndArrowheadWidth,put=PutEndArrowheadWidth))
    enum MsoArrowheadWidth EndArrowheadWidth;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetPattern,put=PutPattern))
    enum MsoPatternType Pattern;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum MsoLineStyle Style;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum MsoTriState Visible;
    __declspec(property(get=GetWeight,put=PutWeight))
    float Weight;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    enum MsoArrowheadLength GetBeginArrowheadLength ( );
    void PutBeginArrowheadLength (
        enum MsoArrowheadLength BeginArrowheadLength );
    enum MsoArrowheadStyle GetBeginArrowheadStyle ( );
    void PutBeginArrowheadStyle (
        enum MsoArrowheadStyle BeginArrowheadStyle );
    enum MsoArrowheadWidth GetBeginArrowheadWidth ( );
    void PutBeginArrowheadWidth (
        enum MsoArrowheadWidth BeginArrowheadWidth );
    enum MsoLineDashStyle GetDashStyle ( );
    void PutDashStyle (
        enum MsoLineDashStyle DashStyle );
    enum MsoArrowheadLength GetEndArrowheadLength ( );
    void PutEndArrowheadLength (
        enum MsoArrowheadLength EndArrowheadLength );
    enum MsoArrowheadStyle GetEndArrowheadStyle ( );
    void PutEndArrowheadStyle (
        enum MsoArrowheadStyle EndArrowheadStyle );
    enum MsoArrowheadWidth GetEndArrowheadWidth ( );
    void PutEndArrowheadWidth (
        enum MsoArrowheadWidth EndArrowheadWidth );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum MsoPatternType GetPattern ( );
    void PutPattern (
        enum MsoPatternType Pattern );
    enum MsoLineStyle GetStyle ( );
    void PutStyle (
        enum MsoLineStyle Style );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum MsoTriState GetVisible ( );
    void PutVisible (
        enum MsoTriState Visible );
    float GetWeight ( );
    void PutWeight (
        float Weight );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        struct ColorFormat * * BackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        struct ColorFormat * BackColor ) = 0;
    virtual HRESULT __stdcall get_BeginArrowheadLength (
        enum MsoArrowheadLength * BeginArrowheadLength ) = 0;
    virtual HRESULT __stdcall put_BeginArrowheadLength (
        enum MsoArrowheadLength BeginArrowheadLength ) = 0;
    virtual HRESULT __stdcall get_BeginArrowheadStyle (
        enum MsoArrowheadStyle * BeginArrowheadStyle ) = 0;
    virtual HRESULT __stdcall put_BeginArrowheadStyle (
        enum MsoArrowheadStyle BeginArrowheadStyle ) = 0;
    virtual HRESULT __stdcall get_BeginArrowheadWidth (
        enum MsoArrowheadWidth * BeginArrowheadWidth ) = 0;
    virtual HRESULT __stdcall put_BeginArrowheadWidth (
        enum MsoArrowheadWidth BeginArrowheadWidth ) = 0;
    virtual HRESULT __stdcall get_DashStyle (
        enum MsoLineDashStyle * DashStyle ) = 0;
    virtual HRESULT __stdcall put_DashStyle (
        enum MsoLineDashStyle DashStyle ) = 0;
    virtual HRESULT __stdcall get_EndArrowheadLength (
        enum MsoArrowheadLength * EndArrowheadLength ) = 0;
    virtual HRESULT __stdcall put_EndArrowheadLength (
        enum MsoArrowheadLength EndArrowheadLength ) = 0;
    virtual HRESULT __stdcall get_EndArrowheadStyle (
        enum MsoArrowheadStyle * EndArrowheadStyle ) = 0;
    virtual HRESULT __stdcall put_EndArrowheadStyle (
        enum MsoArrowheadStyle EndArrowheadStyle ) = 0;
    virtual HRESULT __stdcall get_EndArrowheadWidth (
        enum MsoArrowheadWidth * EndArrowheadWidth ) = 0;
    virtual HRESULT __stdcall put_EndArrowheadWidth (
        enum MsoArrowheadWidth EndArrowheadWidth ) = 0;
    virtual HRESULT __stdcall get_ForeColor (
        struct ColorFormat * * ForeColor ) = 0;
    virtual HRESULT __stdcall put_ForeColor (
        struct ColorFormat * ForeColor ) = 0;
    virtual HRESULT __stdcall get_Pattern (
        enum MsoPatternType * Pattern ) = 0;
    virtual HRESULT __stdcall put_Pattern (
        enum MsoPatternType Pattern ) = 0;
    virtual HRESULT __stdcall get_Style (
        enum MsoLineStyle * Style ) = 0;
    virtual HRESULT __stdcall put_Style (
        enum MsoLineStyle Style ) = 0;
    virtual HRESULT __stdcall get_Transparency (
        float * Transparency ) = 0;
    virtual HRESULT __stdcall put_Transparency (
        float Transparency ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum MsoTriState * Visible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum MsoTriState Visible ) = 0;
    virtual HRESULT __stdcall get_Weight (
        float * Weight ) = 0;
    virtual HRESULT __stdcall put_Weight (
        float Weight ) = 0;
};

struct __declspec(uuid("000c0318-0000-0000-c000-000000000046"))
ShapeNode : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEditingType))
    enum MsoEditingType EditingType;
    __declspec(property(get=GetPoints))
    _variant_t Points;
    __declspec(property(get=GetSegmentType))
    enum MsoSegmentType SegmentType;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    enum MsoEditingType GetEditingType ( );
    _variant_t GetPoints ( );
    enum MsoSegmentType GetSegmentType ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_EditingType (
        enum MsoEditingType * EditingType ) = 0;
    virtual HRESULT __stdcall get_Points (
        VARIANT * Points ) = 0;
    virtual HRESULT __stdcall get_SegmentType (
        enum MsoSegmentType * SegmentType ) = 0;
};

struct __declspec(uuid("000c0319-0000-0000-c000-000000000046"))
ShapeNodes : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapeNodePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete (
        int Index );
    HRESULT Insert (
        int Index,
        enum MsoSegmentType SegmentType,
        enum MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    HRESULT SetEditingType (
        int Index,
        enum MsoEditingType EditingType );
    HRESULT SetPosition (
        int Index,
        float X1,
        float Y1 );
    HRESULT SetSegmentType (
        int Index,
        enum MsoSegmentType SegmentType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * Count ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct ShapeNode * * Item ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * _NewEnum ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        int Index ) = 0;
    virtual HRESULT __stdcall raw_Insert (
        int Index,
        enum MsoSegmentType SegmentType,
        enum MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 ) = 0;
    virtual HRESULT __stdcall raw_SetEditingType (
        int Index,
        enum MsoEditingType EditingType ) = 0;
    virtual HRESULT __stdcall raw_SetPosition (
        int Index,
        float X1,
        float Y1 ) = 0;
    virtual HRESULT __stdcall raw_SetSegmentType (
        int Index,
        enum MsoSegmentType SegmentType ) = 0;
};

struct __declspec(uuid("000c031a-0000-0000-c000-000000000046"))
PictureFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetColorType,put=PutColorType))
    enum MsoPictureColorType ColorType;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetTransparencyColor,put=PutTransparencyColor))
    MsoRGBType TransparencyColor;
    __declspec(property(get=GetTransparentBackground,put=PutTransparentBackground))
    enum MsoTriState TransparentBackground;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementBrightness (
        float Increment );
    HRESULT IncrementContrast (
        float Increment );
    float GetBrightness ( );
    void PutBrightness (
        float Brightness );
    enum MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum MsoPictureColorType ColorType );
    float GetContrast ( );
    void PutContrast (
        float Contrast );
    float GetCropBottom ( );
    void PutCropBottom (
        float CropBottom );
    float GetCropLeft ( );
    void PutCropLeft (
        float CropLeft );
    float GetCropRight ( );
    void PutCropRight (
        float CropRight );
    float GetCropTop ( );
    void PutCropTop (
        float CropTop );
    MsoRGBType GetTransparencyColor ( );
    void PutTransparencyColor (
        MsoRGBType TransparencyColor );
    enum MsoTriState GetTransparentBackground ( );
    void PutTransparentBackground (
        enum MsoTriState TransparentBackground );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_IncrementBrightness (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementContrast (
        float Increment ) = 0;
    virtual HRESULT __stdcall get_Brightness (
        float * Brightness ) = 0;
    virtual HRESULT __stdcall put_Brightness (
        float Brightness ) = 0;
    virtual HRESULT __stdcall get_ColorType (
        enum MsoPictureColorType * ColorType ) = 0;
    virtual HRESULT __stdcall put_ColorType (
        enum MsoPictureColorType ColorType ) = 0;
    virtual HRESULT __stdcall get_Contrast (
        float * Contrast ) = 0;
    virtual HRESULT __stdcall put_Contrast (
        float Contrast ) = 0;
    virtual HRESULT __stdcall get_CropBottom (
        float * CropBottom ) = 0;
    virtual HRESULT __stdcall put_CropBottom (
        float CropBottom ) = 0;
    virtual HRESULT __stdcall get_CropLeft (
        float * CropLeft ) = 0;
    virtual HRESULT __stdcall put_CropLeft (
        float CropLeft ) = 0;
    virtual HRESULT __stdcall get_CropRight (
        float * CropRight ) = 0;
    virtual HRESULT __stdcall put_CropRight (
        float CropRight ) = 0;
    virtual HRESULT __stdcall get_CropTop (
        float * CropTop ) = 0;
    virtual HRESULT __stdcall put_CropTop (
        float CropTop ) = 0;
    virtual HRESULT __stdcall get_TransparencyColor (
        MsoRGBType * TransparencyColor ) = 0;
    virtual HRESULT __stdcall put_TransparencyColor (
        MsoRGBType TransparencyColor ) = 0;
    virtual HRESULT __stdcall get_TransparentBackground (
        enum MsoTriState * TransparentBackground ) = 0;
    virtual HRESULT __stdcall put_TransparentBackground (
        enum MsoTriState TransparentBackground ) = 0;
};

struct __declspec(uuid("000c031b-0000-0000-c000-000000000046"))
ShadowFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetObscured,put=PutObscured))
    enum MsoTriState Obscured;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    float OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    float OffsetY;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType,put=PutType))
    enum MsoShadowType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum MsoTriState Visible;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementOffsetX (
        float Increment );
    HRESULT IncrementOffsetY (
        float Increment );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum MsoTriState GetObscured ( );
    void PutObscured (
        enum MsoTriState Obscured );
    float GetOffsetX ( );
    void PutOffsetX (
        float OffsetX );
    float GetOffsetY ( );
    void PutOffsetY (
        float OffsetY );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum MsoShadowType GetType ( );
    void PutType (
        enum MsoShadowType Type );
    enum MsoTriState GetVisible ( );
    void PutVisible (
        enum MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_IncrementOffsetX (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementOffsetY (
        float Increment ) = 0;
    virtual HRESULT __stdcall get_ForeColor (
        struct ColorFormat * * ForeColor ) = 0;
    virtual HRESULT __stdcall put_ForeColor (
        struct ColorFormat * ForeColor ) = 0;
    virtual HRESULT __stdcall get_Obscured (
        enum MsoTriState * Obscured ) = 0;
    virtual HRESULT __stdcall put_Obscured (
        enum MsoTriState Obscured ) = 0;
    virtual HRESULT __stdcall get_OffsetX (
        float * OffsetX ) = 0;
    virtual HRESULT __stdcall put_OffsetX (
        float OffsetX ) = 0;
    virtual HRESULT __stdcall get_OffsetY (
        float * OffsetY ) = 0;
    virtual HRESULT __stdcall put_OffsetY (
        float OffsetY ) = 0;
    virtual HRESULT __stdcall get_Transparency (
        float * Transparency ) = 0;
    virtual HRESULT __stdcall put_Transparency (
        float Transparency ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum MsoShadowType * Type ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum MsoShadowType Type ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum MsoTriState * Visible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum MsoTriState Visible ) = 0;
};

enum MsoScriptLanguage
{
    msoScriptLanguageJava = 1,
    msoScriptLanguageVisualBasic = 2,
    msoScriptLanguageASP = 3,
    msoScriptLanguageOther = 4
};

enum MsoScriptLocation
{
    msoScriptLocationInHead = 1,
    msoScriptLocationInBody = 2
};

struct __declspec(uuid("000c0341-0000-0000-c000-000000000046"))
Script : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetExtended,put=PutExtended))
    _bstr_t Extended;
    __declspec(property(get=GetScriptText,put=PutScriptText))
    _bstr_t ScriptText;
    __declspec(property(get=GetId,put=PutId))
    _bstr_t Id;
    __declspec(property(get=GetLanguage,put=PutLanguage))
    enum MsoScriptLanguage Language;
    __declspec(property(get=GetLocation))
    enum MsoScriptLocation Location;
    __declspec(property(get=GetShape))
    IDispatchPtr Shape;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetExtended ( );
    void PutExtended (
        _bstr_t Extended );
    _bstr_t GetId ( );
    void PutId (
        _bstr_t Id );
    enum MsoScriptLanguage GetLanguage ( );
    void PutLanguage (
        enum MsoScriptLanguage Language );
    enum MsoScriptLocation GetLocation ( );
    HRESULT Delete ( );
    IDispatchPtr GetShape ( );
    _bstr_t GetScriptText ( );
    void PutScriptText (
        _bstr_t Script );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_Extended (
        BSTR * Extended ) = 0;
    virtual HRESULT __stdcall put_Extended (
        BSTR Extended ) = 0;
    virtual HRESULT __stdcall get_Id (
        BSTR * Id ) = 0;
    virtual HRESULT __stdcall put_Id (
        BSTR Id ) = 0;
    virtual HRESULT __stdcall get_Language (
        enum MsoScriptLanguage * Language ) = 0;
    virtual HRESULT __stdcall put_Language (
        enum MsoScriptLanguage Language ) = 0;
    virtual HRESULT __stdcall get_Location (
        enum MsoScriptLocation * Location ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_Shape (
        IDispatch * * Object ) = 0;
    virtual HRESULT __stdcall get_ScriptText (
        BSTR * Script ) = 0;
    virtual HRESULT __stdcall put_ScriptText (
        BSTR Script ) = 0;
};

struct __declspec(uuid("000c0340-0000-0000-c000-000000000046"))
Scripts : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    ScriptPtr Item (
        const _variant_t & Index );
    ScriptPtr Add (
        IDispatch * Anchor,
        enum MsoScriptLocation Location,
        enum MsoScriptLanguage Language,
        _bstr_t Id,
        _bstr_t Extended,
        _bstr_t ScriptText );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * _NewEnum ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct Script * * Item ) = 0;
    virtual HRESULT __stdcall raw_Add (
        IDispatch * Anchor,
        enum MsoScriptLocation Location,
        enum MsoScriptLanguage Language,
        BSTR Id,
        BSTR Extended,
        BSTR ScriptText,
        struct Script * * Add ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("000c031c-0000-0000-c000-000000000046"))
Shape : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetType))
    enum MsoShapeType Type;
    __declspec(property(get=GetVerticalFlip))
    enum MsoTriState VerticalFlip;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum MsoTriState Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=GetScript))
    ScriptPtr Script;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetAutoShapeType,put=PutAutoShapeType))
    enum MsoAutoShapeType AutoShapeType;
    __declspec(property(get=GetBlackWhiteMode,put=PutBlackWhiteMode))
    enum MsoBlackWhiteMode BlackWhiteMode;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    int ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHorizontalFlip))
    enum MsoTriState HorizontalFlip;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    enum MsoTriState LockAspectRatio;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    ShapePtr Duplicate ( );
    HRESULT Flip (
        enum MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum MsoTriState RelativeToOriginalSize,
        enum MsoScaleFrom fScale );
    HRESULT ScaleWidth (
        float Factor,
        enum MsoTriState RelativeToOriginalSize,
        enum MsoScaleFrom fScale );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    enum MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum MsoAutoShapeType AutoShapeType );
    enum MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum MsoBlackWhiteMode BlackWhiteMode );
    CalloutFormatPtr GetCallout ( );
    int GetConnectionSiteCount ( );
    enum MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float Height );
    enum MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    LineFormatPtr GetLine ( );
    enum MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum MsoTriState LockAspectRatio );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float Rotation );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    TextFramePtr GetTextFrame ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float Top );
    enum MsoShapeType GetType ( );
    enum MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum MsoTriState GetVisible ( );
    void PutVisible (
        enum MsoTriState Visible );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    ScriptPtr GetScript ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t AlternativeText );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_Apply ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        struct Shape * * Duplicate ) = 0;
    virtual HRESULT __stdcall raw_Flip (
        enum MsoFlipCmd FlipCmd ) = 0;
    virtual HRESULT __stdcall raw_IncrementLeft (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementRotation (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementTop (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_PickUp ( ) = 0;
    virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
    virtual HRESULT __stdcall raw_ScaleHeight (
        float Factor,
        enum MsoTriState RelativeToOriginalSize,
        enum MsoScaleFrom fScale ) = 0;
    virtual HRESULT __stdcall raw_ScaleWidth (
        float Factor,
        enum MsoTriState RelativeToOriginalSize,
        enum MsoScaleFrom fScale ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
    virtual HRESULT __stdcall raw_Ungroup (
        struct ShapeRange * * Ungroup ) = 0;
    virtual HRESULT __stdcall raw_ZOrder (
        enum MsoZOrderCmd ZOrderCmd ) = 0;
    virtual HRESULT __stdcall get_Adjustments (
        struct Adjustments * * Adjustments ) = 0;
    virtual HRESULT __stdcall get_AutoShapeType (
        enum MsoAutoShapeType * AutoShapeType ) = 0;
    virtual HRESULT __stdcall put_AutoShapeType (
        enum MsoAutoShapeType AutoShapeType ) = 0;
    virtual HRESULT __stdcall get_BlackWhiteMode (
        enum MsoBlackWhiteMode * BlackWhiteMode ) = 0;
    virtual HRESULT __stdcall put_BlackWhiteMode (
        enum MsoBlackWhiteMode BlackWhiteMode ) = 0;
    virtual HRESULT __stdcall get_Callout (
        struct CalloutFormat * * Callout ) = 0;
    virtual HRESULT __stdcall get_ConnectionSiteCount (
        int * ConnectionSiteCount ) = 0;
    virtual HRESULT __stdcall get_Connector (
        enum MsoTriState * Connector ) = 0;
    virtual HRESULT __stdcall get_ConnectorFormat (
        struct ConnectorFormat * * ConnectorFormat ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct FillFormat * * Fill ) = 0;
    virtual HRESULT __stdcall get_GroupItems (
        struct GroupShapes * * GroupItems ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * Height ) = 0;
    virtual HRESULT __stdcall put_Height (
        float Height ) = 0;
    virtual HRESULT __stdcall get_HorizontalFlip (
        enum MsoTriState * HorizontalFlip ) = 0;
    virtual HRESULT __stdcall get_Left (
        float * Left ) = 0;
    virtual HRESULT __stdcall put_Left (
        float Left ) = 0;
    virtual HRESULT __stdcall get_Line (
        struct LineFormat * * Line ) = 0;
    virtual HRESULT __stdcall get_LockAspectRatio (
        enum MsoTriState * LockAspectRatio ) = 0;
    virtual HRESULT __stdcall put_LockAspectRatio (
        enum MsoTriState LockAspectRatio ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall get_Nodes (
        struct ShapeNodes * * Nodes ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        float * Rotation ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        float Rotation ) = 0;
    virtual HRESULT __stdcall get_PictureFormat (
        struct PictureFormat * * Picture ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        struct ShadowFormat * * Shadow ) = 0;
    virtual HRESULT __stdcall get_TextEffect (
        struct TextEffectFormat * * TextEffect ) = 0;
    virtual HRESULT __stdcall get_TextFrame (
        struct TextFrame * * TextFrame ) = 0;
    virtual HRESULT __stdcall get_ThreeD (
        struct ThreeDFormat * * ThreeD ) = 0;
    virtual HRESULT __stdcall get_Top (
        float * Top ) = 0;
    virtual HRESULT __stdcall put_Top (
        float Top ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum MsoShapeType * Type ) = 0;
    virtual HRESULT __stdcall get_VerticalFlip (
        enum MsoTriState * VerticalFlip ) = 0;
    virtual HRESULT __stdcall get_Vertices (
        VARIANT * Vertices ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum MsoTriState * Visible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum MsoTriState Visible ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * Width ) = 0;
    virtual HRESULT __stdcall put_Width (
        float Width ) = 0;
    virtual HRESULT __stdcall get_ZOrderPosition (
        int * ZOrderPosition ) = 0;
    virtual HRESULT __stdcall get_Script (
        struct Script * * Script ) = 0;
    virtual HRESULT __stdcall get_AlternativeText (
        BSTR * AlternativeText ) = 0;
    virtual HRESULT __stdcall put_AlternativeText (
        BSTR AlternativeText ) = 0;
};

struct __declspec(uuid("000c031d-0000-0000-c000-000000000046"))
ShapeRange : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetType))
    enum MsoShapeType Type;
    __declspec(property(get=GetVerticalFlip))
    enum MsoTriState VerticalFlip;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum MsoTriState Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetScript))
    ScriptPtr Script;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetAutoShapeType,put=PutAutoShapeType))
    enum MsoAutoShapeType AutoShapeType;
    __declspec(property(get=GetBlackWhiteMode,put=PutBlackWhiteMode))
    enum MsoBlackWhiteMode BlackWhiteMode;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    int ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHorizontalFlip))
    enum MsoTriState HorizontalFlip;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    enum MsoTriState LockAspectRatio;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Align (
        enum MsoAlignCmd AlignCmd,
        enum MsoTriState RelativeTo );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Distribute (
        enum MsoDistributeCmd DistributeCmd,
        enum MsoTriState RelativeTo );
    ShapeRangePtr Duplicate ( );
    HRESULT Flip (
        enum MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    ShapePtr Group ( );
    HRESULT PickUp ( );
    ShapePtr Regroup ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum MsoTriState RelativeToOriginalSize,
        enum MsoScaleFrom fScale );
    HRESULT ScaleWidth (
        float Factor,
        enum MsoTriState RelativeToOriginalSize,
        enum MsoScaleFrom fScale );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    enum MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum MsoAutoShapeType AutoShapeType );
    enum MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum MsoBlackWhiteMode BlackWhiteMode );
    CalloutFormatPtr GetCallout ( );
    int GetConnectionSiteCount ( );
    enum MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float Height );
    enum MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    LineFormatPtr GetLine ( );
    enum MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum MsoTriState LockAspectRatio );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float Rotation );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    TextFramePtr GetTextFrame ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float Top );
    enum MsoShapeType GetType ( );
    enum MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum MsoTriState GetVisible ( );
    void PutVisible (
        enum MsoTriState Visible );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    ScriptPtr GetScript ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t AlternativeText );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * Count ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct Shape * * Item ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * _NewEnum ) = 0;
    virtual HRESULT __stdcall raw_Align (
        enum MsoAlignCmd AlignCmd,
        enum MsoTriState RelativeTo ) = 0;
    virtual HRESULT __stdcall raw_Apply ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Distribute (
        enum MsoDistributeCmd DistributeCmd,
        enum MsoTriState RelativeTo ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        struct ShapeRange * * Duplicate ) = 0;
    virtual HRESULT __stdcall raw_Flip (
        enum MsoFlipCmd FlipCmd ) = 0;
    virtual HRESULT __stdcall raw_IncrementLeft (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementRotation (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementTop (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct Shape * * Group ) = 0;
    virtual HRESULT __stdcall raw_PickUp ( ) = 0;
    virtual HRESULT __stdcall raw_Regroup (
        struct Shape * * Regroup ) = 0;
    virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
    virtual HRESULT __stdcall raw_ScaleHeight (
        float Factor,
        enum MsoTriState RelativeToOriginalSize,
        enum MsoScaleFrom fScale ) = 0;
    virtual HRESULT __stdcall raw_ScaleWidth (
        float Factor,
        enum MsoTriState RelativeToOriginalSize,
        enum MsoScaleFrom fScale ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
    virtual HRESULT __stdcall raw_Ungroup (
        struct ShapeRange * * Ungroup ) = 0;
    virtual HRESULT __stdcall raw_ZOrder (
        enum MsoZOrderCmd ZOrderCmd ) = 0;
    virtual HRESULT __stdcall get_Adjustments (
        struct Adjustments * * Adjustments ) = 0;
    virtual HRESULT __stdcall get_AutoShapeType (
        enum MsoAutoShapeType * AutoShapeType ) = 0;
    virtual HRESULT __stdcall put_AutoShapeType (
        enum MsoAutoShapeType AutoShapeType ) = 0;
    virtual HRESULT __stdcall get_BlackWhiteMode (
        enum MsoBlackWhiteMode * BlackWhiteMode ) = 0;
    virtual HRESULT __stdcall put_BlackWhiteMode (
        enum MsoBlackWhiteMode BlackWhiteMode ) = 0;
    virtual HRESULT __stdcall get_Callout (
        struct CalloutFormat * * Callout ) = 0;
    virtual HRESULT __stdcall get_ConnectionSiteCount (
        int * ConnectionSiteCount ) = 0;
    virtual HRESULT __stdcall get_Connector (
        enum MsoTriState * Connector ) = 0;
    virtual HRESULT __stdcall get_ConnectorFormat (
        struct ConnectorFormat * * ConnectorFormat ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct FillFormat * * Fill ) = 0;
    virtual HRESULT __stdcall get_GroupItems (
        struct GroupShapes * * GroupItems ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * Height ) = 0;
    virtual HRESULT __stdcall put_Height (
        float Height ) = 0;
    virtual HRESULT __stdcall get_HorizontalFlip (
        enum MsoTriState * HorizontalFlip ) = 0;
    virtual HRESULT __stdcall get_Left (
        float * Left ) = 0;
    virtual HRESULT __stdcall put_Left (
        float Left ) = 0;
    virtual HRESULT __stdcall get_Line (
        struct LineFormat * * Line ) = 0;
    virtual HRESULT __stdcall get_LockAspectRatio (
        enum MsoTriState * LockAspectRatio ) = 0;
    virtual HRESULT __stdcall put_LockAspectRatio (
        enum MsoTriState LockAspectRatio ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall get_Nodes (
        struct ShapeNodes * * Nodes ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        float * Rotation ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        float Rotation ) = 0;
    virtual HRESULT __stdcall get_PictureFormat (
        struct PictureFormat * * Picture ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        struct ShadowFormat * * Shadow ) = 0;
    virtual HRESULT __stdcall get_TextEffect (
        struct TextEffectFormat * * TextEffect ) = 0;
    virtual HRESULT __stdcall get_TextFrame (
        struct TextFrame * * TextFrame ) = 0;
    virtual HRESULT __stdcall get_ThreeD (
        struct ThreeDFormat * * ThreeD ) = 0;
    virtual HRESULT __stdcall get_Top (
        float * Top ) = 0;
    virtual HRESULT __stdcall put_Top (
        float Top ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum MsoShapeType * Type ) = 0;
    virtual HRESULT __stdcall get_VerticalFlip (
        enum MsoTriState * VerticalFlip ) = 0;
    virtual HRESULT __stdcall get_Vertices (
        VARIANT * Vertices ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum MsoTriState * Visible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum MsoTriState Visible ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * Width ) = 0;
    virtual HRESULT __stdcall put_Width (
        float Width ) = 0;
    virtual HRESULT __stdcall get_ZOrderPosition (
        int * ZOrderPosition ) = 0;
    virtual HRESULT __stdcall get_Script (
        struct Script * * Script ) = 0;
    virtual HRESULT __stdcall get_AlternativeText (
        BSTR * AlternativeText ) = 0;
    virtual HRESULT __stdcall put_AlternativeText (
        BSTR AlternativeText ) = 0;
};

struct __declspec(uuid("000c031e-0000-0000-c000-000000000046"))
Shapes : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetBackground))
    ShapePtr Background;
    __declspec(property(get=GetDefault))
    ShapePtr Default;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t FileName,
        enum MsoTriState LinkToFile,
        enum MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum MsoTriState FontBold,
        enum MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr Range (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr GetBackground ( );
    ShapePtr GetDefault ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * Count ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct Shape * * Item ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * _NewEnum ) = 0;
    virtual HRESULT __stdcall raw_AddCallout (
        enum MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height,
        struct Shape * * Callout ) = 0;
    virtual HRESULT __stdcall raw_AddConnector (
        enum MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY,
        struct Shape * * Connector ) = 0;
    virtual HRESULT __stdcall raw_AddCurve (
        VARIANT SafeArrayOfPoints,
        struct Shape * * Curve ) = 0;
    virtual HRESULT __stdcall raw_AddLabel (
        enum MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height,
        struct Shape * * Label ) = 0;
    virtual HRESULT __stdcall raw_AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY,
        struct Shape * * Line ) = 0;
    virtual HRESULT __stdcall raw_AddPicture (
        BSTR FileName,
        enum MsoTriState LinkToFile,
        enum MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height,
        struct Shape * * Picture ) = 0;
    virtual HRESULT __stdcall raw_AddPolyline (
        VARIANT SafeArrayOfPoints,
        struct Shape * * Polyline ) = 0;
    virtual HRESULT __stdcall raw_AddShape (
        enum MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height,
        struct Shape * * Shape ) = 0;
    virtual HRESULT __stdcall raw_AddTextEffect (
        enum MsoPresetTextEffect PresetTextEffect,
        BSTR Text,
        BSTR FontName,
        float FontSize,
        enum MsoTriState FontBold,
        enum MsoTriState FontItalic,
        float Left,
        float Top,
        struct Shape * * TextEffect ) = 0;
    virtual HRESULT __stdcall raw_AddTextbox (
        enum MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height,
        struct Shape * * Textbox ) = 0;
    virtual HRESULT __stdcall raw_BuildFreeform (
        enum MsoEditingType EditingType,
        float X1,
        float Y1,
        struct FreeformBuilder * * FreeformBuilder ) = 0;
    virtual HRESULT __stdcall raw_Range (
        VARIANT Index,
        struct ShapeRange * * Range ) = 0;
    virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
    virtual HRESULT __stdcall get_Background (
        struct Shape * * Background ) = 0;
    virtual HRESULT __stdcall get_Default (
        struct Shape * * Default ) = 0;
};

struct __declspec(uuid("000c031f-0000-0000-c000-000000000046"))
TextEffectFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum MsoTextEffectAlignment Alignment;
    __declspec(property(get=GetFontBold,put=PutFontBold))
    enum MsoTriState FontBold;
    __declspec(property(get=GetFontItalic,put=PutFontItalic))
    enum MsoTriState FontItalic;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    float FontSize;
    __declspec(property(get=GetKernedPairs,put=PutKernedPairs))
    enum MsoTriState KernedPairs;
    __declspec(property(get=GetNormalizedHeight,put=PutNormalizedHeight))
    enum MsoTriState NormalizedHeight;
    __declspec(property(get=GetPresetShape,put=PutPresetShape))
    enum MsoPresetTextEffectShape PresetShape;
    __declspec(property(get=GetPresetTextEffect,put=PutPresetTextEffect))
    enum MsoPresetTextEffect PresetTextEffect;
    __declspec(property(get=GetRotatedChars,put=PutRotatedChars))
    enum MsoTriState RotatedChars;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTracking,put=PutTracking))
    float Tracking;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT ToggleVerticalText ( );
    enum MsoTextEffectAlignment GetAlignment ( );
    void PutAlignment (
        enum MsoTextEffectAlignment Alignment );
    enum MsoTriState GetFontBold ( );
    void PutFontBold (
        enum MsoTriState FontBold );
    enum MsoTriState GetFontItalic ( );
    void PutFontItalic (
        enum MsoTriState FontItalic );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t FontName );
    float GetFontSize ( );
    void PutFontSize (
        float FontSize );
    enum MsoTriState GetKernedPairs ( );
    void PutKernedPairs (
        enum MsoTriState KernedPairs );
    enum MsoTriState GetNormalizedHeight ( );
    void PutNormalizedHeight (
        enum MsoTriState NormalizedHeight );
    enum MsoPresetTextEffectShape GetPresetShape ( );
    void PutPresetShape (
        enum MsoPresetTextEffectShape PresetShape );
    enum MsoPresetTextEffect GetPresetTextEffect ( );
    void PutPresetTextEffect (
        enum MsoPresetTextEffect Preset );
    enum MsoTriState GetRotatedChars ( );
    void PutRotatedChars (
        enum MsoTriState RotatedChars );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    float GetTracking ( );
    void PutTracking (
        float Tracking );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_ToggleVerticalText ( ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum MsoTextEffectAlignment * Alignment ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum MsoTextEffectAlignment Alignment ) = 0;
    virtual HRESULT __stdcall get_FontBold (
        enum MsoTriState * FontBold ) = 0;
    virtual HRESULT __stdcall put_FontBold (
        enum MsoTriState FontBold ) = 0;
    virtual HRESULT __stdcall get_FontItalic (
        enum MsoTriState * FontItalic ) = 0;
    virtual HRESULT __stdcall put_FontItalic (
        enum MsoTriState FontItalic ) = 0;
    virtual HRESULT __stdcall get_FontName (
        BSTR * FontName ) = 0;
    virtual HRESULT __stdcall put_FontName (
        BSTR FontName ) = 0;
    virtual HRESULT __stdcall get_FontSize (
        float * FontSize ) = 0;
    virtual HRESULT __stdcall put_FontSize (
        float FontSize ) = 0;
    virtual HRESULT __stdcall get_KernedPairs (
        enum MsoTriState * KernedPairs ) = 0;
    virtual HRESULT __stdcall put_KernedPairs (
        enum MsoTriState KernedPairs ) = 0;
    virtual HRESULT __stdcall get_NormalizedHeight (
        enum MsoTriState * NormalizedHeight ) = 0;
    virtual HRESULT __stdcall put_NormalizedHeight (
        enum MsoTriState NormalizedHeight ) = 0;
    virtual HRESULT __stdcall get_PresetShape (
        enum MsoPresetTextEffectShape * PresetShape ) = 0;
    virtual HRESULT __stdcall put_PresetShape (
        enum MsoPresetTextEffectShape PresetShape ) = 0;
    virtual HRESULT __stdcall get_PresetTextEffect (
        enum MsoPresetTextEffect * Preset ) = 0;
    virtual HRESULT __stdcall put_PresetTextEffect (
        enum MsoPresetTextEffect Preset ) = 0;
    virtual HRESULT __stdcall get_RotatedChars (
        enum MsoTriState * RotatedChars ) = 0;
    virtual HRESULT __stdcall put_RotatedChars (
        enum MsoTriState RotatedChars ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * Text ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR Text ) = 0;
    virtual HRESULT __stdcall get_Tracking (
        float * Tracking ) = 0;
    virtual HRESULT __stdcall put_Tracking (
        float Tracking ) = 0;
};

struct __declspec(uuid("000c0320-0000-0000-c000-000000000046"))
TextFrame : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum MsoTextOrientation Orientation;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float MarginBottom );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float MarginLeft );
    float GetMarginRight ( );
    void PutMarginRight (
        float MarginRight );
    float GetMarginTop ( );
    void PutMarginTop (
        float MarginTop );
    enum MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum MsoTextOrientation Orientation );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_MarginBottom (
        float * MarginBottom ) = 0;
    virtual HRESULT __stdcall put_MarginBottom (
        float MarginBottom ) = 0;
    virtual HRESULT __stdcall get_MarginLeft (
        float * MarginLeft ) = 0;
    virtual HRESULT __stdcall put_MarginLeft (
        float MarginLeft ) = 0;
    virtual HRESULT __stdcall get_MarginRight (
        float * MarginRight ) = 0;
    virtual HRESULT __stdcall put_MarginRight (
        float MarginRight ) = 0;
    virtual HRESULT __stdcall get_MarginTop (
        float * MarginTop ) = 0;
    virtual HRESULT __stdcall put_MarginTop (
        float MarginTop ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        enum MsoTextOrientation * Orientation ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        enum MsoTextOrientation Orientation ) = 0;
};

struct __declspec(uuid("000c0321-0000-0000-c000-000000000046"))
ThreeDFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDepth,put=PutDepth))
    float Depth;
    __declspec(property(get=GetExtrusionColor))
    ColorFormatPtr ExtrusionColor;
    __declspec(property(get=GetExtrusionColorType,put=PutExtrusionColorType))
    enum MsoExtrusionColorType ExtrusionColorType;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    enum MsoTriState Perspective;
    __declspec(property(get=GetPresetExtrusionDirection))
    enum MsoPresetExtrusionDirection PresetExtrusionDirection;
    __declspec(property(get=GetPresetLightingDirection,put=PutPresetLightingDirection))
    enum MsoPresetLightingDirection PresetLightingDirection;
    __declspec(property(get=GetPresetLightingSoftness,put=PutPresetLightingSoftness))
    enum MsoPresetLightingSoftness PresetLightingSoftness;
    __declspec(property(get=GetPresetMaterial,put=PutPresetMaterial))
    enum MsoPresetMaterial PresetMaterial;
    __declspec(property(get=GetPresetThreeDFormat))
    enum MsoPresetThreeDFormat PresetThreeDFormat;
    __declspec(property(get=GetRotationX,put=PutRotationX))
    float RotationX;
    __declspec(property(get=GetRotationY,put=PutRotationY))
    float RotationY;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum MsoTriState Visible;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementRotationX (
        float Increment );
    HRESULT IncrementRotationY (
        float Increment );
    HRESULT ResetRotation ( );
    HRESULT SetThreeDFormat (
        enum MsoPresetThreeDFormat PresetThreeDFormat );
    HRESULT SetExtrusionDirection (
        enum MsoPresetExtrusionDirection PresetExtrusionDirection );
    float GetDepth ( );
    void PutDepth (
        float Depth );
    ColorFormatPtr GetExtrusionColor ( );
    enum MsoExtrusionColorType GetExtrusionColorType ( );
    void PutExtrusionColorType (
        enum MsoExtrusionColorType ExtrusionColorType );
    enum MsoTriState GetPerspective ( );
    void PutPerspective (
        enum MsoTriState Perspective );
    enum MsoPresetExtrusionDirection GetPresetExtrusionDirection ( );
    enum MsoPresetLightingDirection GetPresetLightingDirection ( );
    void PutPresetLightingDirection (
        enum MsoPresetLightingDirection PresetLightingDirection );
    enum MsoPresetLightingSoftness GetPresetLightingSoftness ( );
    void PutPresetLightingSoftness (
        enum MsoPresetLightingSoftness PresetLightingSoftness );
    enum MsoPresetMaterial GetPresetMaterial ( );
    void PutPresetMaterial (
        enum MsoPresetMaterial PresetMaterial );
    enum MsoPresetThreeDFormat GetPresetThreeDFormat ( );
    float GetRotationX ( );
    void PutRotationX (
        float RotationX );
    float GetRotationY ( );
    void PutRotationY (
        float RotationY );
    enum MsoTriState GetVisible ( );
    void PutVisible (
        enum MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_IncrementRotationX (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementRotationY (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_ResetRotation ( ) = 0;
    virtual HRESULT __stdcall raw_SetThreeDFormat (
        enum MsoPresetThreeDFormat PresetThreeDFormat ) = 0;
    virtual HRESULT __stdcall raw_SetExtrusionDirection (
        enum MsoPresetExtrusionDirection PresetExtrusionDirection ) = 0;
    virtual HRESULT __stdcall get_Depth (
        float * Depth ) = 0;
    virtual HRESULT __stdcall put_Depth (
        float Depth ) = 0;
    virtual HRESULT __stdcall get_ExtrusionColor (
        struct ColorFormat * * ExtrusionColor ) = 0;
    virtual HRESULT __stdcall get_ExtrusionColorType (
        enum MsoExtrusionColorType * ExtrusionColorType ) = 0;
    virtual HRESULT __stdcall put_ExtrusionColorType (
        enum MsoExtrusionColorType ExtrusionColorType ) = 0;
    virtual HRESULT __stdcall get_Perspective (
        enum MsoTriState * Perspective ) = 0;
    virtual HRESULT __stdcall put_Perspective (
        enum MsoTriState Perspective ) = 0;
    virtual HRESULT __stdcall get_PresetExtrusionDirection (
        enum MsoPresetExtrusionDirection * PresetExtrusionDirection ) = 0;
    virtual HRESULT __stdcall get_PresetLightingDirection (
        enum MsoPresetLightingDirection * PresetLightingDirection ) = 0;
    virtual HRESULT __stdcall put_PresetLightingDirection (
        enum MsoPresetLightingDirection PresetLightingDirection ) = 0;
    virtual HRESULT __stdcall get_PresetLightingSoftness (
        enum MsoPresetLightingSoftness * PresetLightingSoftness ) = 0;
    virtual HRESULT __stdcall put_PresetLightingSoftness (
        enum MsoPresetLightingSoftness PresetLightingSoftness ) = 0;
    virtual HRESULT __stdcall get_PresetMaterial (
        enum MsoPresetMaterial * PresetMaterial ) = 0;
    virtual HRESULT __stdcall put_PresetMaterial (
        enum MsoPresetMaterial PresetMaterial ) = 0;
    virtual HRESULT __stdcall get_PresetThreeDFormat (
        enum MsoPresetThreeDFormat * PresetThreeDFormat ) = 0;
    virtual HRESULT __stdcall get_RotationX (
        float * RotationX ) = 0;
    virtual HRESULT __stdcall put_RotationX (
        float RotationX ) = 0;
    virtual HRESULT __stdcall get_RotationY (
        float * RotationY ) = 0;
    virtual HRESULT __stdcall put_RotationY (
        float RotationY ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum MsoTriState * Visible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c0359-0000-0000-c000-000000000046"))
IMsoDispCagNotifySink : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT InsertClip (
        IUnknown * pClipMoniker,
        IUnknown * pItemMoniker );
    HRESULT WindowIsClosing ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_InsertClip (
        IUnknown * pClipMoniker,
        IUnknown * pItemMoniker ) = 0;
    virtual HRESULT __stdcall raw_WindowIsClosing ( ) = 0;
};

struct __declspec(uuid("000c0324-0000-0000-c000-000000000046"))
Balloon : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCheckboxes))
    IDispatchPtr Checkboxes;
    __declspec(property(get=GetLabels))
    IDispatchPtr Labels;
    __declspec(property(get=GetBalloonType,put=PutBalloonType))
    enum MsoBalloonType BalloonType;
    __declspec(property(get=GetIcon,put=PutIcon))
    enum MsoIconType Icon;
    __declspec(property(get=GetHeading,put=PutHeading))
    _bstr_t Heading;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetMode,put=PutMode))
    enum MsoModeType Mode;
    __declspec(property(get=GetAnimation,put=PutAnimation))
    enum MsoAnimationType Animation;
    __declspec(property(get=GetButton,put=PutButton))
    enum MsoButtonSetType Button;
    __declspec(property(get=GetCallback,put=PutCallback))
    _bstr_t Callback;
    __declspec(property(get=GetPrivate,put=PutPrivate))
    long Private;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    IDispatchPtr GetCheckboxes ( );
    IDispatchPtr GetLabels ( );
    void PutBalloonType (
        enum MsoBalloonType pbty );
    enum MsoBalloonType GetBalloonType ( );
    void PutIcon (
        enum MsoIconType picn );
    enum MsoIconType GetIcon ( );
    void PutHeading (
        _bstr_t pbstr );
    _bstr_t GetHeading ( );
    void PutText (
        _bstr_t pbstr );
    _bstr_t GetText ( );
    void PutMode (
        enum MsoModeType pmd );
    enum MsoModeType GetMode ( );
    void PutAnimation (
        enum MsoAnimationType pfca );
    enum MsoAnimationType GetAnimation ( );
    void PutButton (
        enum MsoButtonSetType psbs );
    enum MsoButtonSetType GetButton ( );
    void PutCallback (
        _bstr_t pbstr );
    _bstr_t GetCallback ( );
    void PutPrivate (
        long plPrivate );
    long GetPrivate ( );
    HRESULT SetAvoidRectangle (
        int Left,
        int Top,
        int Right,
        int Bottom );
    _bstr_t GetName ( );
    enum MsoBalloonButtonType Show ( );
    HRESULT Close ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Checkboxes (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Labels (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall put_BalloonType (
        enum MsoBalloonType pbty ) = 0;
    virtual HRESULT __stdcall get_BalloonType (
        enum MsoBalloonType * pbty ) = 0;
    virtual HRESULT __stdcall put_Icon (
        enum MsoIconType picn ) = 0;
    virtual HRESULT __stdcall get_Icon (
        enum MsoIconType * picn ) = 0;
    virtual HRESULT __stdcall put_Heading (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall get_Heading (
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall put_Mode (
        enum MsoModeType pmd ) = 0;
    virtual HRESULT __stdcall get_Mode (
        enum MsoModeType * pmd ) = 0;
    virtual HRESULT __stdcall put_Animation (
        enum MsoAnimationType pfca ) = 0;
    virtual HRESULT __stdcall get_Animation (
        enum MsoAnimationType * pfca ) = 0;
    virtual HRESULT __stdcall put_Button (
        enum MsoButtonSetType psbs ) = 0;
    virtual HRESULT __stdcall get_Button (
        enum MsoButtonSetType * psbs ) = 0;
    virtual HRESULT __stdcall put_Callback (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall get_Callback (
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall put_Private (
        long plPrivate ) = 0;
    virtual HRESULT __stdcall get_Private (
        long * plPrivate ) = 0;
    virtual HRESULT __stdcall raw_SetAvoidRectangle (
        int Left,
        int Top,
        int Right,
        int Bottom ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall raw_Show (
        enum MsoBalloonButtonType * pibtn ) = 0;
    virtual HRESULT __stdcall raw_Close ( ) = 0;
};

struct __declspec(uuid("000c0326-0000-0000-c000-000000000046"))
BalloonCheckboxes : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetCount,put=PutCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetItem (
        int Index );
    int GetCount ( );
    void PutCount (
        int pccbx );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Item (
        int Index,
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * pccbx ) = 0;
    virtual HRESULT __stdcall put_Count (
        int pccbx ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppienum ) = 0;
};

struct __declspec(uuid("000c0328-0000-0000-c000-000000000046"))
BalloonCheckbox : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetItem ( );
    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    void PutChecked (
        VARIANT_BOOL pvarfChecked );
    VARIANT_BOOL GetChecked ( );
    void PutText (
        _bstr_t pbstr );
    _bstr_t GetText ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Item (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall put_Checked (
        VARIANT_BOOL pvarfChecked ) = 0;
    virtual HRESULT __stdcall get_Checked (
        VARIANT_BOOL * pvarfChecked ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * pbstr ) = 0;
};

struct __declspec(uuid("000c032e-0000-0000-c000-000000000046"))
BalloonLabels : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetCount,put=PutCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetItem (
        int Index );
    int GetCount ( );
    void PutCount (
        int pcwz );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Item (
        int Index,
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * pcwz ) = 0;
    virtual HRESULT __stdcall put_Count (
        int pcwz ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppienum ) = 0;
};

struct __declspec(uuid("000c0330-0000-0000-c000-000000000046"))
BalloonLabel : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetItem ( );
    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    void PutText (
        _bstr_t pbstr );
    _bstr_t GetText ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Item (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * pbstr ) = 0;
};

struct __declspec(uuid("000c0361-0000-0000-c000-000000000046"))
AnswerWizardFiles : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetItem (
        int Index );
    int GetCount ( );
    HRESULT Add (
        _bstr_t FileName );
    HRESULT Delete (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Item (
        int Index,
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * pCount ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR FileName ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        BSTR FileName ) = 0;
};

struct __declspec(uuid("000c0360-0000-0000-c000-000000000046"))
AnswerWizard : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFiles))
    AnswerWizardFilesPtr Files;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    AnswerWizardFilesPtr GetFiles ( );
    HRESULT ClearFileList ( );
    HRESULT ResetFileList ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Files (
        struct AnswerWizardFiles * * Files ) = 0;
    virtual HRESULT __stdcall raw_ClearFileList ( ) = 0;
    virtual HRESULT __stdcall raw_ResetFileList ( ) = 0;
};

struct __declspec(uuid("000c0322-0000-0000-c000-000000000046"))
Assistant : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    _bstr_t Item;
    __declspec(property(get=GetTop,put=PutTop))
    int Top;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetLeft,put=PutLeft))
    int Left;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetOn,put=PutOn))
    VARIANT_BOOL On;
    __declspec(property(get=GetNewBalloon))
    BalloonPtr NewBalloon;
    __declspec(property(get=GetBalloonError))
    enum MsoBalloonErrorType BalloonError;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAnimation,put=PutAnimation))
    enum MsoAnimationType Animation;
    __declspec(property(get=GetReduced,put=PutReduced))
    VARIANT_BOOL Reduced;
    __declspec(property(get=GetAssistWithHelp,put=PutAssistWithHelp))
    VARIANT_BOOL AssistWithHelp;
    __declspec(property(get=GetAssistWithWizards,put=PutAssistWithWizards))
    VARIANT_BOOL AssistWithWizards;
    __declspec(property(get=GetAssistWithAlerts,put=PutAssistWithAlerts))
    VARIANT_BOOL AssistWithAlerts;
    __declspec(property(get=GetMoveWhenInTheWay,put=PutMoveWhenInTheWay))
    VARIANT_BOOL MoveWhenInTheWay;
    __declspec(property(get=GetSounds,put=PutSounds))
    VARIANT_BOOL Sounds;
    __declspec(property(get=GetFeatureTips,put=PutFeatureTips))
    VARIANT_BOOL FeatureTips;
    __declspec(property(get=GetMouseTips,put=PutMouseTips))
    VARIANT_BOOL MouseTips;
    __declspec(property(get=GetKeyboardShortcutTips,put=PutKeyboardShortcutTips))
    VARIANT_BOOL KeyboardShortcutTips;
    __declspec(property(get=GetHighPriorityTips,put=PutHighPriorityTips))
    VARIANT_BOOL HighPriorityTips;
    __declspec(property(get=GetTipOfDay,put=PutTipOfDay))
    VARIANT_BOOL TipOfDay;
    __declspec(property(get=GetGuessHelp,put=PutGuessHelp))
    VARIANT_BOOL GuessHelp;
    __declspec(property(get=GetSearchWhenProgramming,put=PutSearchWhenProgramming))
    VARIANT_BOOL SearchWhenProgramming;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Move (
        int xLeft,
        int yTop );
    void PutTop (
        int pyTop );
    int GetTop ( );
    void PutLeft (
        int pxLeft );
    int GetLeft ( );
    HRESULT Help ( );
    long StartWizard (
        VARIANT_BOOL On,
        _bstr_t Callback,
        long PrivateX,
        const _variant_t & Animation = vtMissing,
        const _variant_t & CustomTeaser = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Bottom = vtMissing,
        const _variant_t & Right = vtMissing );
    HRESULT EndWizard (
        long WizardID,
        VARIANT_BOOL varfSuccess,
        const _variant_t & Animation = vtMissing );
    HRESULT ActivateWizard (
        long WizardID,
        enum MsoWizardActType act,
        const _variant_t & Animation = vtMissing );
    HRESULT ResetTips ( );
    BalloonPtr GetNewBalloon ( );
    enum MsoBalloonErrorType GetBalloonError ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pvarfVisible );
    enum MsoAnimationType GetAnimation ( );
    void PutAnimation (
        enum MsoAnimationType pfca );
    VARIANT_BOOL GetReduced ( );
    void PutReduced (
        VARIANT_BOOL pvarfReduced );
    void PutAssistWithHelp (
        VARIANT_BOOL pvarfAssistWithHelp );
    VARIANT_BOOL GetAssistWithHelp ( );
    void PutAssistWithWizards (
        VARIANT_BOOL pvarfAssistWithWizards );
    VARIANT_BOOL GetAssistWithWizards ( );
    void PutAssistWithAlerts (
        VARIANT_BOOL pvarfAssistWithAlerts );
    VARIANT_BOOL GetAssistWithAlerts ( );
    void PutMoveWhenInTheWay (
        VARIANT_BOOL pvarfMove );
    VARIANT_BOOL GetMoveWhenInTheWay ( );
    void PutSounds (
        VARIANT_BOOL pvarfSounds );
    VARIANT_BOOL GetSounds ( );
    void PutFeatureTips (
        VARIANT_BOOL pvarfFeatures );
    VARIANT_BOOL GetFeatureTips ( );
    void PutMouseTips (
        VARIANT_BOOL pvarfMouse );
    VARIANT_BOOL GetMouseTips ( );
    void PutKeyboardShortcutTips (
        VARIANT_BOOL pvarfKeyboardShortcuts );
    VARIANT_BOOL GetKeyboardShortcutTips ( );
    void PutHighPriorityTips (
        VARIANT_BOOL pvarfHighPriorityTips );
    VARIANT_BOOL GetHighPriorityTips ( );
    void PutTipOfDay (
        VARIANT_BOOL pvarfTipOfDay );
    VARIANT_BOOL GetTipOfDay ( );
    void PutGuessHelp (
        VARIANT_BOOL pvarfGuessHelp );
    VARIANT_BOOL GetGuessHelp ( );
    void PutSearchWhenProgramming (
        VARIANT_BOOL pvarfSearchInProgram );
    VARIANT_BOOL GetSearchWhenProgramming ( );
    _bstr_t GetItem ( );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t pbstr );
    _bstr_t GetName ( );
    VARIANT_BOOL GetOn ( );
    void PutOn (
        VARIANT_BOOL pvarfOn );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall raw_Move (
        int xLeft,
        int yTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        int pyTop ) = 0;
    virtual HRESULT __stdcall get_Top (
        int * pyTop ) = 0;
    virtual HRESULT __stdcall put_Left (
        int pxLeft ) = 0;
    virtual HRESULT __stdcall get_Left (
        int * pxLeft ) = 0;
    virtual HRESULT __stdcall raw_Help ( ) = 0;
    virtual HRESULT __stdcall raw_StartWizard (
        VARIANT_BOOL On,
        BSTR Callback,
        long PrivateX,
        VARIANT Animation,
        VARIANT CustomTeaser,
        VARIANT Top,
        VARIANT Left,
        VARIANT Bottom,
        VARIANT Right,
        long * plWizID ) = 0;
    virtual HRESULT __stdcall raw_EndWizard (
        long WizardID,
        VARIANT_BOOL varfSuccess,
        VARIANT Animation = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ActivateWizard (
        long WizardID,
        enum MsoWizardActType act,
        VARIANT Animation = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ResetTips ( ) = 0;
    virtual HRESULT __stdcall get_NewBalloon (
        struct Balloon * * ppibal ) = 0;
    virtual HRESULT __stdcall get_BalloonError (
        enum MsoBalloonErrorType * pbne ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * pvarfVisible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL pvarfVisible ) = 0;
    virtual HRESULT __stdcall get_Animation (
        enum MsoAnimationType * pfca ) = 0;
    virtual HRESULT __stdcall put_Animation (
        enum MsoAnimationType pfca ) = 0;
    virtual HRESULT __stdcall get_Reduced (
        VARIANT_BOOL * pvarfReduced ) = 0;
    virtual HRESULT __stdcall put_Reduced (
        VARIANT_BOOL pvarfReduced ) = 0;
    virtual HRESULT __stdcall put_AssistWithHelp (
        VARIANT_BOOL pvarfAssistWithHelp ) = 0;
    virtual HRESULT __stdcall get_AssistWithHelp (
        VARIANT_BOOL * pvarfAssistWithHelp ) = 0;
    virtual HRESULT __stdcall put_AssistWithWizards (
        VARIANT_BOOL pvarfAssistWithWizards ) = 0;
    virtual HRESULT __stdcall get_AssistWithWizards (
        VARIANT_BOOL * pvarfAssistWithWizards ) = 0;
    virtual HRESULT __stdcall put_AssistWithAlerts (
        VARIANT_BOOL pvarfAssistWithAlerts ) = 0;
    virtual HRESULT __stdcall get_AssistWithAlerts (
        VARIANT_BOOL * pvarfAssistWithAlerts ) = 0;
    virtual HRESULT __stdcall put_MoveWhenInTheWay (
        VARIANT_BOOL pvarfMove ) = 0;
    virtual HRESULT __stdcall get_MoveWhenInTheWay (
        VARIANT_BOOL * pvarfMove ) = 0;
    virtual HRESULT __stdcall put_Sounds (
        VARIANT_BOOL pvarfSounds ) = 0;
    virtual HRESULT __stdcall get_Sounds (
        VARIANT_BOOL * pvarfSounds ) = 0;
    virtual HRESULT __stdcall put_FeatureTips (
        VARIANT_BOOL pvarfFeatures ) = 0;
    virtual HRESULT __stdcall get_FeatureTips (
        VARIANT_BOOL * pvarfFeatures ) = 0;
    virtual HRESULT __stdcall put_MouseTips (
        VARIANT_BOOL pvarfMouse ) = 0;
    virtual HRESULT __stdcall get_MouseTips (
        VARIANT_BOOL * pvarfMouse ) = 0;
    virtual HRESULT __stdcall put_KeyboardShortcutTips (
        VARIANT_BOOL pvarfKeyboardShortcuts ) = 0;
    virtual HRESULT __stdcall get_KeyboardShortcutTips (
        VARIANT_BOOL * pvarfKeyboardShortcuts ) = 0;
    virtual HRESULT __stdcall put_HighPriorityTips (
        VARIANT_BOOL pvarfHighPriorityTips ) = 0;
    virtual HRESULT __stdcall get_HighPriorityTips (
        VARIANT_BOOL * pvarfHighPriorityTips ) = 0;
    virtual HRESULT __stdcall put_TipOfDay (
        VARIANT_BOOL pvarfTipOfDay ) = 0;
    virtual HRESULT __stdcall get_TipOfDay (
        VARIANT_BOOL * pvarfTipOfDay ) = 0;
    virtual HRESULT __stdcall put_GuessHelp (
        VARIANT_BOOL pvarfGuessHelp ) = 0;
    virtual HRESULT __stdcall get_GuessHelp (
        VARIANT_BOOL * pvarfGuessHelp ) = 0;
    virtual HRESULT __stdcall put_SearchWhenProgramming (
        VARIANT_BOOL pvarfSearchInProgram ) = 0;
    virtual HRESULT __stdcall get_SearchWhenProgramming (
        VARIANT_BOOL * pvarfSearchInProgram ) = 0;
    virtual HRESULT __stdcall get_Item (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall get_FileName (
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall put_FileName (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall get_On (
        VARIANT_BOOL * pvarfOn ) = 0;
    virtual HRESULT __stdcall put_On (
        VARIANT_BOOL pvarfOn ) = 0;
};

struct __declspec(uuid("2df8d04e-5bfa-101b-bde5-00aa0044de52"))
DocumentProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name[];
    __declspec(property(get=GetType,put=PutType))
    enum MsoDocProperties Type[];
    __declspec(property(get=GetLinkToContent,put=PutLinkToContent))
    VARIANT_BOOL LinkToContent;
    __declspec(property(get=GetLinkSource,put=PutLinkSource))
    _bstr_t LinkSource;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Delete ( );
    _bstr_t GetName (
        long lcid = 0 );
    void PutName (
        long lcid,
        _bstr_t pbstrRetVal );
    _variant_t GetValue (
        long lcid = 0 );
    void PutValue (
        long lcid,
        const _variant_t & pvargRetVal );
    enum MsoDocProperties GetType (
        long lcid = 0 );
    void PutType (
        long lcid,
        enum MsoDocProperties ptypeRetVal );
    VARIANT_BOOL GetLinkToContent ( );
    void PutLinkToContent (
        VARIANT_BOOL pfLinkRetVal );
    _bstr_t GetLinkSource ( );
    void PutLinkSource (
        _bstr_t pbstrSourceRetVal );
    IDispatchPtr GetApplication ( );
    long GetCreator ( );

    //
    // Raw methods provided by interface
    //

    virtual IDispatch * __stdcall get_Parent ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_Name (
        long lcid,
        BSTR * pbstrRetVal ) = 0;
    virtual HRESULT __stdcall put_Name (
        long lcid,
        BSTR pbstrRetVal ) = 0;
    virtual HRESULT __stdcall get_Value (
        long lcid,
        VARIANT * pvargRetVal ) = 0;
    virtual HRESULT __stdcall put_Value (
        long lcid,
        VARIANT pvargRetVal ) = 0;
    virtual HRESULT __stdcall get_Type (
        long lcid,
        enum MsoDocProperties * ptypeRetVal ) = 0;
    virtual HRESULT __stdcall put_Type (
        long lcid,
        enum MsoDocProperties ptypeRetVal ) = 0;
    virtual HRESULT __stdcall get_LinkToContent (
        VARIANT_BOOL * pfLinkRetVal ) = 0;
    virtual HRESULT __stdcall put_LinkToContent (
        VARIANT_BOOL pfLinkRetVal ) = 0;
    virtual HRESULT __stdcall get_LinkSource (
        BSTR * pbstrSourceRetVal ) = 0;
    virtual HRESULT __stdcall put_LinkSource (
        BSTR pbstrSourceRetVal ) = 0;
    virtual HRESULT __stdcall get_Application (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * plCreator ) = 0;
};

struct __declspec(uuid("2df8d04d-5bfa-101b-bde5-00aa0044de52"))
DocumentPropertiesACC : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    DocumentPropertyPtr Item[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    DocumentPropertyPtr GetItem (
        const _variant_t & Index,
        long lcid = 0 );
    long GetCount ( );
    DocumentPropertyPtr Add (
        _bstr_t Name,
        VARIANT_BOOL LinkToContent,
        const _variant_t & Type = vtMissing,
        const _variant_t & Value = vtMissing,
        const _variant_t & LinkSource = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetApplication ( );
    long GetCreator ( );

    //
    // Raw methods provided by interface
    //

    virtual IDispatch * __stdcall get_Parent ( ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        long lcid,
        struct DocumentProperty * * ppIDocProp ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pc ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT_BOOL LinkToContent,
        VARIANT Type,
        VARIANT Value,
        VARIANT LinkSource,
        long lcid,
        struct DocumentProperty * * ppIDocProp ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppunkEnum ) = 0;
    virtual HRESULT __stdcall get_Application (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall get_Creator (
        long * plCreator ) = 0;
};

enum MsoFileFindOptions
{
    msoOptionsNew = 1,
    msoOptionsAdd = 2,
    msoOptionsWithin = 3
};

enum MsoFileFindView
{
    msoViewFileInfo = 1,
    msoViewPreview = 2,
    msoViewSummaryInfo = 3
};

enum MsoFileFindSortBy
{
    msoFileFindSortbyAuthor = 1,
    msoFileFindSortbyDateCreated = 2,
    msoFileFindSortbyLastSavedBy = 3,
    msoFileFindSortbyDateSaved = 4,
    msoFileFindSortbyFileName = 5,
    msoFileFindSortbySize = 6,
    msoFileFindSortbyTitle = 7
};

enum MsoFileFindListBy
{
    msoListbyName = 1,
    msoListbyTitle = 2
};

struct __declspec(uuid("000c0338-0000-0000-c000-000000000046"))
IFoundFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetItem (
        int Index );
    int GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Item (
        int Index,
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppunkEnum ) = 0;
};

struct __declspec(uuid("000c0337-0000-0000-c000-000000000046"))
IFind : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSearchPath,put=PutSearchPath))
    _bstr_t SearchPath;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSubDir,put=PutSubDir))
    VARIANT_BOOL SubDir;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetOptions,put=PutOptions))
    enum MsoFileFindOptions Options;
    __declspec(property(get=GetMatchCase,put=PutMatchCase))
    VARIANT_BOOL MatchCase;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetPatternMatch,put=PutPatternMatch))
    VARIANT_BOOL PatternMatch;
    __declspec(property(get=GetDateSavedFrom,put=PutDateSavedFrom))
    _variant_t DateSavedFrom;
    __declspec(property(get=GetDateSavedTo,put=PutDateSavedTo))
    _variant_t DateSavedTo;
    __declspec(property(get=GetSavedBy,put=PutSavedBy))
    _bstr_t SavedBy;
    __declspec(property(get=GetDateCreatedFrom,put=PutDateCreatedFrom))
    _variant_t DateCreatedFrom;
    __declspec(property(get=GetDateCreatedTo,put=PutDateCreatedTo))
    _variant_t DateCreatedTo;
    __declspec(property(get=GetView,put=PutView))
    enum MsoFileFindView View;
    __declspec(property(get=GetSortBy,put=PutSortBy))
    enum MsoFileFindSortBy SortBy;
    __declspec(property(get=GetListBy,put=PutListBy))
    enum MsoFileFindListBy ListBy;
    __declspec(property(get=GetSelectedFile,put=PutSelectedFile))
    int SelectedFile;
    __declspec(property(get=GetResults))
    IFoundFilesPtr Results;
    __declspec(property(get=GetFileType,put=PutFileType))
    long FileType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSearchPath ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetSubDir ( );
    _bstr_t GetTitle ( );
    _bstr_t GetAuthor ( );
    _bstr_t GetKeywords ( );
    _bstr_t GetSubject ( );
    enum MsoFileFindOptions GetOptions ( );
    VARIANT_BOOL GetMatchCase ( );
    _bstr_t GetText ( );
    VARIANT_BOOL GetPatternMatch ( );
    _variant_t GetDateSavedFrom ( );
    _variant_t GetDateSavedTo ( );
    _bstr_t GetSavedBy ( );
    _variant_t GetDateCreatedFrom ( );
    _variant_t GetDateCreatedTo ( );
    enum MsoFileFindView GetView ( );
    enum MsoFileFindSortBy GetSortBy ( );
    enum MsoFileFindListBy GetListBy ( );
    int GetSelectedFile ( );
    IFoundFilesPtr GetResults ( );
    int Show ( );
    void PutSearchPath (
        _bstr_t pbstr );
    void PutName (
        _bstr_t pbstr );
    void PutSubDir (
        VARIANT_BOOL retval );
    void PutTitle (
        _bstr_t pbstr );
    void PutAuthor (
        _bstr_t pbstr );
    void PutKeywords (
        _bstr_t pbstr );
    void PutSubject (
        _bstr_t pbstr );
    void PutOptions (
        enum MsoFileFindOptions penmOptions );
    void PutMatchCase (
        VARIANT_BOOL retval );
    void PutText (
        _bstr_t pbstr );
    void PutPatternMatch (
        VARIANT_BOOL retval );
    void PutDateSavedFrom (
        const _variant_t & pdatSavedFrom );
    void PutDateSavedTo (
        const _variant_t & pdatSavedTo );
    void PutSavedBy (
        _bstr_t pbstr );
    void PutDateCreatedFrom (
        const _variant_t & pdatCreatedFrom );
    void PutDateCreatedTo (
        const _variant_t & pdatCreatedTo );
    void PutView (
        enum MsoFileFindView penmView );
    void PutSortBy (
        enum MsoFileFindSortBy penmSortBy );
    void PutListBy (
        enum MsoFileFindListBy penmListBy );
    void PutSelectedFile (
        int pintSelectedFile );
    HRESULT Execute ( );
    HRESULT Load (
        _bstr_t bstrQueryName );
    HRESULT Save (
        _bstr_t bstrQueryName );
    HRESULT Delete (
        _bstr_t bstrQueryName );
    long GetFileType ( );
    void PutFileType (
        long plFileType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_SearchPath (
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall get_SubDir (
        VARIANT_BOOL * retval ) = 0;
    virtual HRESULT __stdcall get_Title (
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall get_Author (
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall get_Keywords (
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall get_Subject (
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall get_Options (
        enum MsoFileFindOptions * penmOptions ) = 0;
    virtual HRESULT __stdcall get_MatchCase (
        VARIANT_BOOL * retval ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall get_PatternMatch (
        VARIANT_BOOL * retval ) = 0;
    virtual HRESULT __stdcall get_DateSavedFrom (
        VARIANT * pdatSavedFrom ) = 0;
    virtual HRESULT __stdcall get_DateSavedTo (
        VARIANT * pdatSavedTo ) = 0;
    virtual HRESULT __stdcall get_SavedBy (
        BSTR * pbstr ) = 0;
    virtual HRESULT __stdcall get_DateCreatedFrom (
        VARIANT * pdatCreatedFrom ) = 0;
    virtual HRESULT __stdcall get_DateCreatedTo (
        VARIANT * pdatCreatedTo ) = 0;
    virtual HRESULT __stdcall get_View (
        enum MsoFileFindView * penmView ) = 0;
    virtual HRESULT __stdcall get_SortBy (
        enum MsoFileFindSortBy * penmSortBy ) = 0;
    virtual HRESULT __stdcall get_ListBy (
        enum MsoFileFindListBy * penmListBy ) = 0;
    virtual HRESULT __stdcall get_SelectedFile (
        int * pintSelectedFile ) = 0;
    virtual HRESULT __stdcall get_Results (
        struct IFoundFiles * * pdisp ) = 0;
    virtual HRESULT __stdcall raw_Show (
        int * pRows ) = 0;
    virtual HRESULT __stdcall put_SearchPath (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall put_SubDir (
        VARIANT_BOOL retval ) = 0;
    virtual HRESULT __stdcall put_Title (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall put_Author (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall put_Keywords (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall put_Subject (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall put_Options (
        enum MsoFileFindOptions penmOptions ) = 0;
    virtual HRESULT __stdcall put_MatchCase (
        VARIANT_BOOL retval ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall put_PatternMatch (
        VARIANT_BOOL retval ) = 0;
    virtual HRESULT __stdcall put_DateSavedFrom (
        VARIANT pdatSavedFrom ) = 0;
    virtual HRESULT __stdcall put_DateSavedTo (
        VARIANT pdatSavedTo ) = 0;
    virtual HRESULT __stdcall put_SavedBy (
        BSTR pbstr ) = 0;
    virtual HRESULT __stdcall put_DateCreatedFrom (
        VARIANT pdatCreatedFrom ) = 0;
    virtual HRESULT __stdcall put_DateCreatedTo (
        VARIANT pdatCreatedTo ) = 0;
    virtual HRESULT __stdcall put_View (
        enum MsoFileFindView penmView ) = 0;
    virtual HRESULT __stdcall put_SortBy (
        enum MsoFileFindSortBy penmSortBy ) = 0;
    virtual HRESULT __stdcall put_ListBy (
        enum MsoFileFindListBy penmListBy ) = 0;
    virtual HRESULT __stdcall put_SelectedFile (
        int pintSelectedFile ) = 0;
    virtual HRESULT __stdcall raw_Execute ( ) = 0;
    virtual HRESULT __stdcall raw_Load (
        BSTR bstrQueryName ) = 0;
    virtual HRESULT __stdcall raw_Save (
        BSTR bstrQueryName ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        BSTR bstrQueryName ) = 0;
    virtual HRESULT __stdcall get_FileType (
        long * plFileType ) = 0;
    virtual HRESULT __stdcall put_FileType (
        long plFileType ) = 0;
};

enum MsoLastModified
{
    msoLastModifiedYesterday = 1,
    msoLastModifiedToday = 2,
    msoLastModifiedLastWeek = 3,
    msoLastModifiedThisWeek = 4,
    msoLastModifiedLastMonth = 5,
    msoLastModifiedThisMonth = 6,
    msoLastModifiedAnyTime = 7
};

enum MsoSortBy
{
    msoSortByFileName = 1,
    msoSortBySize = 2,
    msoSortByFileType = 3,
    msoSortByLastModified = 4
};

enum MsoSortOrder
{
    msoSortOrderAscending = 1,
    msoSortOrderDescending = 2
};

enum MsoConnector
{
    msoConnectorAnd = 1,
    msoConnectorOr = 2
};

enum MsoCondition
{
    msoConditionFileTypeAllFiles = 1,
    msoConditionFileTypeOfficeFiles = 2,
    msoConditionFileTypeWordDocuments = 3,
    msoConditionFileTypeExcelWorkbooks = 4,
    msoConditionFileTypePowerPointPresentations = 5,
    msoConditionFileTypeBinders = 6,
    msoConditionFileTypeDatabases = 7,
    msoConditionFileTypeTemplates = 8,
    msoConditionIncludes = 9,
    msoConditionIncludesPhrase = 10,
    msoConditionBeginsWith = 11,
    msoConditionEndsWith = 12,
    msoConditionIncludesNearEachOther = 13,
    msoConditionIsExactly = 14,
    msoConditionIsNot = 15,
    msoConditionYesterday = 16,
    msoConditionToday = 17,
    msoConditionTomorrow = 18,
    msoConditionLastWeek = 19,
    msoConditionThisWeek = 20,
    msoConditionNextWeek = 21,
    msoConditionLastMonth = 22,
    msoConditionThisMonth = 23,
    msoConditionNextMonth = 24,
    msoConditionAnytime = 25,
    msoConditionAnytimeBetween = 26,
    msoConditionOn = 27,
    msoConditionOnOrAfter = 28,
    msoConditionOnOrBefore = 29,
    msoConditionInTheNext = 30,
    msoConditionInTheLast = 31,
    msoConditionEquals = 32,
    msoConditionDoesNotEqual = 33,
    msoConditionAnyNumberBetween = 34,
    msoConditionAtMost = 35,
    msoConditionAtLeast = 36,
    msoConditionMoreThan = 37,
    msoConditionLessThan = 38,
    msoConditionIsYes = 39,
    msoConditionIsNo = 40
};

enum MsoFileType
{
    msoFileTypeAllFiles = 1,
    msoFileTypeOfficeFiles = 2,
    msoFileTypeWordDocuments = 3,
    msoFileTypeExcelWorkbooks = 4,
    msoFileTypePowerPointPresentations = 5,
    msoFileTypeBinders = 6,
    msoFileTypeDatabases = 7,
    msoFileTypeTemplates = 8
};

struct __declspec(uuid("000c0331-0000-0000-c000-000000000046"))
FoundFiles : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetItem (
        int Index,
        long lcid = 0 );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Item (
        int Index,
        long lcid,
        BSTR * pbstrFile ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pc ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppunkEnum ) = 0;
};

struct __declspec(uuid("000c0333-0000-0000-c000-000000000046"))
PropertyTest : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetCondition))
    enum MsoCondition Condition;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetSecondValue))
    _variant_t SecondValue;
    __declspec(property(get=GetConnector))
    enum MsoConnector Connector;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum MsoCondition GetCondition ( );
    _variant_t GetValue ( );
    _variant_t GetSecondValue ( );
    enum MsoConnector GetConnector ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * pbstrRetVal ) = 0;
    virtual HRESULT __stdcall get_Condition (
        enum MsoCondition * pConditionRetVal ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * pvargRetVal ) = 0;
    virtual HRESULT __stdcall get_SecondValue (
        VARIANT * pvargRetVal2 ) = 0;
    virtual HRESULT __stdcall get_Connector (
        enum MsoConnector * pConnector ) = 0;
};

struct __declspec(uuid("000c0334-0000-0000-c000-000000000046"))
PropertyTests : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    PropertyTestPtr Item[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    PropertyTestPtr GetItem (
        int Index,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Add (
        _bstr_t Name,
        enum MsoCondition Condition,
        const _variant_t & Value,
        const _variant_t & SecondValue,
        enum MsoConnector Connector );
    HRESULT Remove (
        int Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Item (
        int Index,
        long lcid,
        struct PropertyTest * * ppIDocProp ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pc ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        enum MsoCondition Condition,
        VARIANT Value,
        VARIANT SecondValue,
        enum MsoConnector Connector ) = 0;
    virtual HRESULT __stdcall raw_Remove (
        int Index ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppunkEnum ) = 0;
};

struct __declspec(uuid("000c0332-0000-0000-c000-000000000046"))
FileSearch : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetSearchSubFolders,put=PutSearchSubFolders))
    VARIANT_BOOL SearchSubFolders;
    __declspec(property(get=GetMatchTextExactly,put=PutMatchTextExactly))
    VARIANT_BOOL MatchTextExactly;
    __declspec(property(get=GetMatchAllWordForms,put=PutMatchAllWordForms))
    VARIANT_BOOL MatchAllWordForms;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetFileType,put=PutFileType))
    enum MsoFileType FileType;
    __declspec(property(get=GetLastModified,put=PutLastModified))
    enum MsoLastModified LastModified;
    __declspec(property(get=GetTextOrProperty,put=PutTextOrProperty))
    _bstr_t TextOrProperty;
    __declspec(property(get=GetLookIn,put=PutLookIn))
    _bstr_t LookIn;
    __declspec(property(get=GetFoundFiles))
    FoundFilesPtr FoundFiles;
    __declspec(property(get=GetPropertyTests))
    PropertyTestsPtr PropertyTests;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetSearchSubFolders ( );
    void PutSearchSubFolders (
        VARIANT_BOOL SearchSubFoldersRetVal );
    VARIANT_BOOL GetMatchTextExactly ( );
    void PutMatchTextExactly (
        VARIANT_BOOL MatchTextRetVal );
    VARIANT_BOOL GetMatchAllWordForms ( );
    void PutMatchAllWordForms (
        VARIANT_BOOL MatchAllWordFormsRetVal );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t FileNameRetVal );
    enum MsoFileType GetFileType ( );
    void PutFileType (
        enum MsoFileType FileTypeRetVal );
    enum MsoLastModified GetLastModified ( );
    void PutLastModified (
        enum MsoLastModified LastModifiedRetVal );
    _bstr_t GetTextOrProperty ( );
    void PutTextOrProperty (
        _bstr_t TextOrProperty );
    _bstr_t GetLookIn ( );
    void PutLookIn (
        _bstr_t LookInRetVal );
    int Execute (
        enum MsoSortBy SortBy,
        enum MsoSortOrder SortOrder,
        VARIANT_BOOL AlwaysAccurate );
    HRESULT NewSearch ( );
    FoundFilesPtr GetFoundFiles ( );
    PropertyTestsPtr GetPropertyTests ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_SearchSubFolders (
        VARIANT_BOOL * SearchSubFoldersRetVal ) = 0;
    virtual HRESULT __stdcall put_SearchSubFolders (
        VARIANT_BOOL SearchSubFoldersRetVal ) = 0;
    virtual HRESULT __stdcall get_MatchTextExactly (
        VARIANT_BOOL * MatchTextRetVal ) = 0;
    virtual HRESULT __stdcall put_MatchTextExactly (
        VARIANT_BOOL MatchTextRetVal ) = 0;
    virtual HRESULT __stdcall get_MatchAllWordForms (
        VARIANT_BOOL * MatchAllWordFormsRetVal ) = 0;
    virtual HRESULT __stdcall put_MatchAllWordForms (
        VARIANT_BOOL MatchAllWordFormsRetVal ) = 0;
    virtual HRESULT __stdcall get_FileName (
        BSTR * FileNameRetVal ) = 0;
    virtual HRESULT __stdcall put_FileName (
        BSTR FileNameRetVal ) = 0;
    virtual HRESULT __stdcall get_FileType (
        enum MsoFileType * FileTypeRetVal ) = 0;
    virtual HRESULT __stdcall put_FileType (
        enum MsoFileType FileTypeRetVal ) = 0;
    virtual HRESULT __stdcall get_LastModified (
        enum MsoLastModified * LastModifiedRetVal ) = 0;
    virtual HRESULT __stdcall put_LastModified (
        enum MsoLastModified LastModifiedRetVal ) = 0;
    virtual HRESULT __stdcall get_TextOrProperty (
        BSTR * TextOrProperty ) = 0;
    virtual HRESULT __stdcall put_TextOrProperty (
        BSTR TextOrProperty ) = 0;
    virtual HRESULT __stdcall get_LookIn (
        BSTR * LookInRetVal ) = 0;
    virtual HRESULT __stdcall put_LookIn (
        BSTR LookInRetVal ) = 0;
    virtual HRESULT __stdcall raw_Execute (
        enum MsoSortBy SortBy,
        enum MsoSortOrder SortOrder,
        VARIANT_BOOL AlwaysAccurate,
        int * pRet ) = 0;
    virtual HRESULT __stdcall raw_NewSearch ( ) = 0;
    virtual HRESULT __stdcall get_FoundFiles (
        struct FoundFiles * * FoundFilesRet ) = 0;
    virtual HRESULT __stdcall get_PropertyTests (
        struct PropertyTests * * PropTestsRet ) = 0;
};

struct __declspec(uuid("000c033a-0000-0000-c000-000000000046"))
COMAddIn : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetProgId))
    _bstr_t ProgId;
    __declspec(property(get=GetGuid))
    _bstr_t Guid;
    __declspec(property(get=GetConnect,put=PutConnect))
    VARIANT_BOOL Connect;
    __declspec(property(get=GetObject,put=PutObject))
    IDispatchPtr Object;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t RetValue );
    _bstr_t GetProgId ( );
    _bstr_t GetGuid ( );
    VARIANT_BOOL GetConnect ( );
    void PutConnect (
        VARIANT_BOOL RetValue );
    IDispatchPtr GetObject ( );
    void PutObject (
        IDispatch * RetValue );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Description (
        BSTR * RetValue ) = 0;
    virtual HRESULT __stdcall put_Description (
        BSTR RetValue ) = 0;
    virtual HRESULT __stdcall get_ProgId (
        BSTR * RetValue ) = 0;
    virtual HRESULT __stdcall get_Guid (
        BSTR * RetValue ) = 0;
    virtual HRESULT __stdcall get_Connect (
        VARIANT_BOOL * RetValue ) = 0;
    virtual HRESULT __stdcall put_Connect (
        VARIANT_BOOL RetValue ) = 0;
    virtual HRESULT __stdcall get_Object (
        IDispatch * * RetValue ) = 0;
    virtual HRESULT __stdcall put_Object (
        IDispatch * RetValue ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * retval ) = 0;
};

struct __declspec(uuid("000c0339-0000-0000-c000-000000000046"))
COMAddIns : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    COMAddInPtr Item (
        VARIANT * Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Update ( );
    IDispatchPtr GetParent ( );
    HRESULT SetAppModal (
        VARIANT_BOOL varfModal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct COMAddIn * * RetValue ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RetValue ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RetValue ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall raw_SetAppModal (
        VARIANT_BOOL varfModal ) = 0;
};

enum MsoLanguageID
{
    msoLanguageIDMixed = -2,
    msoLanguageIDNone = 0,
    msoLanguageIDNoProofing = 1024,
    msoLanguageIDAfrikaans = 1078,
    msoLanguageIDAlbanian = 1052,
    msoLanguageIDArabicAlgeria = 5121,
    msoLanguageIDArabicBahrain = 15361,
    msoLanguageIDArabicEgypt = 3073,
    msoLanguageIDArabicIraq = 2049,
    msoLanguageIDArabicJordan = 11265,
    msoLanguageIDArabicKuwait = 13313,
    msoLanguageIDArabicLebanon = 12289,
    msoLanguageIDArabicLibya = 4097,
    msoLanguageIDArabicMorocco = 6145,
    msoLanguageIDArabicOman = 8193,
    msoLanguageIDArabicQatar = 16385,
    msoLanguageIDArabic = 1025,
    msoLanguageIDArabicSyria = 10241,
    msoLanguageIDArabicTunisia = 7169,
    msoLanguageIDArabicUAE = 14337,
    msoLanguageIDArabicYemen = 9217,
    msoLanguageIDArmenian = 1067,
    msoLanguageIDAssamese = 1101,
    msoLanguageIDAzeriCyrillic = 2092,
    msoLanguageIDAzeriLatin = 1068,
    msoLanguageIDBasque = 1069,
    msoLanguageIDByelorussian = 1059,
    msoLanguageIDBengali = 1093,
    msoLanguageIDBulgarian = 1026,
    msoLanguageIDBurmese = 1109,
    msoLanguageIDCatalan = 1027,
    msoLanguageIDChineseHongKong = 3076,
    msoLanguageIDChineseMacao = 5124,
    msoLanguageIDSimplifiedChinese = 2052,
    msoLanguageIDChineseSingapore = 4100,
    msoLanguageIDTraditionalChinese = 1028,
    msoLanguageIDCroatian = 1050,
    msoLanguageIDCzech = 1029,
    msoLanguageIDDanish = 1030,
    msoLanguageIDBelgianDutch = 2067,
    msoLanguageIDDutch = 1043,
    msoLanguageIDEnglishAUS = 3081,
    msoLanguageIDEnglishBelize = 10249,
    msoLanguageIDEnglishCanadian = 4105,
    msoLanguageIDEnglishCaribbean = 9225,
    msoLanguageIDEnglishIreland = 6153,
    msoLanguageIDEnglishJamaica = 8201,
    msoLanguageIDEnglishNewZealand = 5129,
    msoLanguageIDEnglishPhilippines = 13321,
    msoLanguageIDEnglishSouthAfrica = 7177,
    msoLanguageIDEnglishTrinidad = 11273,
    msoLanguageIDEnglishUK = 2057,
    msoLanguageIDEnglishUS = 1033,
    msoLanguageIDEnglishZimbabwe = 12297,
    msoLanguageIDEstonian = 1061,
    msoLanguageIDFaeroese = 1080,
    msoLanguageIDFarsi = 1065,
    msoLanguageIDFinnish = 1035,
    msoLanguageIDBelgianFrench = 2060,
    msoLanguageIDFrenchCameroon = 11276,
    msoLanguageIDFrenchCanadian = 3084,
    msoLanguageIDFrenchCotedIvoire = 12300,
    msoLanguageIDFrench = 1036,
    msoLanguageIDFrenchLuxembourg = 5132,
    msoLanguageIDFrenchMali = 13324,
    msoLanguageIDFrenchMonaco = 6156,
    msoLanguageIDFrenchReunion = 8204,
    msoLanguageIDFrenchSenegal = 10252,
    msoLanguageIDSwissFrench = 4108,
    msoLanguageIDFrenchWestIndies = 7180,
    msoLanguageIDFrenchZaire = 9228,
    msoLanguageIDFrisianNetherlands = 1122,
    msoLanguageIDGaelicIreland = 2108,
    msoLanguageIDGaelicScotland = 1084,
    msoLanguageIDGalician = 1110,
    msoLanguageIDGeorgian = 1079,
    msoLanguageIDGermanAustria = 3079,
    msoLanguageIDGerman = 1031,
    msoLanguageIDGermanLiechtenstein = 5127,
    msoLanguageIDGermanLuxembourg = 4103,
    msoLanguageIDSwissGerman = 2055,
    msoLanguageIDGreek = 1032,
    msoLanguageIDGujarati = 1095,
    msoLanguageIDHebrew = 1037,
    msoLanguageIDHindi = 1081,
    msoLanguageIDHungarian = 1038,
    msoLanguageIDIcelandic = 1039,
    msoLanguageIDIndonesian = 1057,
    msoLanguageIDItalian = 1040,
    msoLanguageIDSwissItalian = 2064,
    msoLanguageIDJapanese = 1041,
    msoLanguageIDKannada = 1099,
    msoLanguageIDKashmiri = 1120,
    msoLanguageIDKazakh = 1087,
    msoLanguageIDKhmer = 1107,
    msoLanguageIDKirghiz = 1088,
    msoLanguageIDKonkani = 1111,
    msoLanguageIDKorean = 1042,
    msoLanguageIDLao = 1108,
    msoLanguageIDLatvian = 1062,
    msoLanguageIDLithuanian = 1063,
    msoLanguageIDMacedonian = 1071,
    msoLanguageIDMalaysian = 1086,
    msoLanguageIDMalayBruneiDarussalam = 2110,
    msoLanguageIDMalayalam = 1100,
    msoLanguageIDMaltese = 1082,
    msoLanguageIDManipuri = 1112,
    msoLanguageIDMarathi = 1102,
    msoLanguageIDMongolian = 1104,
    msoLanguageIDNepali = 1121,
    msoLanguageIDNorwegianBokmol = 1044,
    msoLanguageIDNorwegianNynorsk = 2068,
    msoLanguageIDOriya = 1096,
    msoLanguageIDPolish = 1045,
    msoLanguageIDBrazilianPortuguese = 1046,
    msoLanguageIDPortuguese = 2070,
    msoLanguageIDPunjabi = 1094,
    msoLanguageIDRhaetoRomanic = 1047,
    msoLanguageIDRomanianMoldova = 2072,
    msoLanguageIDRomanian = 1048,
    msoLanguageIDRussianMoldova = 2073,
    msoLanguageIDRussian = 1049,
    msoLanguageIDSamiLappish = 1083,
    msoLanguageIDSanskrit = 1103,
    msoLanguageIDSerbianCyrillic = 3098,
    msoLanguageIDSerbianLatin = 2074,
    msoLanguageIDSesotho = 1072,
    msoLanguageIDSindhi = 1113,
    msoLanguageIDSlovak = 1051,
    msoLanguageIDSlovenian = 1060,
    msoLanguageIDSorbian = 1070,
    msoLanguageIDSpanishArgentina = 11274,
    msoLanguageIDSpanishBolivia = 16394,
    msoLanguageIDSpanishChile = 13322,
    msoLanguageIDSpanishColombia = 9226,
    msoLanguageIDSpanishCostaRica = 5130,
    msoLanguageIDSpanishDominicanRepublic = 7178,
    msoLanguageIDSpanishEcuador = 12298,
    msoLanguageIDSpanishElSalvador = 17418,
    msoLanguageIDSpanishGuatemala = 4106,
    msoLanguageIDSpanishHonduras = 18442,
    msoLanguageIDMexicanSpanish = 2058,
    msoLanguageIDSpanishNicaragua = 19466,
    msoLanguageIDSpanishPanama = 6154,
    msoLanguageIDSpanishParaguay = 15370,
    msoLanguageIDSpanishPeru = 10250,
    msoLanguageIDSpanishPuertoRico = 20490,
    msoLanguageIDSpanishModernSort = 3082,
    msoLanguageIDSpanish = 1034,
    msoLanguageIDSpanishUruguay = 14346,
    msoLanguageIDSpanishVenezuela = 8202,
    msoLanguageIDSutu = 1072,
    msoLanguageIDSwahili = 1089,
    msoLanguageIDSwedishFinland = 2077,
    msoLanguageIDSwedish = 1053,
    msoLanguageIDTajik = 1064,
    msoLanguageIDTamil = 1097,
    msoLanguageIDTatar = 1092,
    msoLanguageIDTelugu = 1098,
    msoLanguageIDThai = 1054,
    msoLanguageIDTibetan = 1105,
    msoLanguageIDTsonga = 1073,
    msoLanguageIDTswana = 1074,
    msoLanguageIDTurkish = 1055,
    msoLanguageIDTurkmen = 1090,
    msoLanguageIDUkrainian = 1058,
    msoLanguageIDUrdu = 1056,
    msoLanguageIDUzbekCyrillic = 2115,
    msoLanguageIDUzbekLatin = 1091,
    msoLanguageIDVenda = 1075,
    msoLanguageIDVietnamese = 1066,
    msoLanguageIDWelsh = 1106,
    msoLanguageIDXhosa = 1076,
    msoLanguageIDZulu = 1077
};

struct __declspec(uuid("000c0353-0000-0000-c000-000000000046"))
LanguageSettings : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetLanguageID))
    int LanguageID[];
    __declspec(property(get=GetLanguagePreferredForEditing))
    VARIANT_BOOL LanguagePreferredForEditing[];

    //
    // Wrapper methods for error-handling
    //

    int GetLanguageID (
        enum MsoAppLanguageID Id );
    VARIANT_BOOL GetLanguagePreferredForEditing (
        enum MsoLanguageID lid );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_LanguageID (
        enum MsoAppLanguageID Id,
        int * plid ) = 0;
    virtual HRESULT __stdcall get_LanguagePreferredForEditing (
        enum MsoLanguageID lid,
        VARIANT_BOOL * pf ) = 0;
};

struct __declspec(uuid("55f88892-7708-11d1-aceb-006008961da5"))
ICommandBarsEvents : IDispatch
{
    //
    // Raw methods provided by interface
    //

    virtual void __stdcall OnUpdate ( ) = 0;
};

struct __declspec(uuid("000c0352-0000-0000-c000-000000000046"))
_CommandBarsEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnUpdate ( );
};

struct __declspec(uuid("55f88893-7708-11d1-aceb-006008961da5"))
CommandBars;
    // [ default ] interface _CommandBars
    // [ default, source ] dispinterface _CommandBarsEvents

struct __declspec(uuid("55f88896-7708-11d1-aceb-006008961da5"))
ICommandBarComboBoxEvents : IDispatch
{
    //
    // Raw methods provided by interface
    //

    virtual void __stdcall Change (
        struct _CommandBarComboBox * Ctrl ) = 0;
};

struct __declspec(uuid("000c0354-0000-0000-c000-000000000046"))
_CommandBarComboBoxEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Change (
        struct _CommandBarComboBox * Ctrl );
};

struct __declspec(uuid("55f88897-7708-11d1-aceb-006008961da5"))
CommandBarComboBox;
    // [ default ] interface _CommandBarComboBox
    // [ default, source ] dispinterface _CommandBarComboBoxEvents

struct __declspec(uuid("55f88890-7708-11d1-aceb-006008961da5"))
ICommandBarButtonEvents : IDispatch
{
    //
    // Raw methods provided by interface
    //

    virtual void __stdcall Click (
        struct _CommandBarButton * Ctrl,
        VARIANT_BOOL * CancelDefault ) = 0;
};

struct __declspec(uuid("000c0351-0000-0000-c000-000000000046"))
_CommandBarButtonEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click (
        struct _CommandBarButton * Ctrl,
        VARIANT_BOOL * CancelDefault );
};

struct __declspec(uuid("55f88891-7708-11d1-aceb-006008961da5"))
CommandBarButton;
    // [ default ] interface _CommandBarButton
    // [ default, source ] dispinterface _CommandBarButtonEvents

enum MsoScreenSize
{
    msoScreenSize544x376 = 0,
    msoScreenSize640x480 = 1,
    msoScreenSize720x512 = 2,
    msoScreenSize800x600 = 3,
    msoScreenSize1024x768 = 4,
    msoScreenSize1152x882 = 5,
    msoScreenSize1152x900 = 6,
    msoScreenSize1280x1024 = 7,
    msoScreenSize1600x1200 = 8,
    msoScreenSize1800x1440 = 9,
    msoScreenSize1920x1200 = 10
};

enum MsoCharacterSet
{
    msoCharacterSetArabic = 1,
    msoCharacterSetCyrillic = 2,
    msoCharacterSetEnglishWesternEuropeanOtherLatinScript = 3,
    msoCharacterSetGreek = 4,
    msoCharacterSetHebrew = 5,
    msoCharacterSetJapanese = 6,
    msoCharacterSetKorean = 7,
    msoCharacterSetMultilingualUnicode = 8,
    msoCharacterSetSimplifiedChinese = 9,
    msoCharacterSetThai = 10,
    msoCharacterSetTraditionalChinese = 11,
    msoCharacterSetVietnamese = 12
};

enum MsoEncoding
{
    msoEncodingThai = 874,
    msoEncodingJapaneseShiftJIS = 932,
    msoEncodingSimplifiedChineseGBK = 936,
    msoEncodingKorean = 949,
    msoEncodingTraditionalChineseBig5 = 950,
    msoEncodingUnicodeLittleEndian = 1200,
    msoEncodingUnicodeBigEndian = 1201,
    msoEncodingCentralEuropean = 1250,
    msoEncodingCyrillic = 1251,
    msoEncodingWestern = 1252,
    msoEncodingGreek = 1253,
    msoEncodingTurkish = 1254,
    msoEncodingHebrew = 1255,
    msoEncodingArabic = 1256,
    msoEncodingBaltic = 1257,
    msoEncodingVietnamese = 1258,
    msoEncodingAutoDetect = 50001,
    msoEncodingJapaneseAutoDetect = 50932,
    msoEncodingSimplifiedChineseAutoDetect = 50936,
    msoEncodingKoreanAutoDetect = 50949,
    msoEncodingTraditionalChineseAutoDetect = 50950,
    msoEncodingCyrillicAutoDetect = 51251,
    msoEncodingGreekAutoDetect = 51253,
    msoEncodingArabicAutoDetect = 51256,
    msoEncodingISO88591Latin1 = 28591,
    msoEncodingISO88592CentralEurope = 28592,
    msoEncodingISO88593Latin3 = 28593,
    msoEncodingISO88594Baltic = 28594,
    msoEncodingISO88595Cyrillic = 28595,
    msoEncodingISO88596Arabic = 28596,
    msoEncodingISO88597Greek = 28597,
    msoEncodingISO88598Hebrew = 28598,
    msoEncodingISO88599Turkish = 28599,
    msoEncodingISO885915Latin9 = 28605,
    msoEncodingISO2022JPNoHalfwidthKatakana = 50220,
    msoEncodingISO2022JPJISX02021984 = 50221,
    msoEncodingISO2022JPJISX02011989 = 50222,
    msoEncodingISO2022KR = 50225,
    msoEncodingISO2022CNTraditionalChinese = 50227,
    msoEncodingISO2022CNSimplifiedChinese = 50229,
    msoEncodingMacRoman = 10000,
    msoEncodingMacJapanese = 10001,
    msoEncodingMacTraditionalChineseBig5 = 10002,
    msoEncodingMacKorean = 10003,
    msoEncodingMacArabic = 10004,
    msoEncodingMacHebrew = 10005,
    msoEncodingMacGreek1 = 10006,
    msoEncodingMacCyrillic = 10007,
    msoEncodingMacSimplifiedChineseGB2312 = 10008,
    msoEncodingMacRomania = 10010,
    msoEncodingMacUkraine = 10017,
    msoEncodingMacLatin2 = 10029,
    msoEncodingMacIcelandic = 10079,
    msoEncodingMacTurkish = 10081,
    msoEncodingMacCroatia = 10082,
    msoEncodingEBCDICUSCanada = 37,
    msoEncodingEBCDICInternational = 500,
    msoEncodingEBCDICMultilingualROECELatin2 = 870,
    msoEncodingEBCDICGreekModern = 875,
    msoEncodingEBCDICTurkishLatin5 = 1026,
    msoEncodingEBCDICGermany = 20273,
    msoEncodingEBCDICDenmarkNorway = 20277,
    msoEncodingEBCDICFinlandSweden = 20278,
    msoEncodingEBCDICItaly = 20280,
    msoEncodingEBCDICLatinAmericaSpain = 20284,
    msoEncodingEBCDICUnitedKingdom = 20285,
    msoEncodingEBCDICJapaneseKatakanaExtended = 20290,
    msoEncodingEBCDICFrance = 20297,
    msoEncodingEBCDICArabic = 20420,
    msoEncodingEBCDICGreek = 20423,
    msoEncodingEBCDICHebrew = 20424,
    msoEncodingEBCDICKoreanExtended = 20833,
    msoEncodingEBCDICThai = 20838,
    msoEncodingEBCDICIcelandic = 20871,
    msoEncodingEBCDICTurkish = 20905,
    msoEncodingEBCDICRussian = 20880,
    msoEncodingEBCDICSerbianBulgarian = 21025,
    msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese = 50930,
    msoEncodingEBCDICUSCanadaandJapanese = 50931,
    msoEncodingEBCDICKoreanExtendedAndKorean = 50933,
    msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese = 50935,
    msoEncodingEBCDICUSCanadaAndTraditionalChinese = 50937,
    msoEncodingEBCDICJapaneseLatinExtendedAndJapanese = 50939,
    msoEncodingOEMUnitedStates = 437,
    msoEncodingOEMGreek437G = 737,
    msoEncodingOEMBaltic = 775,
    msoEncodingOEMMultilingualLatinI = 850,
    msoEncodingOEMMultilingualLatinII = 852,
    msoEncodingOEMCyrillic = 855,
    msoEncodingOEMTurkish = 857,
    msoEncodingOEMPortuguese = 860,
    msoEncodingOEMIcelandic = 861,
    msoEncodingOEMHebrew = 862,
    msoEncodingOEMCanadianFrench = 863,
    msoEncodingOEMArabic = 864,
    msoEncodingOEMNordic = 865,
    msoEncodingOEMCyrillicII = 866,
    msoEncodingOEMModernGreek = 869,
    msoEncodingEUCJapanese = 51932,
    msoEncodingEUCChineseSimplifiedChinese = 51936,
    msoEncodingEUCKorean = 51949,
    msoEncodingEUCTaiwaneseTraditionalChinese = 51950,
    msoEncodingArabicASMO = 708,
    msoEncodingArabicTransparentASMO = 720,
    msoEncodingKoreanJohab = 1361,
    msoEncodingTaiwanCNS = 20000,
    msoEncodingTaiwanTCA = 20001,
    msoEncodingTaiwanEten = 20002,
    msoEncodingTaiwanIBM5550 = 20003,
    msoEncodingTaiwanTeleText = 20004,
    msoEncodingTaiwanWang = 20005,
    msoEncodingIA5IRV = 20105,
    msoEncodingIA5German = 20106,
    msoEncodingIA5Swedish = 20107,
    msoEncodingIA5Norwegian = 20108,
    msoEncodingUSASCII = 20127,
    msoEncodingT61 = 20261,
    msoEncodingISO6937NonSpacingAccent = 20269,
    msoEncodingKOI8R = 20866,
    msoEncodingExtAlphaLowercase = 21027,
    msoEncodingKOI8U = 21866,
    msoEncodingEuropa3 = 29001,
    msoEncodingHZGBSimplifiedChinese = 52936,
    msoEncodingUTF7 = 65000,
    msoEncodingUTF8 = 65001
};

struct __declspec(uuid("000c0913-0000-0000-c000-000000000046"))
WebPageFont : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetProportionalFont,put=PutProportionalFont))
    _bstr_t ProportionalFont;
    __declspec(property(get=GetProportionalFontSize,put=PutProportionalFontSize))
    float ProportionalFontSize;
    __declspec(property(get=GetFixedWidthFont,put=PutFixedWidthFont))
    _bstr_t FixedWidthFont;
    __declspec(property(get=GetFixedWidthFontSize,put=PutFixedWidthFontSize))
    float FixedWidthFontSize;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetProportionalFont ( );
    void PutProportionalFont (
        _bstr_t pstr );
    float GetProportionalFontSize ( );
    void PutProportionalFontSize (
        float pf );
    _bstr_t GetFixedWidthFont ( );
    void PutFixedWidthFont (
        _bstr_t pstr );
    float GetFixedWidthFontSize ( );
    void PutFixedWidthFontSize (
        float pf );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ProportionalFont (
        BSTR * pstr ) = 0;
    virtual HRESULT __stdcall put_ProportionalFont (
        BSTR pstr ) = 0;
    virtual HRESULT __stdcall get_ProportionalFontSize (
        float * pf ) = 0;
    virtual HRESULT __stdcall put_ProportionalFontSize (
        float pf ) = 0;
    virtual HRESULT __stdcall get_FixedWidthFont (
        BSTR * pstr ) = 0;
    virtual HRESULT __stdcall put_FixedWidthFont (
        BSTR pstr ) = 0;
    virtual HRESULT __stdcall get_FixedWidthFontSize (
        float * pf ) = 0;
    virtual HRESULT __stdcall put_FixedWidthFontSize (
        float pf ) = 0;
};

struct __declspec(uuid("000c0914-0000-0000-c000-000000000046"))
WebPageFonts : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    WebPageFontPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    WebPageFontPtr GetItem (
        enum MsoCharacterSet Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        int * Count ) = 0;
    virtual HRESULT __stdcall get_Item (
        enum MsoCharacterSet Index,
        struct WebPageFont * * Item ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * _NewEnum ) = 0;
};

enum MsoHTMLProjectOpen
{
    msoHTMLProjectOpenSourceView = 1,
    msoHTMLProjectOpenTextView = 2
};

enum MsoHTMLProjectState
{
    msoHTMLProjectStateDocumentLocked = 1,
    msoHTMLProjectStateProjectLocked = 2,
    msoHTMLProjectStateDocumentProjectUnlocked = 3
};

struct __declspec(uuid("000c0358-0000-0000-c000-000000000046"))
HTMLProjectItem : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIsOpen))
    VARIANT_BOOL IsOpen;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    VARIANT_BOOL GetIsOpen ( );
    HRESULT LoadFromFile (
        _bstr_t FileName );
    HRESULT Open (
        enum MsoHTMLProjectOpen OpenKind );
    HRESULT SaveCopyAs (
        _bstr_t FileName );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * RetValue ) = 0;
    virtual HRESULT __stdcall get_IsOpen (
        VARIANT_BOOL * RetValue ) = 0;
    virtual HRESULT __stdcall raw_LoadFromFile (
        BSTR FileName ) = 0;
    virtual HRESULT __stdcall raw_Open (
        enum MsoHTMLProjectOpen OpenKind ) = 0;
    virtual HRESULT __stdcall raw_SaveCopyAs (
        BSTR FileName ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * Text ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR Text ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
};

struct __declspec(uuid("000c0357-0000-0000-c000-000000000046"))
HTMLProjectItems : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HTMLProjectItemPtr Item (
        VARIANT * Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT * Index,
        struct HTMLProjectItem * * RetValue ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RetValue ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RetValue ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
};

struct __declspec(uuid("000c0356-0000-0000-c000-000000000046"))
HTMLProject : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetState))
    enum MsoHTMLProjectState State;
    __declspec(property(get=GetHTMLProjectItems))
    HTMLProjectItemsPtr HTMLProjectItems;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    enum MsoHTMLProjectState GetState ( );
    HRESULT RefreshProject (
        VARIANT_BOOL Refresh );
    HRESULT RefreshDocument (
        VARIANT_BOOL Refresh );
    HTMLProjectItemsPtr GetHTMLProjectItems ( );
    IDispatchPtr GetParent ( );
    HRESULT Open (
        enum MsoHTMLProjectOpen OpenKind );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_State (
        enum MsoHTMLProjectState * State ) = 0;
    virtual HRESULT __stdcall raw_RefreshProject (
        VARIANT_BOOL Refresh ) = 0;
    virtual HRESULT __stdcall raw_RefreshDocument (
        VARIANT_BOOL Refresh ) = 0;
    virtual HRESULT __stdcall get_HTMLProjectItems (
        struct HTMLProjectItems * * HTMLProjectItems ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppidisp ) = 0;
    virtual HRESULT __stdcall raw_Open (
        enum MsoHTMLProjectOpen OpenKind ) = 0;
};

struct __declspec(uuid("000c035a-0000-0000-c000-000000000046"))
MsoDebugOptions : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetFeatureReports,put=PutFeatureReports))
    int FeatureReports;

    //
    // Wrapper methods for error-handling
    //

    int GetFeatureReports ( );
    void PutFeatureReports (
        int puintFeatureReports );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_FeatureReports (
        int * puintFeatureReports ) = 0;
    virtual HRESULT __stdcall put_FeatureReports (
        int puintFeatureReports ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("Mso9.tli")
__declspec(implementation_key(1)) IDispatchPtr IAccessible::GetaccParent ( );
__declspec(implementation_key(2)) long IAccessible::GetaccChildCount ( );
__declspec(implementation_key(3)) IDispatchPtr IAccessible::GetaccChild ( const _variant_t & varChild );
__declspec(implementation_key(4)) _bstr_t IAccessible::GetaccName ( const _variant_t & varChild );
__declspec(implementation_key(5)) _bstr_t IAccessible::GetaccValue ( const _variant_t & varChild );
__declspec(implementation_key(6)) _bstr_t IAccessible::GetaccDescription ( const _variant_t & varChild );
__declspec(implementation_key(7)) _variant_t IAccessible::GetaccRole ( const _variant_t & varChild );
__declspec(implementation_key(8)) _variant_t IAccessible::GetaccState ( const _variant_t & varChild );
__declspec(implementation_key(9)) _bstr_t IAccessible::GetaccHelp ( const _variant_t & varChild );
__declspec(implementation_key(10)) long IAccessible::GetaccHelpTopic ( BSTR * pszHelpFile, const _variant_t & varChild );
__declspec(implementation_key(11)) _bstr_t IAccessible::GetaccKeyboardShortcut ( const _variant_t & varChild );
__declspec(implementation_key(12)) _variant_t IAccessible::GetaccFocus ( );
__declspec(implementation_key(13)) _variant_t IAccessible::GetaccSelection ( );
__declspec(implementation_key(14)) _bstr_t IAccessible::GetaccDefaultAction ( const _variant_t & varChild );
__declspec(implementation_key(15)) HRESULT IAccessible::accSelect ( long flagsSelect, const _variant_t & varChild );
__declspec(implementation_key(16)) HRESULT IAccessible::accLocation ( long * pxLeft, long * pyTop, long * pcxWidth, long * pcyHeight, const _variant_t & varChild );
__declspec(implementation_key(17)) _variant_t IAccessible::accNavigate ( long navDir, const _variant_t & varStart );
__declspec(implementation_key(18)) _variant_t IAccessible::accHitTest ( long xLeft, long yTop );
__declspec(implementation_key(19)) HRESULT IAccessible::accDoDefaultAction ( const _variant_t & varChild );
__declspec(implementation_key(20)) void IAccessible::PutaccName ( const _variant_t & varChild, _bstr_t pszName );
__declspec(implementation_key(21)) void IAccessible::PutaccValue ( const _variant_t & varChild, _bstr_t pszValue );
__declspec(implementation_key(22)) IDispatchPtr _IMsoDispObj::GetApplication ( );
__declspec(implementation_key(23)) long _IMsoDispObj::GetCreator ( );
__declspec(implementation_key(24)) IDispatchPtr _IMsoOleAccDispObj::GetApplication ( );
__declspec(implementation_key(25)) long _IMsoOleAccDispObj::GetCreator ( );
__declspec(implementation_key(26)) CommandBarControlPtr _CommandBars::GetActionControl ( );
__declspec(implementation_key(27)) CommandBarPtr _CommandBars::GetActiveMenuBar ( );
__declspec(implementation_key(28)) CommandBarPtr _CommandBars::Add ( const _variant_t & Name, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary );
__declspec(implementation_key(29)) int _CommandBars::GetCount ( );
__declspec(implementation_key(30)) VARIANT_BOOL _CommandBars::GetDisplayTooltips ( );
__declspec(implementation_key(31)) void _CommandBars::PutDisplayTooltips ( VARIANT_BOOL pvarfDisplayTooltips );
__declspec(implementation_key(32)) VARIANT_BOOL _CommandBars::GetDisplayKeysInTooltips ( );
__declspec(implementation_key(33)) void _CommandBars::PutDisplayKeysInTooltips ( VARIANT_BOOL pvarfDisplayKeys );
__declspec(implementation_key(34)) CommandBarControlPtr _CommandBars::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible );
__declspec(implementation_key(35)) CommandBarPtr _CommandBars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(36)) VARIANT_BOOL _CommandBars::GetLargeButtons ( );
__declspec(implementation_key(37)) void _CommandBars::PutLargeButtons ( VARIANT_BOOL pvarfLargeButtons );
__declspec(implementation_key(38)) enum MsoMenuAnimation _CommandBars::GetMenuAnimationStyle ( );
__declspec(implementation_key(39)) void _CommandBars::PutMenuAnimationStyle ( enum MsoMenuAnimation pma );
__declspec(implementation_key(40)) IUnknownPtr _CommandBars::Get_NewEnum ( );
__declspec(implementation_key(41)) IDispatchPtr _CommandBars::GetParent ( );
__declspec(implementation_key(42)) HRESULT _CommandBars::ReleaseFocus ( );
__declspec(implementation_key(43)) int _CommandBars::GetIdsString ( int ids, BSTR * pbstrName );
__declspec(implementation_key(44)) int _CommandBars::GetTmcGetName ( int tmc, BSTR * pbstrName );
__declspec(implementation_key(45)) VARIANT_BOOL _CommandBars::GetAdaptiveMenus ( );
__declspec(implementation_key(46)) void _CommandBars::PutAdaptiveMenus ( VARIANT_BOOL pvarfAdaptiveMenus );
__declspec(implementation_key(47)) CommandBarControlsPtr _CommandBars::FindControls ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible );
__declspec(implementation_key(48)) CommandBarPtr _CommandBars::AddEx ( const _variant_t & TbidOrName, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary, const _variant_t & TbtrProtection );
__declspec(implementation_key(49)) VARIANT_BOOL _CommandBars::GetDisplayFonts ( );
__declspec(implementation_key(50)) void _CommandBars::PutDisplayFonts ( VARIANT_BOOL pvarfDisplayFonts );
__declspec(implementation_key(51)) VARIANT_BOOL CommandBar::GetBuiltIn ( );
__declspec(implementation_key(52)) _bstr_t CommandBar::GetContext ( );
__declspec(implementation_key(53)) void CommandBar::PutContext ( _bstr_t pbstrContext );
__declspec(implementation_key(54)) CommandBarControlsPtr CommandBar::GetControls ( );
__declspec(implementation_key(55)) HRESULT CommandBar::Delete ( );
__declspec(implementation_key(56)) VARIANT_BOOL CommandBar::GetEnabled ( );
__declspec(implementation_key(57)) void CommandBar::PutEnabled ( VARIANT_BOOL pvarfEnabled );
__declspec(implementation_key(58)) CommandBarControlPtr CommandBar::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible, const _variant_t & Recursive );
__declspec(implementation_key(59)) int CommandBar::GetHeight ( );
__declspec(implementation_key(60)) void CommandBar::PutHeight ( int pdy );
__declspec(implementation_key(61)) int CommandBar::GetIndex ( );
__declspec(implementation_key(62)) long CommandBar::GetInstanceId ( );
__declspec(implementation_key(63)) int CommandBar::GetLeft ( );
__declspec(implementation_key(64)) void CommandBar::PutLeft ( int pxpLeft );
__declspec(implementation_key(65)) _bstr_t CommandBar::GetName ( );
__declspec(implementation_key(66)) void CommandBar::PutName ( _bstr_t pbstrName );
__declspec(implementation_key(67)) _bstr_t CommandBar::GetNameLocal ( );
__declspec(implementation_key(68)) void CommandBar::PutNameLocal ( _bstr_t pbstrNameLocal );
__declspec(implementation_key(69)) IDispatchPtr CommandBar::GetParent ( );
__declspec(implementation_key(70)) enum MsoBarPosition CommandBar::GetPosition ( );
__declspec(implementation_key(71)) void CommandBar::PutPosition ( enum MsoBarPosition ppos );
__declspec(implementation_key(72)) int CommandBar::GetRowIndex ( );
__declspec(implementation_key(73)) void CommandBar::PutRowIndex ( int piRow );
__declspec(implementation_key(74)) enum MsoBarProtection CommandBar::GetProtection ( );
__declspec(implementation_key(75)) void CommandBar::PutProtection ( enum MsoBarProtection pprot );
__declspec(implementation_key(76)) HRESULT CommandBar::Reset ( );
__declspec(implementation_key(77)) HRESULT CommandBar::ShowPopup ( const _variant_t & x, const _variant_t & y );
__declspec(implementation_key(78)) int CommandBar::GetTop ( );
__declspec(implementation_key(79)) void CommandBar::PutTop ( int pypTop );
__declspec(implementation_key(80)) enum MsoBarType CommandBar::GetType ( );
__declspec(implementation_key(81)) VARIANT_BOOL CommandBar::GetVisible ( );
__declspec(implementation_key(82)) void CommandBar::PutVisible ( VARIANT_BOOL pvarfVisible );
__declspec(implementation_key(83)) int CommandBar::GetWidth ( );
__declspec(implementation_key(84)) void CommandBar::PutWidth ( int pdx );
__declspec(implementation_key(85)) VARIANT_BOOL CommandBar::GetAdaptiveMenu ( );
__declspec(implementation_key(86)) void CommandBar::PutAdaptiveMenu ( VARIANT_BOOL pvarfAdaptiveMenu );
__declspec(implementation_key(87)) CommandBarControlPtr CommandBarControls::Add ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Parameter, const _variant_t & Before, const _variant_t & Temporary );
__declspec(implementation_key(88)) int CommandBarControls::GetCount ( );
__declspec(implementation_key(89)) CommandBarControlPtr CommandBarControls::GetItem ( const _variant_t & Index );
__declspec(implementation_key(90)) IUnknownPtr CommandBarControls::Get_NewEnum ( );
__declspec(implementation_key(91)) CommandBarPtr CommandBarControls::GetParent ( );
__declspec(implementation_key(92)) VARIANT_BOOL CommandBarControl::GetBeginGroup ( );
__declspec(implementation_key(93)) void CommandBarControl::PutBeginGroup ( VARIANT_BOOL pvarfBeginGroup );
__declspec(implementation_key(94)) VARIANT_BOOL CommandBarControl::GetBuiltIn ( );
__declspec(implementation_key(95)) _bstr_t CommandBarControl::GetCaption ( );
__declspec(implementation_key(96)) void CommandBarControl::PutCaption ( _bstr_t pbstrCaption );
__declspec(implementation_key(97)) IDispatchPtr CommandBarControl::GetControl ( );
__declspec(implementation_key(98)) CommandBarControlPtr CommandBarControl::Copy ( const _variant_t & Bar, const _variant_t & Before );
__declspec(implementation_key(99)) HRESULT CommandBarControl::Delete ( const _variant_t & Temporary );
__declspec(implementation_key(100)) _bstr_t CommandBarControl::GetDescriptionText ( );
__declspec(implementation_key(101)) void CommandBarControl::PutDescriptionText ( _bstr_t pbstrText );
__declspec(implementation_key(102)) VARIANT_BOOL CommandBarControl::GetEnabled ( );
__declspec(implementation_key(103)) void CommandBarControl::PutEnabled ( VARIANT_BOOL pvarfEnabled );
__declspec(implementation_key(104)) HRESULT CommandBarControl::Execute ( );
__declspec(implementation_key(105)) int CommandBarControl::GetHeight ( );
__declspec(implementation_key(106)) void CommandBarControl::PutHeight ( int pdy );
__declspec(implementation_key(107)) int CommandBarControl::GetHelpContextId ( );
__declspec(implementation_key(108)) void CommandBarControl::PutHelpContextId ( int pid );
__declspec(implementation_key(109)) _bstr_t CommandBarControl::GetHelpFile ( );
__declspec(implementation_key(110)) void CommandBarControl::PutHelpFile ( _bstr_t pbstrFilename );
__declspec(implementation_key(111)) int CommandBarControl::GetId ( );
__declspec(implementation_key(112)) int CommandBarControl::GetIndex ( );
__declspec(implementation_key(113)) long CommandBarControl::GetInstanceId ( );
__declspec(implementation_key(114)) CommandBarControlPtr CommandBarControl::Move ( const _variant_t & Bar, const _variant_t & Before );
__declspec(implementation_key(115)) int CommandBarControl::GetLeft ( );
__declspec(implementation_key(116)) enum MsoControlOLEUsage CommandBarControl::GetOLEUsage ( );
__declspec(implementation_key(117)) void CommandBarControl::PutOLEUsage ( enum MsoControlOLEUsage pcou );
__declspec(implementation_key(118)) _bstr_t CommandBarControl::GetOnAction ( );
__declspec(implementation_key(119)) void CommandBarControl::PutOnAction ( _bstr_t pbstrOnAction );
__declspec(implementation_key(120)) CommandBarPtr CommandBarControl::GetParent ( );
__declspec(implementation_key(121)) _bstr_t CommandBarControl::GetParameter ( );
__declspec(implementation_key(122)) void CommandBarControl::PutParameter ( _bstr_t pbstrParam );
__declspec(implementation_key(123)) int CommandBarControl::GetPriority ( );
__declspec(implementation_key(124)) void CommandBarControl::PutPriority ( int pnPri );
__declspec(implementation_key(125)) HRESULT CommandBarControl::Reset ( );
__declspec(implementation_key(126)) HRESULT CommandBarControl::SetFocus ( );
__declspec(implementation_key(127)) _bstr_t CommandBarControl::GetTag ( );
__declspec(implementation_key(128)) void CommandBarControl::PutTag ( _bstr_t pbstrTag );
__declspec(implementation_key(129)) _bstr_t CommandBarControl::GetTooltipText ( );
__declspec(implementation_key(130)) void CommandBarControl::PutTooltipText ( _bstr_t pbstrTooltip );
__declspec(implementation_key(131)) int CommandBarControl::GetTop ( );
__declspec(implementation_key(132)) enum MsoControlType CommandBarControl::GetType ( );
__declspec(implementation_key(133)) VARIANT_BOOL CommandBarControl::GetVisible ( );
__declspec(implementation_key(134)) void CommandBarControl::PutVisible ( VARIANT_BOOL pvarfVisible );
__declspec(implementation_key(135)) int CommandBarControl::GetWidth ( );
__declspec(implementation_key(136)) void CommandBarControl::PutWidth ( int pdx );
__declspec(implementation_key(137)) VARIANT_BOOL CommandBarControl::GetIsPriorityDropped ( );
__declspec(implementation_key(138)) HRESULT CommandBarControl::Reserved1 ( );
__declspec(implementation_key(139)) HRESULT CommandBarControl::Reserved2 ( );
__declspec(implementation_key(140)) HRESULT CommandBarControl::Reserved3 ( );
__declspec(implementation_key(141)) HRESULT CommandBarControl::Reserved4 ( );
__declspec(implementation_key(142)) HRESULT CommandBarControl::Reserved5 ( );
__declspec(implementation_key(143)) HRESULT CommandBarControl::Reserved6 ( );
__declspec(implementation_key(144)) HRESULT CommandBarControl::Reserved7 ( );
__declspec(implementation_key(145)) VARIANT_BOOL _CommandBarButton::GetBuiltInFace ( );
__declspec(implementation_key(146)) void _CommandBarButton::PutBuiltInFace ( VARIANT_BOOL pvarfBuiltIn );
__declspec(implementation_key(147)) HRESULT _CommandBarButton::CopyFace ( );
__declspec(implementation_key(148)) int _CommandBarButton::GetFaceId ( );
__declspec(implementation_key(149)) void _CommandBarButton::PutFaceId ( int pid );
__declspec(implementation_key(150)) HRESULT _CommandBarButton::PasteFace ( );
__declspec(implementation_key(151)) _bstr_t _CommandBarButton::GetShortcutText ( );
__declspec(implementation_key(152)) void _CommandBarButton::PutShortcutText ( _bstr_t pbstrText );
__declspec(implementation_key(153)) enum MsoButtonState _CommandBarButton::GetState ( );
__declspec(implementation_key(154)) void _CommandBarButton::PutState ( enum MsoButtonState pstate );
__declspec(implementation_key(155)) enum MsoButtonStyle _CommandBarButton::GetStyle ( );
__declspec(implementation_key(156)) void _CommandBarButton::PutStyle ( enum MsoButtonStyle pstyle );
__declspec(implementation_key(157)) enum MsoCommandBarButtonHyperlinkType _CommandBarButton::GetHyperlinkType ( );
__declspec(implementation_key(158)) void _CommandBarButton::PutHyperlinkType ( enum MsoCommandBarButtonHyperlinkType phlType );
__declspec(implementation_key(159)) CommandBarPtr CommandBarPopup::GetCommandBar ( );
__declspec(implementation_key(160)) CommandBarControlsPtr CommandBarPopup::GetControls ( );
__declspec(implementation_key(161)) enum MsoOLEMenuGroup CommandBarPopup::GetOLEMenuGroup ( );
__declspec(implementation_key(162)) void CommandBarPopup::PutOLEMenuGroup ( enum MsoOLEMenuGroup pomg );
__declspec(implementation_key(163)) HRESULT _CommandBarComboBox::AddItem ( _bstr_t Text, const _variant_t & Index );
__declspec(implementation_key(164)) HRESULT _CommandBarComboBox::Clear ( );
__declspec(implementation_key(165)) int _CommandBarComboBox::GetDropDownLines ( );
__declspec(implementation_key(166)) void _CommandBarComboBox::PutDropDownLines ( int pcLines );
__declspec(implementation_key(167)) int _CommandBarComboBox::GetDropDownWidth ( );
__declspec(implementation_key(168)) void _CommandBarComboBox::PutDropDownWidth ( int pdx );
__declspec(implementation_key(169)) _bstr_t _CommandBarComboBox::GetList ( int Index );
__declspec(implementation_key(170)) void _CommandBarComboBox::PutList ( int Index, _bstr_t pbstrItem );
__declspec(implementation_key(171)) int _CommandBarComboBox::GetListCount ( );
__declspec(implementation_key(172)) int _CommandBarComboBox::GetListHeaderCount ( );
__declspec(implementation_key(173)) void _CommandBarComboBox::PutListHeaderCount ( int pcItems );
__declspec(implementation_key(174)) int _CommandBarComboBox::GetListIndex ( );
__declspec(implementation_key(175)) void _CommandBarComboBox::PutListIndex ( int pi );
__declspec(implementation_key(176)) HRESULT _CommandBarComboBox::RemoveItem ( int Index );
__declspec(implementation_key(177)) enum MsoComboStyle _CommandBarComboBox::GetStyle ( );
__declspec(implementation_key(178)) void _CommandBarComboBox::PutStyle ( enum MsoComboStyle pstyle );
__declspec(implementation_key(179)) _bstr_t _CommandBarComboBox::GetText ( );
__declspec(implementation_key(180)) void _CommandBarComboBox::PutText ( _bstr_t pbstrText );
__declspec(implementation_key(181)) _bstr_t _CommandBarActiveX::GetControlCLSID ( );
__declspec(implementation_key(182)) void _CommandBarActiveX::PutControlCLSID ( _bstr_t pbstrClsid );
__declspec(implementation_key(183)) IUnknownPtr _CommandBarActiveX::GetQueryControlInterface ( _bstr_t bstrIid );
__declspec(implementation_key(184)) HRESULT _CommandBarActiveX::SetInnerObjectFactory ( IUnknown * pUnk );
__declspec(implementation_key(185)) HRESULT _CommandBarActiveX::EnsureControl ( );
__declspec(implementation_key(186)) void _CommandBarActiveX::PutInitWith ( IUnknown * _arg1 );
__declspec(implementation_key(187)) IDispatchPtr Adjustments::GetParent ( );
__declspec(implementation_key(188)) int Adjustments::GetCount ( );
__declspec(implementation_key(189)) float Adjustments::GetItem ( int Index );
__declspec(implementation_key(190)) void Adjustments::PutItem ( int Index, float Val );
__declspec(implementation_key(191)) IDispatchPtr CalloutFormat::GetParent ( );
__declspec(implementation_key(192)) HRESULT CalloutFormat::AutomaticLength ( );
__declspec(implementation_key(193)) HRESULT CalloutFormat::CustomDrop ( float Drop );
__declspec(implementation_key(194)) HRESULT CalloutFormat::CustomLength ( float Length );
__declspec(implementation_key(195)) HRESULT CalloutFormat::PresetDrop ( enum MsoCalloutDropType DropType );
__declspec(implementation_key(196)) enum MsoTriState CalloutFormat::GetAccent ( );
__declspec(implementation_key(197)) void CalloutFormat::PutAccent ( enum MsoTriState Accent );
__declspec(implementation_key(198)) enum MsoCalloutAngleType CalloutFormat::GetAngle ( );
__declspec(implementation_key(199)) void CalloutFormat::PutAngle ( enum MsoCalloutAngleType Angle );
__declspec(implementation_key(200)) enum MsoTriState CalloutFormat::GetAutoAttach ( );
__declspec(implementation_key(201)) void CalloutFormat::PutAutoAttach ( enum MsoTriState AutoAttach );
__declspec(implementation_key(202)) enum MsoTriState CalloutFormat::GetAutoLength ( );
__declspec(implementation_key(203)) enum MsoTriState CalloutFormat::GetBorder ( );
__declspec(implementation_key(204)) void CalloutFormat::PutBorder ( enum MsoTriState Border );
__declspec(implementation_key(205)) float CalloutFormat::GetDrop ( );
__declspec(implementation_key(206)) enum MsoCalloutDropType CalloutFormat::GetDropType ( );
__declspec(implementation_key(207)) float CalloutFormat::GetGap ( );
__declspec(implementation_key(208)) void CalloutFormat::PutGap ( float Gap );
__declspec(implementation_key(209)) float CalloutFormat::GetLength ( );
__declspec(implementation_key(210)) enum MsoCalloutType CalloutFormat::GetType ( );
__declspec(implementation_key(211)) void CalloutFormat::PutType ( enum MsoCalloutType Type );
__declspec(implementation_key(212)) IDispatchPtr ColorFormat::GetParent ( );
__declspec(implementation_key(213)) MsoRGBType ColorFormat::GetRGB ( );
__declspec(implementation_key(214)) void ColorFormat::PutRGB ( MsoRGBType RGB );
__declspec(implementation_key(215)) int ColorFormat::GetSchemeColor ( );
__declspec(implementation_key(216)) void ColorFormat::PutSchemeColor ( int SchemeColor );
__declspec(implementation_key(217)) enum MsoColorType ColorFormat::GetType ( );
__declspec(implementation_key(218)) IDispatchPtr ConnectorFormat::GetParent ( );
__declspec(implementation_key(219)) HRESULT ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, int ConnectionSite );
__declspec(implementation_key(220)) HRESULT ConnectorFormat::BeginDisconnect ( );
__declspec(implementation_key(221)) HRESULT ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, int ConnectionSite );
__declspec(implementation_key(222)) HRESULT ConnectorFormat::EndDisconnect ( );
__declspec(implementation_key(223)) enum MsoTriState ConnectorFormat::GetBeginConnected ( );
__declspec(implementation_key(224)) ShapePtr ConnectorFormat::GetBeginConnectedShape ( );
__declspec(implementation_key(225)) int ConnectorFormat::GetBeginConnectionSite ( );
__declspec(implementation_key(226)) enum MsoTriState ConnectorFormat::GetEndConnected ( );
__declspec(implementation_key(227)) ShapePtr ConnectorFormat::GetEndConnectedShape ( );
__declspec(implementation_key(228)) int ConnectorFormat::GetEndConnectionSite ( );
__declspec(implementation_key(229)) enum MsoConnectorType ConnectorFormat::GetType ( );
__declspec(implementation_key(230)) void ConnectorFormat::PutType ( enum MsoConnectorType Type );
__declspec(implementation_key(231)) IDispatchPtr FillFormat::GetParent ( );
__declspec(implementation_key(232)) HRESULT FillFormat::Background ( );
__declspec(implementation_key(233)) HRESULT FillFormat::OneColorGradient ( enum MsoGradientStyle Style, int Variant, float Degree );
__declspec(implementation_key(234)) HRESULT FillFormat::Patterned ( enum MsoPatternType Pattern );
__declspec(implementation_key(235)) HRESULT FillFormat::PresetGradient ( enum MsoGradientStyle Style, int Variant, enum MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(236)) HRESULT FillFormat::PresetTextured ( enum MsoPresetTexture PresetTexture );
__declspec(implementation_key(237)) HRESULT FillFormat::Solid ( );
__declspec(implementation_key(238)) HRESULT FillFormat::TwoColorGradient ( enum MsoGradientStyle Style, int Variant );
__declspec(implementation_key(239)) HRESULT FillFormat::UserPicture ( _bstr_t PictureFile );
__declspec(implementation_key(240)) HRESULT FillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(241)) ColorFormatPtr FillFormat::GetBackColor ( );
__declspec(implementation_key(242)) void FillFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(243)) ColorFormatPtr FillFormat::GetForeColor ( );
__declspec(implementation_key(244)) void FillFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(245)) enum MsoGradientColorType FillFormat::GetGradientColorType ( );
__declspec(implementation_key(246)) float FillFormat::GetGradientDegree ( );
__declspec(implementation_key(247)) enum MsoGradientStyle FillFormat::GetGradientStyle ( );
__declspec(implementation_key(248)) int FillFormat::GetGradientVariant ( );
__declspec(implementation_key(249)) enum MsoPatternType FillFormat::GetPattern ( );
__declspec(implementation_key(250)) enum MsoPresetGradientType FillFormat::GetPresetGradientType ( );
__declspec(implementation_key(251)) enum MsoPresetTexture FillFormat::GetPresetTexture ( );
__declspec(implementation_key(252)) _bstr_t FillFormat::GetTextureName ( );
__declspec(implementation_key(253)) enum MsoTextureType FillFormat::GetTextureType ( );
__declspec(implementation_key(254)) float FillFormat::GetTransparency ( );
__declspec(implementation_key(255)) void FillFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(256)) enum MsoFillType FillFormat::GetType ( );
__declspec(implementation_key(257)) enum MsoTriState FillFormat::GetVisible ( );
__declspec(implementation_key(258)) void FillFormat::PutVisible ( enum MsoTriState Visible );
__declspec(implementation_key(259)) IDispatchPtr FreeformBuilder::GetParent ( );
__declspec(implementation_key(260)) HRESULT FreeformBuilder::AddNodes ( enum MsoSegmentType SegmentType, enum MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(261)) ShapePtr FreeformBuilder::ConvertToShape ( );
__declspec(implementation_key(262)) IDispatchPtr GroupShapes::GetParent ( );
__declspec(implementation_key(263)) int GroupShapes::GetCount ( );
__declspec(implementation_key(264)) ShapePtr GroupShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(265)) IUnknownPtr GroupShapes::Get_NewEnum ( );
__declspec(implementation_key(266)) IDispatchPtr LineFormat::GetParent ( );
__declspec(implementation_key(267)) ColorFormatPtr LineFormat::GetBackColor ( );
__declspec(implementation_key(268)) void LineFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(269)) enum MsoArrowheadLength LineFormat::GetBeginArrowheadLength ( );
__declspec(implementation_key(270)) void LineFormat::PutBeginArrowheadLength ( enum MsoArrowheadLength BeginArrowheadLength );
__declspec(implementation_key(271)) enum MsoArrowheadStyle LineFormat::GetBeginArrowheadStyle ( );
__declspec(implementation_key(272)) void LineFormat::PutBeginArrowheadStyle ( enum MsoArrowheadStyle BeginArrowheadStyle );
__declspec(implementation_key(273)) enum MsoArrowheadWidth LineFormat::GetBeginArrowheadWidth ( );
__declspec(implementation_key(274)) void LineFormat::PutBeginArrowheadWidth ( enum MsoArrowheadWidth BeginArrowheadWidth );
__declspec(implementation_key(275)) enum MsoLineDashStyle LineFormat::GetDashStyle ( );
__declspec(implementation_key(276)) void LineFormat::PutDashStyle ( enum MsoLineDashStyle DashStyle );
__declspec(implementation_key(277)) enum MsoArrowheadLength LineFormat::GetEndArrowheadLength ( );
__declspec(implementation_key(278)) void LineFormat::PutEndArrowheadLength ( enum MsoArrowheadLength EndArrowheadLength );
__declspec(implementation_key(279)) enum MsoArrowheadStyle LineFormat::GetEndArrowheadStyle ( );
__declspec(implementation_key(280)) void LineFormat::PutEndArrowheadStyle ( enum MsoArrowheadStyle EndArrowheadStyle );
__declspec(implementation_key(281)) enum MsoArrowheadWidth LineFormat::GetEndArrowheadWidth ( );
__declspec(implementation_key(282)) void LineFormat::PutEndArrowheadWidth ( enum MsoArrowheadWidth EndArrowheadWidth );
__declspec(implementation_key(283)) ColorFormatPtr LineFormat::GetForeColor ( );
__declspec(implementation_key(284)) void LineFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(285)) enum MsoPatternType LineFormat::GetPattern ( );
__declspec(implementation_key(286)) void LineFormat::PutPattern ( enum MsoPatternType Pattern );
__declspec(implementation_key(287)) enum MsoLineStyle LineFormat::GetStyle ( );
__declspec(implementation_key(288)) void LineFormat::PutStyle ( enum MsoLineStyle Style );
__declspec(implementation_key(289)) float LineFormat::GetTransparency ( );
__declspec(implementation_key(290)) void LineFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(291)) enum MsoTriState LineFormat::GetVisible ( );
__declspec(implementation_key(292)) void LineFormat::PutVisible ( enum MsoTriState Visible );
__declspec(implementation_key(293)) float LineFormat::GetWeight ( );
__declspec(implementation_key(294)) void LineFormat::PutWeight ( float Weight );
__declspec(implementation_key(295)) IDispatchPtr ShapeNode::GetParent ( );
__declspec(implementation_key(296)) enum MsoEditingType ShapeNode::GetEditingType ( );
__declspec(implementation_key(297)) _variant_t ShapeNode::GetPoints ( );
__declspec(implementation_key(298)) enum MsoSegmentType ShapeNode::GetSegmentType ( );
__declspec(implementation_key(299)) IDispatchPtr ShapeNodes::GetParent ( );
__declspec(implementation_key(300)) int ShapeNodes::GetCount ( );
__declspec(implementation_key(301)) ShapeNodePtr ShapeNodes::Item ( const _variant_t & Index );
__declspec(implementation_key(302)) IUnknownPtr ShapeNodes::Get_NewEnum ( );
__declspec(implementation_key(303)) HRESULT ShapeNodes::Delete ( int Index );
__declspec(implementation_key(304)) HRESULT ShapeNodes::Insert ( int Index, enum MsoSegmentType SegmentType, enum MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(305)) HRESULT ShapeNodes::SetEditingType ( int Index, enum MsoEditingType EditingType );
__declspec(implementation_key(306)) HRESULT ShapeNodes::SetPosition ( int Index, float X1, float Y1 );
__declspec(implementation_key(307)) HRESULT ShapeNodes::SetSegmentType ( int Index, enum MsoSegmentType SegmentType );
__declspec(implementation_key(308)) IDispatchPtr PictureFormat::GetParent ( );
__declspec(implementation_key(309)) HRESULT PictureFormat::IncrementBrightness ( float Increment );
__declspec(implementation_key(310)) HRESULT PictureFormat::IncrementContrast ( float Increment );
__declspec(implementation_key(311)) float PictureFormat::GetBrightness ( );
__declspec(implementation_key(312)) void PictureFormat::PutBrightness ( float Brightness );
__declspec(implementation_key(313)) enum MsoPictureColorType PictureFormat::GetColorType ( );
__declspec(implementation_key(314)) void PictureFormat::PutColorType ( enum MsoPictureColorType ColorType );
__declspec(implementation_key(315)) float PictureFormat::GetContrast ( );
__declspec(implementation_key(316)) void PictureFormat::PutContrast ( float Contrast );
__declspec(implementation_key(317)) float PictureFormat::GetCropBottom ( );
__declspec(implementation_key(318)) void PictureFormat::PutCropBottom ( float CropBottom );
__declspec(implementation_key(319)) float PictureFormat::GetCropLeft ( );
__declspec(implementation_key(320)) void PictureFormat::PutCropLeft ( float CropLeft );
__declspec(implementation_key(321)) float PictureFormat::GetCropRight ( );
__declspec(implementation_key(322)) void PictureFormat::PutCropRight ( float CropRight );
__declspec(implementation_key(323)) float PictureFormat::GetCropTop ( );
__declspec(implementation_key(324)) void PictureFormat::PutCropTop ( float CropTop );
__declspec(implementation_key(325)) MsoRGBType PictureFormat::GetTransparencyColor ( );
__declspec(implementation_key(326)) void PictureFormat::PutTransparencyColor ( MsoRGBType TransparencyColor );
__declspec(implementation_key(327)) enum MsoTriState PictureFormat::GetTransparentBackground ( );
__declspec(implementation_key(328)) void PictureFormat::PutTransparentBackground ( enum MsoTriState TransparentBackground );
__declspec(implementation_key(329)) IDispatchPtr ShadowFormat::GetParent ( );
__declspec(implementation_key(330)) HRESULT ShadowFormat::IncrementOffsetX ( float Increment );
__declspec(implementation_key(331)) HRESULT ShadowFormat::IncrementOffsetY ( float Increment );
__declspec(implementation_key(332)) ColorFormatPtr ShadowFormat::GetForeColor ( );
__declspec(implementation_key(333)) void ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(334)) enum MsoTriState ShadowFormat::GetObscured ( );
__declspec(implementation_key(335)) void ShadowFormat::PutObscured ( enum MsoTriState Obscured );
__declspec(implementation_key(336)) float ShadowFormat::GetOffsetX ( );
__declspec(implementation_key(337)) void ShadowFormat::PutOffsetX ( float OffsetX );
__declspec(implementation_key(338)) float ShadowFormat::GetOffsetY ( );
__declspec(implementation_key(339)) void ShadowFormat::PutOffsetY ( float OffsetY );
__declspec(implementation_key(340)) float ShadowFormat::GetTransparency ( );
__declspec(implementation_key(341)) void ShadowFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(342)) enum MsoShadowType ShadowFormat::GetType ( );
__declspec(implementation_key(343)) void ShadowFormat::PutType ( enum MsoShadowType Type );
__declspec(implementation_key(344)) enum MsoTriState ShadowFormat::GetVisible ( );
__declspec(implementation_key(345)) void ShadowFormat::PutVisible ( enum MsoTriState Visible );
__declspec(implementation_key(346)) IDispatchPtr Script::GetParent ( );
__declspec(implementation_key(347)) _bstr_t Script::GetExtended ( );
__declspec(implementation_key(348)) void Script::PutExtended ( _bstr_t Extended );
__declspec(implementation_key(349)) _bstr_t Script::GetId ( );
__declspec(implementation_key(350)) void Script::PutId ( _bstr_t Id );
__declspec(implementation_key(351)) enum MsoScriptLanguage Script::GetLanguage ( );
__declspec(implementation_key(352)) void Script::PutLanguage ( enum MsoScriptLanguage Language );
__declspec(implementation_key(353)) enum MsoScriptLocation Script::GetLocation ( );
__declspec(implementation_key(354)) HRESULT Script::Delete ( );
__declspec(implementation_key(355)) IDispatchPtr Script::GetShape ( );
__declspec(implementation_key(356)) _bstr_t Script::GetScriptText ( );
__declspec(implementation_key(357)) void Script::PutScriptText ( _bstr_t Script );
__declspec(implementation_key(358)) IDispatchPtr Scripts::GetParent ( );
__declspec(implementation_key(359)) long Scripts::GetCount ( );
__declspec(implementation_key(360)) IUnknownPtr Scripts::Get_NewEnum ( );
__declspec(implementation_key(361)) ScriptPtr Scripts::Item ( const _variant_t & Index );
__declspec(implementation_key(362)) ScriptPtr Scripts::Add ( IDispatch * Anchor, enum MsoScriptLocation Location, enum MsoScriptLanguage Language, _bstr_t Id, _bstr_t Extended, _bstr_t ScriptText );
__declspec(implementation_key(363)) HRESULT Scripts::Delete ( );
__declspec(implementation_key(364)) IDispatchPtr Shape::GetParent ( );
__declspec(implementation_key(365)) HRESULT Shape::Apply ( );
__declspec(implementation_key(366)) HRESULT Shape::Delete ( );
__declspec(implementation_key(367)) ShapePtr Shape::Duplicate ( );
__declspec(implementation_key(368)) HRESULT Shape::Flip ( enum MsoFlipCmd FlipCmd );
__declspec(implementation_key(369)) HRESULT Shape::IncrementLeft ( float Increment );
__declspec(implementation_key(370)) HRESULT Shape::IncrementRotation ( float Increment );
__declspec(implementation_key(371)) HRESULT Shape::IncrementTop ( float Increment );
__declspec(implementation_key(372)) HRESULT Shape::PickUp ( );
__declspec(implementation_key(373)) HRESULT Shape::RerouteConnections ( );
__declspec(implementation_key(374)) HRESULT Shape::ScaleHeight ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale );
__declspec(implementation_key(375)) HRESULT Shape::ScaleWidth ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale );
__declspec(implementation_key(376)) HRESULT Shape::Select ( const _variant_t & Replace );
__declspec(implementation_key(377)) HRESULT Shape::SetShapesDefaultProperties ( );
__declspec(implementation_key(378)) ShapeRangePtr Shape::Ungroup ( );
__declspec(implementation_key(379)) HRESULT Shape::ZOrder ( enum MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(380)) AdjustmentsPtr Shape::GetAdjustments ( );
__declspec(implementation_key(381)) enum MsoAutoShapeType Shape::GetAutoShapeType ( );
__declspec(implementation_key(382)) void Shape::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType );
__declspec(implementation_key(383)) enum MsoBlackWhiteMode Shape::GetBlackWhiteMode ( );
__declspec(implementation_key(384)) void Shape::PutBlackWhiteMode ( enum MsoBlackWhiteMode BlackWhiteMode );
__declspec(implementation_key(385)) CalloutFormatPtr Shape::GetCallout ( );
__declspec(implementation_key(386)) int Shape::GetConnectionSiteCount ( );
__declspec(implementation_key(387)) enum MsoTriState Shape::GetConnector ( );
__declspec(implementation_key(388)) ConnectorFormatPtr Shape::GetConnectorFormat ( );
__declspec(implementation_key(389)) FillFormatPtr Shape::GetFill ( );
__declspec(implementation_key(390)) GroupShapesPtr Shape::GetGroupItems ( );
__declspec(implementation_key(391)) float Shape::GetHeight ( );
__declspec(implementation_key(392)) void Shape::PutHeight ( float Height );
__declspec(implementation_key(393)) enum MsoTriState Shape::GetHorizontalFlip ( );
__declspec(implementation_key(394)) float Shape::GetLeft ( );
__declspec(implementation_key(395)) void Shape::PutLeft ( float Left );
__declspec(implementation_key(396)) LineFormatPtr Shape::GetLine ( );
__declspec(implementation_key(397)) enum MsoTriState Shape::GetLockAspectRatio ( );
__declspec(implementation_key(398)) void Shape::PutLockAspectRatio ( enum MsoTriState LockAspectRatio );
__declspec(implementation_key(399)) _bstr_t Shape::GetName ( );
__declspec(implementation_key(400)) void Shape::PutName ( _bstr_t Name );
__declspec(implementation_key(401)) ShapeNodesPtr Shape::GetNodes ( );
__declspec(implementation_key(402)) float Shape::GetRotation ( );
__declspec(implementation_key(403)) void Shape::PutRotation ( float Rotation );
__declspec(implementation_key(404)) PictureFormatPtr Shape::GetPictureFormat ( );
__declspec(implementation_key(405)) ShadowFormatPtr Shape::GetShadow ( );
__declspec(implementation_key(406)) TextEffectFormatPtr Shape::GetTextEffect ( );
__declspec(implementation_key(407)) TextFramePtr Shape::GetTextFrame ( );
__declspec(implementation_key(408)) ThreeDFormatPtr Shape::GetThreeD ( );
__declspec(implementation_key(409)) float Shape::GetTop ( );
__declspec(implementation_key(410)) void Shape::PutTop ( float Top );
__declspec(implementation_key(411)) enum MsoShapeType Shape::GetType ( );
__declspec(implementation_key(412)) enum MsoTriState Shape::GetVerticalFlip ( );
__declspec(implementation_key(413)) _variant_t Shape::GetVertices ( );
__declspec(implementation_key(414)) enum MsoTriState Shape::GetVisible ( );
__declspec(implementation_key(415)) void Shape::PutVisible ( enum MsoTriState Visible );
__declspec(implementation_key(416)) float Shape::GetWidth ( );
__declspec(implementation_key(417)) void Shape::PutWidth ( float Width );
__declspec(implementation_key(418)) int Shape::GetZOrderPosition ( );
__declspec(implementation_key(419)) ScriptPtr Shape::GetScript ( );
__declspec(implementation_key(420)) _bstr_t Shape::GetAlternativeText ( );
__declspec(implementation_key(421)) void Shape::PutAlternativeText ( _bstr_t AlternativeText );
__declspec(implementation_key(422)) IDispatchPtr ShapeRange::GetParent ( );
__declspec(implementation_key(423)) int ShapeRange::GetCount ( );
__declspec(implementation_key(424)) ShapePtr ShapeRange::Item ( const _variant_t & Index );
__declspec(implementation_key(425)) IUnknownPtr ShapeRange::Get_NewEnum ( );
__declspec(implementation_key(426)) HRESULT ShapeRange::Align ( enum MsoAlignCmd AlignCmd, enum MsoTriState RelativeTo );
__declspec(implementation_key(427)) HRESULT ShapeRange::Apply ( );
__declspec(implementation_key(428)) HRESULT ShapeRange::Delete ( );
__declspec(implementation_key(429)) HRESULT ShapeRange::Distribute ( enum MsoDistributeCmd DistributeCmd, enum MsoTriState RelativeTo );
__declspec(implementation_key(430)) ShapeRangePtr ShapeRange::Duplicate ( );
__declspec(implementation_key(431)) HRESULT ShapeRange::Flip ( enum MsoFlipCmd FlipCmd );
__declspec(implementation_key(432)) HRESULT ShapeRange::IncrementLeft ( float Increment );
__declspec(implementation_key(433)) HRESULT ShapeRange::IncrementRotation ( float Increment );
__declspec(implementation_key(434)) HRESULT ShapeRange::IncrementTop ( float Increment );
__declspec(implementation_key(435)) ShapePtr ShapeRange::Group ( );
__declspec(implementation_key(436)) HRESULT ShapeRange::PickUp ( );
__declspec(implementation_key(437)) ShapePtr ShapeRange::Regroup ( );
__declspec(implementation_key(438)) HRESULT ShapeRange::RerouteConnections ( );
__declspec(implementation_key(439)) HRESULT ShapeRange::ScaleHeight ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale );
__declspec(implementation_key(440)) HRESULT ShapeRange::ScaleWidth ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale );
__declspec(implementation_key(441)) HRESULT ShapeRange::Select ( const _variant_t & Replace );
__declspec(implementation_key(442)) HRESULT ShapeRange::SetShapesDefaultProperties ( );
__declspec(implementation_key(443)) ShapeRangePtr ShapeRange::Ungroup ( );
__declspec(implementation_key(444)) HRESULT ShapeRange::ZOrder ( enum MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(445)) AdjustmentsPtr ShapeRange::GetAdjustments ( );
__declspec(implementation_key(446)) enum MsoAutoShapeType ShapeRange::GetAutoShapeType ( );
__declspec(implementation_key(447)) void ShapeRange::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType );
__declspec(implementation_key(448)) enum MsoBlackWhiteMode ShapeRange::GetBlackWhiteMode ( );
__declspec(implementation_key(449)) void ShapeRange::PutBlackWhiteMode ( enum MsoBlackWhiteMode BlackWhiteMode );
__declspec(implementation_key(450)) CalloutFormatPtr ShapeRange::GetCallout ( );
__declspec(implementation_key(451)) int ShapeRange::GetConnectionSiteCount ( );
__declspec(implementation_key(452)) enum MsoTriState ShapeRange::GetConnector ( );
__declspec(implementation_key(453)) ConnectorFormatPtr ShapeRange::GetConnectorFormat ( );
__declspec(implementation_key(454)) FillFormatPtr ShapeRange::GetFill ( );
__declspec(implementation_key(455)) GroupShapesPtr ShapeRange::GetGroupItems ( );
__declspec(implementation_key(456)) float ShapeRange::GetHeight ( );
__declspec(implementation_key(457)) void ShapeRange::PutHeight ( float Height );
__declspec(implementation_key(458)) enum MsoTriState ShapeRange::GetHorizontalFlip ( );
__declspec(implementation_key(459)) float ShapeRange::GetLeft ( );
__declspec(implementation_key(460)) void ShapeRange::PutLeft ( float Left );
__declspec(implementation_key(461)) LineFormatPtr ShapeRange::GetLine ( );
__declspec(implementation_key(462)) enum MsoTriState ShapeRange::GetLockAspectRatio ( );
__declspec(implementation_key(463)) void ShapeRange::PutLockAspectRatio ( enum MsoTriState LockAspectRatio );
__declspec(implementation_key(464)) _bstr_t ShapeRange::GetName ( );
__declspec(implementation_key(465)) void ShapeRange::PutName ( _bstr_t Name );
__declspec(implementation_key(466)) ShapeNodesPtr ShapeRange::GetNodes ( );
__declspec(implementation_key(467)) float ShapeRange::GetRotation ( );
__declspec(implementation_key(468)) void ShapeRange::PutRotation ( float Rotation );
__declspec(implementation_key(469)) PictureFormatPtr ShapeRange::GetPictureFormat ( );
__declspec(implementation_key(470)) ShadowFormatPtr ShapeRange::GetShadow ( );
__declspec(implementation_key(471)) TextEffectFormatPtr ShapeRange::GetTextEffect ( );
__declspec(implementation_key(472)) TextFramePtr ShapeRange::GetTextFrame ( );
__declspec(implementation_key(473)) ThreeDFormatPtr ShapeRange::GetThreeD ( );
__declspec(implementation_key(474)) float ShapeRange::GetTop ( );
__declspec(implementation_key(475)) void ShapeRange::PutTop ( float Top );
__declspec(implementation_key(476)) enum MsoShapeType ShapeRange::GetType ( );
__declspec(implementation_key(477)) enum MsoTriState ShapeRange::GetVerticalFlip ( );
__declspec(implementation_key(478)) _variant_t ShapeRange::GetVertices ( );
__declspec(implementation_key(479)) enum MsoTriState ShapeRange::GetVisible ( );
__declspec(implementation_key(480)) void ShapeRange::PutVisible ( enum MsoTriState Visible );
__declspec(implementation_key(481)) float ShapeRange::GetWidth ( );
__declspec(implementation_key(482)) void ShapeRange::PutWidth ( float Width );
__declspec(implementation_key(483)) int ShapeRange::GetZOrderPosition ( );
__declspec(implementation_key(484)) ScriptPtr ShapeRange::GetScript ( );
__declspec(implementation_key(485)) _bstr_t ShapeRange::GetAlternativeText ( );
__declspec(implementation_key(486)) void ShapeRange::PutAlternativeText ( _bstr_t AlternativeText );
__declspec(implementation_key(487)) IDispatchPtr Shapes::GetParent ( );
__declspec(implementation_key(488)) int Shapes::GetCount ( );
__declspec(implementation_key(489)) ShapePtr Shapes::Item ( const _variant_t & Index );
__declspec(implementation_key(490)) IUnknownPtr Shapes::Get_NewEnum ( );
__declspec(implementation_key(491)) ShapePtr Shapes::AddCallout ( enum MsoCalloutType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(492)) ShapePtr Shapes::AddConnector ( enum MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(493)) ShapePtr Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(494)) ShapePtr Shapes::AddLabel ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(495)) ShapePtr Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(496)) ShapePtr Shapes::AddPicture ( _bstr_t FileName, enum MsoTriState LinkToFile, enum MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(497)) ShapePtr Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(498)) ShapePtr Shapes::AddShape ( enum MsoAutoShapeType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(499)) ShapePtr Shapes::AddTextEffect ( enum MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum MsoTriState FontBold, enum MsoTriState FontItalic, float Left, float Top );
__declspec(implementation_key(500)) ShapePtr Shapes::AddTextbox ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(501)) FreeformBuilderPtr Shapes::BuildFreeform ( enum MsoEditingType EditingType, float X1, float Y1 );
__declspec(implementation_key(502)) ShapeRangePtr Shapes::Range ( const _variant_t & Index );
__declspec(implementation_key(503)) HRESULT Shapes::SelectAll ( );
__declspec(implementation_key(504)) ShapePtr Shapes::GetBackground ( );
__declspec(implementation_key(505)) ShapePtr Shapes::GetDefault ( );
__declspec(implementation_key(506)) IDispatchPtr TextEffectFormat::GetParent ( );
__declspec(implementation_key(507)) HRESULT TextEffectFormat::ToggleVerticalText ( );
__declspec(implementation_key(508)) enum MsoTextEffectAlignment TextEffectFormat::GetAlignment ( );
__declspec(implementation_key(509)) void TextEffectFormat::PutAlignment ( enum MsoTextEffectAlignment Alignment );
__declspec(implementation_key(510)) enum MsoTriState TextEffectFormat::GetFontBold ( );
__declspec(implementation_key(511)) void TextEffectFormat::PutFontBold ( enum MsoTriState FontBold );
__declspec(implementation_key(512)) enum MsoTriState TextEffectFormat::GetFontItalic ( );
__declspec(implementation_key(513)) void TextEffectFormat::PutFontItalic ( enum MsoTriState FontItalic );
__declspec(implementation_key(514)) _bstr_t TextEffectFormat::GetFontName ( );
__declspec(implementation_key(515)) void TextEffectFormat::PutFontName ( _bstr_t FontName );
__declspec(implementation_key(516)) float TextEffectFormat::GetFontSize ( );
__declspec(implementation_key(517)) void TextEffectFormat::PutFontSize ( float FontSize );
__declspec(implementation_key(518)) enum MsoTriState TextEffectFormat::GetKernedPairs ( );
__declspec(implementation_key(519)) void TextEffectFormat::PutKernedPairs ( enum MsoTriState KernedPairs );
__declspec(implementation_key(520)) enum MsoTriState TextEffectFormat::GetNormalizedHeight ( );
__declspec(implementation_key(521)) void TextEffectFormat::PutNormalizedHeight ( enum MsoTriState NormalizedHeight );
__declspec(implementation_key(522)) enum MsoPresetTextEffectShape TextEffectFormat::GetPresetShape ( );
__declspec(implementation_key(523)) void TextEffectFormat::PutPresetShape ( enum MsoPresetTextEffectShape PresetShape );
__declspec(implementation_key(524)) enum MsoPresetTextEffect TextEffectFormat::GetPresetTextEffect ( );
__declspec(implementation_key(525)) void TextEffectFormat::PutPresetTextEffect ( enum MsoPresetTextEffect Preset );
__declspec(implementation_key(526)) enum MsoTriState TextEffectFormat::GetRotatedChars ( );
__declspec(implementation_key(527)) void TextEffectFormat::PutRotatedChars ( enum MsoTriState RotatedChars );
__declspec(implementation_key(528)) _bstr_t TextEffectFormat::GetText ( );
__declspec(implementation_key(529)) void TextEffectFormat::PutText ( _bstr_t Text );
__declspec(implementation_key(530)) float TextEffectFormat::GetTracking ( );
__declspec(implementation_key(531)) void TextEffectFormat::PutTracking ( float Tracking );
__declspec(implementation_key(532)) IDispatchPtr TextFrame::GetParent ( );
__declspec(implementation_key(533)) float TextFrame::GetMarginBottom ( );
__declspec(implementation_key(534)) void TextFrame::PutMarginBottom ( float MarginBottom );
__declspec(implementation_key(535)) float TextFrame::GetMarginLeft ( );
__declspec(implementation_key(536)) void TextFrame::PutMarginLeft ( float MarginLeft );
__declspec(implementation_key(537)) float TextFrame::GetMarginRight ( );
__declspec(implementation_key(538)) void TextFrame::PutMarginRight ( float MarginRight );
__declspec(implementation_key(539)) float TextFrame::GetMarginTop ( );
__declspec(implementation_key(540)) void TextFrame::PutMarginTop ( float MarginTop );
__declspec(implementation_key(541)) enum MsoTextOrientation TextFrame::GetOrientation ( );
__declspec(implementation_key(542)) void TextFrame::PutOrientation ( enum MsoTextOrientation Orientation );
__declspec(implementation_key(543)) IDispatchPtr ThreeDFormat::GetParent ( );
__declspec(implementation_key(544)) HRESULT ThreeDFormat::IncrementRotationX ( float Increment );
__declspec(implementation_key(545)) HRESULT ThreeDFormat::IncrementRotationY ( float Increment );
__declspec(implementation_key(546)) HRESULT ThreeDFormat::ResetRotation ( );
__declspec(implementation_key(547)) HRESULT ThreeDFormat::SetThreeDFormat ( enum MsoPresetThreeDFormat PresetThreeDFormat );
__declspec(implementation_key(548)) HRESULT ThreeDFormat::SetExtrusionDirection ( enum MsoPresetExtrusionDirection PresetExtrusionDirection );
__declspec(implementation_key(549)) float ThreeDFormat::GetDepth ( );
__declspec(implementation_key(550)) void ThreeDFormat::PutDepth ( float Depth );
__declspec(implementation_key(551)) ColorFormatPtr ThreeDFormat::GetExtrusionColor ( );
__declspec(implementation_key(552)) enum MsoExtrusionColorType ThreeDFormat::GetExtrusionColorType ( );
__declspec(implementation_key(553)) void ThreeDFormat::PutExtrusionColorType ( enum MsoExtrusionColorType ExtrusionColorType );
__declspec(implementation_key(554)) enum MsoTriState ThreeDFormat::GetPerspective ( );
__declspec(implementation_key(555)) void ThreeDFormat::PutPerspective ( enum MsoTriState Perspective );
__declspec(implementation_key(556)) enum MsoPresetExtrusionDirection ThreeDFormat::GetPresetExtrusionDirection ( );
__declspec(implementation_key(557)) enum MsoPresetLightingDirection ThreeDFormat::GetPresetLightingDirection ( );
__declspec(implementation_key(558)) void ThreeDFormat::PutPresetLightingDirection ( enum MsoPresetLightingDirection PresetLightingDirection );
__declspec(implementation_key(559)) enum MsoPresetLightingSoftness ThreeDFormat::GetPresetLightingSoftness ( );
__declspec(implementation_key(560)) void ThreeDFormat::PutPresetLightingSoftness ( enum MsoPresetLightingSoftness PresetLightingSoftness );
__declspec(implementation_key(561)) enum MsoPresetMaterial ThreeDFormat::GetPresetMaterial ( );
__declspec(implementation_key(562)) void ThreeDFormat::PutPresetMaterial ( enum MsoPresetMaterial PresetMaterial );
__declspec(implementation_key(563)) enum MsoPresetThreeDFormat ThreeDFormat::GetPresetThreeDFormat ( );
__declspec(implementation_key(564)) float ThreeDFormat::GetRotationX ( );
__declspec(implementation_key(565)) void ThreeDFormat::PutRotationX ( float RotationX );
__declspec(implementation_key(566)) float ThreeDFormat::GetRotationY ( );
__declspec(implementation_key(567)) void ThreeDFormat::PutRotationY ( float RotationY );
__declspec(implementation_key(568)) enum MsoTriState ThreeDFormat::GetVisible ( );
__declspec(implementation_key(569)) void ThreeDFormat::PutVisible ( enum MsoTriState Visible );
__declspec(implementation_key(570)) HRESULT IMsoDispCagNotifySink::InsertClip ( IUnknown * pClipMoniker, IUnknown * pItemMoniker );
__declspec(implementation_key(571)) HRESULT IMsoDispCagNotifySink::WindowIsClosing ( );
__declspec(implementation_key(572)) IDispatchPtr Balloon::GetParent ( );
__declspec(implementation_key(573)) IDispatchPtr Balloon::GetCheckboxes ( );
__declspec(implementation_key(574)) IDispatchPtr Balloon::GetLabels ( );
__declspec(implementation_key(575)) void Balloon::PutBalloonType ( enum MsoBalloonType pbty );
__declspec(implementation_key(576)) enum MsoBalloonType Balloon::GetBalloonType ( );
__declspec(implementation_key(577)) void Balloon::PutIcon ( enum MsoIconType picn );
__declspec(implementation_key(578)) enum MsoIconType Balloon::GetIcon ( );
__declspec(implementation_key(579)) void Balloon::PutHeading ( _bstr_t pbstr );
__declspec(implementation_key(580)) _bstr_t Balloon::GetHeading ( );
__declspec(implementation_key(581)) void Balloon::PutText ( _bstr_t pbstr );
__declspec(implementation_key(582)) _bstr_t Balloon::GetText ( );
__declspec(implementation_key(583)) void Balloon::PutMode ( enum MsoModeType pmd );
__declspec(implementation_key(584)) enum MsoModeType Balloon::GetMode ( );
__declspec(implementation_key(585)) void Balloon::PutAnimation ( enum MsoAnimationType pfca );
__declspec(implementation_key(586)) enum MsoAnimationType Balloon::GetAnimation ( );
__declspec(implementation_key(587)) void Balloon::PutButton ( enum MsoButtonSetType psbs );
__declspec(implementation_key(588)) enum MsoButtonSetType Balloon::GetButton ( );
__declspec(implementation_key(589)) void Balloon::PutCallback ( _bstr_t pbstr );
__declspec(implementation_key(590)) _bstr_t Balloon::GetCallback ( );
__declspec(implementation_key(591)) void Balloon::PutPrivate ( long plPrivate );
__declspec(implementation_key(592)) long Balloon::GetPrivate ( );
__declspec(implementation_key(593)) HRESULT Balloon::SetAvoidRectangle ( int Left, int Top, int Right, int Bottom );
__declspec(implementation_key(594)) _bstr_t Balloon::GetName ( );
__declspec(implementation_key(595)) enum MsoBalloonButtonType Balloon::Show ( );
__declspec(implementation_key(596)) HRESULT Balloon::Close ( );
__declspec(implementation_key(597)) _bstr_t BalloonCheckboxes::GetName ( );
__declspec(implementation_key(598)) IDispatchPtr BalloonCheckboxes::GetParent ( );
__declspec(implementation_key(599)) IDispatchPtr BalloonCheckboxes::GetItem ( int Index );
__declspec(implementation_key(600)) int BalloonCheckboxes::GetCount ( );
__declspec(implementation_key(601)) void BalloonCheckboxes::PutCount ( int pccbx );
__declspec(implementation_key(602)) IUnknownPtr BalloonCheckboxes::Get_NewEnum ( );
__declspec(implementation_key(603)) _bstr_t BalloonCheckbox::GetItem ( );
__declspec(implementation_key(604)) _bstr_t BalloonCheckbox::GetName ( );
__declspec(implementation_key(605)) IDispatchPtr BalloonCheckbox::GetParent ( );
__declspec(implementation_key(606)) void BalloonCheckbox::PutChecked ( VARIANT_BOOL pvarfChecked );
__declspec(implementation_key(607)) VARIANT_BOOL BalloonCheckbox::GetChecked ( );
__declspec(implementation_key(608)) void BalloonCheckbox::PutText ( _bstr_t pbstr );
__declspec(implementation_key(609)) _bstr_t BalloonCheckbox::GetText ( );
__declspec(implementation_key(610)) _bstr_t BalloonLabels::GetName ( );
__declspec(implementation_key(611)) IDispatchPtr BalloonLabels::GetParent ( );
__declspec(implementation_key(612)) IDispatchPtr BalloonLabels::GetItem ( int Index );
__declspec(implementation_key(613)) int BalloonLabels::GetCount ( );
__declspec(implementation_key(614)) void BalloonLabels::PutCount ( int pcwz );
__declspec(implementation_key(615)) IUnknownPtr BalloonLabels::Get_NewEnum ( );
__declspec(implementation_key(616)) _bstr_t BalloonLabel::GetItem ( );
__declspec(implementation_key(617)) _bstr_t BalloonLabel::GetName ( );
__declspec(implementation_key(618)) IDispatchPtr BalloonLabel::GetParent ( );
__declspec(implementation_key(619)) void BalloonLabel::PutText ( _bstr_t pbstr );
__declspec(implementation_key(620)) _bstr_t BalloonLabel::GetText ( );
__declspec(implementation_key(621)) IDispatchPtr AnswerWizardFiles::GetParent ( );
__declspec(implementation_key(622)) _bstr_t AnswerWizardFiles::GetItem ( int Index );
__declspec(implementation_key(623)) int AnswerWizardFiles::GetCount ( );
__declspec(implementation_key(624)) HRESULT AnswerWizardFiles::Add ( _bstr_t FileName );
__declspec(implementation_key(625)) HRESULT AnswerWizardFiles::Delete ( _bstr_t FileName );
__declspec(implementation_key(626)) IDispatchPtr AnswerWizard::GetParent ( );
__declspec(implementation_key(627)) AnswerWizardFilesPtr AnswerWizard::GetFiles ( );
__declspec(implementation_key(628)) HRESULT AnswerWizard::ClearFileList ( );
__declspec(implementation_key(629)) HRESULT AnswerWizard::ResetFileList ( );
__declspec(implementation_key(630)) IDispatchPtr Assistant::GetParent ( );
__declspec(implementation_key(631)) HRESULT Assistant::Move ( int xLeft, int yTop );
__declspec(implementation_key(632)) void Assistant::PutTop ( int pyTop );
__declspec(implementation_key(633)) int Assistant::GetTop ( );
__declspec(implementation_key(634)) void Assistant::PutLeft ( int pxLeft );
__declspec(implementation_key(635)) int Assistant::GetLeft ( );
__declspec(implementation_key(636)) HRESULT Assistant::Help ( );
__declspec(implementation_key(637)) long Assistant::StartWizard ( VARIANT_BOOL On, _bstr_t Callback, long PrivateX, const _variant_t & Animation, const _variant_t & CustomTeaser, const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right );
__declspec(implementation_key(638)) HRESULT Assistant::EndWizard ( long WizardID, VARIANT_BOOL varfSuccess, const _variant_t & Animation );
__declspec(implementation_key(639)) HRESULT Assistant::ActivateWizard ( long WizardID, enum MsoWizardActType act, const _variant_t & Animation );
__declspec(implementation_key(640)) HRESULT Assistant::ResetTips ( );
__declspec(implementation_key(641)) BalloonPtr Assistant::GetNewBalloon ( );
__declspec(implementation_key(642)) enum MsoBalloonErrorType Assistant::GetBalloonError ( );
__declspec(implementation_key(643)) VARIANT_BOOL Assistant::GetVisible ( );
__declspec(implementation_key(644)) void Assistant::PutVisible ( VARIANT_BOOL pvarfVisible );
__declspec(implementation_key(645)) enum MsoAnimationType Assistant::GetAnimation ( );
__declspec(implementation_key(646)) void Assistant::PutAnimation ( enum MsoAnimationType pfca );
__declspec(implementation_key(647)) VARIANT_BOOL Assistant::GetReduced ( );
__declspec(implementation_key(648)) void Assistant::PutReduced ( VARIANT_BOOL pvarfReduced );
__declspec(implementation_key(649)) void Assistant::PutAssistWithHelp ( VARIANT_BOOL pvarfAssistWithHelp );
__declspec(implementation_key(650)) VARIANT_BOOL Assistant::GetAssistWithHelp ( );
__declspec(implementation_key(651)) void Assistant::PutAssistWithWizards ( VARIANT_BOOL pvarfAssistWithWizards );
__declspec(implementation_key(652)) VARIANT_BOOL Assistant::GetAssistWithWizards ( );
__declspec(implementation_key(653)) void Assistant::PutAssistWithAlerts ( VARIANT_BOOL pvarfAssistWithAlerts );
__declspec(implementation_key(654)) VARIANT_BOOL Assistant::GetAssistWithAlerts ( );
__declspec(implementation_key(655)) void Assistant::PutMoveWhenInTheWay ( VARIANT_BOOL pvarfMove );
__declspec(implementation_key(656)) VARIANT_BOOL Assistant::GetMoveWhenInTheWay ( );
__declspec(implementation_key(657)) void Assistant::PutSounds ( VARIANT_BOOL pvarfSounds );
__declspec(implementation_key(658)) VARIANT_BOOL Assistant::GetSounds ( );
__declspec(implementation_key(659)) void Assistant::PutFeatureTips ( VARIANT_BOOL pvarfFeatures );
__declspec(implementation_key(660)) VARIANT_BOOL Assistant::GetFeatureTips ( );
__declspec(implementation_key(661)) void Assistant::PutMouseTips ( VARIANT_BOOL pvarfMouse );
__declspec(implementation_key(662)) VARIANT_BOOL Assistant::GetMouseTips ( );
__declspec(implementation_key(663)) void Assistant::PutKeyboardShortcutTips ( VARIANT_BOOL pvarfKeyboardShortcuts );
__declspec(implementation_key(664)) VARIANT_BOOL Assistant::GetKeyboardShortcutTips ( );
__declspec(implementation_key(665)) void Assistant::PutHighPriorityTips ( VARIANT_BOOL pvarfHighPriorityTips );
__declspec(implementation_key(666)) VARIANT_BOOL Assistant::GetHighPriorityTips ( );
__declspec(implementation_key(667)) void Assistant::PutTipOfDay ( VARIANT_BOOL pvarfTipOfDay );
__declspec(implementation_key(668)) VARIANT_BOOL Assistant::GetTipOfDay ( );
__declspec(implementation_key(669)) void Assistant::PutGuessHelp ( VARIANT_BOOL pvarfGuessHelp );
__declspec(implementation_key(670)) VARIANT_BOOL Assistant::GetGuessHelp ( );
__declspec(implementation_key(671)) void Assistant::PutSearchWhenProgramming ( VARIANT_BOOL pvarfSearchInProgram );
__declspec(implementation_key(672)) VARIANT_BOOL Assistant::GetSearchWhenProgramming ( );
__declspec(implementation_key(673)) _bstr_t Assistant::GetItem ( );
__declspec(implementation_key(674)) _bstr_t Assistant::GetFileName ( );
__declspec(implementation_key(675)) void Assistant::PutFileName ( _bstr_t pbstr );
__declspec(implementation_key(676)) _bstr_t Assistant::GetName ( );
__declspec(implementation_key(677)) VARIANT_BOOL Assistant::GetOn ( );
__declspec(implementation_key(678)) void Assistant::PutOn ( VARIANT_BOOL pvarfOn );
__declspec(implementation_key(679)) HRESULT DocumentProperty::Delete ( );
__declspec(implementation_key(680)) _bstr_t DocumentProperty::GetName ( long lcid );
__declspec(implementation_key(681)) void DocumentProperty::PutName ( long lcid, _bstr_t pbstrRetVal );
__declspec(implementation_key(682)) _variant_t DocumentProperty::GetValue ( long lcid );
__declspec(implementation_key(683)) void DocumentProperty::PutValue ( long lcid, const _variant_t & pvargRetVal );
__declspec(implementation_key(684)) enum MsoDocProperties DocumentProperty::GetType ( long lcid );
__declspec(implementation_key(685)) void DocumentProperty::PutType ( long lcid, enum MsoDocProperties ptypeRetVal );
__declspec(implementation_key(686)) VARIANT_BOOL DocumentProperty::GetLinkToContent ( );
__declspec(implementation_key(687)) void DocumentProperty::PutLinkToContent ( VARIANT_BOOL pfLinkRetVal );
__declspec(implementation_key(688)) _bstr_t DocumentProperty::GetLinkSource ( );
__declspec(implementation_key(689)) void DocumentProperty::PutLinkSource ( _bstr_t pbstrSourceRetVal );
__declspec(implementation_key(690)) IDispatchPtr DocumentProperty::GetApplication ( );
__declspec(implementation_key(691)) long DocumentProperty::GetCreator ( );
__declspec(implementation_key(692)) DocumentPropertyPtr DocumentPropertiesACC::GetItem ( const _variant_t & Index, long lcid );
__declspec(implementation_key(693)) long DocumentPropertiesACC::GetCount ( );
__declspec(implementation_key(694)) DocumentPropertyPtr DocumentPropertiesACC::Add ( _bstr_t Name, VARIANT_BOOL LinkToContent, const _variant_t & Type, const _variant_t & Value, const _variant_t & LinkSource, long lcid );
__declspec(implementation_key(695)) IUnknownPtr DocumentPropertiesACC::Get_NewEnum ( );
__declspec(implementation_key(696)) IDispatchPtr DocumentPropertiesACC::GetApplication ( );
__declspec(implementation_key(697)) long DocumentPropertiesACC::GetCreator ( );
__declspec(implementation_key(698)) _bstr_t IFoundFiles::GetItem ( int Index );
__declspec(implementation_key(699)) int IFoundFiles::GetCount ( );
__declspec(implementation_key(700)) IUnknownPtr IFoundFiles::Get_NewEnum ( );
__declspec(implementation_key(701)) _bstr_t IFind::GetSearchPath ( );
__declspec(implementation_key(702)) _bstr_t IFind::GetName ( );
__declspec(implementation_key(703)) VARIANT_BOOL IFind::GetSubDir ( );
__declspec(implementation_key(704)) _bstr_t IFind::GetTitle ( );
__declspec(implementation_key(705)) _bstr_t IFind::GetAuthor ( );
__declspec(implementation_key(706)) _bstr_t IFind::GetKeywords ( );
__declspec(implementation_key(707)) _bstr_t IFind::GetSubject ( );
__declspec(implementation_key(708)) enum MsoFileFindOptions IFind::GetOptions ( );
__declspec(implementation_key(709)) VARIANT_BOOL IFind::GetMatchCase ( );
__declspec(implementation_key(710)) _bstr_t IFind::GetText ( );
__declspec(implementation_key(711)) VARIANT_BOOL IFind::GetPatternMatch ( );
__declspec(implementation_key(712)) _variant_t IFind::GetDateSavedFrom ( );
__declspec(implementation_key(713)) _variant_t IFind::GetDateSavedTo ( );
__declspec(implementation_key(714)) _bstr_t IFind::GetSavedBy ( );
__declspec(implementation_key(715)) _variant_t IFind::GetDateCreatedFrom ( );
__declspec(implementation_key(716)) _variant_t IFind::GetDateCreatedTo ( );
__declspec(implementation_key(717)) enum MsoFileFindView IFind::GetView ( );
__declspec(implementation_key(718)) enum MsoFileFindSortBy IFind::GetSortBy ( );
__declspec(implementation_key(719)) enum MsoFileFindListBy IFind::GetListBy ( );
__declspec(implementation_key(720)) int IFind::GetSelectedFile ( );
__declspec(implementation_key(721)) IFoundFilesPtr IFind::GetResults ( );
__declspec(implementation_key(722)) int IFind::Show ( );
__declspec(implementation_key(723)) void IFind::PutSearchPath ( _bstr_t pbstr );
__declspec(implementation_key(724)) void IFind::PutName ( _bstr_t pbstr );
__declspec(implementation_key(725)) void IFind::PutSubDir ( VARIANT_BOOL retval );
__declspec(implementation_key(726)) void IFind::PutTitle ( _bstr_t pbstr );
__declspec(implementation_key(727)) void IFind::PutAuthor ( _bstr_t pbstr );
__declspec(implementation_key(728)) void IFind::PutKeywords ( _bstr_t pbstr );
__declspec(implementation_key(729)) void IFind::PutSubject ( _bstr_t pbstr );
__declspec(implementation_key(730)) void IFind::PutOptions ( enum MsoFileFindOptions penmOptions );
__declspec(implementation_key(731)) void IFind::PutMatchCase ( VARIANT_BOOL retval );
__declspec(implementation_key(732)) void IFind::PutText ( _bstr_t pbstr );
__declspec(implementation_key(733)) void IFind::PutPatternMatch ( VARIANT_BOOL retval );
__declspec(implementation_key(734)) void IFind::PutDateSavedFrom ( const _variant_t & pdatSavedFrom );
__declspec(implementation_key(735)) void IFind::PutDateSavedTo ( const _variant_t & pdatSavedTo );
__declspec(implementation_key(736)) void IFind::PutSavedBy ( _bstr_t pbstr );
__declspec(implementation_key(737)) void IFind::PutDateCreatedFrom ( const _variant_t & pdatCreatedFrom );
__declspec(implementation_key(738)) void IFind::PutDateCreatedTo ( const _variant_t & pdatCreatedTo );
__declspec(implementation_key(739)) void IFind::PutView ( enum MsoFileFindView penmView );
__declspec(implementation_key(740)) void IFind::PutSortBy ( enum MsoFileFindSortBy penmSortBy );
__declspec(implementation_key(741)) void IFind::PutListBy ( enum MsoFileFindListBy penmListBy );
__declspec(implementation_key(742)) void IFind::PutSelectedFile ( int pintSelectedFile );
__declspec(implementation_key(743)) HRESULT IFind::Execute ( );
__declspec(implementation_key(744)) HRESULT IFind::Load ( _bstr_t bstrQueryName );
__declspec(implementation_key(745)) HRESULT IFind::Save ( _bstr_t bstrQueryName );
__declspec(implementation_key(746)) HRESULT IFind::Delete ( _bstr_t bstrQueryName );
__declspec(implementation_key(747)) long IFind::GetFileType ( );
__declspec(implementation_key(748)) void IFind::PutFileType ( long plFileType );
__declspec(implementation_key(749)) _bstr_t FoundFiles::GetItem ( int Index, long lcid );
__declspec(implementation_key(750)) long FoundFiles::GetCount ( );
__declspec(implementation_key(751)) IUnknownPtr FoundFiles::Get_NewEnum ( );
__declspec(implementation_key(752)) _bstr_t PropertyTest::GetName ( );
__declspec(implementation_key(753)) enum MsoCondition PropertyTest::GetCondition ( );
__declspec(implementation_key(754)) _variant_t PropertyTest::GetValue ( );
__declspec(implementation_key(755)) _variant_t PropertyTest::GetSecondValue ( );
__declspec(implementation_key(756)) enum MsoConnector PropertyTest::GetConnector ( );
__declspec(implementation_key(757)) PropertyTestPtr PropertyTests::GetItem ( int Index, long lcid );
__declspec(implementation_key(758)) long PropertyTests::GetCount ( );
__declspec(implementation_key(759)) HRESULT PropertyTests::Add ( _bstr_t Name, enum MsoCondition Condition, const _variant_t & Value, const _variant_t & SecondValue, enum MsoConnector Connector );
__declspec(implementation_key(760)) HRESULT PropertyTests::Remove ( int Index );
__declspec(implementation_key(761)) IUnknownPtr PropertyTests::Get_NewEnum ( );
__declspec(implementation_key(762)) VARIANT_BOOL FileSearch::GetSearchSubFolders ( );
__declspec(implementation_key(763)) void FileSearch::PutSearchSubFolders ( VARIANT_BOOL SearchSubFoldersRetVal );
__declspec(implementation_key(764)) VARIANT_BOOL FileSearch::GetMatchTextExactly ( );
__declspec(implementation_key(765)) void FileSearch::PutMatchTextExactly ( VARIANT_BOOL MatchTextRetVal );
__declspec(implementation_key(766)) VARIANT_BOOL FileSearch::GetMatchAllWordForms ( );
__declspec(implementation_key(767)) void FileSearch::PutMatchAllWordForms ( VARIANT_BOOL MatchAllWordFormsRetVal );
__declspec(implementation_key(768)) _bstr_t FileSearch::GetFileName ( );
__declspec(implementation_key(769)) void FileSearch::PutFileName ( _bstr_t FileNameRetVal );
__declspec(implementation_key(770)) enum MsoFileType FileSearch::GetFileType ( );
__declspec(implementation_key(771)) void FileSearch::PutFileType ( enum MsoFileType FileTypeRetVal );
__declspec(implementation_key(772)) enum MsoLastModified FileSearch::GetLastModified ( );
__declspec(implementation_key(773)) void FileSearch::PutLastModified ( enum MsoLastModified LastModifiedRetVal );
__declspec(implementation_key(774)) _bstr_t FileSearch::GetTextOrProperty ( );
__declspec(implementation_key(775)) void FileSearch::PutTextOrProperty ( _bstr_t TextOrProperty );
__declspec(implementation_key(776)) _bstr_t FileSearch::GetLookIn ( );
__declspec(implementation_key(777)) void FileSearch::PutLookIn ( _bstr_t LookInRetVal );
__declspec(implementation_key(778)) int FileSearch::Execute ( enum MsoSortBy SortBy, enum MsoSortOrder SortOrder, VARIANT_BOOL AlwaysAccurate );
__declspec(implementation_key(779)) HRESULT FileSearch::NewSearch ( );
__declspec(implementation_key(780)) FoundFilesPtr FileSearch::GetFoundFiles ( );
__declspec(implementation_key(781)) PropertyTestsPtr FileSearch::GetPropertyTests ( );
__declspec(implementation_key(782)) _bstr_t COMAddIn::GetDescription ( );
__declspec(implementation_key(783)) void COMAddIn::PutDescription ( _bstr_t RetValue );
__declspec(implementation_key(784)) _bstr_t COMAddIn::GetProgId ( );
__declspec(implementation_key(785)) _bstr_t COMAddIn::GetGuid ( );
__declspec(implementation_key(786)) VARIANT_BOOL COMAddIn::GetConnect ( );
__declspec(implementation_key(787)) void COMAddIn::PutConnect ( VARIANT_BOOL RetValue );
__declspec(implementation_key(788)) IDispatchPtr COMAddIn::GetObject ( );
__declspec(implementation_key(789)) void COMAddIn::PutObject ( IDispatch * RetValue );
__declspec(implementation_key(790)) IDispatchPtr COMAddIn::GetParent ( );
__declspec(implementation_key(791)) COMAddInPtr COMAddIns::Item ( VARIANT * Index );
__declspec(implementation_key(792)) long COMAddIns::GetCount ( );
__declspec(implementation_key(793)) IUnknownPtr COMAddIns::Get_NewEnum ( );
__declspec(implementation_key(794)) HRESULT COMAddIns::Update ( );
__declspec(implementation_key(795)) IDispatchPtr COMAddIns::GetParent ( );
__declspec(implementation_key(796)) HRESULT COMAddIns::SetAppModal ( VARIANT_BOOL varfModal );
__declspec(implementation_key(797)) int LanguageSettings::GetLanguageID ( enum MsoAppLanguageID Id );
__declspec(implementation_key(798)) VARIANT_BOOL LanguageSettings::GetLanguagePreferredForEditing ( enum MsoLanguageID lid );
__declspec(implementation_key(799)) HRESULT _CommandBarsEvents::OnUpdate ( );
__declspec(implementation_key(800)) HRESULT _CommandBarComboBoxEvents::Change ( struct _CommandBarComboBox * Ctrl );
__declspec(implementation_key(801)) HRESULT _CommandBarButtonEvents::Click ( struct _CommandBarButton * Ctrl, VARIANT_BOOL * CancelDefault );
__declspec(implementation_key(802)) _bstr_t WebPageFont::GetProportionalFont ( );
__declspec(implementation_key(803)) void WebPageFont::PutProportionalFont ( _bstr_t pstr );
__declspec(implementation_key(804)) float WebPageFont::GetProportionalFontSize ( );
__declspec(implementation_key(805)) void WebPageFont::PutProportionalFontSize ( float pf );
__declspec(implementation_key(806)) _bstr_t WebPageFont::GetFixedWidthFont ( );
__declspec(implementation_key(807)) void WebPageFont::PutFixedWidthFont ( _bstr_t pstr );
__declspec(implementation_key(808)) float WebPageFont::GetFixedWidthFontSize ( );
__declspec(implementation_key(809)) void WebPageFont::PutFixedWidthFontSize ( float pf );
__declspec(implementation_key(810)) int WebPageFonts::GetCount ( );
__declspec(implementation_key(811)) WebPageFontPtr WebPageFonts::GetItem ( enum MsoCharacterSet Index );
__declspec(implementation_key(812)) IUnknownPtr WebPageFonts::Get_NewEnum ( );
__declspec(implementation_key(813)) _bstr_t HTMLProjectItem::GetName ( );
__declspec(implementation_key(814)) VARIANT_BOOL HTMLProjectItem::GetIsOpen ( );
__declspec(implementation_key(815)) HRESULT HTMLProjectItem::LoadFromFile ( _bstr_t FileName );
__declspec(implementation_key(816)) HRESULT HTMLProjectItem::Open ( enum MsoHTMLProjectOpen OpenKind );
__declspec(implementation_key(817)) HRESULT HTMLProjectItem::SaveCopyAs ( _bstr_t FileName );
__declspec(implementation_key(818)) _bstr_t HTMLProjectItem::GetText ( );
__declspec(implementation_key(819)) void HTMLProjectItem::PutText ( _bstr_t Text );
__declspec(implementation_key(820)) IDispatchPtr HTMLProjectItem::GetParent ( );
__declspec(implementation_key(821)) HTMLProjectItemPtr HTMLProjectItems::Item ( VARIANT * Index );
__declspec(implementation_key(822)) long HTMLProjectItems::GetCount ( );
__declspec(implementation_key(823)) IUnknownPtr HTMLProjectItems::Get_NewEnum ( );
__declspec(implementation_key(824)) IDispatchPtr HTMLProjectItems::GetParent ( );
__declspec(implementation_key(825)) enum MsoHTMLProjectState HTMLProject::GetState ( );
__declspec(implementation_key(826)) HRESULT HTMLProject::RefreshProject ( VARIANT_BOOL Refresh );
__declspec(implementation_key(827)) HRESULT HTMLProject::RefreshDocument ( VARIANT_BOOL Refresh );
__declspec(implementation_key(828)) HTMLProjectItemsPtr HTMLProject::GetHTMLProjectItems ( );
__declspec(implementation_key(829)) IDispatchPtr HTMLProject::GetParent ( );
__declspec(implementation_key(830)) HRESULT HTMLProject::Open ( enum MsoHTMLProjectOpen OpenKind );
__declspec(implementation_key(831)) int MsoDebugOptions::GetFeatureReports ( );
__declspec(implementation_key(832)) void MsoDebugOptions::PutFeatureReports ( int puintFeatureReports );
#pragma stop_map_region

#pragma pack(pop)
